var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/coder/index", ["require", "exports", "@polkadot/util"], function (require, exports, util_1) {
    "use strict";
    var _id;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RpcCoder = void 0;
    function formatErrorData(data) {
        if (util_1.isUndefined(data)) {
            return '';
        }
        const formatted = `: ${util_1.isString(data)
            ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '')
            : JSON.stringify(data)}`;
        // We need some sort of cut-off here since these can be very large and
        // very nested, pick a number and trim the result display to it
        return formatted.length <= 256
            ? formatted
            : `${formatted.substr(0, 255)}…`;
    }
    /** @internal */
    class RpcCoder {
        constructor() {
            _id.set(this, 0);
        }
        decodeResponse(response) {
            util_1.assert(response, 'Empty response object received');
            util_1.assert(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');
            const isSubscription = !util_1.isUndefined(response.params) && !util_1.isUndefined(response.method);
            util_1.assert(util_1.isNumber(response.id) || (isSubscription && (util_1.isNumber(response.params.subscription) || util_1.isString(response.params.subscription))), 'Invalid id field in decoded object');
            this._checkError(response.error);
            util_1.assert(!util_1.isUndefined(response.result) || isSubscription, 'No result found in JsonRpc response');
            if (isSubscription) {
                this._checkError(response.params.error);
                return response.params.result;
            }
            return response.result;
        }
        encodeJson(method, params) {
            return JSON.stringify(this.encodeObject(method, params));
        }
        encodeObject(method, params) {
            return {
                id: __classPrivateFieldSet(this, _id, +__classPrivateFieldGet(this, _id) + 1),
                jsonrpc: '2.0',
                method,
                params
            };
        }
        getId() {
            return __classPrivateFieldGet(this, _id);
        }
        _checkError(error) {
            if (error) {
                const { code, data, message } = error;
                throw new Error(`${code}: ${message}${formatErrorData(data)}`);
            }
        }
    }
    exports.RpcCoder = RpcCoder;
    _id = new WeakMap();
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/defaults", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const HTTP_URL = 'http://127.0.0.1:9933';
    const WS_URL = 'ws://127.0.0.1:9944';
    exports.default = {
        HTTP_URL,
        WS_URL
    };
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/errors", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWSErrorString = void 0;
    // from https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006
    const known = {
        1000: 'Normal Closure',
        1001: 'Going Away',
        1002: 'Protocol Error',
        1003: 'Unsupported Data',
        1004: '(For future)',
        1005: 'No Status Received',
        1006: 'Abnormal Closure',
        1007: 'Invalid frame payload data',
        1008: 'Policy Violation',
        1009: 'Message too big',
        1010: 'Missing Extension',
        1011: 'Internal Error',
        1012: 'Service Restart',
        1013: 'Try Again Later',
        1014: 'Bad Gateway',
        1015: 'TLS Handshake'
    };
    function getUnmapped(code) {
        if (code <= 1999) {
            return '(For WebSocket standard)';
        }
        else if (code <= 2999) {
            return '(For WebSocket extensions)';
        }
        else if (code <= 3999) {
            return '(For libraries and frameworks)';
        }
        else if (code <= 4999) {
            return '(For applications)';
        }
    }
    function getWSErrorString(code) {
        if (code >= 0 && code <= 999) {
            return '(Unused)';
        }
        return known[code] || getUnmapped(code) || '(Unknown)';
    }
    exports.getWSErrorString = getWSErrorString;
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/index", ["require", "exports", "eventemitter3", "@polkadot/util", "@polkadot/x-ws", "rpc-provider/src/coder/index", "rpc-provider/src/defaults", "rpc-provider/src/ws/errors"], function (require, exports, eventemitter3_1, util_2, x_ws_1, coder_1, defaults_1, errors_1) {
    "use strict";
    var _coder, _endpoints, _headers, _eventemitter, _handlers, _isReadyPromise, _waitingForId, _autoConnectMs, _endpointIndex, _isConnected, _subscriptions, _websocket, _emit, _onSocketClose, _onSocketError, _onSocketMessage, _onSocketMessageResult, _onSocketMessageSubscribe, _onSocketOpen, _resubscribe;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WsProvider = void 0;
    eventemitter3_1 = __importDefault(eventemitter3_1);
    defaults_1 = __importDefault(defaults_1);
    const ALIASSES = {
        chain_finalisedHead: 'chain_finalizedHead',
        chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
        chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
    };
    const RETRY_DELAY = 1000;
    const l = util_2.logger('api-ws');
    /**
     * # @polkadot/rpc-provider/ws
     *
     * @name WsProvider
     *
     * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     * import { WsProvider } from '@polkadot/rpc-provider/ws';
     *
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const api = new Api(provider);
     * ```
     *
     * @see [[HttpProvider]]
     */
    class WsProvider {
        /**
         * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
         * @param {boolean} autoConnect Whether to connect automatically or not.
         */
        constructor(endpoint = defaults_1.default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}) {
            _coder.set(this, void 0);
            _endpoints.set(this, void 0);
            _headers.set(this, void 0);
            _eventemitter.set(this, void 0);
            _handlers.set(this, {});
            _isReadyPromise.set(this, void 0);
            _waitingForId.set(this, {});
            _autoConnectMs.set(this, void 0);
            _endpointIndex.set(this, void 0);
            _isConnected.set(this, false);
            _subscriptions.set(this, {});
            _websocket.set(this, void 0);
            _emit.set(this, (type, ...args) => {
                __classPrivateFieldGet(this, _eventemitter).emit(type, ...args);
            });
            _onSocketClose.set(this, (event) => {
                if (__classPrivateFieldGet(this, _autoConnectMs) > 0) {
                    l.error(`disconnected from ${__classPrivateFieldGet(this, _endpoints)[__classPrivateFieldGet(this, _endpointIndex)]}: ${event.code}:: ${event.reason || errors_1.getWSErrorString(event.code)}`);
                }
                __classPrivateFieldSet(this, _isConnected, false);
                __classPrivateFieldGet(this, _emit).call(this, 'disconnected');
                if (__classPrivateFieldGet(this, _autoConnectMs) > 0) {
                    setTimeout(() => {
                        this.connectWithRetry().catch(() => {
                            // does not throw
                        });
                    }, __classPrivateFieldGet(this, _autoConnectMs));
                }
            });
            _onSocketError.set(this, (error) => {
                l.debug(() => ['socket error', error]);
                __classPrivateFieldGet(this, _emit).call(this, 'error', error);
            });
            _onSocketMessage.set(this, (message) => {
                l.debug(() => ['received', message.data]);
                const response = JSON.parse(message.data);
                return util_2.isUndefined(response.method)
                    ? __classPrivateFieldGet(this, _onSocketMessageResult).call(this, response)
                    : __classPrivateFieldGet(this, _onSocketMessageSubscribe).call(this, response);
            });
            _onSocketMessageResult.set(this, (response) => {
                const handler = __classPrivateFieldGet(this, _handlers)[response.id];
                if (!handler) {
                    l.debug(() => `Unable to find handler for id=${response.id}`);
                    return;
                }
                try {
                    const { method, params, subscription } = handler;
                    const result = __classPrivateFieldGet(this, _coder).decodeResponse(response);
                    // first send the result - in case of subs, we may have an update
                    // immediately if we have some queued results already
                    handler.callback(null, result);
                    if (subscription) {
                        const subId = `${subscription.type}::${result}`;
                        __classPrivateFieldGet(this, _subscriptions)[subId] = {
                            ...subscription,
                            method,
                            params
                        };
                        // if we have a result waiting for this subscription already
                        if (__classPrivateFieldGet(this, _waitingForId)[subId]) {
                            __classPrivateFieldGet(this, _onSocketMessageSubscribe).call(this, __classPrivateFieldGet(this, _waitingForId)[subId]);
                        }
                    }
                }
                catch (error) {
                    handler.callback(error, undefined);
                }
                delete __classPrivateFieldGet(this, _handlers)[response.id];
            });
            _onSocketMessageSubscribe.set(this, (response) => {
                const method = ALIASSES[response.method] || response.method || 'invalid';
                const subId = `${method}::${response.params.subscription}`;
                const handler = __classPrivateFieldGet(this, _subscriptions)[subId];
                if (!handler) {
                    // store the JSON, we could have out-of-order subid coming in
                    __classPrivateFieldGet(this, _waitingForId)[subId] = response;
                    l.debug(() => `Unable to find handler for subscription=${subId}`);
                    return;
                }
                // housekeeping
                delete __classPrivateFieldGet(this, _waitingForId)[subId];
                try {
                    const result = __classPrivateFieldGet(this, _coder).decodeResponse(response);
                    handler.callback(null, result);
                }
                catch (error) {
                    handler.callback(error, undefined);
                }
            });
            _onSocketOpen.set(this, () => {
                util_2.assert(!util_2.isNull(__classPrivateFieldGet(this, _websocket)), 'WebSocket cannot be null in onOpen');
                l.debug(() => ['connected to', __classPrivateFieldGet(this, _endpoints)[__classPrivateFieldGet(this, _endpointIndex)]]);
                __classPrivateFieldSet(this, _isConnected, true);
                __classPrivateFieldGet(this, _emit).call(this, 'connected');
                __classPrivateFieldGet(this, _resubscribe).call(this);
                return true;
            });
            _resubscribe.set(this, () => {
                const subscriptions = __classPrivateFieldGet(this, _subscriptions);
                __classPrivateFieldSet(this, _subscriptions, {});
                Promise.all(Object.keys(subscriptions).map(async (id) => {
                    const { callback, method, params, type } = subscriptions[id];
                    // only re-create subscriptions which are not in author (only area where
                    // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
                    // are not included (and will not be re-broadcast)
                    if (type.startsWith('author_')) {
                        return;
                    }
                    try {
                        await this.subscribe(type, method, params, callback);
                    }
                    catch (error) {
                        l.error(error);
                    }
                })).catch(l.error);
            });
            const endpoints = Array.isArray(endpoint)
                ? endpoint
                : [endpoint];
            util_2.assert(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');
            endpoints.forEach((endpoint) => {
                util_2.assert(/^(wss|ws):\/\//.test(endpoint), `Endpoint should start with 'ws://', received '${endpoint}'`);
            });
            __classPrivateFieldSet(this, _eventemitter, new eventemitter3_1.default());
            __classPrivateFieldSet(this, _autoConnectMs, autoConnectMs || 0);
            __classPrivateFieldSet(this, _coder, new coder_1.RpcCoder());
            __classPrivateFieldSet(this, _endpointIndex, -1);
            __classPrivateFieldSet(this, _endpoints, endpoints);
            __classPrivateFieldSet(this, _headers, headers);
            __classPrivateFieldSet(this, _websocket, null);
            if (autoConnectMs > 0) {
                this.connectWithRetry().catch(() => {
                    // does not throw
                });
            }
            __classPrivateFieldSet(this, _isReadyPromise, new Promise((resolve) => {
                __classPrivateFieldGet(this, _eventemitter).once('connected', () => {
                    resolve(this);
                });
            }));
        }
        /**
         * @summary `true` when this provider supports subscriptions
         */
        get hasSubscriptions() {
            return true;
        }
        /**
         * @summary Whether the node is connected or not.
         * @return {boolean} true if connected
         */
        get isConnected() {
            return __classPrivateFieldGet(this, _isConnected);
        }
        /**
         * @description Promise that resolves the first time we are connected and loaded
         */
        get isReady() {
            return __classPrivateFieldGet(this, _isReadyPromise);
        }
        /**
         * @description Returns a clone of the object
         */
        clone() {
            return new WsProvider(__classPrivateFieldGet(this, _endpoints));
        }
        /**
         * @summary Manually connect
         * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
         * connect manually using this method.
         */
        // eslint-disable-next-line @typescript-eslint/require-await
        async connect() {
            try {
                __classPrivateFieldSet(this, _endpointIndex, (__classPrivateFieldGet(this, _endpointIndex) + 1) % __classPrivateFieldGet(this, _endpoints).length);
                __classPrivateFieldSet(this, _websocket, typeof global.WebSocket !== 'undefined' && util_2.isChildClass(global.WebSocket, x_ws_1.WebSocket)
                    ? new x_ws_1.WebSocket(__classPrivateFieldGet(this, _endpoints)[__classPrivateFieldGet(this, _endpointIndex)])
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers
                    : new x_ws_1.WebSocket(__classPrivateFieldGet(this, _endpoints)[__classPrivateFieldGet(this, _endpointIndex)], undefined, undefined, __classPrivateFieldGet(this, _headers), undefined, {
                        // default: true
                        fragmentOutgoingMessages: true,
                        // default: 16K
                        fragmentationThreshold: 256 * 1024
                    }));
                __classPrivateFieldGet(this, _websocket).onclose = __classPrivateFieldGet(this, _onSocketClose);
                __classPrivateFieldGet(this, _websocket).onerror = __classPrivateFieldGet(this, _onSocketError);
                __classPrivateFieldGet(this, _websocket).onmessage = __classPrivateFieldGet(this, _onSocketMessage);
                __classPrivateFieldGet(this, _websocket).onopen = __classPrivateFieldGet(this, _onSocketOpen);
            }
            catch (error) {
                l.error(error);
                __classPrivateFieldGet(this, _emit).call(this, 'error', error);
                throw error;
            }
        }
        /**
         * @description Connect, never throwing an error, but rather forcing a retry
         */
        async connectWithRetry() {
            try {
                await this.connect();
            }
            catch (error) {
                setTimeout(() => {
                    this.connectWithRetry().catch(() => {
                        // does not throw
                    });
                }, __classPrivateFieldGet(this, _autoConnectMs) || RETRY_DELAY);
            }
        }
        /**
         * @description Manually disconnect from the connection, clearing autoconnect logic
         */
        // eslint-disable-next-line @typescript-eslint/require-await
        async disconnect() {
            try {
                util_2.assert(!util_2.isNull(__classPrivateFieldGet(this, _websocket)), 'Cannot disconnect on a non-connected websocket');
                // switch off autoConnect, we are in manual mode now
                __classPrivateFieldSet(this, _autoConnectMs, 0);
                // 1000 - Normal closure; the connection successfully completed
                __classPrivateFieldGet(this, _websocket).close(1000);
                __classPrivateFieldSet(this, _websocket, null);
            }
            catch (error) {
                l.error(error);
                __classPrivateFieldGet(this, _emit).call(this, 'error', error);
                throw error;
            }
        }
        /**
         * @summary Listens on events after having subscribed using the [[subscribe]] function.
         * @param  {ProviderInterfaceEmitted} type Event
         * @param  {ProviderInterfaceEmitCb}  sub  Callback
         * @return unsubscribe function
         */
        on(type, sub) {
            __classPrivateFieldGet(this, _eventemitter).on(type, sub);
            return () => {
                __classPrivateFieldGet(this, _eventemitter).removeListener(type, sub);
            };
        }
        /**
         * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
         * @param method The RPC methods to execute
         * @param params Encoded parameters as applicable for the method
         * @param subscription Subscription details (internally used)
         */
        send(method, params, subscription) {
            return new Promise((resolve, reject) => {
                try {
                    util_2.assert(this.isConnected && !util_2.isNull(__classPrivateFieldGet(this, _websocket)), 'WebSocket is not connected');
                    const json = __classPrivateFieldGet(this, _coder).encodeJson(method, params);
                    const id = __classPrivateFieldGet(this, _coder).getId();
                    const callback = (error, result) => {
                        error
                            ? reject(error)
                            : resolve(result);
                    };
                    l.debug(() => ['calling', method, json]);
                    __classPrivateFieldGet(this, _handlers)[id] = {
                        callback,
                        method,
                        params,
                        subscription
                    };
                    __classPrivateFieldGet(this, _websocket).send(json);
                }
                catch (error) {
                    reject(error);
                }
            });
        }
        /**
         * @name subscribe
         * @summary Allows subscribing to a specific event.
         * @param  {string}                     type     Subscription type
         * @param  {string}                     method   Subscription method
         * @param  {any[]}                 params   Parameters
         * @param  {ProviderInterfaceCallback} callback Callback
         * @return {Promise<number>}                     Promise resolving to the dd of the subscription you can use with [[unsubscribe]].
         *
         * @example
         * <BR>
         *
         * ```javascript
         * const provider = new WsProvider('ws://127.0.0.1:9944');
         * const rpc = new Rpc(provider);
         *
         * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
         *   console.log(values)
         * }).then((subscriptionId) => {
         *   console.log('balance changes subscription id: ', subscriptionId)
         * })
         * ```
         */
        async subscribe(type, method, params, callback) {
            const id = await this.send(method, params, { callback, type });
            return id;
        }
        /**
         * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
         */
        async unsubscribe(type, method, id) {
            const subscription = `${type}::${id}`;
            // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
            // the assigned id now does not match what the API user originally received. It has
            // a slight complication in solving - since we cannot rely on the send id, but rather
            // need to find the actual subscription id to map it
            if (util_2.isUndefined(__classPrivateFieldGet(this, _subscriptions)[subscription])) {
                l.debug(() => `Unable to find active subscription=${subscription}`);
                return false;
            }
            delete __classPrivateFieldGet(this, _subscriptions)[subscription];
            const result = await this.send(method, [id]);
            return result;
        }
    }
    exports.WsProvider = WsProvider;
    _coder = new WeakMap(), _endpoints = new WeakMap(), _headers = new WeakMap(), _eventemitter = new WeakMap(), _handlers = new WeakMap(), _isReadyPromise = new WeakMap(), _waitingForId = new WeakMap(), _autoConnectMs = new WeakMap(), _endpointIndex = new WeakMap(), _isConnected = new WeakMap(), _subscriptions = new WeakMap(), _websocket = new WeakMap(), _emit = new WeakMap(), _onSocketClose = new WeakMap(), _onSocketError = new WeakMap(), _onSocketMessage = new WeakMap(), _onSocketMessageResult = new WeakMap(), _onSocketMessageSubscribe = new WeakMap(), _onSocketOpen = new WeakMap(), _resubscribe = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/detectPackage", ["require", "exports", "@polkadot/util", "./package-info.json"], function (require, exports, util_3, package_info_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.packageInfo = void 0;
    package_info_json_1 = __importDefault(package_info_json_1);
    exports.packageInfo = package_info_json_1.default;
    util_3.detectPackage(package_info_json_1.default, typeof __dirname !== 'undefined' && __dirname);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/consensus/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/consensus/index", ["require", "exports", "types/src/interfaces/consensus/types"], function (require, exports, types_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_1, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/extrinsics/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/extrinsics/index", ["require", "exports", "types/src/interfaces/extrinsics/types"], function (require, exports, types_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_2, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/balances/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/balances/index", ["require", "exports", "types/src/interfaces/balances/types"], function (require, exports, types_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_3, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/system/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/system/index", ["require", "exports", "types/src/interfaces/system/types"], function (require, exports, types_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_4, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/runtime/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/runtime/index", ["require", "exports", "types/src/interfaces/runtime/types"], function (require, exports, types_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_5, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/assets/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/assets/index", ["require", "exports", "types/src/interfaces/assets/types"], function (require, exports, types_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_6, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/staking/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/staking/index", ["require", "exports", "types/src/interfaces/staking/types"], function (require, exports, types_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_7, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/session/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/session/index", ["require", "exports", "types/src/interfaces/session/types"], function (require, exports, types_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_8, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/parachains/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/parachains/index", ["require", "exports", "types/src/interfaces/parachains/types"], function (require, exports, types_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_9, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/attestations/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/attestations/index", ["require", "exports", "types/src/interfaces/attestations/types"], function (require, exports, types_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_10, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/aura/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/aura/index", ["require", "exports", "types/src/interfaces/aura/types"], function (require, exports, types_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_11, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/author/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/author/index", ["require", "exports", "types/src/interfaces/author/types"], function (require, exports, types_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_12, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/authorship/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/authorship/index", ["require", "exports", "types/src/interfaces/authorship/types"], function (require, exports, types_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_13, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/babe/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/babe/index", ["require", "exports", "types/src/interfaces/babe/types"], function (require, exports, types_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_14, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/chain/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/chain/index", ["require", "exports", "types/src/interfaces/chain/types"], function (require, exports, types_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_15, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/childstate/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/childstate/index", ["require", "exports", "types/src/interfaces/childstate/types"], function (require, exports, types_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_16, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/claims/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/claims/index", ["require", "exports", "types/src/interfaces/claims/types"], function (require, exports, types_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_17, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/collective/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/collective/index", ["require", "exports", "types/src/interfaces/collective/types"], function (require, exports, types_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_18, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/contracts/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/contracts/index", ["require", "exports", "types/src/interfaces/contracts/types"], function (require, exports, types_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_19, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/scaleInfo/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/scaleInfo/index", ["require", "exports", "types/src/interfaces/scaleInfo/types"], function (require, exports, types_20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_20, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/contractsAbi/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/contractsAbi/index", ["require", "exports", "types/src/interfaces/contractsAbi/types"], function (require, exports, types_21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_21, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/elections/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/elections/index", ["require", "exports", "types/src/interfaces/elections/types"], function (require, exports, types_22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_22, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/democracy/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/democracy/index", ["require", "exports", "types/src/interfaces/democracy/types"], function (require, exports, types_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_23, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/engine/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/engine/index", ["require", "exports", "types/src/interfaces/engine/types"], function (require, exports, types_24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_24, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/eth/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/eth/index", ["require", "exports", "types/src/interfaces/eth/types"], function (require, exports, types_25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_25, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/evm/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/evm/index", ["require", "exports", "types/src/interfaces/evm/types"], function (require, exports, types_26) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_26, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/genericAsset/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/genericAsset/index", ["require", "exports", "types/src/interfaces/genericAsset/types"], function (require, exports, types_27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_27, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/imOnline/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/imOnline/index", ["require", "exports", "types/src/interfaces/imOnline/types"], function (require, exports, types_28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_28, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/grandpa/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/grandpa/index", ["require", "exports", "types/src/interfaces/grandpa/types"], function (require, exports, types_29) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_29, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/identity/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/identity/index", ["require", "exports", "types/src/interfaces/identity/types"], function (require, exports, types_30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_30, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/metadata/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/metadata/index", ["require", "exports", "types/src/interfaces/metadata/types"], function (require, exports, types_31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_31, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/offchain/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/offchain/index", ["require", "exports", "types/src/interfaces/offchain/types"], function (require, exports, types_32) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_32, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/offences/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/offences/index", ["require", "exports", "types/src/interfaces/offences/types"], function (require, exports, types_33) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_33, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/payment/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/payment/index", ["require", "exports", "types/src/interfaces/payment/types"], function (require, exports, types_34) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_34, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/poll/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/poll/index", ["require", "exports", "types/src/interfaces/poll/types"], function (require, exports, types_35) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_35, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/proxy/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/proxy/index", ["require", "exports", "types/src/interfaces/proxy/types"], function (require, exports, types_36) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_36, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/purchase/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/purchase/index", ["require", "exports", "types/src/interfaces/purchase/types"], function (require, exports, types_37) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_37, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/recovery/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/recovery/index", ["require", "exports", "types/src/interfaces/recovery/types"], function (require, exports, types_38) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_38, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/rpc/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/rpc/index", ["require", "exports", "types/src/interfaces/rpc/types"], function (require, exports, types_39) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_39, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/scheduler/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/scheduler/index", ["require", "exports", "types/src/interfaces/scheduler/types"], function (require, exports, types_40) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_40, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/society/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/society/index", ["require", "exports", "types/src/interfaces/society/types"], function (require, exports, types_41) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_41, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/state/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/state/index", ["require", "exports", "types/src/interfaces/state/types"], function (require, exports, types_42) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_42, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/support/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/support/index", ["require", "exports", "types/src/interfaces/support/types"], function (require, exports, types_43) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_43, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/treasury/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/treasury/index", ["require", "exports", "types/src/interfaces/treasury/types"], function (require, exports, types_44) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_44, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/txpayment/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/txpayment/index", ["require", "exports", "types/src/interfaces/txpayment/types"], function (require, exports, types_45) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_45, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/utility/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/utility/index", ["require", "exports", "types/src/interfaces/utility/types"], function (require, exports, types_46) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_46, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/vesting/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/vesting/index", ["require", "exports", "types/src/interfaces/vesting/types"], function (require, exports, types_47) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_47, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/augment/registry", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/augment/index", ["require", "exports", "types/src/augment/registry"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeDefInfo = void 0;
    var TypeDefInfo;
    (function (TypeDefInfo) {
        TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
        TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
        TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
        TypeDefInfo[TypeDefInfo["Enum"] = 3] = "Enum";
        TypeDefInfo[TypeDefInfo["Linkage"] = 4] = "Linkage";
        TypeDefInfo[TypeDefInfo["Option"] = 5] = "Option";
        TypeDefInfo[TypeDefInfo["Plain"] = 6] = "Plain";
        TypeDefInfo[TypeDefInfo["Result"] = 7] = "Result";
        TypeDefInfo[TypeDefInfo["Set"] = 8] = "Set";
        TypeDefInfo[TypeDefInfo["Struct"] = 9] = "Struct";
        TypeDefInfo[TypeDefInfo["Tuple"] = 10] = "Tuple";
        TypeDefInfo[TypeDefInfo["Vec"] = 11] = "Vec";
        TypeDefInfo[TypeDefInfo["VecFixed"] = 12] = "VecFixed";
        TypeDefInfo[TypeDefInfo["HashMap"] = 13] = "HashMap";
        TypeDefInfo[TypeDefInfo["Int"] = 14] = "Int";
        TypeDefInfo[TypeDefInfo["UInt"] = 15] = "UInt";
        TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 16] = "DoNotConstruct";
        // anything not fully supported (keep this as the last entry)
        TypeDefInfo[TypeDefInfo["Null"] = 17] = "Null";
    })(TypeDefInfo = exports.TypeDefInfo || (exports.TypeDefInfo = {}));
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/detectPackage", ["require", "exports", "@polkadot/util", "./package-info.json"], function (require, exports, util_4, package_info_json_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.packageInfo = void 0;
    package_info_json_2 = __importDefault(package_info_json_2);
    exports.packageInfo = package_info_json_2.default;
    util_4.detectPackage(package_info_json_2.default, typeof __dirname !== 'undefined' && __dirname);
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v9/toV10", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toV10 = void 0;
    // migrate a storage hasher type
    // see https://github.com/paritytech/substrate/pull/4462
    /** @internal */
    function createStorageHasher(registry, hasher) {
        // Blake2_128_Concat has been added at index 2, so we increment all the
        // indexes greater than 2
        if (hasher.toNumber() >= 2) {
            return registry.createType('StorageHasherV10', hasher.toNumber() + 1);
        }
        return registry.createType('StorageHasherV10', hasher);
    }
    /** @internal */
    function createStorageType(registry, entryType) {
        if (entryType.isMap) {
            return [{
                    ...entryType.asMap,
                    hasher: createStorageHasher(registry, entryType.asMap.hasher)
                }, 1];
        }
        if (entryType.isDoubleMap) {
            return [{
                    ...entryType.asDoubleMap,
                    hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
                    key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
                }, 2];
        }
        return [entryType.asPlain, 0];
    }
    /** @internal */
    function convertModule(registry, mod) {
        const storage = mod.storage.unwrapOr(null);
        return registry.createType('ModuleMetadataV10', {
            ...mod,
            storage: storage
                ? {
                    ...storage,
                    items: storage.items.map((item) => ({
                        ...item,
                        type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))
                    }))
                }
                : null
        });
    }
    /** @internal */
    function toV10(registry, { modules }) {
        return registry.createType('MetadataV10', {
            modules: modules.map((mod) => convertModule(registry, mod))
        });
    }
    exports.toV10 = toV10;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v10/toV11", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toV11 = void 0;
    /** @internal */
    function toV11(registry, { modules }) {
        return registry.createType('MetadataV11', {
            // This is new in V11, pass V0 here - something non-existing, telling the API to use
            // the fallback for this information (on-chain detection)
            extrinsic: {
                signedExtensions: [],
                version: 0
            },
            modules
        });
    }
    exports.toV11 = toV11;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v11/toV12", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toV12 = void 0;
    /**
     * @internal
     **/
    function toV12(registry, { extrinsic, modules }) {
        return registry.createType('MetadataLatest', {
            extrinsic,
            modules: modules.map((mod) => registry.createType('ModuleMetadataV12', {
                ...mod,
                index: 255
            }))
        });
    }
    exports.toV12 = toV12;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Raw", ["require", "exports", "@polkadot/util"], function (require, exports, util_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Raw = void 0;
    /** @internal */
    function decodeU8a(value) {
        if (util_5.isU8a(value)) {
            return value;
        }
        return util_5.u8aToU8a(value);
    }
    /**
     * @name Raw
     * @description
     * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
     * from other implementations where it will consume the full Uint8Array as passed to it.
     * As such it is meant to be subclassed where the wrapper takes care of the
     * actual lengths instead of used directly.
     * @noInheritDoc
     */
    class Raw extends Uint8Array {
        constructor(registry, value) {
            super(decodeU8a(value));
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Returns true if the wrapped value contains only ASCII printable characters
         */
        get isAscii() {
            return util_5.isAscii(this);
        }
        /**
         * @description Returns true if the type wraps an empty/default all-0 value
         */
        get isEmpty() {
            return !this.length || util_5.isUndefined(this.find((value) => !!value));
        }
        /**
         * @description Returns true if the wrapped value contains only utf8 characters
         */
        get isUtf8() {
            return util_5.isUtf8(this);
        }
        /**
         * @description The length of the value
         */
        get length() {
            // only included here since we ignore inherited docs
            return super.length;
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return this.length * 8;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            if (other instanceof Uint8Array) {
                return (this.length === other.length) &&
                    !this.some((value, index) => value !== other[index]);
            }
            return this.eq(decodeU8a(other));
        }
        /**
         * @description Create a new slice from the actual buffer. (compat)
         * @param start The position to start at
         * @param end The position to end at
         */
        slice(start, end) {
            // Like subarray below, we have to follow this approach since we are extending the TypeArray.
            // This happens especially when it comes to further extensions, the length may be an override
            return Uint8Array.from(this).slice(start, end);
        }
        /**
         * @description Create a new subarray from the actual buffer. (compat)
         * @param begin The position to start at
         * @param end The position to end at
         */
        subarray(begin, end) {
            return Uint8Array.from(this).subarray(begin, end);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_5.u8aToHex(this);
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.isAscii
                ? this.toUtf8()
                : this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Raw';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.toHex();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return Uint8Array.from(this);
        }
        /**
         * @description Returns the wrapped data as a UTF-8 string
         */
        toUtf8() {
            util_5.assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');
            return util_5.u8aToString(this);
        }
    }
    exports.Raw = Raw;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/BitVec", ["require", "exports", "@polkadot/util", "types/src/codec/Raw"], function (require, exports, util_6, Raw_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BitVec = void 0;
    /** @internal */
    function decodeBitVecU8a(value) {
        if (!value || !value.length) {
            return new Uint8Array();
        }
        // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded
        const [offset, length] = util_6.compactFromU8a(value);
        const total = offset + Math.ceil(length.toNumber() / 8);
        util_6.assert(total <= value.length, `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
        return value.subarray(offset, total);
    }
    /** @internal */
    function decodeBitVec(value) {
        if (Array.isArray(value) || util_6.isString(value)) {
            return util_6.u8aToU8a(value);
        }
        return decodeBitVecU8a(value);
    }
    /**
     * @name BitVec
     * @description
     * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
     * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
     */
    class BitVec extends Raw_1.Raw {
        constructor(registry, value) {
            super(registry, decodeBitVec(value));
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.length + util_6.compactToU8a(this.bitLength()).length;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'BitVec';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const bitVec = super.toU8a();
            return isBare
                ? bitVec
                : util_6.u8aConcat(util_6.compactToU8a(this.bitLength()), bitVec);
        }
    }
    exports.BitVec = BitVec;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Bool", ["require", "exports", "@polkadot/util"], function (require, exports, util_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bool = void 0;
    /** @internal */
    function decodeBool(value) {
        if (value instanceof Boolean) {
            return value.valueOf();
        }
        else if (util_7.isU8a(value)) {
            return value[0] === 1;
        }
        return !!value;
    }
    /**
     * @name bool
     * @description
     * Representation for a boolean value in the system. It extends the base JS `Boolean` class
     * @noInheritDoc
     */
    class bool extends Boolean {
        // eslint-disable-next-line @typescript-eslint/ban-types
        constructor(registry, value = false) {
            super(decodeBool(value));
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return 1;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value (true when it wraps false/default)
         */
        get isEmpty() {
            return this.isFalse;
        }
        /**
         * @description Checks if the value is an empty value (always false)
         */
        get isFalse() {
            return !this.isTrue;
        }
        /**
         * @description Checks if the value is an empty value (always false)
         */
        get isTrue() {
            return this.valueOf();
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this.valueOf() === (other instanceof Boolean
                ? other.valueOf()
                : other);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_7.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.valueOf();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'bool';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.toJSON().toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return new Uint8Array([this.valueOf() ? 1 : 0]);
        }
    }
    exports.bool = bool;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Bytes", ["require", "exports", "@polkadot/util", "types/src/codec/Raw"], function (require, exports, util_8, Raw_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bytes = void 0;
    // Bytes are used for things like on-chain code, so it has a healthy limit
    const MAX_LENGTH = 10 * 1024 * 1024;
    /** @internal */
    function decodeBytesU8a(value) {
        if (!value.length) {
            return new Uint8Array();
        }
        // handle all other Uint8Array inputs, these do have a length prefix
        const [offset, length] = util_8.compactFromU8a(value);
        const total = offset + length.toNumber();
        util_8.assert(length.lten(MAX_LENGTH), `Bytes length ${length.toString()} exceeds ${MAX_LENGTH}`);
        util_8.assert(total <= value.length, `Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
        return value.subarray(offset, total);
    }
    /** @internal */
    function decodeBytes(value) {
        if (Array.isArray(value) || util_8.isString(value)) {
            return util_8.u8aToU8a(value);
        }
        else if (!(value instanceof Raw_2.Raw) && util_8.isU8a(value)) {
            // We are ensuring we are not a Raw instance. In the case of a Raw we already have gotten
            // rid of the length, i.e. new Bytes(new Bytes(...)) will work as expected
            return decodeBytesU8a(value);
        }
        return value;
    }
    /**
     * @name Bytes
     * @description
     * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
     * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
     * as what is found in [[Text]] and [[Vec]])
     */
    class Bytes extends Raw_2.Raw {
        constructor(registry, value) {
            super(registry, decodeBytes(value));
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.length + util_8.compactToU8a(this.length).length;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Bytes';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return isBare
                ? super.toU8a(isBare)
                : util_8.compactAddLength(this);
        }
    }
    exports.Bytes = Bytes;
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/syncstate/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/types", ["require", "exports", "types/src/interfaces/runtime/types", "types/src/interfaces/assets/types", "types/src/interfaces/authorship/types", "types/src/interfaces/aura/types", "types/src/interfaces/babe/types", "types/src/interfaces/balances/types", "types/src/interfaces/collective/types", "types/src/interfaces/consensus/types", "types/src/interfaces/contracts/types", "types/src/interfaces/democracy/types", "types/src/interfaces/elections/types", "types/src/interfaces/engine/types", "types/src/interfaces/evm/types", "types/src/interfaces/extrinsics/types", "types/src/interfaces/genericAsset/types", "types/src/interfaces/grandpa/types", "types/src/interfaces/identity/types", "types/src/interfaces/imOnline/types", "types/src/interfaces/offences/types", "types/src/interfaces/proxy/types", "types/src/interfaces/recovery/types", "types/src/interfaces/scheduler/types", "types/src/interfaces/session/types", "types/src/interfaces/society/types", "types/src/interfaces/staking/types", "types/src/interfaces/support/types", "types/src/interfaces/syncstate/types", "types/src/interfaces/system/types", "types/src/interfaces/treasury/types", "types/src/interfaces/txpayment/types", "types/src/interfaces/utility/types", "types/src/interfaces/vesting/types", "types/src/interfaces/attestations/types", "types/src/interfaces/claims/types", "types/src/interfaces/parachains/types", "types/src/interfaces/poll/types", "types/src/interfaces/purchase/types", "types/src/interfaces/contractsAbi/types", "types/src/interfaces/scaleInfo/types", "types/src/interfaces/eth/types", "types/src/interfaces/metadata/types", "types/src/interfaces/rpc/types", "types/src/interfaces/author/types", "types/src/interfaces/chain/types", "types/src/interfaces/childstate/types", "types/src/interfaces/offchain/types", "types/src/interfaces/payment/types", "types/src/interfaces/state/types"], function (require, exports, types_48, types_49, types_50, types_51, types_52, types_53, types_54, types_55, types_56, types_57, types_58, types_59, types_60, types_61, types_62, types_63, types_64, types_65, types_66, types_67, types_68, types_69, types_70, types_71, types_72, types_73, types_74, types_75, types_76, types_77, types_78, types_79, types_80, types_81, types_82, types_83, types_84, types_85, types_86, types_87, types_88, types_89, types_90, types_91, types_92, types_93, types_94, types_95) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_48, exports);
    __exportStar(types_49, exports);
    __exportStar(types_50, exports);
    __exportStar(types_51, exports);
    __exportStar(types_52, exports);
    __exportStar(types_53, exports);
    __exportStar(types_54, exports);
    __exportStar(types_55, exports);
    __exportStar(types_56, exports);
    __exportStar(types_57, exports);
    __exportStar(types_58, exports);
    __exportStar(types_59, exports);
    __exportStar(types_60, exports);
    __exportStar(types_61, exports);
    __exportStar(types_62, exports);
    __exportStar(types_63, exports);
    __exportStar(types_64, exports);
    __exportStar(types_65, exports);
    __exportStar(types_66, exports);
    __exportStar(types_67, exports);
    __exportStar(types_68, exports);
    __exportStar(types_69, exports);
    __exportStar(types_70, exports);
    __exportStar(types_71, exports);
    __exportStar(types_72, exports);
    __exportStar(types_73, exports);
    __exportStar(types_74, exports);
    __exportStar(types_75, exports);
    __exportStar(types_76, exports);
    __exportStar(types_77, exports);
    __exportStar(types_78, exports);
    __exportStar(types_79, exports);
    __exportStar(types_80, exports);
    __exportStar(types_81, exports);
    __exportStar(types_82, exports);
    __exportStar(types_83, exports);
    __exportStar(types_84, exports);
    __exportStar(types_85, exports);
    __exportStar(types_86, exports);
    __exportStar(types_87, exports);
    __exportStar(types_88, exports);
    __exportStar(types_89, exports);
    __exportStar(types_90, exports);
    __exportStar(types_91, exports);
    __exportStar(types_92, exports);
    __exportStar(types_93, exports);
    __exportStar(types_94, exports);
    __exportStar(types_95, exports);
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/index", ["require", "exports", "types/src/interfaces/types"], function (require, exports, types_96) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_96, exports);
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Null", ["require", "exports", "@polkadot/util"], function (require, exports, util_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Null = void 0;
    /**
     * @name Null
     * @description
     * Implements a type that does not contain anything (apart from `null`)
     */
    class Null {
        constructor(registry) {
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return 0;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            throw new Error('.hash is not implemented on Null');
        }
        /**
         * @description Checks if the value is an empty value (always true)
         */
        get isEmpty() {
            return true;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return other instanceof Null || util_9.isNull(other);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return '0x';
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return null;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Null';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return '';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return new Uint8Array();
        }
    }
    exports.Null = Null;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/util", ["require", "exports", "@polkadot/util"], function (require, exports, util_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasEq = void 0;
    function hasEq(o) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        return util_10.isFunction(o.eq);
    }
    exports.hasEq = hasEq;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/compareArray", ["require", "exports", "@polkadot/util", "types/src/codec/utils/util"], function (require, exports, util_11, util_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compareArray = void 0;
    // NOTE These are used internally and when comparing objects, expects that
    // when the second is an Codec[] that the first has to be as well
    function compareArray(a, b) {
        if (Array.isArray(b)) {
            return (a.length === b.length) && util_11.isUndefined(a.find((value, index) => util_12.hasEq(value)
                ? !value.eq(b[index])
                : value !== b[index]));
        }
        return false;
    }
    exports.compareArray = compareArray;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/compareMap", ["require", "exports", "@polkadot/util", "types/src/codec/utils/util"], function (require, exports, util_13, util_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compareMap = void 0;
    function hasMismatch(a, b) {
        return util_13.isUndefined(a) || (util_14.hasEq(a)
            ? !a.eq(b)
            : a !== b);
    }
    function notEntry(value) {
        return !Array.isArray(value) || value.length !== 2;
    }
    function compareMapArray(a, b) {
        // equal number of entries and each entry in the array should match
        return (a.size === b.length) && !b.some((entry) => notEntry(entry) || hasMismatch(a.get(entry[0]), entry[1]));
    }
    // NOTE These are used internally and when comparing objects, expects that
    // when the second is an Map<string, Codec> that the first has to be as well
    function compareMap(a, b) {
        if (Array.isArray(b)) {
            return compareMapArray(a, b);
        }
        else if (b instanceof Map) {
            return compareMapArray(a, [...b.entries()]);
        }
        else if (util_13.isObject(b)) {
            return compareMapArray(a, Object.entries(b));
        }
        return false;
    }
    exports.compareMap = compareMap;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/compareSet", ["require", "exports", "@polkadot/util"], function (require, exports, util_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compareSet = void 0;
    function compareSetArray(a, b) {
        // equal number of entries and each entry in the array should match
        return (a.size === b.length) && !b.some((entry) => !a.has(entry));
    }
    // NOTE These are used internally and when comparing objects, expects that
    // when the second is an Set<string, Codec> that the first has to be as well
    function compareSet(a, b) {
        if (Array.isArray(b)) {
            return compareSetArray(a, b);
        }
        else if (b instanceof Set) {
            return compareSetArray(a, [...b.values()]);
        }
        else if (util_15.isObject(b)) {
            return compareSetArray(a, Object.values(b));
        }
        return false;
    }
    exports.compareSet = compareSet;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/decodeU8a", ["require", "exports", "@polkadot/util"], function (require, exports, util_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeU8a = void 0;
    /**
     * Given an u8a, and an array of Type constructors, decode the u8a against the
     * types, and return an array of decoded values.
     *
     * @param u8a - The u8a to decode.
     * @param types - The array of Constructor to decode the U8a against.
     */
    function decodeU8a(registry, u8a, _types) {
        const types = Array.isArray(_types)
            ? _types
            : Object.values(_types);
        if (!types.length) {
            return [];
        }
        const Type = types[0];
        const value = new Type(registry, u8a);
        return util_16.arrayFlatten([[value], decodeU8a(registry, u8a.subarray(value.encodedLength), types.slice(1))]);
    }
    exports.decodeU8a = decodeU8a;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/typeToConstructor", ["require", "exports", "@polkadot/util"], function (require, exports, util_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typeToConstructor = void 0;
    function typeToConstructor(registry, type) {
        return (util_17.isString(type)
            ? registry.createClass(type)
            : type);
    }
    exports.typeToConstructor = typeToConstructor;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/mapToTypeMap", ["require", "exports", "types/src/codec/utils/typeToConstructor"], function (require, exports, typeToConstructor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapToTypeMap = void 0;
    /**
     * @description takes an input map of the form `{ [string]: string | Constructor }` and returns a map of `{ [string]: Constructor }`
     */
    function mapToTypeMap(registry, input) {
        return Object
            .entries(input)
            .reduce((output, [key, type]) => {
            output[key] = typeToConstructor_1.typeToConstructor(registry, type);
            return output;
        }, {});
    }
    exports.mapToTypeMap = mapToTypeMap;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/index", ["require", "exports", "types/src/codec/utils/compareArray", "types/src/codec/utils/compareMap", "types/src/codec/utils/compareSet", "types/src/codec/utils/decodeU8a", "types/src/codec/utils/mapToTypeMap", "types/src/codec/utils/typeToConstructor"], function (require, exports, compareArray_1, compareMap_1, compareSet_1, decodeU8a_1, mapToTypeMap_1, typeToConstructor_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typeToConstructor = exports.mapToTypeMap = exports.decodeU8a = exports.compareSet = exports.compareMap = exports.compareArray = void 0;
    Object.defineProperty(exports, "compareArray", { enumerable: true, get: function () { return compareArray_1.compareArray; } });
    Object.defineProperty(exports, "compareMap", { enumerable: true, get: function () { return compareMap_1.compareMap; } });
    Object.defineProperty(exports, "compareSet", { enumerable: true, get: function () { return compareSet_1.compareSet; } });
    Object.defineProperty(exports, "decodeU8a", { enumerable: true, get: function () { return decodeU8a_1.decodeU8a; } });
    Object.defineProperty(exports, "mapToTypeMap", { enumerable: true, get: function () { return mapToTypeMap_1.mapToTypeMap; } });
    Object.defineProperty(exports, "typeToConstructor", { enumerable: true, get: function () { return typeToConstructor_2.typeToConstructor; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Struct", ["require", "exports", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, util_18, utils_1) {
    "use strict";
    var _jsonMap, _Types;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Struct = void 0;
    /** @internal */
    function decodeStructFromObject(registry, Types, value, jsonMap) {
        let jsonObj;
        return Object.keys(Types).reduce((raw, key, index) => {
            // The key in the JSON can be snake_case (or other cases), but in our
            // Types, result or any other maps, it's camelCase
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            const jsonKey = (jsonMap.get(key) && !value[key])
                ? jsonMap.get(key)
                : key;
            try {
                if (Array.isArray(value)) {
                    // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
                    raw[key] = value[index] instanceof Types[key]
                        ? value[index]
                        : new Types[key](registry, value[index]);
                }
                else if (value instanceof Map) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    const mapped = value.get(jsonKey);
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                    raw[key] = mapped instanceof Types[key]
                        ? mapped
                        : new Types[key](registry, mapped);
                }
                else if (util_18.isObject(value)) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    let assign = value[jsonKey];
                    if (util_18.isUndefined(assign)) {
                        if (util_18.isUndefined(jsonObj)) {
                            jsonObj = Object.entries(value).reduce((all, [key, value]) => {
                                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                                all[util_18.stringCamelCase(key)] = value;
                                return all;
                            }, {});
                        }
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                        assign = jsonObj[jsonKey];
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
                    raw[key] = assign instanceof Types[key]
                        ? assign
                        : new Types[key](registry, assign);
                }
                else {
                    throw new Error(`Cannot decode value ${JSON.stringify(value)}`);
                }
            }
            catch (error) {
                let type = Types[key].name;
                try {
                    type = new Types[key](registry).toRawType();
                }
                catch (error) {
                    // ignore
                }
                throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
            }
            return raw;
        }, {});
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param Types - Types definition.
     * @param value - Value to decode, one of:
     * - null
     * - undefined
     * - hex
     * - Uint8Array
     * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`
     * are also keys in `Types`
     * - array with `[value1, value2]` assuming the array has the same length as
     * `Object.keys(Types)`
     * @param jsonMap
     * @internal
     */
    function decodeStruct(registry, Types, value, jsonMap) {
        if (util_18.isHex(value)) {
            return decodeStruct(registry, Types, util_18.hexToU8a(value), jsonMap);
        }
        else if (util_18.isU8a(value)) {
            const values = utils_1.decodeU8a(registry, value, Object.values(Types));
            // Transform array of values to {key: value} mapping
            return Object.keys(Types).reduce((raw, key, index) => {
                // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                raw[key] = values[index];
                return raw;
            }, {});
        }
        else if (!value) {
            return {};
        }
        // We assume from here that value is a JS object (Array, Map, Object)
        return decodeStructFromObject(registry, Types, value, jsonMap);
    }
    /**
     * @name Struct
     * @description
     * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
     * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
     * values in the constructor and it manages the decoding. It is important that the constructor
     * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
     * it needs to decoded in the specific defined order.
     * @noInheritDoc
     */
    class Struct extends Map {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        constructor(registry, Types, value = {}, jsonMap = new Map()) {
            super(Object.entries(decodeStruct(registry, utils_1.mapToTypeMap(registry, Types), value, jsonMap)));
            _jsonMap.set(this, void 0);
            _Types.set(this, void 0);
            this.registry = registry;
            __classPrivateFieldSet(this, _jsonMap, jsonMap);
            __classPrivateFieldSet(this, _Types, utils_1.mapToTypeMap(registry, Types));
        }
        static with(Types, jsonMap) {
            return class extends Struct {
                constructor(registry, value) {
                    super(registry, Types, value, jsonMap);
                    Object.keys(Types).forEach((key) => {
                        util_18.isUndefined(this[key]) &&
                            Object.defineProperty(this, key, {
                                enumerable: true,
                                get: () => this.get(key)
                            });
                    });
                }
            };
        }
        static typesToMap(registry, Types) {
            return Object.entries(Types).reduce((result, [key, Type]) => {
                result[key] = registry.getClassName(Type) || new Type(registry).toRawType();
                return result;
            }, {});
        }
        /**
         * @description The available keys for this enum
         */
        get defKeys() {
            return Object.keys(__classPrivateFieldGet(this, _Types));
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            const items = this.toArray();
            for (let i = 0; i < items.length; i++) {
                if (!items[i].isEmpty) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @description Returns the Type description to sthe structure
         */
        get Type() {
            return Object
                .entries(__classPrivateFieldGet(this, _Types))
                .reduce((result, [key, Type]) => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                result[key] = new Type(this.registry).toRawType();
                return result;
            }, {});
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toArray().reduce((length, entry) => {
                length += entry.encodedLength;
                return length;
            }, 0);
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return utils_1.compareMap(this, other);
        }
        /**
         * @description Returns a specific names entry in the structure
         * @param name The name of the entry to retrieve
         */
        get(name) {
            return super.get(name);
        }
        /**
         * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
         */
        getAtIndex(index) {
            return this.toArray()[index];
        }
        /**
         * @description Converts the Object to an standard JavaScript Array
         */
        toArray() {
            return [...this.values()];
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_18.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return [...this.keys()].reduce((json, key) => {
                const value = this.get(key);
                json[key] = value && value.toHuman(isExtended);
                return json;
            }, {});
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return [...this.keys()].reduce((json, key) => {
                const jsonKey = __classPrivateFieldGet(this, _jsonMap).get(key) || key;
                const value = this.get(key);
                json[jsonKey] = value && value.toJSON();
                return json;
            }, {});
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return JSON.stringify(Struct.typesToMap(this.registry, __classPrivateFieldGet(this, _Types)));
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return JSON.stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            // we have keyof S here, cast to string to make it compatible with isBare
            const entries = [...this.entries()];
            return util_18.u8aConcat(...entries
                // eslint-disable-next-line @typescript-eslint/unbound-method
                .filter(([, value]) => util_18.isFunction(value?.toU8a))
                .map(([key, value]) => value.toU8a(!isBare || util_18.isBoolean(isBare)
                ? isBare
                : isBare[key])));
        }
    }
    exports.Struct = Struct;
    _jsonMap = new WeakMap(), _Types = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Enum", ["require", "exports", "@polkadot/util", "types/src/primitive/Null", "types/src/codec/Struct", "types/src/codec/utils/index"], function (require, exports, util_19, Null_1, Struct_1, utils_2) {
    "use strict";
    var _def_1, _index, _indexes, _isBasic, _raw;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Enum = void 0;
    function extractDef(registry, _def) {
        if (!Array.isArray(_def)) {
            const def = utils_2.mapToTypeMap(registry, _def);
            const isBasic = !Object.values(def).some((type) => type !== Null_1.Null);
            return {
                def,
                isBasic
            };
        }
        return {
            def: _def.reduce((def, key) => {
                def[key] = Null_1.Null;
                return def;
            }, {}),
            isBasic: true
        };
    }
    function createFromValue(registry, def, index = 0, value) {
        const Clazz = Object.values(def)[index];
        util_19.assert(!util_19.isUndefined(Clazz), `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);
        return {
            index,
            value: value instanceof Clazz ? value : new Clazz(registry, value)
        };
    }
    function decodeFromJSON(registry, def, key, value) {
        // JSON comes in the form of { "<type (lowercased)>": "<value for type>" }, here we
        // additionally force to lower to ensure forward compat
        const keys = Object.keys(def).map((k) => k.toLowerCase());
        const keyLower = key.toLowerCase();
        const index = keys.indexOf(keyLower);
        util_19.assert(index !== -1, `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);
        try {
            return createFromValue(registry, def, index, value);
        }
        catch (error) {
            throw new Error(`Enum(${key}):: ${error.message}`);
        }
    }
    function decodeFromString(registry, def, value) {
        return util_19.isHex(value)
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            ? decodeFromValue(registry, def, util_19.hexToU8a(value))
            : decodeFromJSON(registry, def, value);
    }
    function decodeFromValue(registry, def, value) {
        if (util_19.isU8a(value)) {
            return createFromValue(registry, def, value[0], value.subarray(1));
        }
        else if (util_19.isNumber(value)) {
            return createFromValue(registry, def, value);
        }
        else if (util_19.isString(value)) {
            return decodeFromString(registry, def, value.toString());
        }
        else if (util_19.isObject(value)) {
            const key = Object.keys(value)[0];
            return decodeFromJSON(registry, def, key, value[key]);
        }
        // Worst-case scenario, return the first with default
        return createFromValue(registry, def, 0);
    }
    function decodeEnum(registry, def, value, index) {
        // NOTE We check the index path first, before looking at values - this allows treating
        // the optional indexes before anything else, more-specific > less-specific
        if (util_19.isNumber(index)) {
            return createFromValue(registry, def, index, value);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
        }
        else if (value instanceof Enum) {
            return createFromValue(registry, def, value.index, value.value);
        }
        // Or else, we just look at `value`
        return decodeFromValue(registry, def, value);
    }
    /**
     * @name Enum
     * @description
     * This implements an enum, that based on the value wraps a different type. It is effectively
     * an extension to enum where the value type is determined by the actual index.
     */
    // TODO:
    //   - As per Enum, actually use TS enum
    //   - It should rather probably extend Enum instead of copying code
    class Enum {
        constructor(registry, def, value, index) {
            _def_1.set(this, void 0);
            _index.set(this, void 0);
            _indexes.set(this, void 0);
            _isBasic.set(this, void 0);
            _raw.set(this, void 0);
            const defInfo = extractDef(registry, def);
            const decoded = decodeEnum(registry, defInfo.def, value, index);
            this.registry = registry;
            __classPrivateFieldSet(this, _def_1, defInfo.def);
            __classPrivateFieldSet(this, _isBasic, defInfo.isBasic);
            __classPrivateFieldSet(this, _indexes, Object.keys(defInfo.def).map((_, index) => index));
            __classPrivateFieldSet(this, _index, __classPrivateFieldGet(this, _indexes).indexOf(decoded.index) || 0);
            __classPrivateFieldSet(this, _raw, decoded.value);
        }
        static with(Types) {
            return class extends Enum {
                constructor(registry, value, index) {
                    super(registry, Types, value, index);
                    Object.keys(__classPrivateFieldGet(this, _def_1)).forEach((_key) => {
                        const name = util_19.stringUpperFirst(util_19.stringCamelCase(_key.replace(' ', '_')));
                        const askey = `as${name}`;
                        const iskey = `is${name}`;
                        util_19.isUndefined(this[iskey]) &&
                            Object.defineProperty(this, iskey, {
                                enumerable: true,
                                get: () => this.type === _key
                            });
                        util_19.isUndefined(this[askey]) &&
                            Object.defineProperty(this, askey, {
                                enumerable: true,
                                get: () => {
                                    util_19.assert(this[iskey], `Cannot convert '${this.type}' via ${askey}`);
                                    return this.value;
                                }
                            });
                    });
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return 1 + __classPrivateFieldGet(this, _raw).encodedLength;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description The index of the metadata value
         */
        get index() {
            return __classPrivateFieldGet(this, _index);
        }
        /**
         * @description true if this is a basic enum (no values)
         */
        get isBasic() {
            return __classPrivateFieldGet(this, _isBasic);
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return __classPrivateFieldGet(this, _raw).isEmpty;
        }
        /**
         * @description Checks if the Enum points to a [[Null]] type
         */
        get isNone() {
            return this.isNull;
        }
        /**
         * @description Checks if the Enum points to a [[Null]] type (deprecated, use isNone)
         */
        get isNull() {
            return __classPrivateFieldGet(this, _raw) instanceof Null_1.Null;
        }
        /**
         * @description The available keys for this enum
         */
        get defEntries() {
            return Object.keys(__classPrivateFieldGet(this, _def_1));
        }
        /**
         * @description The available keys for this enum
         */
        get defKeys() {
            return Object.keys(__classPrivateFieldGet(this, _def_1));
        }
        /**
         * @description The name of the type this enum value represents
         */
        get type() {
            return this.defKeys[__classPrivateFieldGet(this, _index)];
        }
        /**
         * @description The value of the enum
         */
        get value() {
            return __classPrivateFieldGet(this, _raw);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            // cater for the case where we only pass the enum index
            if (util_19.isNumber(other)) {
                return this.toNumber() === other;
            }
            else if (__classPrivateFieldGet(this, _isBasic) && util_19.isString(other)) {
                return this.type === other;
            }
            else if (util_19.isU8a(other)) {
                return !this.toU8a().some((entry, index) => entry !== other[index]);
            }
            else if (util_19.isHex(other)) {
                return this.toHex() === other;
            }
            else if (other instanceof Enum) {
                return this.index === other.index && this.value.eq(other.value);
            }
            else if (util_19.isObject(other)) {
                return this.value.eq(other[this.type]);
            }
            // compare the actual wrapper value
            return this.value.eq(other);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_19.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return __classPrivateFieldGet(this, _isBasic) ? this.type
                : { [this.type]: __classPrivateFieldGet(this, _raw).toHuman(isExtended) };
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return __classPrivateFieldGet(this, _isBasic) ? this.type
                : { [this.type]: __classPrivateFieldGet(this, _raw).toJSON() };
        }
        /**
         * @description Returns the number representation for the value
         */
        toNumber() {
            return __classPrivateFieldGet(this, _index);
        }
        /**
         * @description Returns a raw struct representation of the enum types
         */
        _toRawStruct() {
            return __classPrivateFieldGet(this, _isBasic) ? this.defKeys
                : Struct_1.Struct.typesToMap(this.registry, __classPrivateFieldGet(this, _def_1));
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return JSON.stringify({ _enum: this._toRawStruct() });
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.isNull
                ? this.type
                : JSON.stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return util_19.u8aConcat(new Uint8Array(isBare ? [] : [__classPrivateFieldGet(this, _indexes)[__classPrivateFieldGet(this, _index)]]), __classPrivateFieldGet(this, _raw).toU8a(isBare));
        }
    }
    exports.Enum = Enum;
    _def_1 = new WeakMap(), _index = new WeakMap(), _indexes = new WeakMap(), _isBasic = new WeakMap(), _raw = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Data", ["require", "exports", "@polkadot/util", "types/src/codec/Enum"], function (require, exports, util_20, Enum_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Data = void 0;
    /** @internal */
    function decodeDataU8a(registry, value) {
        const indicator = value[0];
        if (!indicator) {
            return [undefined, undefined];
        }
        else if (indicator >= 1 && indicator <= 33) {
            const length = indicator - 1;
            const data = value.subarray(1, length + 1);
            // in this case, we are passing a Raw back (since we have no length)
            return [registry.createType('Raw', data), 1];
        }
        else if (indicator >= 34 && indicator <= 37) {
            return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
        }
        throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
    }
    /** @internal */
    function decodeData(registry, value) {
        if (!value) {
            return [undefined, undefined];
        }
        else if (util_20.isU8a(value) || util_20.isString(value)) {
            return decodeDataU8a(registry, util_20.u8aToU8a(value));
        }
        // assume we have an Enum or an  object input, handle this via the normal Enum decoding
        return [value, undefined];
    }
    /**
     * @name Data
     * @description
     * A [[Data]] container with node, raw or hashed data
     */
    class Data extends Enum_1.Enum {
        constructor(registry, value) {
            super(registry, {
                None: 'Null',
                Raw: 'Bytes',
                // eslint-disable-next-line sort-keys
                BlakeTwo256: 'H256',
                Sha256: 'H256',
                // eslint-disable-next-line sort-keys
                Keccak256: 'H256',
                ShaThree256: 'H256' // 5
            }, ...decodeData(registry, value));
        }
        get asRaw() {
            return this.value;
        }
        get asSha256() {
            return this.value;
        }
        get isRaw() {
            return this.index === 1;
        }
        get isSha256() {
            return this.index === 3;
        }
        /**
         * @description The encoded length
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a() {
            if (this.index === 0) {
                return new Uint8Array(1);
            }
            else if (this.index === 1) {
                // don't add the length, just the data
                const data = this.value.toU8a(true);
                const length = Math.min(data.length, 32);
                const u8a = new Uint8Array(length + 1);
                u8a.set([data.length + 1], 0);
                u8a.set(data.subarray(0, length), 1);
                return u8a;
            }
            // otherwise we simply have a hash
            const u8a = new Uint8Array(33);
            u8a.set([this.index + 32], 0);
            u8a.set(this.value.toU8a(), 1);
            return u8a;
        }
    }
    exports.Data = Data;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/DoNotConstruct", ["require", "exports", "types/src/primitive/Null"], function (require, exports, Null_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DoNotConstruct = void 0;
    /**
     * @name DoNotConstruct
     * @description
     * An unknown type that fails on construction with the type info
     */
    class DoNotConstruct extends Null_2.Null {
        constructor(registry, typeName = 'DoNotConstruct') {
            super(registry);
            throw new Error(`Cannot construct unknown type ${typeName}`);
        }
        static with(typeName) {
            return class extends DoNotConstruct {
                constructor(registry) {
                    super(registry, typeName);
                }
            };
        }
    }
    exports.DoNotConstruct = DoNotConstruct;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/AbstractInt", ["require", "exports", "bn.js", "@polkadot/util"], function (require, exports, bn_js_1, util_21) {
    "use strict";
    var _bitLength, _isSigned;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractInt = exports.DEFAULT_UINT_BITS = void 0;
    bn_js_1 = __importDefault(bn_js_1);
    exports.DEFAULT_UINT_BITS = 64;
    // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
    // In this case however, we always print any >32 as hex
    const MAX_NUMBER_BITS = 52;
    const MUL_P = new bn_js_1.default(10000);
    const FORMATTERS = [
        ['Perquintill', new bn_js_1.default(1000000000000)],
        ['Perbill', new bn_js_1.default(1000000000)],
        ['Permill', new bn_js_1.default(1000000)],
        ['Percent', new bn_js_1.default(100)]
    ];
    function toPercentage(value, divisor) {
        return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
    }
    /** @internal */
    function decodeAbstracIntU8a(value, bitLength, isNegative) {
        if (!value.length) {
            return '0';
        }
        try {
            // NOTE When passing u8a in (typically from decoded data), it is always Little Endian
            return util_21.u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative }).toString();
        }
        catch (error) {
            throw new Error(`AbstractInt: failed on ${JSON.stringify(value)}:: ${error.message}`);
        }
    }
    /** @internal */
    function decodeAbstractInt(value, bitLength, isNegative) {
        // This function returns a string, which will be passed in the BN
        // constructor. It would be ideal to actually return a BN, but there's a
        // bug: https://github.com/indutny/bn.js/issues/206.
        if (util_21.isHex(value, -1, true)) {
            return util_21.hexToBn(value, { isLe: false, isNegative }).toString();
        }
        else if (util_21.isU8a(value)) {
            return decodeAbstracIntU8a(value, bitLength, isNegative);
        }
        else if (util_21.isString(value)) {
            return new bn_js_1.default(value.toString(), 10).toString();
        }
        return util_21.bnToBn(value).toString();
    }
    /**
     * @name AbstractInt
     * @ignore
     * @noInheritDoc
     */
    // TODO:
    //   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?
    class AbstractInt extends bn_js_1.default {
        constructor(registry, value = 0, bitLength = exports.DEFAULT_UINT_BITS, isSigned = false) {
            super(decodeAbstractInt(value, bitLength, isSigned));
            _bitLength.set(this, void 0);
            _isSigned.set(this, void 0);
            this.registry = registry;
            __classPrivateFieldSet(this, _bitLength, bitLength);
            __classPrivateFieldSet(this, _isSigned, isSigned);
            const isPositive = this.gte(util_21.BN_ZERO);
            const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);
            util_21.assert(isSigned || isPositive, `${this.toRawType()}: Negative number passed to unsigned type`);
            util_21.assert(super.bitLength() <= maxBits, `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return __classPrivateFieldGet(this, _bitLength) / 8;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is a zero value (align elsewhere)
         */
        get isEmpty() {
            return this.isZero();
        }
        /**
         * @description Checks if the value is an unsigned type
         */
        get isUnsigned() {
            return !__classPrivateFieldGet(this, _isSigned);
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return __classPrivateFieldGet(this, _bitLength);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        eq(other) {
            // Here we are actually overriding the built-in .eq to take care of both
            // number and BN inputs (no `.eqn` needed) - numbers will be converted
            return super.eq(util_21.isHex(other)
                ? util_21.hexToBn(other.toString(), { isLe: false, isNegative: __classPrivateFieldGet(this, _isSigned) })
                : util_21.bnToBn(other));
        }
        /**
         * @description True if this value is the max of the type
         */
        isMax() {
            const u8a = this.toU8a().filter((byte) => byte === 0xff);
            return u8a.length === (__classPrivateFieldGet(this, _bitLength) / 8);
        }
        /**
         * @description Returns a BigInt representation of the number
         */
        toBigInt() {
            return BigInt(this.toString());
        }
        /**
         * @description Returns the BN representation of the number. (Compatibility)
         */
        toBn() {
            return this;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex(isLe = false) {
            // For display/JSON, this is BE, for compare, use isLe
            return util_21.bnToHex(this, {
                bitLength: this.bitLength(),
                isLe,
                isNegative: !this.isUnsigned
            });
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toHuman(isExpanded) {
            const rawType = this.toRawType();
            if (rawType === 'Balance') {
                return this.isMax()
                    ? 'everything'
                    : util_21.formatBalance(this, { decimals: this.registry.chainDecimals, withSi: true, withUnit: this.registry.chainToken });
            }
            const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
            return divisor
                ? toPercentage(this, divisor)
                : util_21.formatNumber(this);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON(onlyHex = false) {
            // FIXME this return type should by string | number, however BN returns string
            // Options here are
            //   - super.bitLength() - the actual used bits
            //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
            return onlyHex || (super.bitLength() > MAX_NUMBER_BITS)
                ? this.toHex()
                : this.toNumber();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            // NOTE In the case of balances, which have a special meaning on the UI
            // and can be interpreted differently, return a specific value for it so
            // underlying it always matches (no matter which length it actually is)
            return this instanceof this.registry.createClass('Balance')
                ? 'Balance'
                : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
        }
        /**
         * @description Returns the string representation of the value
         * @param base The base to use for the conversion
         */
        toString(base) {
            // only included here since we do not inherit docs
            return super.toString(base);
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return util_21.bnToU8a(this, {
                bitLength: this.bitLength(),
                isLe: true,
                isNegative: !this.isUnsigned
            });
        }
    }
    exports.AbstractInt = AbstractInt;
    _bitLength = new WeakMap(), _isSigned = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Int", ["require", "exports", "types/src/codec/AbstractInt"], function (require, exports, AbstractInt_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Int = void 0;
    /**
     * @name Int
     * @description
     * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
     * this handles the encoding and decoding of those numbers. Upon construction
     * the bitLength is provided and any additional use keeps the number to this
     * length. This extends `BN`, so all methods available on a normal `BN` object
     * is available here.
     * @noInheritDoc
     */
    class Int extends AbstractInt_1.AbstractInt {
        constructor(registry, value = 0, bitLength) {
            super(registry, value, bitLength, true);
        }
        static with(bitLength, typeName) {
            return class extends Int {
                constructor(registry, value) {
                    super(registry, value, bitLength);
                }
                toRawType() {
                    return typeName || super.toRawType();
                }
            };
        }
    }
    exports.Int = Int;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/I8", ["require", "exports", "types/src/codec/Int"], function (require, exports, Int_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i8 = void 0;
    /**
     * @name i8
     * @description
     * An 8-bit signed integer
     */
    class i8 extends Int_1.Int.with(8) {
    }
    exports.i8 = i8;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/I16", ["require", "exports", "types/src/codec/Int"], function (require, exports, Int_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i16 = void 0;
    /**
     * @name i16
     * @description
     * A 16-bit signed integer
     */
    class i16 extends Int_2.Int.with(16) {
    }
    exports.i16 = i16;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/I32", ["require", "exports", "types/src/codec/Int"], function (require, exports, Int_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i32 = void 0;
    /**
     * @name i32
     * @description
     * A 32-bit signed integer
     */
    class i32 extends Int_3.Int.with(32) {
    }
    exports.i32 = i32;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/I64", ["require", "exports", "types/src/codec/Int"], function (require, exports, Int_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i64 = void 0;
    /**
     * @name i64
     * @description
     * A 64-bit signed integer
     */
    class i64 extends Int_4.Int.with(64) {
    }
    exports.i64 = i64;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/I128", ["require", "exports", "types/src/codec/Int"], function (require, exports, Int_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i128 = void 0;
    /**
     * @name i128
     * @description
     * A 128-bit signed integer
     */
    class i128 extends Int_5.Int.with(128) {
    }
    exports.i128 = i128;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/I256", ["require", "exports", "types/src/codec/Int"], function (require, exports, Int_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.i256 = void 0;
    /**
     * @name i256
     * @description
     * A 256-bit signed integer
     */
    class i256 extends Int_6.Int.with(256) {
    }
    exports.i256 = i256;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/metadata/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AllHashers = void 0;
    const AllHashers = {
        Blake2_128: null,
        Blake2_256: null,
        Blake2_128Concat: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null,
        // new in v11
        Identity: null
    };
    exports.AllHashers = AllHashers;
    exports.default = {
        rpc: {},
        types: {
            // v9
            DoubleMapTypeV9: {
                hasher: 'StorageHasherV9',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV9'
            },
            ErrorMetadataV9: {
                name: 'Text',
                documentation: 'Vec<Text>'
            },
            EventMetadataV9: {
                name: 'Text',
                args: 'Vec<Type>',
                documentation: 'Vec<Text>'
            },
            FunctionArgumentMetadataV9: {
                name: 'Text',
                type: 'Type'
            },
            FunctionMetadataV9: {
                name: 'Text',
                args: 'Vec<FunctionArgumentMetadataV9>',
                documentation: 'Vec<Text>'
            },
            MapTypeV9: {
                hasher: 'StorageHasherV9',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            MetadataV9: {
                modules: 'Vec<ModuleMetadataV9>'
            },
            ModuleConstantMetadataV9: {
                name: 'Text',
                type: 'Type',
                value: 'Bytes',
                documentation: 'Vec<Text>'
            },
            ModuleMetadataV9: {
                name: 'Text',
                storage: 'Option<StorageMetadataV9>',
                calls: 'Option<Vec<FunctionMetadataV9>>',
                events: 'Option<Vec<EventMetadataV9>>',
                constants: 'Vec<ModuleConstantMetadataV9>',
                errors: 'Vec<ErrorMetadataV9>'
            },
            StorageEntryMetadataV9: {
                name: 'Text',
                modifier: 'StorageEntryModifierV9',
                type: 'StorageEntryTypeV9',
                fallback: 'Bytes',
                documentation: 'Vec<Text>'
            },
            StorageEntryModifierV9: {
                _enum: ['Optional', 'Default', 'Required']
            },
            StorageEntryTypeV9: {
                _enum: {
                    Plain: 'Type',
                    Map: 'MapTypeV9',
                    DoubleMap: 'DoubleMapTypeV9'
                }
            },
            StorageHasherV9: {
                _enum: {
                    Blake2_128: null,
                    Blake2_256: null,
                    Twox128: null,
                    Twox256: null,
                    Twox64Concat: null
                }
            },
            StorageMetadataV9: {
                prefix: 'Text',
                items: 'Vec<StorageEntryMetadataV9>'
            },
            // v10
            DoubleMapTypeV10: {
                hasher: 'StorageHasherV10',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV10'
            },
            ErrorMetadataV10: 'ErrorMetadataV9',
            EventMetadataV10: 'EventMetadataV9',
            FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
            FunctionMetadataV10: 'FunctionMetadataV9',
            MapTypeV10: {
                hasher: 'StorageHasherV10',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            MetadataV10: {
                modules: 'Vec<ModuleMetadataV10>'
            },
            ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
            ModuleMetadataV10: {
                name: 'Text',
                storage: 'Option<StorageMetadataV10>',
                calls: 'Option<Vec<FunctionMetadataV10>>',
                events: 'Option<Vec<EventMetadataV10>>',
                constants: 'Vec<ModuleConstantMetadataV10>',
                errors: 'Vec<ErrorMetadataV10>'
            },
            StorageEntryModifierV10: 'StorageEntryModifierV9',
            StorageEntryMetadataV10: {
                name: 'Text',
                modifier: 'StorageEntryModifierV10',
                type: 'StorageEntryTypeV10',
                fallback: 'Bytes',
                documentation: 'Vec<Text>'
            },
            StorageEntryTypeV10: {
                _enum: {
                    Plain: 'Type',
                    Map: 'MapTypeV10',
                    DoubleMap: 'DoubleMapTypeV10'
                }
            },
            StorageMetadataV10: {
                prefix: 'Text',
                items: 'Vec<StorageEntryMetadataV10>'
            },
            StorageHasherV10: {
                _enum: {
                    Blake2_128: null,
                    Blake2_256: null,
                    Blake2_128Concat: null,
                    Twox128: null,
                    Twox256: null,
                    Twox64Concat: null
                }
            },
            // v11
            DoubleMapTypeV11: {
                hasher: 'StorageHasherV11',
                key1: 'Type',
                key2: 'Type',
                value: 'Type',
                key2Hasher: 'StorageHasherV11'
            },
            ErrorMetadataV11: 'ErrorMetadataV10',
            EventMetadataV11: 'EventMetadataV10',
            ExtrinsicMetadataV11: {
                version: 'u8',
                signedExtensions: 'Vec<Text>'
            },
            FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
            FunctionMetadataV11: 'FunctionMetadataV10',
            MapTypeV11: {
                hasher: 'StorageHasherV11',
                key: 'Type',
                value: 'Type',
                linked: 'bool'
            },
            MetadataV11: {
                modules: 'Vec<ModuleMetadataV11>',
                extrinsic: 'ExtrinsicMetadataV11'
            },
            ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
            ModuleMetadataV11: {
                name: 'Text',
                storage: 'Option<StorageMetadataV11>',
                calls: 'Option<Vec<FunctionMetadataV11>>',
                events: 'Option<Vec<EventMetadataV11>>',
                constants: 'Vec<ModuleConstantMetadataV11>',
                errors: 'Vec<ErrorMetadataV11>'
            },
            StorageEntryModifierV11: 'StorageEntryModifierV10',
            StorageEntryMetadataV11: {
                name: 'Text',
                modifier: 'StorageEntryModifierV11',
                type: 'StorageEntryTypeV11',
                fallback: 'Bytes',
                documentation: 'Vec<Text>'
            },
            StorageEntryTypeV11: {
                _enum: {
                    Plain: 'Type',
                    Map: 'MapTypeV11',
                    DoubleMap: 'DoubleMapTypeV11'
                }
            },
            StorageMetadataV11: {
                prefix: 'Text',
                items: 'Vec<StorageEntryMetadataV11>'
            },
            StorageHasherV11: {
                _enum: AllHashers
            },
            // v12
            DoubleMapTypeV12: 'DoubleMapTypeV11',
            ErrorMetadataV12: 'ErrorMetadataV11',
            EventMetadataV12: 'EventMetadataV11',
            ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
            FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
            FunctionMetadataV12: 'FunctionMetadataV11',
            MapTypeV12: 'MapTypeV11',
            MetadataV12: {
                modules: 'Vec<ModuleMetadataV12>',
                extrinsic: 'ExtrinsicMetadataV12'
            },
            ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
            ModuleMetadataV12: {
                name: 'Text',
                storage: 'Option<StorageMetadataV12>',
                calls: 'Option<Vec<FunctionMetadataV12>>',
                events: 'Option<Vec<EventMetadataV12>>',
                constants: 'Vec<ModuleConstantMetadataV12>',
                errors: 'Vec<ErrorMetadataV12>',
                index: 'u8'
            },
            StorageEntryModifierV12: 'StorageEntryModifierV11',
            StorageEntryMetadataV12: 'StorageEntryMetadataV11',
            StorageEntryTypeV12: 'StorageEntryTypeV11',
            StorageMetadataV12: 'StorageMetadataV11',
            StorageHasherV12: 'StorageHasherV11',
            // This always maps to the latest
            DoubleMapTypeLatest: 'DoubleMapTypeV12',
            ErrorMetadataLatest: 'ErrorMetadataV12',
            EventMetadataLatest: 'EventMetadataV12',
            ExtrinsicMetadataLatest: 'ExtrinsicMetadataV12',
            FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV12',
            FunctionMetadataLatest: 'FunctionMetadataV12',
            MapTypeLatest: 'MapTypeV12',
            MetadataLatest: 'MetadataV12',
            ModuleConstantMetadataLatest: 'ModuleConstantMetadataV12',
            ModuleMetadataLatest: 'ModuleMetadataV12',
            StorageEntryMetadataLatest: 'StorageEntryMetadataV12',
            StorageEntryModifierLatest: 'StorageEntryModifierV12',
            StorageEntryTypeLatest: 'StorageEntryTypeV12',
            StorageMetadataLatest: 'StorageMetadataV12',
            StorageHasher: 'StorageHasherV12',
            // the enum containing all the mappings
            MetadataAll: {
                _enum: {
                    V0: 'DoNotConstruct<MetadataV0>',
                    V1: 'DoNotConstruct<MetadataV1>',
                    V2: 'DoNotConstruct<MetadataV2>',
                    V3: 'DoNotConstruct<MetadataV3>',
                    V4: 'DoNotConstruct<MetadataV4>',
                    V5: 'DoNotConstruct<MetadataV5>',
                    V6: 'DoNotConstruct<MetadataV6>',
                    V7: 'DoNotConstruct<MetadataV7>',
                    V8: 'DoNotConstruct<MetadataV8>',
                    // First version on Kusama in V9, dropping will be problematic
                    V9: 'MetadataV9',
                    V10: 'MetadataV10',
                    V11: 'MetadataV11',
                    V12: 'MetadataV12'
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/StorageKey", ["require", "exports", "@polkadot/util", "types/src/primitive/Bytes"], function (require, exports, util_22, Bytes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StorageKey = exports.unwrapStorageType = void 0;
    const HASHER_MAP = {
        // opaque
        Blake2_128: [16, false],
        Blake2_128Concat: [16, true],
        Blake2_256: [32, false],
        Identity: [0, true],
        Twox128: [16, false],
        Twox256: [32, false],
        Twox64Concat: [8, true]
    };
    function getStorageType(type) {
        if (type.isPlain) {
            return [false, type.asPlain.toString()];
        }
        else if (type.isDoubleMap) {
            return [false, type.asDoubleMap.value.toString()];
        }
        return [false, type.asMap.value.toString()];
    }
    // we unwrap the type here, turning into an output usable for createType
    /** @internal */
    function unwrapStorageType(type, isOptional) {
        const [hasWrapper, outputType] = getStorageType(type);
        return isOptional && !hasWrapper
            ? `Option<${outputType}>`
            : outputType;
    }
    exports.unwrapStorageType = unwrapStorageType;
    /** @internal */
    function decodeStorageKey(value) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        if (value instanceof StorageKey) {
            return {
                key: value,
                method: value.method,
                section: value.section
            };
        }
        else if (!value || util_22.isString(value) || util_22.isU8a(value)) {
            // let Bytes handle these inputs
            return { key: value };
        }
        else if (util_22.isFunction(value)) {
            return {
                key: value(),
                method: value.method,
                section: value.section
            };
        }
        else if (Array.isArray(value)) {
            const [fn, ...arg] = value;
            util_22.assert(util_22.isFunction(fn), 'Expected function input for key construction');
            return {
                key: fn(...arg),
                method: fn.method,
                section: fn.section
            };
        }
        throw new Error(`Unable to convert input ${value} to StorageKey`);
    }
    function decodeHashers(registry, value, hashers) {
        // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
        let offset = 32;
        return hashers.reduce((result, [hasher, type]) => {
            const [hashLen, canDecode] = HASHER_MAP[hasher.type];
            const decoded = canDecode
                ? registry.createType(type, value.subarray(offset + hashLen))
                : registry.createType('Raw', value.subarray(offset, offset + hashLen));
            offset += hashLen + (canDecode ? decoded.encodedLength : 0);
            result.push(decoded);
            return result;
        }, []);
    }
    /** @internal */
    function decodeArgsFromMeta(registry, value, meta) {
        if (!meta || !(meta.type.isDoubleMap || meta.type.isMap)) {
            return [];
        }
        if (meta.type.isMap) {
            const mapInfo = meta.type.asMap;
            return decodeHashers(registry, value, [
                [mapInfo.hasher, mapInfo.key.toString()]
            ]);
        }
        const mapInfo = meta.type.asDoubleMap;
        return decodeHashers(registry, value, [
            [mapInfo.hasher, mapInfo.key1.toString()],
            [mapInfo.key2Hasher, mapInfo.key2.toString()]
        ]);
    }
    /**
     * @name StorageKey
     * @description
     * A representation of a storage key (typically hashed) in the system. It can be
     * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
     */
    class StorageKey extends Bytes_1.Bytes {
        constructor(registry, value, override = {}) {
            const { key, method, section } = decodeStorageKey(value);
            super(registry, key);
            this._outputType = StorageKey.getType(value);
            // decode the args (as applicable based on the key and the hashers, after all init)
            this.setMeta(StorageKey.getMeta(value), override.section || section, override.method || method);
        }
        static getMeta(value) {
            if (value instanceof StorageKey) {
                return value.meta;
            }
            else if (util_22.isFunction(value)) {
                return value.meta;
            }
            else if (Array.isArray(value)) {
                const [fn] = value;
                return fn.meta;
            }
            return undefined;
        }
        static getType(value) {
            if (value instanceof StorageKey) {
                return value.outputType;
            }
            else if (util_22.isFunction(value)) {
                return unwrapStorageType(value.meta.type);
            }
            else if (Array.isArray(value)) {
                const [fn] = value;
                if (fn.meta) {
                    return unwrapStorageType(fn.meta.type);
                }
            }
            // If we have no type set, default to Raw
            return 'Raw';
        }
        /**
         * @description Return the decoded arguments (applicable to map/doublemap with decodable values)
         */
        get args() {
            return this._args;
        }
        /**
         * @description The metadata or `undefined` when not available
         */
        get meta() {
            return this._meta;
        }
        /**
         * @description The key method or `undefined` when not specified
         */
        get method() {
            return this._method;
        }
        /**
         * @description The output type
         */
        get outputType() {
            return this._outputType;
        }
        /**
         * @description The key section or `undefined` when not specified
         */
        get section() {
            return this._section;
        }
        is(key) {
            return key.section === this.section && key.method === this.method;
        }
        /**
         * @description Sets the meta for this key
         */
        setMeta(meta, section, method) {
            this._meta = meta;
            this._method = method || this._method;
            this._section = section || this._section;
            if (meta) {
                this._outputType = unwrapStorageType(meta.type);
            }
            try {
                this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);
            }
            catch (error) {
                // ignore...
            }
            return this;
        }
        /**
         * @description Returns the Human representation for this type
         */
        toHuman() {
            return this._args.length
                ? this._args.map((arg) => arg.toHuman())
                : super.toHuman();
        }
        /**
         * @description Returns the raw type for this
         */
        toRawType() {
            return 'StorageKey';
        }
    }
    exports.StorageKey = StorageKey;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Text", ["require", "exports", "@polkadot/util", "types/src/codec/Raw"], function (require, exports, util_23, Raw_3) {
    "use strict";
    var _override;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Text = void 0;
    const MAX_LENGTH = 128 * 1024;
    /** @internal */
    function decodeText(value) {
        if (util_23.isHex(value)) {
            return util_23.u8aToString(util_23.hexToU8a(value.toString()));
        }
        else if (value instanceof Uint8Array) {
            if (!value.length) {
                return '';
            }
            // for Raw, the internal buffer does not have an internal length
            // (the same applies in e.g. Bytes, where length is added at encoding-time)
            if (value instanceof Raw_3.Raw) {
                return util_23.u8aToString(value);
            }
            const [offset, length] = util_23.compactFromU8a(value);
            const total = offset + length.toNumber();
            util_23.assert(length.lten(MAX_LENGTH), `Text length ${length.toString()} exceeds ${MAX_LENGTH}`);
            util_23.assert(total <= value.length, `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
            return util_23.u8aToString(value.subarray(offset, total));
        }
        return value ? value.toString() : '';
    }
    /**
     * @name Text
     * @description
     * This is a string wrapper, along with the length. It is used both for strings as well
     * as items such as documentation. It simply extends the standard JS `String` built-in
     * object, inheriting all methods exposed from `String`.
     * @noInheritDoc
     */
    // TODO
    //   - Strings should probably be trimmed (docs do come through with extra padding)
    class Text extends String {
        constructor(registry, value) {
            super(decodeText(value));
            _override.set(this, null);
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.length === 0;
        }
        /**
         * @description The length of the value
         */
        get length() {
            // only included here since we ignore inherited docs
            return super.length;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return util_23.isString(other)
                ? this.toString() === other.toString()
                : false;
        }
        /**
         * @description Set an override value for this
         */
        setOverride(override) {
            __classPrivateFieldSet(this, _override, override);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            // like  with Vec<u8>, when we are encoding to hex, we don't actually add
            // the length prefix (it is already implied by the actual string length)
            return util_23.u8aToHex(this.toU8a(true));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Text';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return __classPrivateFieldGet(this, _override) || super.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            // NOTE Here we use the super toString (we are not taking overrides into account,
            // rather encoding the original value the string was constructed with)
            const encoded = util_23.stringToU8a(super.toString());
            return isBare
                ? encoded
                : util_23.compactAddLength(encoded);
        }
    }
    exports.Text = Text;
    _override = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/sanitize", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sanitize = exports.removeWrap = exports.removeTraits = exports.removePairOf = exports.removeGenerics = exports.removeColons = exports.flattenSingleTuple = exports.cleanupCompact = exports.alias = exports.findClosing = void 0;
    const ALLOWED_BOXES = ['BTreeMap', 'BTreeSet', 'Compact', 'DoNotConstruct', 'HashMap', 'Int', 'Linkage', 'Result', 'Option', 'UInt', 'Vec'];
    const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple
    const mappings = [
        // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
        alias(['<T::InherentOfflineReport as InherentOfflineReport>::Inherent'], 'InherentOfflineReport', false),
        alias(['VecDeque<'], 'Vec<', false),
        // <T::Balance as HasCompact>
        cleanupCompact(),
        // Remove all the trait prefixes
        removeTraits(),
        // remove PairOf<T> -> (T, T)
        removePairOf(),
        // remove boxing, `Box<Proposal>` -> `Proposal`
        removeWrap('Box'),
        // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
        removeGenerics(),
        // alias String -> Text (compat with jsonrpc methods)
        alias(['String'], 'Text'),
        // alias Vec<u8> -> Bytes
        alias(['Vec<u8>', '&\\[u8\\]'], 'Bytes'),
        // alias RawAddress -> Address
        alias(['RawAddress'], 'Address'),
        // lookups, mapped to Address/AccountId as appropriate in runtime
        alias(['Lookup::Source'], 'LookupSource'),
        alias(['Lookup::Target'], 'LookupTarget'),
        // HACK duplication between contracts & primitives, however contracts prefixed with exec
        alias(['exec::StorageKey'], 'ContractStorageKey'),
        // flattens tuples with one value, `(AccountId)` -> `AccountId`
        flattenSingleTuple(),
        // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
        removeColons()
    ];
    // given a starting index, find the closing >
    function findClosing(value, start) {
        let depth = 0;
        for (let index = start; index < value.length; index++) {
            if (value[index] === '>') {
                if (!depth) {
                    return index;
                }
                depth--;
            }
            else if (value[index] === '<') {
                depth++;
            }
        }
        throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
    }
    exports.findClosing = findClosing;
    function alias(src, dest, withChecks = true) {
        return (value) => {
            return src.reduce((value, src) => {
                return value
                    .replace(new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join('|')})`, 'g'), (src) => withChecks && BOX_PRECEDING.includes(src[0])
                    ? `${src[0]}${dest}`
                    : dest);
            }, value);
        };
    }
    exports.alias = alias;
    function cleanupCompact() {
        return (value) => {
            for (let index = 0; index < value.length; index++) {
                if (value[index] !== '<') {
                    continue;
                }
                const end = findClosing(value, index + 1) - 14;
                if (value.substr(end, 14) === ' as HasCompact') {
                    value = `Compact<${value.substr(index + 1, end - index - 1)}>`;
                }
            }
            return value;
        };
    }
    exports.cleanupCompact = cleanupCompact;
    function flattenSingleTuple() {
        return (value) => {
            return value.replace(/\(([^,]+)\)/, '$1');
        };
    }
    exports.flattenSingleTuple = flattenSingleTuple;
    function removeColons() {
        return (value, { allowNamespaces } = {}) => {
            let index = 0;
            while (index !== -1) {
                index = value.indexOf('::');
                if (index === 0) {
                    value = value.substr(2);
                }
                else if (index !== -1) {
                    if (allowNamespaces) {
                        return value;
                    }
                    let start = index;
                    while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
                        start--;
                    }
                    value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;
                }
            }
            return value;
        };
    }
    exports.removeColons = removeColons;
    function removeGenerics() {
        return (value) => {
            for (let index = 0; index < value.length; index++) {
                if (value[index] === '<') {
                    // check against the allowed wrappers, be it Vec<..>, Option<...> ...
                    const box = ALLOWED_BOXES.find((box) => {
                        const start = index - box.length;
                        return (start >= 0 && value.substr(start, box.length) === box) && (
                        // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
                        start === 0 || BOX_PRECEDING.includes(value[start - 1]));
                    });
                    // we have not found anything, unwrap generic innards
                    if (!box) {
                        const end = findClosing(value, index + 1);
                        value = `${value.substr(0, index)}${value.substr(end + 1)}`;
                    }
                }
            }
            return value;
        };
    }
    exports.removeGenerics = removeGenerics;
    // remove the PairOf wrappers
    function removePairOf() {
        return (value) => {
            for (let index = 0; index < value.length; index++) {
                if (value.substr(index, 7) === 'PairOf<') {
                    const start = index + 7;
                    const end = findClosing(value, start);
                    const type = value.substr(start, end - start);
                    value = `${value.substr(0, index)}(${type},${type})${value.substr(end + 1)}`;
                }
            }
            return value;
        };
    }
    exports.removePairOf = removePairOf;
    // remove the type traits
    function removeTraits() {
        return (value) => {
            return value
                // remove all whitespaces
                .replace(/\s/g, '')
                // anything `T::<type>` to end up as `<type>`
                .replace(/(T|Self)::/g, '')
                // replace `<T as Trait>::` (whitespaces were removed above)
                .replace(/<(T|Self)asTrait>::/g, '')
                // replace `<T as something::Trait>::` (whitespaces were removed above)
                .replace(/<Tas[a-z]+::Trait>::/g, '')
                // replace <Lookup as StaticLookup>
                .replace(/<LookupasStaticLookup>/g, 'Lookup')
                // replace `<...>::Type`
                .replace(/::Type/g, '');
        };
    }
    exports.removeTraits = removeTraits;
    // remove wrapping values, i.e. Box<Proposal> -> Proposal
    function removeWrap(_check) {
        const check = `${_check}<`;
        return (value) => {
            let index = 0;
            while (index !== -1) {
                index = value.indexOf(check);
                if (index !== -1) {
                    const start = index + check.length;
                    const end = findClosing(value, start);
                    value = `${value.substr(0, index)}${value.substr(start, end - start)}${value.substr(end + 1)}`;
                }
            }
            return value;
        };
    }
    exports.removeWrap = removeWrap;
    // eslint-disable-next-line @typescript-eslint/ban-types
    function sanitize(value, options) {
        return mappings.reduce((result, fn) => {
            return fn(result, options);
        }, value.toString()).trim();
    }
    exports.sanitize = sanitize;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Type", ["require", "exports", "types/src/create/sanitize", "types/src/primitive/Text"], function (require, exports, sanitize_1, Text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Type = void 0;
    /**
     * @name Type
     * @description
     * This is a extended version of String, specifically to handle types. Here we rely fully
     * on what string provides us, however we also adjust the types received from the runtime,
     * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
     */
    class Type extends Text_1.Text {
        constructor(registry, value = '') {
            super(registry, value);
            this.setOverride(sanitize_1.sanitize(this.toString()));
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Type';
        }
    }
    exports.Type = Type;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/UInt", ["require", "exports", "types/src/codec/AbstractInt"], function (require, exports, AbstractInt_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UInt = void 0;
    /**
     * @name UInt
     * @description
     * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
     * this handles the encoding and decoding of those numbers. Upon construction
     * the bitLength is provided and any additional use keeps the number to this
     * length. This extends `BN`, so all methods available on a normal `BN` object
     * is available here.
     * @noInheritDoc
     */
    class UInt extends AbstractInt_2.AbstractInt {
        static with(bitLength, typeName) {
            return class extends UInt {
                constructor(registry, value) {
                    super(registry, value, bitLength);
                }
                toRawType() {
                    return typeName || super.toRawType();
                }
            };
        }
    }
    exports.UInt = UInt;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/U8", ["require", "exports", "types/src/codec/UInt"], function (require, exports, UInt_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u8 = void 0;
    /**
     * @name u8
     * @description
     * An 8-bit unsigned integer
     */
    class u8 extends UInt_1.UInt.with(8) {
    }
    exports.u8 = u8;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/U16", ["require", "exports", "types/src/codec/UInt"], function (require, exports, UInt_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u16 = void 0;
    /**
     * @name u16
     * @description
     * A 16-bit unsigned integer
     */
    class u16 extends UInt_2.UInt.with(16) {
    }
    exports.u16 = u16;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/U32", ["require", "exports", "types/src/codec/UInt"], function (require, exports, UInt_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u32 = void 0;
    /**
     * @name u32
     * @description
     * A 32-bit unsigned integer
     */
    class u32 extends UInt_3.UInt.with(32) {
    }
    exports.u32 = u32;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/U64", ["require", "exports", "types/src/codec/UInt"], function (require, exports, UInt_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u64 = void 0;
    /**
     * @name u64
     * @description
     * A 64-bit unsigned integer
     */
    class u64 extends UInt_4.UInt.with(64) {
    }
    exports.u64 = u64;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/U128", ["require", "exports", "types/src/codec/UInt"], function (require, exports, UInt_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u128 = void 0;
    /**
     * @name u128
     * @description
     * A 128-bit unsigned integer
     */
    class u128 extends UInt_5.UInt.with(128) {
    }
    exports.u128 = u128;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/U256", ["require", "exports", "types/src/codec/UInt"], function (require, exports, UInt_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u256 = void 0;
    /**
     * @name u256
     * @description
     * A 256-bit unsigned integer
     */
    class u256 extends UInt_6.UInt.with(256) {
    }
    exports.u256 = u256;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/USize", ["require", "exports", "types/src/primitive/U32"], function (require, exports, U32_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usize = void 0;
    /**
     * @name USize
     * @description
     * A System default unsigned number, typically used in RPC to report non-consensus
     * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
     * It is not to be used, since it created consensus mismatches.
     */
    class usize extends U32_1.u32 {
        constructor(registry, value) {
            super(registry, value);
            throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
        }
    }
    exports.usize = usize;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/index", ["require", "exports", "types/src/primitive/BitVec", "types/src/primitive/Bool", "types/src/primitive/Bytes", "types/src/primitive/Data", "types/src/primitive/DoNotConstruct", "types/src/primitive/I8", "types/src/primitive/I16", "types/src/primitive/I32", "types/src/primitive/I64", "types/src/primitive/I128", "types/src/primitive/I256", "types/src/primitive/Null", "types/src/primitive/StorageKey", "types/src/primitive/Text", "types/src/primitive/Type", "types/src/primitive/U8", "types/src/primitive/U16", "types/src/primitive/U32", "types/src/primitive/U64", "types/src/primitive/U128", "types/src/primitive/U256", "types/src/primitive/USize"], function (require, exports, BitVec_1, Bool_1, Bytes_2, Data_1, DoNotConstruct_1, I8_1, I16_1, I32_1, I64_1, I128_1, I256_1, Null_3, StorageKey_1, Text_2, Type_1, U8_1, U16_1, U32_2, U64_1, U128_1, U256_1, USize_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.USize = exports.usize = exports.U256 = exports.u256 = exports.U128 = exports.u128 = exports.U64 = exports.u64 = exports.U32 = exports.u32 = exports.U16 = exports.u16 = exports.U8 = exports.u8 = exports.Type = exports.Text = exports.StorageKey = exports.Null = exports.I256 = exports.i256 = exports.I128 = exports.i128 = exports.I64 = exports.i64 = exports.I32 = exports.i32 = exports.I16 = exports.i16 = exports.I8 = exports.i8 = exports.DoNotConstruct = exports.Data = exports.Bytes = exports.Bool = exports.bool = exports.BitVec = void 0;
    Object.defineProperty(exports, "BitVec", { enumerable: true, get: function () { return BitVec_1.BitVec; } });
    Object.defineProperty(exports, "bool", { enumerable: true, get: function () { return Bool_1.bool; } });
    Object.defineProperty(exports, "Bool", { enumerable: true, get: function () { return Bool_1.bool; } });
    Object.defineProperty(exports, "Bytes", { enumerable: true, get: function () { return Bytes_2.Bytes; } });
    Object.defineProperty(exports, "Data", { enumerable: true, get: function () { return Data_1.Data; } });
    Object.defineProperty(exports, "DoNotConstruct", { enumerable: true, get: function () { return DoNotConstruct_1.DoNotConstruct; } });
    Object.defineProperty(exports, "i8", { enumerable: true, get: function () { return I8_1.i8; } });
    Object.defineProperty(exports, "I8", { enumerable: true, get: function () { return I8_1.i8; } });
    Object.defineProperty(exports, "i16", { enumerable: true, get: function () { return I16_1.i16; } });
    Object.defineProperty(exports, "I16", { enumerable: true, get: function () { return I16_1.i16; } });
    Object.defineProperty(exports, "i32", { enumerable: true, get: function () { return I32_1.i32; } });
    Object.defineProperty(exports, "I32", { enumerable: true, get: function () { return I32_1.i32; } });
    Object.defineProperty(exports, "i64", { enumerable: true, get: function () { return I64_1.i64; } });
    Object.defineProperty(exports, "I64", { enumerable: true, get: function () { return I64_1.i64; } });
    Object.defineProperty(exports, "i128", { enumerable: true, get: function () { return I128_1.i128; } });
    Object.defineProperty(exports, "I128", { enumerable: true, get: function () { return I128_1.i128; } });
    Object.defineProperty(exports, "i256", { enumerable: true, get: function () { return I256_1.i256; } });
    Object.defineProperty(exports, "I256", { enumerable: true, get: function () { return I256_1.i256; } });
    Object.defineProperty(exports, "Null", { enumerable: true, get: function () { return Null_3.Null; } });
    Object.defineProperty(exports, "StorageKey", { enumerable: true, get: function () { return StorageKey_1.StorageKey; } });
    Object.defineProperty(exports, "Text", { enumerable: true, get: function () { return Text_2.Text; } });
    Object.defineProperty(exports, "Type", { enumerable: true, get: function () { return Type_1.Type; } });
    Object.defineProperty(exports, "u8", { enumerable: true, get: function () { return U8_1.u8; } });
    Object.defineProperty(exports, "U8", { enumerable: true, get: function () { return U8_1.u8; } });
    Object.defineProperty(exports, "u16", { enumerable: true, get: function () { return U16_1.u16; } });
    Object.defineProperty(exports, "U16", { enumerable: true, get: function () { return U16_1.u16; } });
    Object.defineProperty(exports, "u32", { enumerable: true, get: function () { return U32_2.u32; } });
    Object.defineProperty(exports, "U32", { enumerable: true, get: function () { return U32_2.u32; } });
    Object.defineProperty(exports, "u64", { enumerable: true, get: function () { return U64_1.u64; } });
    Object.defineProperty(exports, "U64", { enumerable: true, get: function () { return U64_1.u64; } });
    Object.defineProperty(exports, "u128", { enumerable: true, get: function () { return U128_1.u128; } });
    Object.defineProperty(exports, "U128", { enumerable: true, get: function () { return U128_1.u128; } });
    Object.defineProperty(exports, "u256", { enumerable: true, get: function () { return U256_1.u256; } });
    Object.defineProperty(exports, "U256", { enumerable: true, get: function () { return U256_1.u256; } });
    Object.defineProperty(exports, "usize", { enumerable: true, get: function () { return USize_1.usize; } });
    Object.defineProperty(exports, "USize", { enumerable: true, get: function () { return USize_1.usize; } });
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/chain/index", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Type overrides based on specific nodes
    const typesChain = {};
    exports.default = typesChain;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/modules", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // type overrides for modules (where duplication between modules exist)
    const typesModules = {
        assets: {
            Balance: 'TAssetBalance'
        },
        babe: {
            EquivocationProof: 'BabeEquivocationProof'
        },
        balances: {
            Status: 'BalanceStatus'
        },
        contracts: {
            StorageKey: 'ContractStorageKey'
        },
        ethereum: {
            Block: 'EthBlock',
            Header: 'EthHeader',
            Receipt: 'EthReceipt',
            Transaction: 'EthTransaction',
            TransactionStatus: 'EthTransactionStatus'
        },
        evm: {
            Account: 'EvmAccount',
            Log: 'EvmLog',
            Vicinity: 'EvmVicinity'
        },
        grandpa: {
            Equivocation: 'GrandpaEquivocation',
            EquivocationProof: 'GrandpaEquivocationProof'
        },
        identity: {
            Judgement: 'IdentityJudgement'
        },
        parachains: {
            Id: 'ParaId'
        },
        proposeParachain: {
            Proposal: 'ParachainProposal'
        },
        proxy: {
            Announcement: 'ProxyAnnouncement'
        },
        society: {
            Judgement: 'SocietyJudgement',
            Vote: 'SocietyVote'
        },
        staking: {
            Compact: 'CompactAssignments'
        },
        treasury: {
            Proposal: 'TreasuryProposal'
        }
    };
    exports.default = typesModules;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/centrifuge-chain", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const sharedTypes = {
        // substrate
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'LookupSource',
        LookupSource: 'IndicesLookupSource',
        Multiplier: 'Fixed64',
        // Anchor
        AnchorData: {
            anchoredBlock: 'u64',
            docRoot: 'H256',
            id: 'H256'
        },
        PreCommitData: {
            expirationBlock: 'u64',
            identity: 'H256',
            signingRoot: 'H256'
        },
        // Fees
        Fee: {
            key: 'Hash',
            price: 'Balance'
        },
        // MultiAccount
        MultiAccountData: {
            deposit: 'Balance',
            depositor: 'AccountId',
            signatories: 'Vec<AccountId>',
            threshold: 'u16'
        },
        // Bridge
        ChainId: 'u8',
        DepositNonce: 'u64',
        ResourceId: '[u8; 32]',
        'chainbridge::ChainId': 'u8',
        // NFT
        RegistryId: 'H160',
        TokenId: 'U256',
        AssetId: {
            registryId: 'RegistryId',
            tokenId: 'TokenId'
        },
        AssetInfo: {
            metadata: 'Bytes'
        },
        MintInfo: {
            anchorId: 'Hash',
            proofs: 'Vec<ProofMint>',
            staticHashes: '[Hash; 3]'
        },
        Proof: {
            leafHash: 'H256',
            sortedHashes: 'H256'
        },
        ProofMint: {
            hashes: 'Vec<Hash>',
            property: 'Bytes',
            salt: '[u8; 32]',
            value: 'Bytes'
        },
        RegistryInfo: {
            fields: 'Vec<Bytes>',
            ownerCanBurn: 'bool'
        }
    };
    const versioned = [
        {
            minmax: [240, undefined],
            types: {
                ...sharedTypes,
                RefCount: 'RefCountTo259'
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/kusama", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const sharedTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        Keys: 'SessionKeys5',
        LookupSource: 'AccountId',
        ProxyType: {
            _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement']
        }
    };
    const indicesTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'LookupSource',
        LookupSource: 'IndicesLookupSource'
    };
    const versioned = [
        {
            // 1020 is first CC3
            minmax: [1019, 1031],
            types: {
                ...indicesTypes,
                BalanceLock: 'BalanceLockTo212',
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchError: 'DispatchErrorTo198',
                DispatchInfo: 'DispatchInfoTo244',
                Keys: 'SessionKeys5',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                RewardDestination: 'RewardDestinationTo257',
                SlashingSpans: 'SlashingSpansTo204',
                StakingLedger: 'StakingLedgerTo223',
                Votes: 'VotesTo230',
                Weight: 'u32'
            }
        },
        {
            minmax: [1032, 1042],
            types: {
                ...indicesTypes,
                BalanceLock: 'BalanceLockTo212',
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Keys: 'SessionKeys5',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                RewardDestination: 'RewardDestinationTo257',
                SlashingSpans: 'SlashingSpansTo204',
                StakingLedger: 'StakingLedgerTo223',
                Votes: 'VotesTo230',
                Weight: 'u32'
            }
        },
        {
            // actual at 1045 (1043-1044 is dev)
            minmax: [1043, 1045],
            types: {
                ...indicesTypes,
                BalanceLock: 'BalanceLockTo212',
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Keys: 'SessionKeys5',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                RewardDestination: 'RewardDestinationTo257',
                StakingLedger: 'StakingLedgerTo223',
                Votes: 'VotesTo230',
                Weight: 'u32'
            }
        },
        {
            minmax: [1046, 1054],
            types: {
                // Indices optional, not in transaction
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                RewardDestination: 'RewardDestinationTo257',
                StakingLedger: 'StakingLedgerTo240',
                Weight: 'u32'
            }
        },
        {
            minmax: [1055, 1056],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257',
                StakingLedger: 'StakingLedgerTo240',
                Weight: 'u32'
            }
        },
        {
            minmax: [1057, 1061],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [1062, 2012],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [2013, 2022],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [2023, 2024],
            types: {
                ...sharedTypes,
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [2025, undefined],
            types: {
                ...sharedTypes
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/node", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // these are override types for Polkadot
    const versioned = [
        {
            minmax: [0, 259],
            types: {
                AccountInfo: 'AccountInfoWithRefCount',
                Address: 'LookupSource',
                LookupSource: 'IndicesLookupSource'
            }
        },
        {
            minmax: [260, undefined],
            types: {
                AccountInfo: 'AccountInfoWithRefCount',
                Address: 'MultiAddress',
                LookupSource: 'MultiAddress'
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/node-template", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const versioned = [
        {
            minmax: [0, undefined],
            types: {
                Address: 'AccountId',
                LookupSource: 'AccountId'
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/polkadot", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const sharedTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        Keys: 'SessionKeys5',
        LookupSource: 'AccountId',
        ProxyType: {
            // was: SudoBalances
            _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'Unused', 'IdentityJudgement']
        }
    };
    // these are override types for Polkadot
    const versioned = [
        {
            minmax: [0, 12],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [13, 22],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [23, 24],
            types: {
                ...sharedTypes,
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [25, undefined],
            types: {
                ...sharedTypes
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/rococo", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // structs need to be in order
    /* eslint-disable sort-keys */
    const sharedTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        LookupSource: 'AccountId',
        Keys: 'SessionKeys6'
    };
    const versioned = [
        {
            minmax: [0, 9],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257',
                Keys: 'SessionKeys5'
            }
        },
        {
            minmax: [10, 12],
            types: {
                ...sharedTypes,
                Keys: 'SessionKeys5'
            }
        },
        {
            minmax: [13, 13],
            types: {
                ...sharedTypes,
                HostConfig: 'HostConfigurationTo13',
                HrmpChannel: 'HrmpChannelTo13'
            }
        },
        {
            minmax: [14, undefined],
            types: {
                ...sharedTypes
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/westend", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const sharedTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        Keys: 'SessionKeys5',
        LookupSource: 'AccountId',
        ProxyType: {
            // was: SudoBalances
            _enum: ['Any', 'NonTransfer', 'Staking', 'Unused', 'IdentityJudgement']
        }
    };
    const versioned = [
        {
            minmax: [1, 2],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257',
                Weight: 'u32'
            }
        },
        {
            minmax: [3, 22],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [23, 42],
            types: {
                ...sharedTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                RefCount: 'RefCountTo259',
                RewardDestination: 'RewardDestinationTo257'
            }
        },
        {
            minmax: [43, 44],
            types: {
                ...sharedTypes,
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [45, undefined],
            types: {
                ...sharedTypes
            }
        }
    ];
    exports.default = versioned;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/spec/index", ["require", "exports", "types-known/src/spec/centrifuge-chain", "types-known/src/spec/kusama", "types-known/src/spec/node", "types-known/src/spec/node-template", "types-known/src/spec/polkadot", "types-known/src/spec/rococo", "types-known/src/spec/westend"], function (require, exports, centrifuge_chain_1, kusama_1, node_1, node_template_1, polkadot_1, rococo_1, westend_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    centrifuge_chain_1 = __importDefault(centrifuge_chain_1);
    kusama_1 = __importDefault(kusama_1);
    node_1 = __importDefault(node_1);
    node_template_1 = __importDefault(node_template_1);
    polkadot_1 = __importDefault(polkadot_1);
    rococo_1 = __importDefault(rococo_1);
    westend_1 = __importDefault(westend_1);
    // Type overrides for specific spec types & versions as given in runtimeVersion
    const typesSpec = {
        'centrifuge-chain': centrifuge_chain_1.default,
        kusama: kusama_1.default,
        node: node_1.default,
        'node-template': node_template_1.default,
        polkadot: polkadot_1.default,
        rococo: rococo_1.default,
        westend: westend_1.default
    };
    exports.default = typesSpec;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/upgrades/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/upgrades/kusama", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const upgrades = {
        genesisHash: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
        versions: [
            [0, 1020], [26669, 1021], [38245, 1022], [54248, 1023], [59659, 1024],
            [67651, 1025], [82191, 1027], [83238, 1028], [101503, 1029], [203466, 1030],
            [295787, 1031], [461692, 1032], [504329, 1033], [569327, 1038], [587687, 1039],
            [653183, 1040], [693488, 1042], [901442, 1045], [1375086, 1050], [1445458, 1051],
            [1472960, 1052], [1475648, 1053], [1491596, 1054], [1574408, 1055], [2064961, 1058],
            [2201991, 1062], [2671528, 2005], [2704202, 2007], [2728002, 2008], [2832534, 2011],
            [2962294, 2012], [3240000, 2013], [3274408, 2015], [3323565, 2019], [3534175, 2022],
            [3860281, 2023], [4143129, 2024], [4401242, 2025], [4841367, 2026]
        ]
    };
    exports.default = upgrades;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/upgrades/polkadot", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const upgrades = {
        genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',
        versions: [
            [0, 0], [29231, 1], [188836, 5], [199405, 6], [214264, 7],
            [244358, 8], [303079, 9], [314201, 10], [342400, 11], [443963, 12],
            [528470, 13], [687751, 14], [746085, 15], [787923, 16], [799302, 17],
            [1205128, 18], [1603423, 23], [1733218, 24], [2005673, 25]
        ]
    };
    exports.default = upgrades;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/upgrades/westend", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const upgrades = {
        genesisHash: '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e',
        versions: [
            [214356, 4], [392764, 7], [409740, 8], [809976, 20], [877581, 24],
            [879238, 25], [889472, 26], [902937, 27], [932751, 28], [991142, 29],
            [1030162, 31], [1119657, 32], [1199282, 33], [1342534, 34], [1392263, 35],
            [1431703, 36], [1433369, 37], [1490972, 41], [2087397, 43], [2316688, 44],
            [2549864, 45], [3925782, 46], [3925843, 47]
        ]
    };
    exports.default = upgrades;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/upgrades/index", ["require", "exports", "bn.js", "@polkadot/util", "types-known/src/upgrades/kusama", "types-known/src/upgrades/polkadot", "types-known/src/upgrades/westend"], function (require, exports, bn_js_2, util_24, kusama_2, polkadot_2, westend_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_2 = __importDefault(bn_js_2);
    kusama_2 = __importDefault(kusama_2);
    polkadot_2 = __importDefault(polkadot_2);
    westend_2 = __importDefault(westend_2);
    /** @internal */
    function checkOrder(network, versions) {
        const ooo = versions.filter((curr, index) => {
            const prev = versions[index - 1];
            return index === 0
                ? false
                : curr[0] <= prev[0] || curr[1] <= prev[1];
        });
        util_24.assert(!ooo.length, `${network}: Mismatched upgrade ordering: ${JSON.stringify(ooo)}`);
        return versions;
    }
    /** @internal */
    function rawToFinal(network, { genesisHash, versions }) {
        return {
            genesisHash: util_24.hexToU8a(genesisHash),
            network,
            versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({
                blockNumber: new bn_js_2.default(blockNumber),
                specVersion: new bn_js_2.default(specVersion)
            }))
        };
    }
    // Type overrides for specific spec types & versions as given in runtimeVersion
    const upgrades = [
        rawToFinal('kusama', kusama_2.default),
        rawToFinal('polkadot', polkadot_2.default),
        rawToFinal('westend', westend_2.default)
    ];
    exports.default = upgrades;
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/index", ["require", "exports", "@polkadot/util", "types-known/src/chain/index", "types-known/src/modules", "types-known/src/spec/index", "types-known/src/upgrades/index"], function (require, exports, util_25, chain_1, modules_1, spec_1, upgrades_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpgradeVersion = exports.getSpecAlias = exports.getSpecRpc = exports.getSpecTypes = exports.getModuleTypes = void 0;
    chain_1 = __importDefault(chain_1);
    modules_1 = __importDefault(modules_1);
    spec_1 = __importDefault(spec_1);
    upgrades_1 = __importDefault(upgrades_1);
    // flatten a VersionedType[] into a Record<string, string>
    /** @internal */
    function filterVersions(versions = [], specVersion) {
        return versions
            .filter(({ minmax: [min, max] }) => (util_25.isUndefined(min) || specVersion >= min) &&
            (util_25.isUndefined(max) || specVersion <= max))
            .reduce((result, { types }) => ({
            ...result,
            ...types
        }), {});
    }
    /**
     * @description Get types for specific modules (metadata override)
     */
    function getModuleTypes({ knownTypes }, section) {
        return {
            ...(modules_1.default[section] || {}),
            ...(knownTypes.typesAlias?.[section] || {})
        };
    }
    exports.getModuleTypes = getModuleTypes;
    /**
     * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
     */
    function getSpecTypes({ knownTypes }, chainName, specName, specVersion) {
        const _chainName = chainName.toString();
        const _specName = specName.toString();
        const _specVersion = util_25.bnToBn(specVersion).toNumber();
        // The order here is always, based on -
        //   - spec then chain
        //   - typesBundle takes higher precedence
        //   - types is the final catch-all override
        return {
            ...filterVersions(spec_1.default[_specName], _specVersion),
            ...filterVersions(chain_1.default[_chainName], _specVersion),
            ...filterVersions(knownTypes.typesBundle?.spec?.[_specName]?.types, _specVersion),
            ...filterVersions(knownTypes.typesBundle?.chain?.[_chainName]?.types, _specVersion),
            ...(knownTypes.typesSpec?.[_specName] || {}),
            ...(knownTypes.typesChain?.[_chainName] || {}),
            ...(knownTypes.types || {})
        };
    }
    exports.getSpecTypes = getSpecTypes;
    /**
     * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
     */
    function getSpecRpc({ knownTypes }, chainName, specName) {
        const _chainName = chainName.toString();
        const _specName = specName.toString();
        return {
            ...(knownTypes.typesBundle?.spec?.[_specName]?.rpc || {}),
            ...(knownTypes.typesBundle?.chain?.[_chainName]?.rpc || {})
        };
    }
    exports.getSpecRpc = getSpecRpc;
    /**
     * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
     */
    function getSpecAlias({ knownTypes }, chainName, specName) {
        const _chainName = chainName.toString();
        const _specName = specName.toString();
        // as per versions, first spec, then chain then finally non-versioned
        return {
            ...(knownTypes.typesBundle?.spec?.[_specName]?.alias || {}),
            ...(knownTypes.typesBundle?.chain?.[_chainName]?.alias || {}),
            ...(knownTypes.typesAlias || {})
        };
    }
    exports.getSpecAlias = getSpecAlias;
    /**
     * @description Returns a version record for known chains where upgrades are being tracked
     */
    function getUpgradeVersion(genesisHash, blockNumber) {
        const known = upgrades_1.default.find((u) => genesisHash.eq(u.genesisHash));
        return known
            ? [
                known.versions.reduce((last, version) => {
                    return blockNumber.gt(version.blockNumber)
                        ? version
                        : last;
                }, undefined),
                known.versions.find((version) => blockNumber.lte(version.blockNumber))
            ]
            : [undefined, undefined];
    }
    exports.getUpgradeVersion = getUpgradeVersion;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v12/toLatest", ["require", "exports", "types-known/src/index", "@polkadot/util"], function (require, exports, types_known_1, util_26) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toLatest = void 0;
    // Since we don't have insight into the origin specification, we can only define what we know about
    // in a pure Substrate/Polkadot implementation, any other custom origins won't be handled at all
    const KNOWN_ORIGINS = {
        Council: 'CollectiveOrigin',
        System: 'SystemOrigin',
        TechnicalCommittee: 'CollectiveOrigin'
    };
    /**
     * Find and apply the correct type override
     * @internal
     **/
    function setTypeOverride(sectionTypes, type) {
        const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
        if (override) {
            type.setOverride(sectionTypes[override]);
        }
        else {
            // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
            const orig = type.toString();
            const alias = Object.entries(sectionTypes).reduce((result, [from, to]) => [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']].reduce((result, [one, two]) => result.replace(`${one}${from}${two}`, `${one}${to}${two}`), result), orig);
            if (orig !== alias) {
                type.setOverride(alias);
            }
        }
    }
    /**
     * Apply module-specific type overrides (always be done as part of toLatest)
     * @internal
     **/
    function convertCalls(registry, calls, sectionTypes) {
        return calls.map((c) => {
            c.args.forEach(({ type }) => setTypeOverride(sectionTypes, type));
            return registry.createType('FunctionMetadataLatest', c);
        });
    }
    /**
     * Apply module-specific type overrides (always be done as part of toLatest)
     * @internal
     */
    function convertConstants(registry, constants, sectionTypes) {
        return constants.map((c) => {
            setTypeOverride(sectionTypes, c.type);
            return registry.createType('ModuleConstantMetadataLatest', c);
        });
    }
    /**
     * Apply module-specific type overrides (always be done as part of toLatest)
     * @internal
     **/
    function convertEvents(registry, events, sectionTypes) {
        return events.map((e) => {
            e.args.forEach((type) => setTypeOverride(sectionTypes, type));
            return registry.createType('EventMetadataLatest', e);
        });
    }
    /**
     * Apply module-specific storage type overrides (always part of toLatest)
     * @internal
     **/
    function convertStorage(registry, { items, prefix }, sectionTypes) {
        return registry.createType('StorageMetadataLatest', {
            items: items.map((s) => {
                let resultType;
                if (s.type.isMap) {
                    resultType = s.type.asMap.value;
                }
                else if (s.type.isDoubleMap) {
                    resultType = s.type.asDoubleMap.value;
                }
                else {
                    resultType = s.type.asPlain;
                }
                setTypeOverride(sectionTypes, resultType);
                return registry.createType('StorageEntryMetadataLatest', s);
            }),
            prefix
        });
    }
    // generate & register the OriginCaller type
    function registerOriginCaller(registry, modules, metaVersion) {
        registry.register({
            OriginCaller: {
                _enum: modules
                    .map((mod, index) => [
                    mod.name.toString(),
                    metaVersion >= 12 ? mod.index.toNumber() : index
                ])
                    .sort((a, b) => a[1] - b[1])
                    .reduce((result, [name, index]) => {
                    for (let i = Object.keys(result).length; i < index; i++) {
                        result[`Empty${i}`] = 'Null';
                    }
                    result[name] = KNOWN_ORIGINS[name] || 'Null';
                    return result;
                }, {})
            }
        });
    }
    /** @internal */
    function createModule(registry, mod, { calls, constants, events, storage }) {
        const sectionTypes = types_known_1.getModuleTypes(registry, util_26.stringCamelCase(mod.name));
        return registry.createType('ModuleMetadataLatest', {
            ...mod,
            calls: calls && convertCalls(registry, calls, sectionTypes),
            constants: convertConstants(registry, constants, sectionTypes),
            events: events && convertEvents(registry, events, sectionTypes),
            storage: storage && convertStorage(registry, storage, sectionTypes)
        });
    }
    /**
     * Convert the Metadata (which is an alias) to latest - effectively this _always_ get applied to the top-level &
     * most-recent metadata, since it allows us a chance to actually apply call and storage specific type aliasses
     * @internal
     **/
    function toLatest(registry, { extrinsic, modules }, metaVersion) {
        registerOriginCaller(registry, modules, metaVersion);
        return registry.createType('MetadataLatest', {
            extrinsic,
            modules: modules.map((mod) => createModule(registry, mod, {
                calls: mod.calls.unwrapOr(null),
                constants: mod.constants,
                events: mod.events.unwrapOr(null),
                storage: mod.storage.unwrapOr(null)
            }))
        });
    }
    exports.toLatest = toLatest;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/MagicNumber", ["require", "exports", "types/src/primitive/index", "@polkadot/util"], function (require, exports, primitive_1, util_27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MagicNumber = exports.MAGIC_NUMBER = void 0;
    exports.MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding
    class MagicNumber extends primitive_1.U32 {
        constructor(registry, value) {
            super(registry, value);
            if (!this.isEmpty) {
                const magic = registry.createType('u32', exports.MAGIC_NUMBER);
                util_27.assert(this.eq(magic), `MagicNumber mismatch: expected ${magic.toHex()}, found ${this.toHex()}`);
            }
        }
    }
    exports.MagicNumber = MagicNumber;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/flattenUniq", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flattenUniq = void 0;
    /** @internal */
    function flattenUniq(list) {
        const flat = list.reduce((result, entry) => {
            return result.concat(Array.isArray(entry)
                ? flattenUniq(entry)
                : entry);
        }, []);
        return [...new Set(flat)]
            .filter((value) => value)
            .sort();
    }
    exports.flattenUniq = flattenUniq;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/typeSplit", ["require", "exports", "@polkadot/util"], function (require, exports, util_28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typeSplit = void 0;
    function isNotNested(...counters) {
        return !counters.some((counter) => counter !== 0);
    }
    // safely split a string on ', ' while taking care of any nested occurences
    function typeSplit(type) {
        let [cDepth, fDepth, sDepth, tDepth, start] = [0, 0, 0, 0, 0];
        const result = [];
        const extract = (index) => {
            if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {
                result.push(type.substr(start, index - start).trim());
                start = index + 1;
            }
        };
        for (let index = 0; index < type.length; index++) {
            switch (type[index]) {
                // if we are not nested, add the type
                case ',':
                    extract(index);
                    break;
                // adjust compact/vec (and friends) depth
                case '<':
                    cDepth++;
                    break;
                case '>':
                    cDepth--;
                    break;
                // adjust fixed vec depths
                case '[':
                    fDepth++;
                    break;
                case ']':
                    fDepth--;
                    break;
                // adjust struct depth
                case '{':
                    sDepth++;
                    break;
                case '}':
                    sDepth--;
                    break;
                // adjust tuple depth
                case '(':
                    tDepth++;
                    break;
                case ')':
                    tDepth--;
                    break;
            }
        }
        util_28.assert(isNotNested(cDepth, fDepth, sDepth, tDepth), `Invalid definition (missing terminators) found in ${type}`);
        // the final leg of the journey
        result.push(type.substr(start, type.length - start).trim());
        return result;
    }
    exports.typeSplit = typeSplit;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/getTypeDef", ["require", "exports", "@polkadot/util", "types/src/create/sanitize", "types/src/create/types", "types/src/create/typeSplit"], function (require, exports, util_29, sanitize_2, types_97, typeSplit_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTypeDef = void 0;
    const MAX_NESTED = 64;
    // decode an enum of either of the following forms
    //  { _enum: ['A', 'B', 'C'] }
    //  { _enum: { A: AccountId, B: Balance, C: u32 } }
    function _decodeEnum(value, details, count) {
        value.info = types_97.TypeDefInfo.Enum;
        // not as pretty, but remain compatible with oo7 for both struct and Array types
        value.sub = Array.isArray(details)
            ? details.map((name) => ({
                info: types_97.TypeDefInfo.Plain,
                name,
                type: 'Null'
            }))
            : Object.entries(details).map(([name, type]) => 
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            getTypeDef(type || 'Null', { name }, count));
        return value;
    }
    // decode a set of the form
    //   { _set: { A: 0b0001, B: 0b0010, C: 0b0100 } }
    function _decodeSet(value, details) {
        value.info = types_97.TypeDefInfo.Set;
        value.length = details._bitLength;
        value.sub = Object
            .entries(details)
            .filter(([name]) => !name.startsWith('_'))
            .map(([name, index]) => ({
            index,
            info: types_97.TypeDefInfo.Plain,
            name,
            type: name
        }));
        return value;
    }
    // decode a struct, set or enum
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function _decodeStruct(value, type, _, count) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const parsed = JSON.parse(type);
        const keys = Object.keys(parsed);
        if (keys.length === 1 && keys[0] === '_enum') {
            return _decodeEnum(value, parsed[keys[0]], count);
        }
        else if (keys.length === 1 && keys[0] === '_set') {
            return _decodeSet(value, parsed[keys[0]]);
        }
        value.alias = parsed._alias
            ? new Map(Object.entries(parsed._alias))
            : undefined;
        value.sub = keys.filter((name) => !['_alias'].includes(name)).map((name) => 
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        getTypeDef(parsed[name], { name }, count));
        return value;
    }
    // decode a fixed vector, e.g. [u8;32]
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function _decodeFixedVec(value, type, _, count) {
        const [vecType, strLength, displayName] = type.substr(1, type.length - 2).split(';');
        const length = parseInt(strLength.trim(), 10);
        // as a first round, only u8 via u8aFixed, we can add more support
        util_29.assert(length <= 256, `${type}: Only support for [Type; <length>], where length <= 256`);
        value.displayName = displayName;
        value.length = length;
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        value.sub = getTypeDef(vecType, {}, count);
        return value;
    }
    // decode a tuple
    function _decodeTuple(value, _, subType, count) {
        value.sub = subType.length === 0
            ? []
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            : typeSplit_1.typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
        return value;
    }
    // decode a Int/UInt<bitLength[, name]>
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function _decodeAnyInt(value, type, _, clazz) {
        const [strLength, displayName] = type.substr(clazz.length + 1, type.length - clazz.length - 1 - 1).split(',');
        const length = parseInt(strLength.trim(), 10);
        // as a first round, only u8 via u8aFixed, we can add more support
        util_29.assert(length <= 8192 && (length % 8) === 0, `${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
        value.displayName = displayName;
        value.length = length;
        return value;
    }
    function _decodeInt(value, type, subType) {
        return _decodeAnyInt(value, type, subType, 'Int');
    }
    function _decodeUInt(value, type, subType) {
        return _decodeAnyInt(value, type, subType, 'UInt');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function _decodeDoNotConstruct(value, type, _) {
        const NAME_LENGTH = 'DoNotConstruct'.length;
        value.displayName = type.substr(NAME_LENGTH + 1, type.length - NAME_LENGTH - 1 - 1);
        return value;
    }
    function hasWrapper(type, [start, end]) {
        return (type.substr(0, start.length) === start) && (type.substr(-1 * end.length) === end);
    }
    const nestedExtraction = [
        ['[', ']', types_97.TypeDefInfo.VecFixed, _decodeFixedVec],
        ['{', '}', types_97.TypeDefInfo.Struct, _decodeStruct],
        ['(', ')', types_97.TypeDefInfo.Tuple, _decodeTuple],
        // the inner for these are the same as tuple, multiple values
        ['BTreeMap<', '>', types_97.TypeDefInfo.BTreeMap, _decodeTuple],
        ['HashMap<', '>', types_97.TypeDefInfo.HashMap, _decodeTuple],
        ['Int<', '>', types_97.TypeDefInfo.Int, _decodeInt],
        ['Result<', '>', types_97.TypeDefInfo.Result, _decodeTuple],
        ['UInt<', '>', types_97.TypeDefInfo.UInt, _decodeUInt],
        ['DoNotConstruct<', '>', types_97.TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
    ];
    const wrappedExtraction = [
        ['BTreeSet<', '>', types_97.TypeDefInfo.BTreeSet],
        ['Compact<', '>', types_97.TypeDefInfo.Compact],
        ['Linkage<', '>', types_97.TypeDefInfo.Linkage],
        ['Option<', '>', types_97.TypeDefInfo.Option],
        ['Vec<', '>', types_97.TypeDefInfo.Vec]
    ];
    function extractSubType(type, [start, end]) {
        return type.substr(start.length, type.length - start.length - end.length);
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    function getTypeDef(_type, { displayName, name } = {}, count = 0) {
        // create the type via Type, allowing types to be sanitized
        const type = sanitize_2.sanitize(_type);
        const value = { displayName, info: types_97.TypeDefInfo.Plain, name, type };
        util_29.assert(++count !== MAX_NESTED, 'getTypeDef: Maximum nested limit reached');
        const nested = nestedExtraction.find((nested) => hasWrapper(type, nested));
        if (nested) {
            value.info = nested[2];
            return nested[3](value, type, extractSubType(type, nested), count);
        }
        const wrapped = wrappedExtraction.find((wrapped) => hasWrapper(type, wrapped));
        if (wrapped) {
            value.info = wrapped[2];
            value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
        }
        return value;
    }
    exports.getTypeDef = getTypeDef;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/extractTypes", ["require", "exports", "types/src/create/getTypeDef", "types/src/types/index"], function (require, exports, getTypeDef_1, types_98) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractTypes = void 0;
    /** @internal */
    function extractTypes(types) {
        return types.map((type) => {
            const decoded = getTypeDef_1.getTypeDef(type);
            switch (decoded.info) {
                case types_98.TypeDefInfo.Plain:
                    return decoded.type;
                case types_98.TypeDefInfo.BTreeSet:
                case types_98.TypeDefInfo.Compact:
                case types_98.TypeDefInfo.Option:
                case types_98.TypeDefInfo.Vec:
                case types_98.TypeDefInfo.VecFixed:
                    return extractTypes([decoded.sub.type]);
                case types_98.TypeDefInfo.BTreeMap:
                case types_98.TypeDefInfo.HashMap:
                case types_98.TypeDefInfo.Result:
                case types_98.TypeDefInfo.Tuple:
                    return extractTypes(decoded.sub.map(({ type }) => type));
                default:
                    throw new Error(`Unhandled: Unable to create and validate type from ${type}`);
            }
        });
    }
    exports.extractTypes = extractTypes;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/validateTypes", ["require", "exports", "@polkadot/util", "metadata/src/util/extractTypes", "metadata/src/util/flattenUniq"], function (require, exports, util_30, extractTypes_1, flattenUniq_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTypes = void 0;
    const l = util_30.logger('metadata');
    /** @internal */
    function validateTypes(registry, types, throwError) {
        const missing = flattenUniq_1.flattenUniq(extractTypes_1.extractTypes(types)).filter((type) => !registry.hasType(type));
        if (missing.length !== 0) {
            const message = `Unknown types found, no types for ${missing.join(', ')}`;
            if (throwError) {
                throw new Error(message);
            }
            else {
                l.warn(message);
            }
        }
    }
    exports.validateTypes = validateTypes;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/getUniqTypes", ["require", "exports", "metadata/src/util/flattenUniq", "metadata/src/util/validateTypes"], function (require, exports, flattenUniq_2, validateTypes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUniqTypes = void 0;
    /** @internal */
    function unwrapCalls(mod) {
        return mod.calls
            ? mod.calls.unwrapOr([])
            // V0
            : mod.module
                ? mod.module.call.functions
                : [];
    }
    /** @internal */
    function getCallNames({ modules }) {
        return modules.map((mod) => unwrapCalls(mod).map(({ args }) => args.map((arg) => arg.type.toString())));
    }
    /** @internal */
    function getConstantNames({ modules }) {
        return modules.map(({ constants }) => constants
            ? constants.map((constant) => constant.type.toString())
            : []);
    }
    /** @internal */
    function unwrapEvents(events) {
        if (!events) {
            return [];
        }
        return events.unwrapOr([]);
    }
    /** @internal */
    function getEventNames({ modules, outerEvent }) {
        const mapArg = ({ args }) => args.map((arg) => arg.toString());
        // V0
        if (outerEvent) {
            return outerEvent.events.map(([, events]) => events.map(mapArg));
        }
        // V1+
        return modules.map(({ events }) => unwrapEvents(events).map(mapArg));
    }
    /** @internal */
    function unwrapStorage(storage) {
        if (!storage) {
            return [];
        }
        const data = storage.unwrapOr([]);
        return Array.isArray(data)
            ? data
            : (data.items || data.functions);
    }
    /** @internal */
    function getStorageNames({ modules }) {
        return modules.map(({ storage }) => unwrapStorage(storage).map(({ type }) => {
            if (type.isDoubleMap && type.asDoubleMap) {
                return [
                    type.asDoubleMap.key1.toString(),
                    type.asDoubleMap.key2.toString(),
                    type.asDoubleMap.value.toString()
                ];
            }
            else if (type.isMap) {
                return [
                    type.asMap.key.toString(),
                    type.asMap.value.toString()
                ];
            }
            else {
                return [
                    type.asPlain.toString()
                ];
            }
        }));
    }
    /** @internal */
    function getUniqTypes(registry, meta, throwError) {
        const types = flattenUniq_2.flattenUniq([
            getCallNames(meta),
            getConstantNames(meta),
            getEventNames(meta),
            getStorageNames(meta)
        ]);
        validateTypes_1.validateTypes(registry, types, throwError);
        return types;
    }
    exports.getUniqTypes = getUniqTypes;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/toCallsOnly", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCallsOnly = void 0;
    function trimDocs(documentation) {
        const strings = documentation.map((doc) => doc.toString().trim());
        const firstEmpty = strings.findIndex((doc) => !doc.length);
        return firstEmpty === -1
            ? strings
            : strings.slice(0, firstEmpty);
    }
    function mapCalls(registry, _calls) {
        const calls = _calls.unwrapOr(null);
        return registry.createType('Option<Vec<FunctionMetadataLatest>>', calls
            ? calls.map(({ args, documentation, name }) => registry.createType('FunctionMetadataLatest', {
                args,
                documentation: trimDocs(documentation),
                name
            }))
            : null);
    }
    /** @internal */
    function toCallsOnly(registry, { extrinsic, modules }) {
        return registry.createType('MetadataLatest', {
            extrinsic,
            modules: modules.map(({ calls, index, name }) => ({
                calls: mapCalls(registry, calls),
                index,
                name
            }))
        }).toJSON();
    }
    exports.toCallsOnly = toCallsOnly;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/index", ["require", "exports", "metadata/src/util/flattenUniq", "metadata/src/util/getUniqTypes", "metadata/src/util/toCallsOnly", "metadata/src/util/validateTypes"], function (require, exports, flattenUniq_3, getUniqTypes_1, toCallsOnly_1, validateTypes_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTypes = exports.toCallsOnly = exports.getUniqTypes = exports.flattenUniq = void 0;
    Object.defineProperty(exports, "flattenUniq", { enumerable: true, get: function () { return flattenUniq_3.flattenUniq; } });
    Object.defineProperty(exports, "getUniqTypes", { enumerable: true, get: function () { return getUniqTypes_1.getUniqTypes; } });
    Object.defineProperty(exports, "toCallsOnly", { enumerable: true, get: function () { return toCallsOnly_1.toCallsOnly; } });
    Object.defineProperty(exports, "validateTypes", { enumerable: true, get: function () { return validateTypes_2.validateTypes; } });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/MetadataVersioned", ["require", "exports", "types/src/codec/index", "@polkadot/util", "metadata/src/v9/toV10", "metadata/src/v10/toV11", "metadata/src/v11/toV12", "metadata/src/v12/toLatest", "metadata/src/MagicNumber", "metadata/src/util/index"], function (require, exports, codec_1, util_31, toV10_1, toV11_1, toV12_1, toLatest_1, MagicNumber_1, util_32) {
    "use strict";
    var _converted;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataVersioned = void 0;
    /**
     * @name MetadataVersioned
     * @description
     * The versioned runtime metadata as a decoded structure
     */
    class MetadataVersioned extends codec_1.Struct {
        constructor(registry, value) {
            super(registry, {
                magicNumber: MagicNumber_1.MagicNumber,
                metadata: 'MetadataAll'
            }, value);
            _converted.set(this, new Map());
        }
        _assertVersion(version) {
            util_31.assert(this.version <= version, `Cannot convert metadata from v${this.version} to v${version}`);
            return this.version === version;
        }
        _getVersion(version, fromPrev) {
            const asCurr = `asV${version}`;
            const asPrev = `asV${version - 1}`;
            if (this._assertVersion(version)) {
                return this._metadata[asCurr];
            }
            if (!__classPrivateFieldGet(this, _converted).has(version)) {
                __classPrivateFieldGet(this, _converted).set(version, fromPrev(this.registry, this[asPrev], this.version));
            }
            return __classPrivateFieldGet(this, _converted).get(version);
        }
        /**
         * @description Returns the wrapped metadata as a limited calls-only (latest) version
         */
        get asCallsOnly() {
            return new MetadataVersioned(this.registry, {
                magicNumber: this.magicNumber,
                metadata: this.registry.createType('MetadataAll', util_32.toCallsOnly(this.registry, this.asLatest), this.version)
            });
        }
        /**
         * @description Returns the wrapped metadata as a V9 object
         */
        get asV9() {
            this._assertVersion(9);
            return this._metadata.asV9;
        }
        /**
         * @description Returns the wrapped values as a V10 object
         */
        get asV10() {
            return this._getVersion(10, toV10_1.toV10);
        }
        /**
         * @description Returns the wrapped values as a V11 object
         */
        get asV11() {
            return this._getVersion(11, toV11_1.toV11);
        }
        /**
         * @description Returns the wrapped values as a V12 object
         */
        get asV12() {
            return this._getVersion(12, toV12_1.toV12);
        }
        /**
         * @description Returns the wrapped values as a latest version object
         */
        get asLatest() {
            // This is non-existent & latest - applied here to do the module-specific type conversions
            return this._getVersion(13, toLatest_1.toLatest);
        }
        /**
         * @description
         */
        get magicNumber() {
            return this.get('magicNumber');
        }
        /**
         * @description the metadata wrapped
         */
        get _metadata() {
            return this.get('metadata');
        }
        /**
         * @description the metadata version this structure represents
         */
        get version() {
            return this._metadata.index;
        }
        getUniqTypes(throwError) {
            return util_32.getUniqTypes(this.registry, this.asLatest, throwError);
        }
    }
    exports.MetadataVersioned = MetadataVersioned;
    _converted = new WeakMap();
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/Metadata", ["require", "exports", "@polkadot/util", "metadata/src/MetadataVersioned"], function (require, exports, util_33, MetadataVersioned_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Metadata = void 0;
    // magic u32 preceding the version id
    const VERSION_IDX = 4;
    // magic + lowest supported version
    const EMPTY_METADATA = util_33.u8aConcat(new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]));
    const EMPTY_U8A = new Uint8Array();
    function sanitizeInput(_value = EMPTY_U8A) {
        if (util_33.isString(_value)) {
            return sanitizeInput(util_33.u8aToU8a(_value));
        }
        return _value.length === 0
            ? EMPTY_METADATA
            : _value;
    }
    function decodeMetadata(registry, _value) {
        const value = sanitizeInput(_value);
        const version = value[VERSION_IDX];
        try {
            return new MetadataVersioned_1.MetadataVersioned(registry, value);
        }
        catch (error) {
            // This is an f-ing hack as a follow-up to another ugly hack
            // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
            // when we fail on V9, try to re-parse it as v10... yes... HACK
            if (version === 9) {
                value[VERSION_IDX] = 10;
                return decodeMetadata(registry, value);
            }
            throw error;
        }
    }
    /**
     * @name Metadata
     * @description
     * The versioned runtime metadata as a decoded structure
     */
    class Metadata extends MetadataVersioned_1.MetadataVersioned {
        constructor(registry, value) {
            super(registry, decodeMetadata(registry, value));
        }
    }
    exports.Metadata = Metadata;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/constants/index", ["require", "exports", "@polkadot/util"], function (require, exports, util_34) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateConstants = void 0;
    /** @internal */
    function decorateConstants(registry, { modules }) {
        return modules.reduce((result, { constants, name }) => {
            if (constants.isEmpty) {
                return result;
            }
            // For access, we change the index names, i.e. Democracy.EnactmentPeriod -> democracy.enactmentPeriod
            result[util_34.stringCamelCase(name)] = constants.reduce((newModule, meta) => {
                // convert to the natural type as received
                const type = meta.type.toString();
                const codec = registry.createType(type, util_34.hexToU8a(meta.value.toHex()));
                codec.meta = meta;
                newModule[util_34.stringCamelCase(meta.name)] = codec;
                return newModule;
            }, {});
            return result;
        }, {});
    }
    exports.decorateConstants = decorateConstants;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/errors/index", ["require", "exports", "@polkadot/util"], function (require, exports, util_35) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateErrors = void 0;
    function isError({ error, index }, sectionIndex, errorIndex) {
        return index.eq(sectionIndex) && error.eq(errorIndex);
    }
    /** @internal */
    function decorateErrors(_, { modules }, metaVersion) {
        return modules.reduce((result, { errors, index, name }, _sectionIndex) => {
            if (!errors.length) {
                return result;
            }
            const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
            result[util_35.stringCamelCase(name)] = errors.reduce((newModule, meta, errorIndex) => {
                // we don't camelCase the error name
                newModule[meta.name.toString()] = {
                    is: (moduleError) => isError(moduleError, sectionIndex, errorIndex),
                    meta
                };
                return newModule;
            }, {});
            return result;
        }, {});
    }
    exports.decorateErrors = decorateErrors;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/events/index", ["require", "exports", "@polkadot/util"], function (require, exports, util_36) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateEvents = void 0;
    function isEvent(event, sectionIndex, eventIndex) {
        return event.index[0] === sectionIndex && event.index[1] === eventIndex;
    }
    /** @internal */
    function decorateEvents(_, { modules }, metaVersion) {
        return modules
            .filter(({ events }) => events.isSome)
            .reduce((result, { events, index, name }, _sectionIndex) => {
            const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
            result[util_36.stringCamelCase(name)] = events.unwrap().reduce((newModule, meta, eventIndex) => {
                // we don't camelCase the event name
                newModule[meta.name.toString()] = {
                    is: (eventRecord) => isEvent(eventRecord, sectionIndex, eventIndex),
                    meta
                };
                return newModule;
            }, {});
            return result;
        }, {});
    }
    exports.decorateEvents = decorateEvents;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/extrinsics/createUnchecked", ["require", "exports", "@polkadot/util"], function (require, exports, util_37) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnchecked = void 0;
    function isTx(tx, callIndex) {
        return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
    }
    /** @internal */
    function createUnchecked(registry, section, callIndex, callMetadata) {
        const expectedArgs = callMetadata.args;
        const funcName = util_37.stringCamelCase(callMetadata.name);
        const extrinsicFn = (...args) => {
            util_37.assert(expectedArgs.length === args.length, `Extrinsic ${section}.${funcName} expects ${expectedArgs.length.valueOf()} arguments, got ${args.length}.`);
            return registry.createType('Call', {
                args,
                callIndex
            }, callMetadata);
        };
        extrinsicFn.is = (tx) => isTx(tx, callIndex);
        extrinsicFn.callIndex = callIndex;
        extrinsicFn.meta = callMetadata;
        extrinsicFn.method = funcName;
        extrinsicFn.section = section;
        extrinsicFn.toJSON = () => callMetadata.toJSON();
        return extrinsicFn;
    }
    exports.createUnchecked = createUnchecked;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/extrinsics/index", ["require", "exports", "@polkadot/util", "metadata/src/decorate/extrinsics/createUnchecked"], function (require, exports, util_38, createUnchecked_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateExtrinsics = void 0;
    /** @internal */
    function decorateExtrinsics(registry, { modules }, metaVersion) {
        return modules
            .filter(({ calls }) => calls.isSome)
            .reduce((result, { calls, index, name }, _sectionIndex) => {
            const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
            const section = util_38.stringCamelCase(name);
            result[section] = calls.unwrap().reduce((newModule, callMetadata, methodIndex) => {
                newModule[util_38.stringCamelCase(callMetadata.name)] = createUnchecked_1.createUnchecked(registry, section, new Uint8Array([sectionIndex, methodIndex]), callMetadata);
                return newModule;
            }, {});
            return result;
        }, {});
    }
    exports.decorateExtrinsics = decorateExtrinsics;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/getHasher", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto"], function (require, exports, util_39, util_crypto_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHasher = void 0;
    const DEFAULT_FN = (data) => util_crypto_1.xxhashAsU8a(data, 128);
    const HASHERS = {
        Blake2_128: (data) => // eslint-disable-line camelcase
         util_crypto_1.blake2AsU8a(data, 128),
        Blake2_128Concat: (data) => // eslint-disable-line camelcase
         util_39.u8aConcat(util_crypto_1.blake2AsU8a(data, 128), util_39.u8aToU8a(data)),
        Blake2_256: (data) => // eslint-disable-line camelcase
         util_crypto_1.blake2AsU8a(data, 256),
        Identity: (data) => util_39.u8aToU8a(data),
        Twox128: (data) => util_crypto_1.xxhashAsU8a(data, 128),
        Twox256: (data) => util_crypto_1.xxhashAsU8a(data, 256),
        Twox64Concat: (data) => util_39.u8aConcat(util_crypto_1.xxhashAsU8a(data, 64), util_39.u8aToU8a(data))
    };
    /** @internal */
    function getHasher(hasher) {
        return HASHERS[hasher?.type] || DEFAULT_FN;
    }
    exports.getHasher = getHasher;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/createFunction", ["require", "exports", "types/src/codec/index", "@polkadot/util", "@polkadot/util-crypto", "metadata/src/decorate/storage/getHasher"], function (require, exports, codec_2, util_40, util_crypto_2, getHasher_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFunction = void 0;
    const EMPTY_U8A = new Uint8Array([]);
    const NULL_HASHER = (value) => value;
    // get the hashers, the base (and  in the case of DoubleMap), the second key
    /** @internal */
    function getHashers({ meta: { type } }) {
        if (type.isDoubleMap) {
            return [
                getHasher_1.getHasher(type.asDoubleMap.hasher),
                getHasher_1.getHasher(type.asDoubleMap.key2Hasher)
            ];
        }
        else if (type.isMap) {
            return [getHasher_1.getHasher(type.asMap.hasher)];
        }
        // the default
        return [getHasher_1.getHasher()];
    }
    // create a base prefixed key
    /** @internal */
    function createPrefixedKey({ method, prefix }) {
        return util_40.u8aConcat(util_crypto_2.xxhashAsU8a(prefix, 128), util_crypto_2.xxhashAsU8a(method, 128));
    }
    // create a key for a DoubleMap type
    /** @internal */
    function createKeyDoubleMap(registry, itemFn, args, [hasher1, hasher2]) {
        const { meta: { name, type } } = itemFn;
        // since we are passing an almost-unknown through, trust, but verify
        util_40.assert(Array.isArray(args) && !util_40.isUndefined(args[0]) && !util_40.isNull(args[0]) && !util_40.isUndefined(args[1]) && !util_40.isNull(args[1]), `${(name || 'unknown').toString()} is a DoubleMap and requires two arguments`);
        // if this fails, we have bigger issues
        util_40.assert(!util_40.isUndefined(hasher2), '2 hashing functions should be defined for DoubleMaps');
        const [key1, key2] = args;
        const map = type.asDoubleMap;
        const val1 = registry.createType(map.key1.toString(), key1).toU8a();
        const val2 = registry.createType(map.key2.toString(), key2).toU8a();
        // as per createKey, always add the length prefix (underlying it is Bytes)
        return util_40.compactAddLength(util_40.u8aConcat(createPrefixedKey(itemFn), hasher1(val1), hasher2(val2)));
    }
    // create a key for either a map or a plain value
    /** @internal */
    function createKey(registry, itemFn, arg, hasher) {
        const { meta: { name, type } } = itemFn;
        let param = EMPTY_U8A;
        if (type.isMap) {
            const map = type.asMap;
            util_40.assert(!util_40.isUndefined(arg) && !util_40.isNull(arg), `${name.toString()} is a Map and requires one argument`);
            param = registry.createType(map.key.toString(), arg).toU8a();
        }
        // StorageKey is a Bytes, so is length-prefixed
        return util_40.compactAddLength(util_40.u8aConcat(createPrefixedKey(itemFn), param.length
            ? hasher(param)
            : EMPTY_U8A));
    }
    // attach the metadata to expand to a StorageFunction
    /** @internal */
    function expandWithMeta({ meta, method, prefix, section }, _storageFn) {
        const storageFn = _storageFn;
        storageFn.meta = meta;
        storageFn.method = util_40.stringLowerFirst(method);
        storageFn.prefix = prefix;
        storageFn.section = section;
        // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
        // instances (e.g. collective) will not work since it is only matched on param meta
        storageFn.toJSON = () => ({
            ...meta.toJSON(),
            storage: { method, prefix, section }
        });
        return storageFn;
    }
    /** @internal */
    function extendHeadMeta(registry, { meta: { documentation, name, type }, section }, { method }, iterFn) {
        const outputType = type.isMap
            ? type.asMap.key.toString()
            : type.asDoubleMap.key1.toString();
        // metadata with a fallback value using the type of the key, the normal
        // meta fallback only applies to actual entry values, create one for head
        iterFn.meta = registry.createType('StorageEntryMetadataLatest', {
            documentation,
            fallback: registry.createType('Bytes', registry.createType(outputType).toHex()),
            modifier: registry.createType('StorageEntryModifierLatest', 1),
            name,
            type: registry.createType('StorageEntryTypeLatest', registry.createType('Type', type.isMap ? type.asMap.key : type.asDoubleMap.key1), 0)
        });
        const prefixKey = registry.createType('StorageKey', iterFn, { method, section });
        return (arg) => !util_40.isUndefined(arg) && !util_40.isNull(arg)
            ? registry.createType('StorageKey', iterFn(arg), { method, section })
            : prefixKey;
    }
    // attach the full list hashing for prefixed maps
    /** @internal */
    function extendPrefixedMap(registry, itemFn, storageFn) {
        const { meta: { type } } = itemFn;
        storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (arg) => {
            util_40.assert(type.isDoubleMap || util_40.isUndefined(arg), 'Filtering arguments for keys/entries are only valid on double maps');
            return new codec_2.Raw(registry, type.isDoubleMap && !util_40.isUndefined(arg) && !util_40.isNull(arg)
                ? util_40.u8aConcat(createPrefixedKey(itemFn), getHasher_1.getHasher(type.asDoubleMap.hasher)(registry.createType(type.asDoubleMap.key1.toString(), arg).toU8a()))
                : createPrefixedKey(itemFn));
        });
        return storageFn;
    }
    /** @internal */
    function createFunction(registry, itemFn, options) {
        const { meta: { type } } = itemFn;
        const [hasher, key2Hasher] = getHashers(itemFn);
        // Can only have zero or one argument:
        //   - storage.system.account(address)
        //   - storage.timestamp.blockPeriod()
        // For doublemap queries the params is passed in as an tuple, [key1, key2]
        const storageFn = expandWithMeta(itemFn, (arg) => type.isDoubleMap
            ? createKeyDoubleMap(registry, itemFn, arg, [hasher, key2Hasher])
            : createKey(registry, itemFn, arg, options.skipHashing ? NULL_HASHER : hasher));
        if (type.isMap || type.isDoubleMap) {
            extendPrefixedMap(registry, itemFn, storageFn);
        }
        storageFn.keyPrefix = (arg) => (storageFn.iterKey && storageFn.iterKey(arg)) || util_40.compactStripLength(storageFn())[1];
        return storageFn;
    }
    exports.createFunction = createFunction;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/substrate", ["require", "exports", "metadata/src/decorate/storage/createFunction"], function (require, exports, createFunction_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.childStorageKeyPrefix = exports.changesTrieConfig = exports.extrinsicIndex = exports.heapPages = exports.code = void 0;
    // Small helper function to factorize code on this page.
    /** @internal */
    function createRuntimeFunction(method, key, { documentation, type }) {
        return (registry, metaVersion) => createFunction_1.createFunction(registry, {
            meta: {
                documentation: registry.createType('Vec<Text>', [documentation]),
                modifier: registry.createType('StorageEntryModifierLatest', 1),
                toJSON: () => key,
                type: registry.createType('StorageEntryTypeLatest', type, 0)
            },
            method,
            prefix: 'Substrate',
            section: 'substrate'
        }, { key, metaVersion, skipHashing: true });
    }
    exports.code = createRuntimeFunction('code', ':code', {
        documentation: 'Wasm code of the runtime.',
        type: 'Bytes'
    });
    exports.heapPages = createRuntimeFunction('heapPages', ':heappages', {
        documentation: 'Number of wasm linear memory pages required for execution of the runtime.',
        type: 'u64'
    });
    exports.extrinsicIndex = createRuntimeFunction('extrinsicIndex', ':extrinsic_index', {
        documentation: 'Current extrinsic index (u32) is stored under this key.',
        type: 'u32'
    });
    exports.changesTrieConfig = createRuntimeFunction('changesTrieConfig', ':changes_trie', {
        documentation: 'Changes trie configuration is stored under this key.',
        type: 'u32'
    });
    exports.childStorageKeyPrefix = createRuntimeFunction('childStorageKeyPrefix', ':child_storage:', {
        documentation: 'Prefix of child storage keys.',
        type: 'u32'
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/getStorage", ["require", "exports", "metadata/src/decorate/storage/substrate"], function (require, exports, substrate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStorage = void 0;
    substrate = __importStar(substrate);
    /** @internal */
    function getStorage(registry, metaVersion) {
        return {
            substrate: Object
                .entries(substrate)
                .reduce((storage, [key, fn]) => {
                storage[key] = fn(registry, metaVersion);
                return storage;
            }, {})
        };
    }
    exports.getStorage = getStorage;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/index", ["require", "exports", "@polkadot/util", "metadata/src/decorate/storage/createFunction", "metadata/src/decorate/storage/getStorage"], function (require, exports, util_41, createFunction_2, getStorage_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateStorage = void 0;
    /** @internal */
    function decorateStorage(registry, { modules }, metaVersion) {
        return modules.reduce((result, moduleMetadata) => {
            if (moduleMetadata.storage.isNone) {
                return result;
            }
            const { name } = moduleMetadata;
            const section = util_41.stringCamelCase(name);
            const unwrapped = moduleMetadata.storage.unwrap();
            const prefix = unwrapped.prefix.toString();
            // For access, we change the index names, i.e. System.Account -> system.account
            result[section] = unwrapped.items.reduce((newModule, meta) => {
                const method = meta.name.toString();
                newModule[util_41.stringLowerFirst(method)] = createFunction_2.createFunction(registry, {
                    meta,
                    method,
                    prefix,
                    section
                }, { metaVersion });
                return newModule;
            }, {});
            return result;
        }, { ...getStorage_1.getStorage(registry, metaVersion) });
    }
    exports.decorateStorage = decorateStorage;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/index", ["require", "exports", "@polkadot/util", "metadata/src/Metadata", "metadata/src/decorate/constants/index", "metadata/src/decorate/errors/index", "metadata/src/decorate/events/index", "metadata/src/decorate/extrinsics/index", "metadata/src/decorate/storage/index"], function (require, exports, util_42, Metadata_1, constants_1, errors_2, events_1, extrinsics_1, storage_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateStorage = exports.decorateExtrinsics = exports.decorateConstants = exports.expandMetadata = void 0;
    Object.defineProperty(exports, "decorateConstants", { enumerable: true, get: function () { return constants_1.decorateConstants; } });
    Object.defineProperty(exports, "decorateExtrinsics", { enumerable: true, get: function () { return extrinsics_1.decorateExtrinsics; } });
    Object.defineProperty(exports, "decorateStorage", { enumerable: true, get: function () { return storage_1.decorateStorage; } });
    /**
     * Expands the metadata by decoration into consts, query and tx sections
     */
    function expandMetadata(registry, metadata) {
        util_42.assert(metadata instanceof Metadata_1.Metadata, 'You need to pass a valid Metadata instance to Decorated');
        const latest = metadata.asLatest;
        return {
            consts: constants_1.decorateConstants(registry, latest),
            errors: errors_2.decorateErrors(registry, latest, metadata.version),
            events: events_1.decorateEvents(registry, latest, metadata.version),
            query: storage_1.decorateStorage(registry, latest, metadata.version),
            tx: extrinsics_1.decorateExtrinsics(registry, latest, metadata.version)
        };
    }
    exports.expandMetadata = expandMetadata;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/index", ["require", "exports", "metadata/src/Metadata", "metadata/src/decorate/index", "metadata/src/detectPackage"], function (require, exports, Metadata_2, decorate_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expandMetadata = exports.decorateStorage = exports.decorateExtrinsics = exports.decorateConstants = exports.Metadata = void 0;
    Object.defineProperty(exports, "Metadata", { enumerable: true, get: function () { return Metadata_2.Metadata; } });
    Object.defineProperty(exports, "decorateConstants", { enumerable: true, get: function () { return decorate_1.decorateConstants; } });
    Object.defineProperty(exports, "decorateExtrinsics", { enumerable: true, get: function () { return decorate_1.decorateExtrinsics; } });
    Object.defineProperty(exports, "decorateStorage", { enumerable: true, get: function () { return decorate_1.decorateStorage; } });
    Object.defineProperty(exports, "expandMetadata", { enumerable: true, get: function () { return decorate_1.expandMetadata; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/signedExtensions/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/registry", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/codec", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/interfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/calls", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/events", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/extrinsic", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/types/index", ["require", "exports", "types/src/create/types", "types/src/types/calls", "types/src/types/codec", "types/src/types/definitions", "types/src/types/events", "types/src/types/extrinsic", "types/src/types/interfaces", "types/src/types/registry", "types/src/augment/index"], function (require, exports, types_99, calls_1, codec_3, definitions_1, events_2, extrinsic_1, interfaces_1, registry_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_99, exports);
    __exportStar(calls_1, exports);
    __exportStar(codec_3, exports);
    __exportStar(definitions_1, exports);
    __exportStar(events_2, exports);
    __exportStar(extrinsic_1, exports);
    __exportStar(interfaces_1, exports);
    __exportStar(registry_1, exports);
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Map", ["require", "exports", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, util_43, utils_3) {
    "use strict";
    var _KeyClass, _ValClass, _type;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodecMap = void 0;
    const l = util_43.logger('Map');
    /** @internal */
    function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
        const output = new Map();
        const [offset, length] = util_43.compactFromU8a(u8a);
        const types = [];
        for (let i = 0; i < length.toNumber(); i++) {
            types.push(KeyClass, ValClass);
        }
        const values = utils_3.decodeU8a(registry, u8a.subarray(offset), types);
        for (let i = 0; i < values.length; i += 2) {
            output.set(values[i], values[i + 1]);
        }
        return output;
    }
    /** @internal */
    function decodeMapFromMap(registry, KeyClass, ValClass, value) {
        const output = new Map();
        value.forEach((val, key) => {
            try {
                output.set(key instanceof KeyClass
                    ? key
                    : new KeyClass(registry, key), val instanceof ValClass
                    ? val
                    : new ValClass(registry, val));
            }
            catch (error) {
                l.error('Failed to decode key or value:', error.message);
                throw error;
            }
        });
        return output;
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param KeyClass - Type of the map key
     * @param ValClass - Type of the map value
     * @param value - Value to decode, one of:
     * - null
     * - undefined
     * - hex
     * - Uint8Array
     * - Map<any, any>, where both key and value types are either
     *   constructors or decodeable values for their types.
     * @param jsonMap
     * @internal
     */
    function decodeMap(registry, keyType, valType, value) {
        const KeyClass = utils_3.typeToConstructor(registry, keyType);
        const ValClass = utils_3.typeToConstructor(registry, valType);
        if (!value) {
            return new Map();
        }
        else if (util_43.isHex(value)) {
            return decodeMap(registry, KeyClass, ValClass, util_43.hexToU8a(value));
        }
        else if (util_43.isU8a(value)) {
            return decodeMapFromU8a(registry, KeyClass, ValClass, util_43.u8aToU8a(value));
        }
        else if (value instanceof Map) {
            return decodeMapFromMap(registry, KeyClass, ValClass, value);
        }
        else if (util_43.isObject(value)) {
            return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
        }
        throw new Error('Map: cannot decode type');
    }
    class CodecMap extends Map {
        constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
            super(decodeMap(registry, keyType, valType, rawValue));
            _KeyClass.set(this, void 0);
            _ValClass.set(this, void 0);
            _type.set(this, void 0);
            this.registry = registry;
            __classPrivateFieldSet(this, _KeyClass, utils_3.typeToConstructor(registry, keyType));
            __classPrivateFieldSet(this, _ValClass, utils_3.typeToConstructor(registry, valType));
            __classPrivateFieldSet(this, _type, type);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let len = util_43.compactToU8a(this.size).length;
            this.forEach((v, k) => {
                len += v.encodedLength + k.encodedLength;
            });
            return len;
        }
        /**
         * @description Returns a hash of the value
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.size === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return utils_3.compareMap(this, other);
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex() {
            return util_43.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            const json = {};
            this.forEach((v, k) => {
                json[k.toString()] = v.toHuman(isExtended);
            });
            return json;
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            const json = {};
            this.forEach((v, k) => {
                json[k.toString()] = v.toJSON();
            });
            return json;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `${__classPrivateFieldGet(this, _type)}<${this.registry.getClassName(__classPrivateFieldGet(this, _KeyClass)) || new (__classPrivateFieldGet(this, _KeyClass))(this.registry).toRawType()},${this.registry.getClassName(__classPrivateFieldGet(this, _ValClass)) || new (__classPrivateFieldGet(this, _ValClass))(this.registry).toRawType()}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return JSON.stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = new Array();
            if (!isBare) {
                encoded.push(util_43.compactToU8a(this.size));
            }
            this.forEach((v, k) => {
                encoded.push(k.toU8a(isBare), v.toU8a(isBare));
            });
            return util_43.u8aConcat(...encoded);
        }
    }
    exports.CodecMap = CodecMap;
    _KeyClass = new WeakMap(), _ValClass = new WeakMap(), _type = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/BTreeMap", ["require", "exports", "types/src/codec/Map"], function (require, exports, Map_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BTreeMap = void 0;
    class BTreeMap extends Map_1.CodecMap {
        static with(keyType, valType) {
            return class extends BTreeMap {
                constructor(registry, value) {
                    super(registry, keyType, valType, value, 'BTreeMap');
                }
            };
        }
    }
    exports.BTreeMap = BTreeMap;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/BTreeSet", ["require", "exports", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, util_44, utils_4) {
    "use strict";
    var _ValClass;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BTreeSet = void 0;
    const l = util_44.logger('BTreeSet');
    /** @internal */
    function decodeSetFromU8a(registry, ValClass, u8a) {
        const output = new Set();
        const [offset, length] = util_44.compactFromU8a(u8a);
        const types = [];
        for (let i = 0; i < length.toNumber(); i++) {
            types.push(ValClass);
        }
        const values = utils_4.decodeU8a(registry, u8a.subarray(offset), types);
        for (let i = 0; i < values.length; i++) {
            output.add(values[i]);
        }
        return output;
    }
    /** @internal */
    function decodeSetFromSet(registry, ValClass, value) {
        const output = new Set();
        value.forEach((val) => {
            try {
                output.add((val instanceof ValClass) ? val : new ValClass(registry, val));
            }
            catch (error) {
                l.error('Failed to decode key or value:', error.message);
                throw error;
            }
        });
        return output;
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param ValClass - Type of the map value
     * @param value - Value to decode, one of:
     * - null
     * - undefined
     * - hex
     * - Uint8Array
     * - Set<any>, where both key and value types are either
     *   constructors or decodeable values for their types.
     * @param jsonSet
     * @internal
     */
    function decodeSet(registry, valType, value) {
        if (!value) {
            return new Set();
        }
        const ValClass = utils_4.typeToConstructor(registry, valType);
        if (util_44.isHex(value)) {
            return decodeSet(registry, ValClass, util_44.hexToU8a(value));
        }
        else if (util_44.isU8a(value)) {
            return decodeSetFromU8a(registry, ValClass, util_44.u8aToU8a(value));
        }
        else if (Array.isArray(value) || value instanceof Set) {
            return decodeSetFromSet(registry, ValClass, value);
        }
        throw new Error('BTreeSet: cannot decode type');
    }
    class BTreeSet extends Set {
        constructor(registry, valType, rawValue) {
            super(decodeSet(registry, valType, rawValue));
            _ValClass.set(this, void 0);
            this.registry = registry;
            __classPrivateFieldSet(this, _ValClass, utils_4.typeToConstructor(registry, valType));
        }
        static with(valType) {
            return class extends BTreeSet {
                constructor(registry, value) {
                    super(registry, valType, value);
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let len = util_44.compactToU8a(this.size).length;
            this.forEach((v) => {
                len += v.encodedLength;
            });
            return len;
        }
        /**
         * @description Returns a hash of the value
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.size === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return utils_4.compareSet(this, other);
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex() {
            return util_44.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            const json = [];
            this.forEach((v) => {
                json.push(v.toHuman(isExtended));
            });
            return json;
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            const json = [];
            this.forEach((v) => {
                json.push(v.toJSON());
            });
            return json;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `BTreeSet<${this.registry.getClassName(__classPrivateFieldGet(this, _ValClass)) || new (__classPrivateFieldGet(this, _ValClass))(this.registry).toRawType()}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return JSON.stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = new Array();
            if (!isBare) {
                encoded.push(util_44.compactToU8a(this.size));
            }
            this.forEach((v) => {
                encoded.push(v.toU8a(isBare));
            });
            return util_44.u8aConcat(...encoded);
        }
    }
    exports.BTreeSet = BTreeSet;
    _ValClass = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Compact", ["require", "exports", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, util_45, utils_5) {
    "use strict";
    var _Type, _raw;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Compact = void 0;
    /**
     * @name Compact
     * @description
     * A compact length-encoding codec wrapper. It performs the same function as Length, however
     * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
     * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
     * a number and making the compact representation thereof
     */
    class Compact {
        constructor(registry, Type, value = 0) {
            _Type.set(this, void 0);
            _raw.set(this, void 0);
            this.registry = registry;
            __classPrivateFieldSet(this, _Type, utils_5.typeToConstructor(registry, Type));
            __classPrivateFieldSet(this, _raw, Compact.decodeCompact(registry, __classPrivateFieldGet(this, _Type), value));
        }
        static with(Type) {
            return class extends Compact {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        /** @internal */
        static decodeCompact(registry, Type, value) {
            if (value instanceof Compact) {
                return new Type(registry, __classPrivateFieldGet(value, _raw));
            }
            else if (util_45.isString(value) || util_45.isNumber(value) || util_45.isBn(value) || util_45.isBigInt(value)) {
                return new Type(registry, value);
            }
            const [, _value] = util_45.compactFromU8a(value, new Type(registry, 0).bitLength());
            return new Type(registry, _value);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return __classPrivateFieldGet(this, _raw).isEmpty;
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return __classPrivateFieldGet(this, _raw).bitLength();
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return __classPrivateFieldGet(this, _raw).eq(other instanceof Compact
                ? __classPrivateFieldGet(other, _raw) : other);
        }
        /**
         * @description Returns a BigInt representation of the number
         */
        toBigInt() {
            return BigInt(this.toString());
        }
        /**
         * @description Returns the BN representation of the number
         */
        toBn() {
            return __classPrivateFieldGet(this, _raw).toBn();
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex(isLe) {
            return __classPrivateFieldGet(this, _raw).toHex(isLe);
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return __classPrivateFieldGet(this, _raw).toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return __classPrivateFieldGet(this, _raw).toJSON();
        }
        /**
         * @description Returns the number representation for the value
         */
        toNumber() {
            return __classPrivateFieldGet(this, _raw).toNumber();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `Compact<${this.registry.getClassName(__classPrivateFieldGet(this, _Type)) || __classPrivateFieldGet(this, _raw).toRawType()}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return __classPrivateFieldGet(this, _raw).toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return util_45.compactToU8a(__classPrivateFieldGet(this, _raw).toBn());
        }
        /**
         * @description Returns the embedded [[UInt]] or [[Moment]] value
         */
        unwrap() {
            return __classPrivateFieldGet(this, _raw);
        }
    }
    exports.Compact = Compact;
    _Type = new WeakMap(), _raw = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/HashMap", ["require", "exports", "types/src/codec/Map"], function (require, exports, Map_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashMap = void 0;
    class HashMap extends Map_2.CodecMap {
        static with(keyType, valType) {
            return class extends HashMap {
                constructor(registry, value) {
                    super(registry, keyType, valType, value);
                }
            };
        }
    }
    exports.HashMap = HashMap;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Json", ["require", "exports", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, util_46, utils_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Json = void 0;
    /** @internal */
    function decodeJson(value) {
        return Object.entries(value || {});
    }
    /**
     * @name Json
     * @description
     * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
     * implements a Codec, it is limited in that it can only be used with input objects via RPC,
     * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
     * @noInheritDoc
     */
    class Json extends Map {
        constructor(registry, value) {
            const decoded = decodeJson(value);
            super(decoded);
            this.registry = registry;
            decoded.forEach(([key]) => {
                util_46.isUndefined(this[key]) &&
                    Object.defineProperty(this, key, {
                        enumerable: true,
                        get: () => this.get(key)
                    });
            });
        }
        /**
         * @description Always 0, never encodes as a Uint8Array
         */
        get encodedLength() {
            return 0;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return [...this.keys()].length === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return utils_6.compareMap(this, other);
        }
        /**
         * @description Unimplemented, will throw
         */
        toHex() {
            throw new Error('Unimplemented');
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return [...this.entries()].reduce((json, [key, value]) => {
                json[key] = value;
                return json;
            }, {});
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Json';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return JSON.stringify(this.toJSON());
        }
        /**
         * @description Unimplemented, will throw
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            throw new Error('Unimplemented');
        }
    }
    exports.Json = Json;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Option", ["require", "exports", "@polkadot/util", "types/src/primitive/Null", "types/src/codec/utils/index"], function (require, exports, util_47, Null_4, utils_7) {
    "use strict";
    var _Type, _raw;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Option = void 0;
    /** @internal */
    function decodeOptionU8a(registry, Type, value) {
        return !value.length || value[0] === 0
            ? new Null_4.Null(registry)
            : new Type(registry, value.subarray(1));
    }
    /** @internal */
    function decodeOption(registry, typeName, value) {
        if (util_47.isNull(value) || util_47.isUndefined(value) || value instanceof Null_4.Null) {
            return new Null_4.Null(registry);
        }
        const Type = utils_7.typeToConstructor(registry, typeName);
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        if (value instanceof Option) {
            return decodeOption(registry, Type, value.value);
        }
        else if (value instanceof Type) {
            // don't re-create, use as it (which also caters for derived types)
            return value;
        }
        else if (util_47.isU8a(value)) {
            // the isU8a check happens last in the if-tree - since the wrapped value
            // may be an instance of it, so Type and Option checks go in first
            return decodeOptionU8a(registry, Type, value);
        }
        return new Type(registry, value);
    }
    /**
     * @name Option
     * @description
     * An Option is an optional field. Basically the first byte indicates that there is
     * is value to follow. If the byte is `1` there is an actual value. So the Option
     * implements that - decodes, checks for optionality and wraps the required structure
     * with a value if/as required/found.
     */
    class Option {
        constructor(registry, typeName, value) {
            _Type.set(this, void 0);
            _raw.set(this, void 0);
            this.registry = registry;
            __classPrivateFieldSet(this, _Type, utils_7.typeToConstructor(registry, typeName));
            __classPrivateFieldSet(this, _raw, decodeOption(registry, typeName, value));
        }
        static with(Type) {
            return class extends Option {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            // boolean byte (has value, doesn't have) along with wrapped length
            return 1 + __classPrivateFieldGet(this, _raw).encodedLength;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the Option has no value
         */
        get isEmpty() {
            return this.isNone;
        }
        /**
         * @description Checks if the Option has no value
         */
        get isNone() {
            return __classPrivateFieldGet(this, _raw) instanceof Null_4.Null;
        }
        /**
         * @description Checks if the Option has a value
         */
        get isSome() {
            return !this.isNone;
        }
        /**
         * @description The actual value for the Option
         */
        get value() {
            return __classPrivateFieldGet(this, _raw);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            if (other instanceof Option) {
                return (this.isSome === other.isSome) && this.value.eq(other.value);
            }
            return this.value.eq(other);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            // This attempts to align with the JSON encoding - actually in this case
            // the isSome value is correct, however the `isNone` may be problematic
            return this.isNone
                ? '0x'
                : util_47.u8aToHex(this.toU8a().subarray(1));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return __classPrivateFieldGet(this, _raw).toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return __classPrivateFieldGet(this, _raw).toJSON();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType(isBare) {
            const wrapped = this.registry.getClassName(__classPrivateFieldGet(this, _Type)) || new (__classPrivateFieldGet(this, _Type))(this.registry).toRawType();
            return isBare
                ? wrapped
                : `Option<${wrapped}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return __classPrivateFieldGet(this, _raw).toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            if (isBare) {
                return __classPrivateFieldGet(this, _raw).toU8a(true);
            }
            const u8a = new Uint8Array(this.encodedLength);
            if (this.isSome) {
                u8a.set([1]);
                u8a.set(__classPrivateFieldGet(this, _raw).toU8a(), 1);
            }
            return u8a;
        }
        /**
         * @description Returns the value that the Option represents (if available), throws if null
         */
        unwrap() {
            util_47.assert(this.isSome, 'Option: unwrapping a None value');
            return __classPrivateFieldGet(this, _raw);
        }
        /**
         * @description Returns the value that the Option represents (if available) or defaultValue if none
         * @param defaultValue The value to return if the option isNone
         */
        unwrapOr(defaultValue) {
            return this.isSome
                ? this.unwrap()
                : defaultValue;
        }
        /**
         * @description Returns the value that the Option represents (if available) or defaultValue if none
         * @param defaultValue The value to return if the option isNone
         */
        unwrapOrDefault() {
            return this.isSome
                ? this.unwrap()
                : new (__classPrivateFieldGet(this, _Type))(this.registry);
        }
    }
    exports.Option = Option;
    _Type = new WeakMap(), _raw = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/AbstractArray", ["require", "exports", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, util_48, utils_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractArray = void 0;
    /**
     * @name AbstractArray
     * @description
     * This manages codec arrays. It is an extension to Array, providing
     * specific encoding/decoding on top of the base type.
     * @noInheritDoc
     */
    class AbstractArray extends Array {
        constructor(registry, ...values) {
            super(...values);
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.reduce((total, raw) => {
                return total + raw.encodedLength;
            }, util_48.compactToU8a(this.length).length);
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.length === 0;
        }
        /**
         * @description The length of the value
         */
        get length() {
            // only included here since we ignore inherited docs
            return super.length;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return utils_8.compareArray(this, other);
        }
        /**
         * @description Converts the Object to an standard JavaScript Array
         */
        toArray() {
            return Array.from(this);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_48.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.map((entry) => entry.toHuman(isExtended));
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.map((entry) => entry.toJSON());
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            // Overwrite the default toString representation of Array.
            const data = this.map((entry) => entry.toString());
            return `[${data.join(', ')}]`;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = this.map((entry) => entry.toU8a(isBare));
            return isBare
                ? util_48.u8aConcat(...encoded)
                : util_48.u8aConcat(util_48.compactToU8a(this.length), ...encoded);
        }
        // Below are methods that we override. When we do a `new Vec(...).map()`,
        // we want it to return an Array. We only override the methods that return a
        // new instance.
        /**
         * @description Concatenates two arrays
         */
        concat(other) {
            return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);
        }
        /**
         * @description Filters the array with the callback
         */
        filter(callbackfn, thisArg) {
            return this.toArray().filter(callbackfn, thisArg);
        }
        /**
         * @description Maps the array with the callback
         */
        map(callbackfn, thisArg) {
            return this.toArray().map(callbackfn, thisArg);
        }
        /**
         * @description Checks if the array includes a specific value
         */
        includes(check) {
            return this.some((value) => value.eq(check));
        }
    }
    exports.AbstractArray = AbstractArray;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Tuple", ["require", "exports", "@polkadot/util", "types/src/codec/AbstractArray", "types/src/codec/utils/index"], function (require, exports, util_49, AbstractArray_1, utils_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tuple = void 0;
    /** @internal */
    function decodeTuple(registry, _Types, value) {
        if (util_49.isU8a(value)) {
            return utils_9.decodeU8a(registry, value, _Types);
        }
        else if (util_49.isHex(value)) {
            return decodeTuple(registry, _Types, util_49.hexToU8a(value));
        }
        const Types = Array.isArray(_Types)
            ? _Types
            : Object.values(_Types);
        return Types.map((Type, index) => {
            try {
                const entry = value?.[index];
                if (entry instanceof Type) {
                    return entry;
                }
                return new Type(registry, entry);
            }
            catch (error) {
                throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
            }
        });
    }
    /**
     * @name Tuple
     * @description
     * A Tuple defines an anonymous fixed-length array, where each element has its
     * own type. It extends the base JS `Array` object.
     */
    class Tuple extends AbstractArray_1.AbstractArray {
        constructor(registry, Types, value) {
            const Clazzes = Array.isArray(Types)
                ? Types.map((type) => utils_9.typeToConstructor(registry, type))
                : utils_9.mapToTypeMap(registry, Types);
            super(registry, ...decodeTuple(registry, Clazzes, value));
            this._Types = Clazzes;
        }
        static with(Types) {
            return class extends Tuple {
                constructor(registry, value) {
                    super(registry, Types, value);
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.reduce((length, entry) => {
                length += entry.encodedLength;
                return length;
            }, 0);
        }
        /**
         * @description The types definition of the tuple
         */
        get Types() {
            return Array.isArray(this._Types)
                ? this._Types.map((Type) => new Type(this.registry).toRawType())
                : Object.keys(this._Types);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            const types = (Array.isArray(this._Types)
                ? this._Types
                : Object.values(this._Types)).map((Type) => this.registry.getClassName(Type) || new Type(this.registry).toRawType());
            return `(${types.join(',')})`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            // Overwrite the default toString representation of Array.
            return JSON.stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return util_49.u8aConcat(...this.map((entry) => entry.toU8a(isBare)));
        }
    }
    exports.Tuple = Tuple;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Vec", ["require", "exports", "@polkadot/util", "types/src/codec/AbstractArray", "types/src/codec/utils/index"], function (require, exports, util_50, AbstractArray_2, utils_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Vec = void 0;
    const MAX_LENGTH = 64 * 1024;
    const l = util_50.logger('Vec');
    /**
     * @name Vec
     * @description
     * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
     * construction with the passed `Type` in the constructor. It is an extension to Array, providing
     * specific encoding/decoding on top of the base type.
     */
    class Vec extends AbstractArray_2.AbstractArray {
        constructor(registry, Type, value = []) {
            const Clazz = utils_10.typeToConstructor(registry, Type);
            super(registry, ...Vec.decodeVec(registry, Clazz, value));
            this._Type = Clazz;
        }
        /** @internal */
        static decodeVec(registry, Type, value) {
            if (Array.isArray(value)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return value.map((entry, index) => {
                    try {
                        return entry instanceof Type
                            ? entry
                            : new Type(registry, entry);
                    }
                    catch (error) {
                        l.error(`Unable to decode on index ${index}`, error.message);
                        throw error;
                    }
                });
            }
            const u8a = util_50.u8aToU8a(value);
            const [offset, length] = util_50.compactFromU8a(u8a);
            util_50.assert(length.lten(MAX_LENGTH), `Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
            return utils_10.decodeU8a(registry, u8a.subarray(offset), new Array(length.toNumber()).fill(Type));
        }
        static with(Type) {
            return class extends Vec {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        /**
         * @description The type for the items
         */
        get Type() {
            return this._Type.name;
        }
        /**
         * @description Finds the index of the value in the array
         */
        indexOf(_other) {
            // convert type first, this removes overhead from the eq
            const other = _other instanceof this._Type
                ? _other
                : new this._Type(this.registry, _other);
            for (let i = 0; i < this.length; i++) {
                if (other.eq(this[i])) {
                    return i;
                }
            }
            return -1;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `Vec<${this.registry.getClassName(this._Type) || new this._Type(this.registry).toRawType()}>`;
        }
    }
    exports.Vec = Vec;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Linkage", ["require", "exports", "types/src/codec/Option", "types/src/codec/Struct", "types/src/codec/Tuple", "types/src/codec/Vec"], function (require, exports, Option_1, Struct_2, Tuple_1, Vec_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkageResult = exports.Linkage = void 0;
    const EMPTY = new Uint8Array();
    /**
     * @name Linkage
     * @description The wrapper for the result from a LinkedMap
     */
    class Linkage extends Struct_2.Struct {
        constructor(registry, Type, value) {
            super(registry, {
                previous: Option_1.Option.with(Type),
                // eslint-disable-next-line sort-keys
                next: Option_1.Option.with(Type)
            }, value);
        }
        static withKey(Type) {
            return class extends Linkage {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        get previous() {
            return this.get('previous');
        }
        get next() {
            return this.get('next');
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `Linkage<${this.next.toRawType(true)}>`;
        }
        /**
         * @description Custom toU8a which with bare mode does not return the linkage if empty
         */
        toU8a() {
            // As part of a storage query (where these appear), in the case of empty, the values
            // are NOT populated by the node - follow the same logic, leaving it empty
            return this.isEmpty
                ? EMPTY
                : super.toU8a();
        }
    }
    exports.Linkage = Linkage;
    /**
     * @name LinkageResult
     * @description A Linkage keys/Values tuple
     */
    class LinkageResult extends Tuple_1.Tuple {
        constructor(registry, [TypeKey, keys], [TypeValue, values]) {
            super(registry, {
                Keys: Vec_1.Vec.with(TypeKey),
                Values: Vec_1.Vec.with(TypeValue)
            }, [keys, values]);
        }
    }
    exports.LinkageResult = LinkageResult;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Result", ["require", "exports", "@polkadot/util", "types/src/codec/Enum"], function (require, exports, util_51, Enum_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Result = void 0;
    /**
     * @name Result
     * @description
     * A Result maps to the Rust Result type, that can either wrap a success or error value
     */
    class Result extends Enum_2.Enum {
        constructor(registry, Ok, Error, value) {
            // NOTE This is order-dependent, Ok (with index 0) needs to be first
            // eslint-disable-next-line sort-keys
            super(registry, { Ok, Error }, value);
        }
        static with(Types) {
            return class extends Result {
                constructor(registry, value) {
                    super(registry, Types.Ok, Types.Error, value);
                }
            };
        }
        /**
         * @description Returns the wrapper Error value (if isError)
         */
        get asError() {
            util_51.assert(this.isError, 'Cannot extract Error value from Ok result, check isError first');
            return this.value;
        }
        /**
         * @description Returns the wrapper Ok value (if isOk)
         */
        get asOk() {
            util_51.assert(this.isOk, 'Cannot extract Ok value from Error result, check isOk first');
            return this.value;
        }
        /**
         * @description Checks if the Result has no value
         */
        get isEmpty() {
            return this.isOk && this.value.isEmpty;
        }
        /**
         * @description Checks if the Result wraps an Error value
         */
        get isError() {
            return !this.isOk;
        }
        /**
         * @description Checks if the Result wraps an Ok value
         */
        get isOk() {
            return this.index === 0;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            const Types = this._toRawStruct();
            return `Result<${Types.Ok},${Types.Error}>`;
        }
    }
    exports.Result = Result;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Set", ["require", "exports", "bn.js", "@polkadot/util", "types/src/codec/utils/index"], function (require, exports, bn_js_3, util_52, utils_11) {
    "use strict";
    var _allowed, _byteLength;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodecSet = void 0;
    bn_js_3 = __importDefault(bn_js_3);
    function encodeSet(setValues, value) {
        return value.reduce((result, value) => {
            return result.or(util_52.bnToBn(setValues[value] || 0));
        }, new bn_js_3.default(0));
    }
    /** @internal */
    function decodeSetArray(setValues, value) {
        return value.reduce((result, key) => {
            util_52.assert(!util_52.isUndefined(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
            result.push(key);
            return result;
        }, []);
    }
    /** @internal */
    function decodeSetNumber(setValues, _value) {
        const bn = util_52.bnToBn(_value);
        const result = Object.keys(setValues).reduce((result, key) => {
            if (bn.and(util_52.bnToBn(setValues[key])).eq(util_52.bnToBn(setValues[key]))) {
                result.push(key);
            }
            return result;
        }, []);
        const computed = encodeSet(setValues, result);
        util_52.assert(bn.eq(computed), `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
        return result;
    }
    /** @internal */
    function decodeSet(setValues, value = 0, bitLength) {
        util_52.assert(bitLength % 8 === 0, `Expected valid bitLength, power of 8, found ${bitLength}`);
        const byteLength = bitLength / 8;
        if (util_52.isString(value)) {
            return decodeSet(setValues, util_52.u8aToU8a(value), byteLength);
        }
        else if (util_52.isU8a(value)) {
            return value.length === 0
                ? []
                : decodeSetNumber(setValues, util_52.u8aToBn(value.subarray(0, byteLength), { isLe: true }));
        }
        else if (value instanceof Set || Array.isArray(value)) {
            const input = Array.isArray(value)
                ? value
                : [...value.values()];
            return decodeSetArray(setValues, input);
        }
        return decodeSetNumber(setValues, value);
    }
    /**
     * @name Set
     * @description
     * An Set is an array of string values, represented an an encoded type by
     * a bitwise representation of the values.
     */
    // FIXME This is a prime candidate to extend the JavaScript built-in Set
    class CodecSet extends Set {
        constructor(registry, setValues, value, bitLength = 8) {
            super(decodeSet(setValues, value, bitLength));
            _allowed.set(this, void 0);
            _byteLength.set(this, void 0);
            /**
             * @description adds a value to the Set (extended to allow for validity checking)
             */
            this.add = (key) => {
                // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
                // we have the isUndefined(this._setValues) in here as well, add is used internally
                // in the Set constructor (so it is undefined at this point, and should allow)
                util_52.assert(util_52.isUndefined(__classPrivateFieldGet(this, _allowed)) || !util_52.isUndefined(__classPrivateFieldGet(this, _allowed)[key]), `Set: Invalid key '${key}' on add`);
                super.add(key);
                return this;
            };
            this.registry = registry;
            __classPrivateFieldSet(this, _allowed, setValues);
            __classPrivateFieldSet(this, _byteLength, bitLength / 8);
        }
        static with(values, bitLength) {
            return class extends CodecSet {
                constructor(registry, value) {
                    super(registry, values, value, bitLength);
                    Object.keys(values).forEach((_key) => {
                        const name = util_52.stringUpperFirst(util_52.stringCamelCase(_key));
                        const iskey = `is${name}`;
                        util_52.isUndefined(this[iskey]) &&
                            Object.defineProperty(this, iskey, {
                                enumerable: true,
                                get: () => this.strings.includes(_key)
                            });
                    });
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return __classPrivateFieldGet(this, _byteLength);
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description true is the Set contains no values
         */
        get isEmpty() {
            return this.size === 0;
        }
        /**
         * @description The actual set values as a string[]
         */
        get strings() {
            return [...super.values()];
        }
        /**
         * @description The encoded value for the set members
         */
        get valueEncoded() {
            return encodeSet(__classPrivateFieldGet(this, _allowed), this.strings);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            if (Array.isArray(other)) {
                // we don't actually care about the order, sort the values
                return utils_11.compareArray(this.strings.sort(), other.sort());
            }
            else if (other instanceof Set) {
                return this.eq([...other.values()]);
            }
            else if (util_52.isNumber(other) || util_52.isBn(other)) {
                return this.valueEncoded.eq(util_52.bnToBn(other));
            }
            return false;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_52.u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.strings;
        }
        /**
         * @description The encoded value for the set members
         */
        toNumber() {
            return this.valueEncoded.toNumber();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return JSON.stringify({ _set: __classPrivateFieldGet(this, _allowed) });
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return `[${this.strings.join(', ')}]`;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return util_52.bnToU8a(this.valueEncoded, {
                bitLength: __classPrivateFieldGet(this, _byteLength) * 8,
                isLe: true
            });
        }
    }
    exports.CodecSet = CodecSet;
    _allowed = new WeakMap(), _byteLength = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/U8aFixed", ["require", "exports", "@polkadot/util", "types/src/codec/Raw"], function (require, exports, util_53, Raw_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.U8aFixed = void 0;
    /** @internal */
    function decodeU8aFixed(value, bitLength) {
        if (Array.isArray(value) || util_53.isString(value)) {
            return decodeU8aFixed(util_53.u8aToU8a(value), bitLength);
        }
        // ensure that we have an actual u8a with the full length as specified by
        // the bitLength input (padded with zeros as required)
        const byteLength = bitLength / 8;
        const sub = value.subarray(0, byteLength);
        if (sub.length === byteLength) {
            return sub;
        }
        const u8a = new Uint8Array(byteLength);
        u8a.set(sub, 0);
        return u8a;
    }
    /**
     * @name U8aFixed
     * @description
     * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
     * to be used directly, rather is should be subclassed with the specific lengths.
     */
    class U8aFixed extends Raw_4.Raw {
        constructor(registry, value = new Uint8Array(), bitLength = 256) {
            super(registry, decodeU8aFixed(value, bitLength));
        }
        static with(bitLength, typeName) {
            return class extends U8aFixed {
                constructor(registry, value) {
                    super(registry, value, bitLength);
                }
                toRawType() {
                    return typeName || super.toRawType();
                }
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `[u8;${this.length}]`;
        }
    }
    exports.U8aFixed = U8aFixed;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/VecFixed", ["require", "exports", "@polkadot/util", "types/src/codec/AbstractArray", "types/src/codec/utils/index", "types/src/codec/Vec"], function (require, exports, util_54, AbstractArray_3, utils_12, Vec_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VecFixed = void 0;
    /**
     * @name VecFixed
     * @description
     * This manages codec arrays of a fixed length
     */
    class VecFixed extends AbstractArray_3.AbstractArray {
        constructor(registry, Type, length, value = []) {
            const Clazz = utils_12.typeToConstructor(registry, Type);
            super(registry, ...VecFixed.decodeVecFixed(registry, Clazz, length, value));
            this._Type = Clazz;
        }
        /** @internal */
        static decodeVecFixed(registry, Type, allocLength, value) {
            const values = Vec_2.Vec.decodeVec(registry, Type, util_54.isU8a(value)
                ? util_54.u8aConcat(util_54.compactToU8a(allocLength), value)
                : value);
            while (values.length < allocLength) {
                values.push(new Type(registry));
            }
            util_54.assert(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);
            return values;
        }
        static with(Type, length) {
            return class extends VecFixed {
                constructor(registry, value) {
                    super(registry, Type, length, value);
                }
            };
        }
        /**
         * @description The type for the items
         */
        get Type() {
            return new this._Type(this.registry).toRawType();
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        toU8a() {
            // we override, we don't add the length prefix for ourselves, and at the same time we
            // ignore isBare on entries, since they should be properly encoded at all times
            const encoded = this.map((entry) => entry.toU8a());
            return encoded.length
                ? util_54.u8aConcat(...encoded)
                : new Uint8Array([]);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `[${this.Type};${this.length}]`;
        }
    }
    exports.VecFixed = VecFixed;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/index", ["require", "exports", "types/src/codec/BTreeMap", "types/src/codec/BTreeSet", "types/src/codec/Compact", "types/src/codec/Enum", "types/src/codec/HashMap", "types/src/codec/Int", "types/src/codec/Json", "types/src/codec/Linkage", "types/src/codec/Map", "types/src/codec/Option", "types/src/codec/Raw", "types/src/codec/Result", "types/src/codec/Set", "types/src/codec/Struct", "types/src/codec/Tuple", "types/src/codec/UInt", "types/src/codec/U8aFixed", "types/src/codec/Vec", "types/src/codec/VecFixed"], function (require, exports, BTreeMap_1, BTreeSet_1, Compact_1, Enum_3, HashMap_1, Int_7, Json_1, Linkage_1, Map_3, Option_2, Raw_5, Result_1, Set_1, Struct_3, Tuple_2, UInt_7, U8aFixed_1, Vec_3, VecFixed_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VecFixed = exports.Vec = exports.U8aFixed = exports.UInt = exports.Tuple = exports.Struct = exports.Set = exports.CodecSet = exports.Result = exports.Raw = exports.Option = exports.Map = exports.CodecMap = exports.Linkage = exports.Json = exports.Int = exports.HashMap = exports.Enum = exports.Compact = exports.BTreeSet = exports.BTreeMap = void 0;
    Object.defineProperty(exports, "BTreeMap", { enumerable: true, get: function () { return BTreeMap_1.BTreeMap; } });
    Object.defineProperty(exports, "BTreeSet", { enumerable: true, get: function () { return BTreeSet_1.BTreeSet; } });
    Object.defineProperty(exports, "Compact", { enumerable: true, get: function () { return Compact_1.Compact; } });
    Object.defineProperty(exports, "Enum", { enumerable: true, get: function () { return Enum_3.Enum; } });
    Object.defineProperty(exports, "HashMap", { enumerable: true, get: function () { return HashMap_1.HashMap; } });
    Object.defineProperty(exports, "Int", { enumerable: true, get: function () { return Int_7.Int; } });
    Object.defineProperty(exports, "Json", { enumerable: true, get: function () { return Json_1.Json; } });
    Object.defineProperty(exports, "Linkage", { enumerable: true, get: function () { return Linkage_1.Linkage; } });
    Object.defineProperty(exports, "CodecMap", { enumerable: true, get: function () { return Map_3.CodecMap; } });
    Object.defineProperty(exports, "Map", { enumerable: true, get: function () { return Map_3.CodecMap; } });
    Object.defineProperty(exports, "Option", { enumerable: true, get: function () { return Option_2.Option; } });
    Object.defineProperty(exports, "Raw", { enumerable: true, get: function () { return Raw_5.Raw; } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function () { return Result_1.Result; } });
    Object.defineProperty(exports, "CodecSet", { enumerable: true, get: function () { return Set_1.CodecSet; } });
    Object.defineProperty(exports, "Set", { enumerable: true, get: function () { return Set_1.CodecSet; } });
    Object.defineProperty(exports, "Struct", { enumerable: true, get: function () { return Struct_3.Struct; } });
    Object.defineProperty(exports, "Tuple", { enumerable: true, get: function () { return Tuple_2.Tuple; } });
    Object.defineProperty(exports, "UInt", { enumerable: true, get: function () { return UInt_7.UInt; } });
    Object.defineProperty(exports, "U8aFixed", { enumerable: true, get: function () { return U8aFixed_1.U8aFixed; } });
    Object.defineProperty(exports, "Vec", { enumerable: true, get: function () { return Vec_3.Vec; } });
    Object.defineProperty(exports, "VecFixed", { enumerable: true, get: function () { return VecFixed_1.VecFixed; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/createClass", ["require", "exports", "@polkadot/util", "types/src/codec/index", "types/src/primitive/index", "types/src/create/getTypeDef", "types/src/create/types"], function (require, exports, util_55, codec_4, primitive_2, getTypeDef_2, types_100) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTypeClass = exports.ClassOf = exports.ClassOfUnsafe = exports.createClass = void 0;
    function createClass(registry, type) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return getTypeClass(registry, getTypeDef_2.getTypeDef(type));
    }
    exports.createClass = createClass;
    // An unsafe version of the `createType` below. It's unsafe because the `type`
    // argument here can be any string, which, if it cannot be parsed, it will yield
    // a runtime error.
    function ClassOfUnsafe(registry, name) {
        return createClass(registry, name);
    }
    exports.ClassOfUnsafe = ClassOfUnsafe;
    // alias for createClass
    function ClassOf(registry, name) {
        // TS2589: Type instantiation is excessively deep and possibly infinite.
        // The above happens with as Constructor<InterfaceTypes[K]>;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return ClassOfUnsafe(registry, name);
    }
    exports.ClassOf = ClassOf;
    function getSubDefArray(value) {
        util_55.assert(value.sub && Array.isArray(value.sub), `Expected subtype as TypeDef[] in ${JSON.stringify(value)}`);
        return value.sub;
    }
    function getSubDef(value) {
        util_55.assert(value.sub && !Array.isArray(value.sub), `Expected subtype as TypeDef in ${JSON.stringify(value)}`);
        return value.sub;
    }
    function getSubType(value) {
        return getSubDef(value).type;
    }
    // create a maps of type string constructors from the input
    function getTypeClassMap(value) {
        const result = {};
        return getSubDefArray(value).reduce((result, sub) => {
            result[sub.name] = sub.type;
            return result;
        }, result);
    }
    // create an array of type string constructors from the input
    function getTypeClassArray(value) {
        return getSubDefArray(value).map(({ type }) => type);
    }
    function createInt({ displayName, length }, Clazz) {
        util_55.assert(util_55.isNumber(length), `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
        return Clazz.with(length, displayName);
    }
    function createHashMap(value, Clazz) {
        const [keyType, valueType] = getTypeClassArray(value);
        return Clazz.with(keyType, valueType);
    }
    const infoMapping = {
        [types_100.TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, codec_4.BTreeMap),
        [types_100.TypeDefInfo.BTreeSet]: (registry, value) => codec_4.BTreeSet.with(getSubType(value)),
        [types_100.TypeDefInfo.Compact]: (registry, value) => codec_4.Compact.with(getSubType(value)),
        [types_100.TypeDefInfo.DoNotConstruct]: (registry, value) => primitive_2.DoNotConstruct.with(value.displayName),
        [types_100.TypeDefInfo.Enum]: (registry, value) => codec_4.Enum.with(getTypeClassMap(value)),
        [types_100.TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, codec_4.HashMap),
        [types_100.TypeDefInfo.Int]: (registry, value) => createInt(value, codec_4.Int),
        // We have circular deps between Linkage & Struct
        [types_100.TypeDefInfo.Linkage]: (registry, value) => {
            const type = `Option<${getSubType(value)}>`;
            // eslint-disable-next-line sort-keys
            const Clazz = codec_4.Struct.with({ previous: type, next: type });
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            Clazz.prototype.toRawType = function () {
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
                return `Linkage<${this.next.toRawType(true)}>`;
            };
            return Clazz;
        },
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        [types_100.TypeDefInfo.Null]: (registry, _) => createClass(registry, 'Null'),
        [types_100.TypeDefInfo.Option]: (registry, value) => codec_4.Option.with(getSubType(value)),
        [types_100.TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
        [types_100.TypeDefInfo.Result]: (registry, value) => {
            const [Ok, Error] = getTypeClassArray(value);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return codec_4.Result.with({ Error, Ok });
        },
        [types_100.TypeDefInfo.Set]: (registry, value) => {
            const result = {};
            return codec_4.CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
                result[name] = index;
                return result;
            }, result), value.length);
        },
        [types_100.TypeDefInfo.Struct]: (registry, value) => codec_4.Struct.with(getTypeClassMap(value), value.alias),
        [types_100.TypeDefInfo.Tuple]: (registry, value) => codec_4.Tuple.with(getTypeClassArray(value)),
        [types_100.TypeDefInfo.UInt]: (registry, value) => createInt(value, codec_4.UInt),
        [types_100.TypeDefInfo.Vec]: (registry, value) => {
            const subType = getSubType(value);
            return (subType === 'u8'
                ? createClass(registry, 'Bytes')
                : codec_4.Vec.with(subType));
        },
        [types_100.TypeDefInfo.VecFixed]: (registry, { displayName, length, sub }) => {
            util_55.assert(util_55.isNumber(length) && !util_55.isUndefined(sub), 'Expected length & type information for fixed vector');
            return (sub.type === 'u8'
                ? codec_4.U8aFixed.with((length * 8), displayName)
                : codec_4.VecFixed.with(sub.type, length));
        }
    };
    // Returns the type Class for construction
    function getTypeClass(registry, value) {
        const Type = registry.get(value.type);
        if (Type) {
            return Type;
        }
        const getFn = infoMapping[value.info];
        util_55.assert(getFn, `Unable to construct class from ${JSON.stringify(value)}`);
        return getFn(registry, value);
    }
    exports.getTypeClass = getTypeClass;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/createType", ["require", "exports", "@polkadot/util", "types/src/create/createClass"], function (require, exports, util_56, createClass_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createType = exports.createTypeUnsafe = void 0;
    const l = util_56.logger('registry');
    function u8aHasValue(value) {
        return value.some((v) => !!v);
    }
    // With isPedantic, actually check that the encoding matches that supplied. This
    // is much slower, but verifies that we have the correct types defined
    function checkInstance(value, created) {
        // the underlying type created.toRawType()
        const rawType = created.toRawType();
        // ignore bytes completely - this is probably a FIXME, since these are somewhat
        // breaking for at least online queries - not quite sure wtf is going wrong here
        if (rawType === 'Bytes') {
            return;
        }
        // the hex values for what we have
        const inHex = util_56.u8aToHex(value);
        const crHex = created.toHex();
        // Check equality, based on some different approaches (as decoded)
        const isEqual = inHex === crHex || // raw hex values, quick path
            inHex === created.toHex(true) || // wrapped options
            util_56.u8aToHex(value.reverse()) === crHex; // reverse (for numbers, which are BE)
        // if the hex doesn't match and the value for both is non-empty, complain... bitterly
        if (!isEqual && (u8aHasValue(value) || u8aHasValue(created.toU8a(true)))) {
            l.warn(`${rawType}:: Input doesn't match output, received ${util_56.u8aToHex(value)}, created ${crHex}`);
        }
    }
    // Initializes a type with a value. This also checks for fallbacks and in the cases
    // where isPedantic is specified (storage decoding), also check the format/structure
    function initType(registry, Type, params = [], isPedantic) {
        const created = new Type(registry, ...params);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const [value] = params;
        if (isPedantic && util_56.isU8a(value)) {
            checkInstance(value, created);
        }
        return created;
    }
    // An unsafe version of the `createType` below. It's unsafe because the `type`
    // argument here can be any string, which, when it cannot parse, will yield a
    // runtime error.
    function createTypeUnsafe(registry, type, params = [], { withoutLog } = {}) {
        try {
            // Circle back to isPedantic when it handles all cases 100% - as of now,
            // it provides false warning which is more hinderance than help
            return initType(registry, createClass_1.createClass(registry, type), params); // , isPedantic);
        }
        catch (error) {
            !withoutLog && l.error(error);
            throw new Error(`createType(${type}):: ${error.message}`);
        }
    }
    exports.createTypeUnsafe = createTypeUnsafe;
    /**
     * Create an instance of a `type` with a given `params`.
     * @param type - A recognizable string representing the type to create an
     * instance from
     * @param params - The value to instantiate the type with
     */
    function createType(registry, type, ...params) {
        return createTypeUnsafe(registry, type, params);
    }
    exports.createType = createType;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/encodeTypes", ["require", "exports", "@polkadot/util", "types/src/create/types"], function (require, exports, util_57, types_101) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withTypeString = exports.encodeTypeDef = exports.paramsNotation = void 0;
    const stringIdentity = (value) => value.toString();
    const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
    function paramsNotation(outer, inner, transform = stringIdentity) {
        return `${outer}${inner
            ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>`
            : ''}`;
    }
    exports.paramsNotation = paramsNotation;
    function encodeWithParams(typeDef, outer) {
        const { info, sub } = typeDef;
        switch (info) {
            case types_101.TypeDefInfo.BTreeMap:
            case types_101.TypeDefInfo.BTreeSet:
            case types_101.TypeDefInfo.Compact:
            case types_101.TypeDefInfo.HashMap:
            case types_101.TypeDefInfo.Linkage:
            case types_101.TypeDefInfo.Option:
            case types_101.TypeDefInfo.Result:
            case types_101.TypeDefInfo.Vec:
                return paramsNotation(outer, sub, (param) => encodeTypeDef(param));
        }
        throw new Error(`Unable to encode ${JSON.stringify(typeDef)} with params`);
    }
    function encodeDoNotConstruct({ displayName }) {
        return `DoNotConstruct<${displayName || 'Unknown'}>`;
    }
    function encodeSubTypes(sub, asEnum) {
        const names = sub.map(({ name }) => name);
        util_57.assert(names.every((n) => !!n), `Subtypes does not have consistent names, ${names.join(', ')}`);
        const inner = sub.reduce((result, type) => ({
            ...result,
            [type.name]: encodeTypeDef(type)
        }), {});
        return JSON.stringify(asEnum
            ? { _enum: inner }
            : inner);
    }
    function encodeEnum(typeDef) {
        util_57.assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Enum type');
        const sub = typeDef.sub;
        // c-like enums have all Null entries
        // TODO We need to take the disciminant into account and auto-add empty entries
        return sub.every(({ type }) => type === 'Null')
            ? JSON.stringify({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) })
            : encodeSubTypes(sub, true);
    }
    function encodeStruct(typeDef) {
        util_57.assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Struct type');
        return encodeSubTypes(typeDef.sub);
    }
    function encodeTuple(typeDef) {
        util_57.assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Tuple type');
        return `(${typeDef.sub.map((type) => encodeTypeDef(type)).join(', ')})`;
    }
    function encodeUInt({ length }, type) {
        util_57.assert(util_57.isNumber(length), 'Unable to encode VecFixed type');
        return `${type}<${length}>`;
    }
    function encodeVecFixed({ length, sub }) {
        util_57.assert(util_57.isNumber(length) && !util_57.isUndefined(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');
        return `[${sub.type};${length}]`;
    }
    // We setup a record here to ensure we have comprehensive coverage (any item not covered will result
    // in a compile-time error with the missing index)
    const encoders = {
        [types_101.TypeDefInfo.BTreeMap]: (typeDef) => encodeWithParams(typeDef, 'BTreeMap'),
        [types_101.TypeDefInfo.BTreeSet]: (typeDef) => encodeWithParams(typeDef, 'BTreeSet'),
        [types_101.TypeDefInfo.Compact]: (typeDef) => encodeWithParams(typeDef, 'Compact'),
        [types_101.TypeDefInfo.DoNotConstruct]: (typeDef) => encodeDoNotConstruct(typeDef),
        [types_101.TypeDefInfo.Enum]: (typeDef) => encodeEnum(typeDef),
        [types_101.TypeDefInfo.HashMap]: (typeDef) => encodeWithParams(typeDef, 'HashMap'),
        [types_101.TypeDefInfo.Int]: (typeDef) => encodeUInt(typeDef, 'Int'),
        [types_101.TypeDefInfo.Linkage]: (typeDef) => encodeWithParams(typeDef, 'Linkage'),
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        [types_101.TypeDefInfo.Null]: (typeDef) => 'Null',
        [types_101.TypeDefInfo.Option]: (typeDef) => encodeWithParams(typeDef, 'Option'),
        [types_101.TypeDefInfo.Plain]: (typeDef) => typeDef.displayName || typeDef.type,
        [types_101.TypeDefInfo.Result]: (typeDef) => encodeWithParams(typeDef, 'Result'),
        [types_101.TypeDefInfo.Set]: (typeDef) => typeDef.type,
        [types_101.TypeDefInfo.Struct]: (typeDef) => encodeStruct(typeDef),
        [types_101.TypeDefInfo.Tuple]: (typeDef) => encodeTuple(typeDef),
        [types_101.TypeDefInfo.UInt]: (typeDef) => encodeUInt(typeDef, 'UInt'),
        [types_101.TypeDefInfo.Vec]: (typeDef) => encodeWithParams(typeDef, 'Vec'),
        [types_101.TypeDefInfo.VecFixed]: (typeDef) => encodeVecFixed(typeDef)
    };
    function encodeType(typeDef) {
        const encoder = encoders[typeDef.info];
        util_57.assert(encoder, `Cannot encode type: ${JSON.stringify(typeDef)}`);
        return encoder(typeDef);
    }
    function encodeTypeDef(typeDef) {
        util_57.assert(!util_57.isUndefined(typeDef.info), `Invalid type definition with no instance info, ${JSON.stringify(typeDef)}`);
        // In the case of contracts we do have the unfortunate situation where the displayName would
        // refer to "Option" when it is an option. For these, string it out, only using when actually
        // not a top-level element to be used
        if (typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i)) {
            return typeDef.displayName;
        }
        return encodeType(typeDef);
    }
    exports.encodeTypeDef = encodeTypeDef;
    function withTypeString(typeDef) {
        return {
            ...typeDef,
            type: encodeType(typeDef)
        };
    }
    exports.withTypeString = withTypeString;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/signedExtensions/emptyCheck", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emptyCheck = void 0;
    exports.emptyCheck = {
        extrinsic: {},
        payload: {}
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/signedExtensions/polkadot", ["require", "exports", "types/src/extrinsic/signedExtensions/emptyCheck"], function (require, exports, emptyCheck_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        LimitParathreadCommits: emptyCheck_1.emptyCheck,
        OnlyStakingAndClaims: emptyCheck_1.emptyCheck,
        PrevalidateAttests: emptyCheck_1.emptyCheck,
        RestrictFunctionality: emptyCheck_1.emptyCheck,
        TransactionCallFilter: emptyCheck_1.emptyCheck,
        ValidateDoubleVoteReports: emptyCheck_1.emptyCheck
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/signedExtensions/substrate", ["require", "exports", "types/src/extrinsic/signedExtensions/emptyCheck"], function (require, exports, emptyCheck_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const CheckMortality = {
        extrinsic: {
            era: 'ExtrinsicEra'
        },
        payload: {
            blockHash: 'Hash'
        }
    };
    exports.default = {
        ChargeTransactionPayment: {
            extrinsic: {
                tip: 'Compact<Balance>'
            },
            payload: {}
        },
        CheckBlockGasLimit: emptyCheck_2.emptyCheck,
        CheckEra: CheckMortality,
        CheckGenesis: {
            extrinsic: {},
            payload: {
                genesisHash: 'Hash'
            }
        },
        CheckMortality,
        CheckNonce: {
            extrinsic: {
                nonce: 'Compact<Index>'
            },
            payload: {}
        },
        CheckSpecVersion: {
            extrinsic: {},
            payload: {
                specVersion: 'u32'
            }
        },
        CheckTxVersion: {
            extrinsic: {},
            payload: {
                transactionVersion: 'u32'
            }
        },
        CheckVersion: {
            extrinsic: {},
            payload: {
                specVersion: 'u32'
            }
        },
        CheckWeight: emptyCheck_2.emptyCheck,
        LockStakingStatus: emptyCheck_2.emptyCheck,
        ValidateEquivocationReport: emptyCheck_2.emptyCheck
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/signedExtensions/index", ["require", "exports", "types/src/extrinsic/signedExtensions/polkadot", "types/src/extrinsic/signedExtensions/substrate"], function (require, exports, polkadot_3, substrate_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findUnknownExtensions = exports.expandExtensionTypes = exports.defaultExtensions = exports.allExtensions = void 0;
    polkadot_3 = __importDefault(polkadot_3);
    substrate_1 = __importDefault(substrate_1);
    // A mapping of the known signed extensions to the extra fields that they contain. Unlike in the actual extensions,
    // we define the extra fields not as a Tuple, but rather as a struct so they can be named. These will be expanded
    // into the various fields when added to the payload (we only support V4 onwards with these, V3 and earlier are
    // deemed fixed and non-changeable)
    const allExtensions = {
        ...substrate_1.default,
        ...polkadot_3.default
    };
    exports.allExtensions = allExtensions;
    // the v4 signed extensions (the order is important here, as applied by default)
    const defaultExtensions = [
        'CheckVersion',
        'CheckGenesis',
        'CheckEra',
        'CheckNonce',
        'CheckWeight',
        'ChargeTransactionPayment',
        'CheckBlockGasLimit'
    ];
    exports.defaultExtensions = defaultExtensions;
    function findUnknownExtensions(extensions, userExtensions = {}) {
        const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
        return extensions.filter((key) => !names.includes(key));
    }
    exports.findUnknownExtensions = findUnknownExtensions;
    function expandExtensionTypes(extensions, type, userExtensions = {}) {
        return extensions
            .map((key) => allExtensions[key] || userExtensions[key])
            .filter((info) => !!info)
            .reduce((result, info) => ({ ...result, ...info[type] }), {});
    }
    exports.expandExtensionTypes = expandExtensionTypes;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Event", ["require", "exports", "types/src/codec/Struct", "types/src/codec/Tuple", "types/src/primitive/Null"], function (require, exports, Struct_4, Tuple_3, Null_5) {
    "use strict";
    var _meta, _method, _section, _typeDef;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericEvent = exports.GenericEventData = void 0;
    /**
     * @name GenericEventData
     * @description
     * Wrapper for the actual data that forms part of an [[Event]]
     */
    class GenericEventData extends Tuple_3.Tuple {
        constructor(registry, value, Types = [], typeDef = [], meta, section = '<unknown>', method = '<unknown>') {
            super(registry, Types, value);
            _meta.set(this, void 0);
            _method.set(this, void 0);
            _section.set(this, void 0);
            _typeDef.set(this, void 0);
            __classPrivateFieldSet(this, _meta, meta);
            __classPrivateFieldSet(this, _method, method);
            __classPrivateFieldSet(this, _section, section);
            __classPrivateFieldSet(this, _typeDef, typeDef);
        }
        /**
         * @description The wrapped [[EventMetadata]]
         */
        get meta() {
            return __classPrivateFieldGet(this, _meta);
        }
        /**
         * @description The method as a string
         */
        get method() {
            return __classPrivateFieldGet(this, _method);
        }
        /**
         * @description The section as a string
         */
        get section() {
            return __classPrivateFieldGet(this, _section);
        }
        /**
         * @description The [[TypeDef]] for this event
         */
        get typeDef() {
            return __classPrivateFieldGet(this, _typeDef);
        }
    }
    exports.GenericEventData = GenericEventData;
    _meta = new WeakMap(), _method = new WeakMap(), _section = new WeakMap(), _typeDef = new WeakMap();
    /**
     * @name GenericEvent
     * @description
     * A representation of a system event. These are generated via the [[Metadata]] interfaces and
     * specific to a specific Substrate runtime
     */
    class GenericEvent extends Struct_4.Struct {
        // Currently we _only_ decode from Uint8Array, since we expect it to
        // be used via EventRecord
        constructor(registry, _value) {
            const { DataType, value } = GenericEvent.decodeEvent(registry, _value);
            super(registry, {
                index: 'EventId',
                // eslint-disable-next-line sort-keys
                data: DataType
            }, value);
        }
        /** @internal */
        static decodeEvent(registry, value = new Uint8Array()) {
            if (!value.length) {
                return { DataType: Null_5.Null };
            }
            const index = value.subarray(0, 2);
            return {
                DataType: registry.findMetaEvent(index),
                value: {
                    data: value.subarray(2),
                    index
                }
            };
        }
        /**
         * @description The wrapped [[EventData]]
         */
        get data() {
            return this.get('data');
        }
        /**
         * @description The [[EventId]], identifying the raw event
         */
        get index() {
            return this.get('index');
        }
        /**
         * @description The [[EventMetadata]] with the documentation
         */
        get meta() {
            return this.data.meta;
        }
        /**
         * @description The method string identifying the event
         */
        get method() {
            return this.data.method;
        }
        /**
         * @description The section string identifying the event
         */
        get section() {
            return this.data.section;
        }
        /**
         * @description The [[TypeDef]] for the event
         */
        get typeDef() {
            return this.data.typeDef;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            return {
                method: this.method,
                section: this.section,
                ...(isExpanded
                    ? { documentation: this.meta.documentation.map((d) => d.toString()) }
                    : {}),
                ...super.toHuman(isExpanded)
            };
        }
    }
    exports.GenericEvent = GenericEvent;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/constants", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UNMASK_VERSION = exports.IMMORTAL_ERA = exports.DEFAULT_VERSION = exports.EMPTY_U8A = exports.BIT_UNSIGNED = exports.BIT_SIGNED = void 0;
    exports.BIT_SIGNED = 0b10000000;
    exports.BIT_UNSIGNED = 0;
    exports.EMPTY_U8A = new Uint8Array();
    exports.DEFAULT_VERSION = 4;
    exports.IMMORTAL_ERA = new Uint8Array([0]);
    exports.UNMASK_VERSION = 0b01111111;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/ExtrinsicEra", ["require", "exports", "@polkadot/util", "types/src/codec/Enum", "types/src/codec/Raw", "types/src/codec/Tuple", "types/src/primitive/U64", "types/src/extrinsic/constants"], function (require, exports, util_58, Enum_4, Raw_6, Tuple_4, U64_2, constants_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicEra = exports.MortalEra = exports.ImmortalEra = void 0;
    function getTrailingZeros(period) {
        const binary = period.toString(2);
        let index = 0;
        while (binary[binary.length - 1 - index] === '0') {
            index++;
        }
        return index;
    }
    /**
     * @name ImmortalEra
     * @description
     * The ImmortalEra for an extrinsic
     */
    class ImmortalEra extends Raw_6.Raw {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        constructor(registry, value) {
            // For immortals, we always provide the known value (i.e. treated as a
            // constant no matter how it is constructed - it is a fixed structure)
            super(registry, constants_2.IMMORTAL_ERA);
        }
    }
    exports.ImmortalEra = ImmortalEra;
    /**
     * @name MortalEra
     * @description
     * The MortalEra for an extrinsic, indicating period and phase
     */
    class MortalEra extends Tuple_4.Tuple {
        constructor(registry, value) {
            super(registry, {
                period: U64_2.u64,
                phase: U64_2.u64
            }, MortalEra._decodeMortalEra(registry, value));
        }
        /** @internal */
        static _decodeMortalEra(registry, value) {
            if (!value) {
                return [new U64_2.u64(registry), new U64_2.u64(registry)];
            }
            else if (util_58.isU8a(value) || util_58.isHex(value) || Array.isArray(value)) {
                return MortalEra._decodeMortalU8a(registry, util_58.u8aToU8a(value));
            }
            else if (util_58.isObject(value)) {
                return MortalEra._decodeMortalObject(registry, value);
            }
            throw new Error('Invalid data passed to Mortal era');
        }
        /** @internal */
        static _decodeMortalObject(registry, value) {
            const { current, period } = value;
            let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
            calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
            const phase = current % calPeriod;
            const quantizeFactor = Math.max(calPeriod >> 12, 1);
            const quantizedPhase = phase / quantizeFactor * quantizeFactor;
            return [new U64_2.u64(registry, calPeriod), new U64_2.u64(registry, quantizedPhase)];
        }
        /** @internal */
        static _decodeMortalU8a(registry, value) {
            if (value.length === 0) {
                return [new U64_2.u64(registry), new U64_2.u64(registry)];
            }
            const first = util_58.u8aToBn(value.subarray(0, 1)).toNumber();
            const second = util_58.u8aToBn(value.subarray(1, 2)).toNumber();
            const encoded = first + (second << 8);
            const period = 2 << (encoded % (1 << 4));
            const quantizeFactor = Math.max(period >> 12, 1);
            const phase = (encoded >> 4) * quantizeFactor;
            util_58.assert(period >= 4 && phase < period, 'Invalid data passed to Mortal era');
            return [new U64_2.u64(registry, period), new U64_2.u64(registry, phase)];
        }
        /**
         * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
         */
        get encodedLength() {
            return 2;
        }
        /**
         * @description The period of this Mortal wraps as a [[U64]]
         */
        get period() {
            return this[0];
        }
        /**
         * @description The phase of this Mortal wraps as a [[U64]]
         */
        get phase() {
            return this[1];
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return {
                period: util_58.formatNumber(this.period),
                phase: util_58.formatNumber(this.phase)
            };
        }
        /**
         * @description Returns a JSON representation of the actual value
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the parity-codec specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         * Period and phase are encoded:
         *   - The period of validity from the block hash found in the signing material.
         *   - The phase in the period that this transaction's lifetime begins (and, importantly,
         *     implies which block hash is included in the signature material). If the `period` is
         *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
         *     `period` is.
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            const period = this.period.toNumber();
            const phase = this.phase.toNumber();
            const quantizeFactor = Math.max(period >> 12, 1);
            const trailingZeros = getTrailingZeros(period);
            const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (((phase / quantizeFactor) << 4));
            const first = encoded >> 8;
            const second = encoded & 0xff;
            return new Uint8Array([second, first]);
        }
        /**
         * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
         */
        birth(current) {
            // FIXME No toNumber() here
            return Math.floor((Math.max(util_58.bnToBn(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();
        }
        /**
         * @description Get the block number of the first block at which the era has ended.
         */
        death(current) {
            // FIXME No toNumber() here
            return this.birth(current) + this.period.toNumber();
        }
    }
    exports.MortalEra = MortalEra;
    /**
     * @name GenericExtrinsicEra
     * @description
     * The era for an extrinsic, indicating either a mortal or immortal extrinsic
     */
    class GenericExtrinsicEra extends Enum_4.Enum {
        constructor(registry, value) {
            super(registry, {
                ImmortalEra,
                MortalEra
            }, GenericExtrinsicEra._decodeExtrinsicEra(value));
        }
        /** @internal */
        // eslint-disable-next-line @typescript-eslint/ban-types
        static _decodeExtrinsicEra(value = new Uint8Array()) {
            if (value instanceof GenericExtrinsicEra) {
                return GenericExtrinsicEra._decodeExtrinsicEra(value.toU8a());
            }
            else if (util_58.isHex(value)) {
                return GenericExtrinsicEra._decodeExtrinsicEra(util_58.hexToU8a(value));
            }
            else if (!value || util_58.isU8a(value)) {
                return (!value?.length || value[0] === 0)
                    ? new Uint8Array([0])
                    : new Uint8Array([1, value[0], value[1]]);
            }
            else if (util_58.isObject(value)) {
                // this is to de-serialize from JSON
                return value.MortalEra
                    ? { MortalEra: value.MortalEra }
                    : value.ImmortalEra
                        ? { ImmortalEra: value.ImmortalEra }
                        : { MortalEra: value };
            }
            throw new Error('Invalid data passed to Era');
        }
        /**
         * @description Override the encoded length method
         */
        get encodedLength() {
            return this.isImmortalEra
                ? this.asImmortalEra.encodedLength
                : this.asMortalEra.encodedLength;
        }
        /**
         * @description Returns the item as a [[ImmortalEra]]
         */
        get asImmortalEra() {
            util_58.assert(this.isImmortalEra, `Cannot convert '${this.type}' via asImmortalEra`);
            return this.value;
        }
        /**
         * @description Returns the item as a [[MortalEra]]
         */
        get asMortalEra() {
            util_58.assert(this.isMortalEra, `Cannot convert '${this.type}' via asMortalEra`);
            return this.value;
        }
        /**
         * @description `true` if Immortal
         */
        get isImmortalEra() {
            return this.index === 0;
        }
        /**
         * @description `true` if Mortal
         */
        get isMortalEra() {
            return this.index > 0;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the parity-codec specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return this.isMortalEra
                ? this.asMortalEra.toU8a(isBare)
                : this.asImmortalEra.toU8a(isBare);
        }
    }
    exports.GenericExtrinsicEra = GenericExtrinsicEra;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/v4/Extrinsic", ["require", "exports", "@polkadot/util", "types/src/codec/Struct"], function (require, exports, util_59, Struct_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicV4 = exports.EXTRINSIC_VERSION = void 0;
    exports.EXTRINSIC_VERSION = 4;
    /**
     * @name GenericExtrinsicV4
     * @description
     * The third generation of compact extrinsics
     */
    class GenericExtrinsicV4 extends Struct_5.Struct {
        constructor(registry, value, { isSigned } = {}) {
            super(registry, {
                signature: 'ExtrinsicSignatureV4',
                // eslint-disable-next-line sort-keys
                method: 'Call'
            }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
        }
        /** @internal */
        static decodeExtrinsic(registry, value, isSigned = false) {
            if (value instanceof GenericExtrinsicV4) {
                return value;
            }
            else if (value instanceof registry.createClass('Call')) {
                return { method: value };
            }
            else if (util_59.isU8a(value)) {
                // here we decode manually since we need to pull through the version information
                const signature = registry.createType('ExtrinsicSignatureV4', value, { isSigned });
                const method = registry.createType('Call', value.subarray(signature.encodedLength));
                return {
                    method,
                    signature
                };
            }
            return value || {};
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description The [[Call]] this extrinsic wraps
         */
        get method() {
            return this.get('method');
        }
        /**
         * @description The [[ExtrinsicSignatureV4]]
         */
        get signature() {
            return this.get('signature');
        }
        /**
         * @description The version for the signature
         */
        get version() {
            return exports.EXTRINSIC_VERSION;
        }
        /**
         * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
         */
        addSignature(signer, signature, payload) {
            this.signature.addSignature(signer, signature, payload);
            return this;
        }
        /**
         * @description Sign the extrinsic with a specific keypair
         */
        sign(account, options) {
            this.signature.sign(this.method, account, options);
            return this;
        }
        /**
         * @describe Adds a fake signature to the extrinsic
         */
        signFake(signer, options) {
            this.signature.signFake(this.method, signer, options);
            return this;
        }
    }
    exports.GenericExtrinsicV4 = GenericExtrinsicV4;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Base", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base = void 0;
    /**
     * @name Base
     * @description A type extends the Base class, when it holds a value
     */
    class Base {
        constructor(registry, value) {
            this.registry = registry;
            this._raw = value;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this._raw.isEmpty;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this._raw.eq(other);
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex(isLe) {
            return this._raw.toHex(isLe);
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this._raw.toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this._raw.toJSON();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this._raw.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return this._raw.toU8a(isBare);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Base';
        }
    }
    exports.Base = Base;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/Extrinsic", ["require", "exports", "@polkadot/util", "types/src/codec/Base", "types/src/extrinsic/constants", "types/src/extrinsic/v4/Extrinsic"], function (require, exports, util_60, Base_1, constants_3, Extrinsic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsic = exports.LATEST_EXTRINSIC_VERSION = void 0;
    const VERSIONS = [
        'ExtrinsicUnknown',
        'ExtrinsicUnknown',
        'ExtrinsicUnknown',
        'ExtrinsicUnknown',
        'ExtrinsicV4'
    ];
    Object.defineProperty(exports, "LATEST_EXTRINSIC_VERSION", { enumerable: true, get: function () { return Extrinsic_1.EXTRINSIC_VERSION; } });
    class ExtrinsicBase extends Base_1.Base {
        /**
         * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
         */
        get args() {
            return this.method.args;
        }
        /**
         * @description The argument definitions, compatible with [[Call]]
         */
        get argsDef() {
            return this.method.argsDef;
        }
        /**
         * @description The actual `[sectionIndex, methodIndex]` as used in the Call
         */
        get callIndex() {
            return this.method.callIndex;
        }
        /**
         * @description The actual data for the Call
         */
        get data() {
            return this.method.data;
        }
        /**
         * @description The era for this extrinsic
         */
        get era() {
            return this._raw.signature.era;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description `true` id the extrinsic is signed
         */
        get isSigned() {
            return this._raw.signature.isSigned;
        }
        /**
         * @description The length of the actual data, excluding prefix
         */
        get length() {
            return this.toU8a(true).length;
        }
        /**
         * @description The [[FunctionMetadataLatest]] that describes the extrinsic
         */
        get meta() {
            return this.method.meta;
        }
        /**
         * @description The [[Call]] this extrinsic wraps
         */
        get method() {
            return this._raw.method;
        }
        /**
         * @description The nonce for this extrinsic
         */
        get nonce() {
            return this._raw.signature.nonce;
        }
        /**
         * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
         */
        get signature() {
            return this._raw.signature.signature;
        }
        /**
         * @description The [[Address]] that signed
         */
        get signer() {
            return this._raw.signature.signer;
        }
        /**
         * @description Forwards compat
         */
        get tip() {
            return this._raw.signature.tip;
        }
        /**
         * @description Returns the raw transaction version (not flagged with signing information)
        */
        get type() {
            return this._raw.version;
        }
        /**
         * @description Returns the encoded version flag
        */
        get version() {
            return this.type | (this.isSigned ? constants_3.BIT_SIGNED : constants_3.BIT_UNSIGNED);
        }
        /**
         * @description Checks if the source matches this in type
         */
        is(other) {
            return this.method.is(other);
        }
    }
    /**
     * @name GenericExtrinsic
     * @description
     * Representation of an Extrinsic in the system. It contains the actual call,
     * (optional) signature and encodes with an actual length prefix
     *
     * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
     *
     * Can be:
     * - signed, to create a transaction
     * - left as is, to create an inherent
     */
    class GenericExtrinsic extends ExtrinsicBase {
        constructor(registry, value, { version } = {}) {
            super(registry, GenericExtrinsic._decodeExtrinsic(registry, value, version));
        }
        /** @internal */
        static _newFromValue(registry, value, version) {
            if (value instanceof GenericExtrinsic) {
                return value._raw;
            }
            const isSigned = (version & constants_3.BIT_SIGNED) === constants_3.BIT_SIGNED;
            const type = VERSIONS[version & constants_3.UNMASK_VERSION] || VERSIONS[0];
            // we cast here since the VERSION definition is incredibly broad - we don't have a
            // slice for "only add extrinsic types", and more string definitions become unwieldy
            return registry.createType(type, value, { isSigned, version });
        }
        /** @internal */
        static _decodeExtrinsic(registry, value, version = constants_3.DEFAULT_VERSION) {
            if (util_60.isU8a(value) || Array.isArray(value) || util_60.isHex(value)) {
                return GenericExtrinsic._decodeU8a(registry, util_60.u8aToU8a(value), version);
            }
            else if (value instanceof registry.createClass('Call')) {
                return GenericExtrinsic._newFromValue(registry, { method: value }, version);
            }
            return GenericExtrinsic._newFromValue(registry, value, version);
        }
        /** @internal */
        static _decodeU8a(registry, value, version) {
            if (!value.length) {
                return GenericExtrinsic._newFromValue(registry, new Uint8Array(), version);
            }
            const [offset, length] = util_60.compactFromU8a(value);
            const total = offset + length.toNumber();
            util_60.assert(total <= value.length, `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
            const data = value.subarray(offset, total);
            return GenericExtrinsic._newFromValue(registry, data.subarray(1), data[0]);
        }
        /**
         * @description Injects an already-generated signature into the extrinsic
         */
        addSignature(signer, signature, payload) {
            this._raw.addSignature(signer, signature, payload);
            return this;
        }
        /**
         * @description Sign the extrinsic with a specific keypair
         */
        sign(account, options) {
            this._raw.sign(account, options);
            return this;
        }
        /**
         * @describe Adds a fake signature to the extrinsic
         */
        signFake(signer, options) {
            this._raw.signFake(signer, options);
            return this;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex(isBare) {
            return util_60.u8aToHex(this.toU8a(isBare));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            return {
                isSigned: this.isSigned,
                method: this.method.toHuman(isExpanded),
                ...(this.isSigned
                    ? {
                        era: this.era.toHuman(isExpanded),
                        nonce: this.nonce.toHuman(isExpanded),
                        signature: this.signature.toHex(),
                        signer: this.signer.toHuman(isExpanded),
                        tip: this.tip.toHuman(isExpanded)
                    }
                    : {})
            };
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Extrinsic';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value is not length-prefixed
         */
        toU8a(isBare) {
            // we do not apply bare to the internal values, rather this only determines out length addition,
            // where we strip all lengths this creates an extrinsic that cannot be decoded
            const encoded = util_60.u8aConcat(new Uint8Array([this.version]), this._raw.toU8a());
            return isBare
                ? encoded
                : util_60.compactAddLength(encoded);
        }
    }
    exports.GenericExtrinsic = GenericExtrinsic;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/ExtrinsicPayload", ["require", "exports", "@polkadot/util", "types/src/codec/Base", "types/src/extrinsic/constants"], function (require, exports, util_61, Base_2, constants_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicPayload = void 0;
    const VERSIONS = [
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadV4'
    ];
    /**
     * @name GenericExtrinsicPayload
     * @description
     * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
     * on the contents included
     */
    class GenericExtrinsicPayload extends Base_2.Base {
        constructor(registry, value, { version } = {}) {
            super(registry, GenericExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));
        }
        /** @internal */
        static decodeExtrinsicPayload(registry, value, version = constants_4.DEFAULT_VERSION) {
            if (value instanceof GenericExtrinsicPayload) {
                return value._raw;
            }
            return registry.createType(VERSIONS[version] || VERSIONS[0], value, { version });
        }
        /**
         * @description The block [[Hash]] the signature applies to (mortal/immortal)
         */
        get blockHash() {
            return this._raw.blockHash;
        }
        /**
         * @description The [[ExtrinsicEra]]
         */
        get era() {
            return this._raw.era;
        }
        /**
         * @description The genesis block [[Hash]] the signature applies to
         */
        get genesisHash() {
            // NOTE only v3+
            return this._raw.genesisHash || this.registry.createType('Hash');
        }
        /**
         * @description The [[Raw]] contained in the payload
         */
        get method() {
            return this._raw.method;
        }
        /**
         * @description The [[Index]]
         */
        get nonce() {
            return this._raw.nonce;
        }
        /**
         * @description The specVersion as a [[u32]] for this payload
         */
        get specVersion() {
            // NOTE only v3+
            return this._raw.specVersion || this.registry.createType('u32');
        }
        /**
         * @description The [[Balance]]
         */
        get tip() {
            // NOTE from v2+
            return this._raw.tip || this.registry.createType('Compact<Balance>');
        }
        /**
         * @description The transaction version as a [[u32]] for this payload
         */
        get transactionVersion() {
            // NOTE only v4+
            return this._raw.transactionVersion || this.registry.createType('u32');
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this._raw.eq(other);
        }
        /**
         * @description Sign the payload with the keypair
         */
        sign(signerPair) {
            const signature = this._raw.sign(signerPair);
            // This is extensible, so we could quite readily extend to send back extra
            // information, such as for instance the payload, i.e. `payload: this.toHex()`
            // For the case here we sign via the extrinsic, we ignore the return, so generally
            // this is applicable for external signing
            return {
                signature: util_61.u8aToHex(signature)
            };
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this._raw.toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.toHex();
        }
        /**
         * @description Returns a serialized u8a form
         */
        toU8a(isBare) {
            // call our parent, with only the method stripped
            return super.toU8a(isBare ? { method: true } : false);
        }
    }
    exports.GenericExtrinsicPayload = GenericExtrinsicPayload;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/ExtrinsicPayloadUnknown", ["require", "exports", "types/src/codec/Struct"], function (require, exports, Struct_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicPayloadUnknown = void 0;
    /**
     * @name GenericExtrinsicPayloadUnknown
     * @description
     * A default handler for payloads where the version is not known (default throw)
     */
    class GenericExtrinsicPayloadUnknown extends Struct_6.Struct {
        constructor(registry, value, { version = 0 } = {}) {
            super(registry, {});
            throw new Error(`Unsupported extrinsic payload version ${version}`);
        }
    }
    exports.GenericExtrinsicPayloadUnknown = GenericExtrinsicPayloadUnknown;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/ExtrinsicUnknown", ["require", "exports", "types/src/codec/Struct", "types/src/extrinsic/constants"], function (require, exports, Struct_7, constants_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicUnknown = void 0;
    /**
     * @name GenericExtrinsicUnknown
     * @description
     * A default handler for extrinsics where the version is not known (default throw)
     */
    class GenericExtrinsicUnknown extends Struct_7.Struct {
        constructor(registry, value, { isSigned = false, version = 0 } = {}) {
            super(registry, {});
            throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & constants_5.UNMASK_VERSION}`);
        }
    }
    exports.GenericExtrinsicUnknown = GenericExtrinsicUnknown;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/SignerPayload", ["require", "exports", "@polkadot/util", "types/src/codec/Struct"], function (require, exports, util_62, Struct_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericSignerPayload = void 0;
    // We explicitly cast the type here to get the actual TypeScript exports right
    // We can ignore the properties, added via Struct.with
    const _Payload = Struct_8.Struct.with({
        address: 'Address',
        blockHash: 'Hash',
        blockNumber: 'BlockNumber',
        era: 'ExtrinsicEra',
        genesisHash: 'Hash',
        method: 'Call',
        nonce: 'Compact<Index>',
        runtimeVersion: 'RuntimeVersion',
        signedExtensions: 'Vec<Text>',
        tip: 'Compact<Balance>',
        version: 'u8'
    });
    /**
     * @name GenericSignerPayload
     * @description
     * A generic signer payload that can be used for serialization between API and signer
     */
    class GenericSignerPayload extends _Payload {
        /**
         * @description Creates an representation of the structure as an ISignerPayload JSON
         */
        toPayload() {
            const { address, blockHash, blockNumber, era, genesisHash, method, nonce, runtimeVersion: { specVersion, transactionVersion }, signedExtensions, tip, version } = this;
            return {
                address: address.toString(),
                blockHash: blockHash.toHex(),
                blockNumber: blockNumber.toHex(),
                era: era.toHex(),
                genesisHash: genesisHash.toHex(),
                method: method.toHex(),
                nonce: nonce.toHex(),
                signedExtensions: signedExtensions.map((e) => e.toString()),
                specVersion: specVersion.toHex(),
                tip: tip.toHex(),
                transactionVersion: transactionVersion.toHex(),
                version: version.toNumber()
            };
        }
        /**
         * @description Creates a representation of the payload in raw Exrinsic form
         */
        toRaw() {
            const payload = this.toPayload();
            // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
            const data = util_62.u8aToHex(this.registry.createType('ExtrinsicPayload', payload, { version: payload.version }).toU8a({ method: true }));
            return {
                address: payload.address,
                data,
                type: 'payload'
            };
        }
    }
    exports.GenericSignerPayload = GenericSignerPayload;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/util", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sign = void 0;
    // a helper function for both types of payloads, Raw and metadata-known
    function sign(registry, signerPair, u8a, options) {
        const encoded = u8a.length > 256
            ? registry.hash(u8a)
            : u8a;
        return signerPair.sign(encoded, options);
    }
    exports.sign = sign;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/v4/ExtrinsicPayload", ["require", "exports", "types/src/codec/Enum", "types/src/codec/Struct", "types/src/extrinsic/util"], function (require, exports, Enum_5, Struct_9, util_63) {
    "use strict";
    var _signOptions;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicPayloadV4 = void 0;
    /**
     * @name GenericExtrinsicPayloadV4
     * @description
     * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
     * on the contents included
     */
    class GenericExtrinsicPayloadV4 extends Struct_9.Struct {
        constructor(registry, value) {
            super(registry, {
                method: 'Bytes',
                ...registry.getSignedExtensionTypes(),
                ...registry.getSignedExtensionExtra()
            }, value);
            _signOptions.set(this, void 0);
            // Do detection for the type of extrinsic, in the case of MultiSignature this is an
            // enum, in the case of AnySignature, this is a Hash only (may be 64 or 65 bytes)
            __classPrivateFieldSet(this, _signOptions, {
                withType: registry.createType('ExtrinsicSignature') instanceof Enum_5.Enum
            });
        }
        /**
         * @description The block [[Hash]] the signature applies to (mortal/immortal)
         */
        get blockHash() {
            return this.get('blockHash');
        }
        /**
         * @description The [[ExtrinsicEra]]
         */
        get era() {
            return this.get('era');
        }
        /**
         * @description The genesis [[Hash]] the signature applies to (mortal/immortal)
         */
        get genesisHash() {
            return this.get('genesisHash');
        }
        /**
         * @description The [[Bytes]] contained in the payload
         */
        get method() {
            return this.get('method');
        }
        /**
         * @description The [[Index]]
         */
        get nonce() {
            return this.get('nonce');
        }
        /**
         * @description The specVersion for this signature
         */
        get specVersion() {
            return this.get('specVersion');
        }
        /**
         * @description The tip [[Balance]]
         */
        get tip() {
            return this.get('tip');
        }
        /**
         * @description The transactionVersion for this signature
         */
        get transactionVersion() {
            return this.get('transactionVersion');
        }
        /**
         * @description Sign the payload with the keypair
         */
        sign(signerPair) {
            // NOTE The `toU8a({ method: true })` argument is absolutely critical - we don't want the method (Bytes)
            // to have the length prefix included. This means that the data-as-signed is un-decodable,
            // but is also doesn't need the extra information, only the pure data (and is not decoded)
            // ... The same applies to V1..V3, if we have a V5, carry move this comment to latest
            return util_63.sign(this.registry, signerPair, this.toU8a({ method: true }), __classPrivateFieldGet(this, _signOptions));
        }
    }
    exports.GenericExtrinsicPayloadV4 = GenericExtrinsicPayloadV4;
    _signOptions = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/v4/ExtrinsicSignature", ["require", "exports", "@polkadot/util", "types/src/codec/Enum", "types/src/codec/Struct", "types/src/extrinsic/constants", "types/src/extrinsic/v4/ExtrinsicPayload"], function (require, exports, util_64, Enum_6, Struct_10, constants_6, ExtrinsicPayload_1) {
    "use strict";
    var _fakePrefix;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicSignatureV4 = void 0;
    const FAKE_NONE = new Uint8Array();
    const FAKE_SOME = new Uint8Array([1]);
    /**
     * @name GenericExtrinsicSignatureV4
     * @description
     * A container for the [[Signature]] associated with a specific [[Extrinsic]]
     */
    class GenericExtrinsicSignatureV4 extends Struct_10.Struct {
        constructor(registry, value, { isSigned } = {}) {
            super(registry, {
                signer: 'Address',
                // eslint-disable-next-line sort-keys
                signature: 'ExtrinsicSignature',
                ...registry.getSignedExtensionTypes()
            }, GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
            _fakePrefix.set(this, void 0);
            __classPrivateFieldSet(this, _fakePrefix, registry.createType('ExtrinsicSignature') instanceof Enum_6.Enum
                ? FAKE_SOME
                : FAKE_NONE);
        }
        /** @internal */
        static decodeExtrinsicSignature(value, isSigned = false) {
            if (!value) {
                return constants_6.EMPTY_U8A;
            }
            else if (value instanceof GenericExtrinsicSignatureV4) {
                return value;
            }
            return isSigned
                ? value
                : constants_6.EMPTY_U8A;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.isSigned
                ? super.encodedLength
                : 0;
        }
        /**
         * @description `true` if the signature is valid
         */
        get isSigned() {
            return !this.signature.isEmpty;
        }
        /**
         * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
         */
        get era() {
            return this.get('era');
        }
        /**
         * @description The [[Index]] for the signature
         */
        get nonce() {
            return this.get('nonce');
        }
        /**
         * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
         */
        get signature() {
            // the second case here is when we don't have an enum signature, treat as raw
            return (this.multiSignature.value || this.multiSignature);
        }
        /**
         * @description The raw [[ExtrinsicSignature]]
         */
        get multiSignature() {
            return this.get('signature');
        }
        /**
         * @description The [[Address]] that signed
         */
        get signer() {
            return this.get('signer');
        }
        /**
         * @description The [[Balance]] tip
         */
        get tip() {
            return this.get('tip');
        }
        _injectSignature(signer, signature, { era, nonce, tip }) {
            this.set('era', era);
            this.set('nonce', nonce);
            this.set('signer', signer);
            this.set('signature', signature);
            this.set('tip', tip);
            return this;
        }
        /**
         * @description Adds a raw signature
         */
        addSignature(signer, signature, payload) {
            return this._injectSignature(this.registry.createType('Address', signer), this.registry.createType('ExtrinsicSignature', signature), new ExtrinsicPayload_1.GenericExtrinsicPayloadV4(this.registry, payload));
        }
        /**
         * @description Creates a payload from the supplied options
         */
        createPayload(method, { blockHash, era, genesisHash, nonce, runtimeVersion: { specVersion, transactionVersion }, tip }) {
            return new ExtrinsicPayload_1.GenericExtrinsicPayloadV4(this.registry, {
                blockHash,
                era: era || constants_6.IMMORTAL_ERA,
                genesisHash,
                method: method.toHex(),
                nonce,
                specVersion,
                tip: tip || 0,
                transactionVersion: transactionVersion || 0
            });
        }
        /**
         * @description Generate a payload and applies the signature from a keypair
         */
        sign(method, account, options) {
            const signer = this.registry.createType('Address', account.addressRaw);
            const payload = this.createPayload(method, options);
            const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));
            return this._injectSignature(signer, signature, payload);
        }
        /**
         * @description Generate a payload and applies a fake signature
         */
        signFake(method, address, options) {
            const signer = this.registry.createType('Address', address);
            const payload = this.createPayload(method, options);
            const signature = this.registry.createType('ExtrinsicSignature', util_64.u8aConcat(__classPrivateFieldGet(this, _fakePrefix), new Uint8Array(64).fill(0x42)));
            return this._injectSignature(signer, signature, payload);
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return this.isSigned
                ? super.toU8a(isBare)
                : constants_6.EMPTY_U8A;
        }
    }
    exports.GenericExtrinsicSignatureV4 = GenericExtrinsicSignatureV4;
    _fakePrefix = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/v4/index", ["require", "exports", "types/src/extrinsic/v4/Extrinsic", "types/src/extrinsic/v4/ExtrinsicPayload", "types/src/extrinsic/v4/ExtrinsicSignature"], function (require, exports, Extrinsic_2, ExtrinsicPayload_2, ExtrinsicSignature_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericExtrinsicSignatureV4 = exports.GenericExtrinsicPayloadV4 = exports.GenericExtrinsicV4 = void 0;
    Object.defineProperty(exports, "GenericExtrinsicV4", { enumerable: true, get: function () { return Extrinsic_2.GenericExtrinsicV4; } });
    Object.defineProperty(exports, "GenericExtrinsicPayloadV4", { enumerable: true, get: function () { return ExtrinsicPayload_2.GenericExtrinsicPayloadV4; } });
    Object.defineProperty(exports, "GenericExtrinsicSignatureV4", { enumerable: true, get: function () { return ExtrinsicSignature_1.GenericExtrinsicSignatureV4; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/index", ["require", "exports", "types/src/extrinsic/Extrinsic", "types/src/extrinsic/ExtrinsicEra", "types/src/extrinsic/ExtrinsicPayload", "types/src/extrinsic/ExtrinsicPayloadUnknown", "types/src/extrinsic/ExtrinsicUnknown", "types/src/extrinsic/SignerPayload", "types/src/extrinsic/v4/index"], function (require, exports, Extrinsic_3, ExtrinsicEra_1, ExtrinsicPayload_3, ExtrinsicPayloadUnknown_1, ExtrinsicUnknown_1, SignerPayload_1, v4_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericSignerPayload = exports.GenericExtrinsicUnknown = exports.GenericExtrinsicPayloadUnknown = exports.GenericExtrinsicPayload = exports.GenericImmortalEra = exports.GenericMortalEra = exports.GenericExtrinsicEra = exports.GenericExtrinsic = void 0;
    Object.defineProperty(exports, "GenericExtrinsic", { enumerable: true, get: function () { return Extrinsic_3.GenericExtrinsic; } });
    Object.defineProperty(exports, "GenericExtrinsicEra", { enumerable: true, get: function () { return ExtrinsicEra_1.GenericExtrinsicEra; } });
    Object.defineProperty(exports, "GenericMortalEra", { enumerable: true, get: function () { return ExtrinsicEra_1.MortalEra; } });
    Object.defineProperty(exports, "GenericImmortalEra", { enumerable: true, get: function () { return ExtrinsicEra_1.ImmortalEra; } });
    Object.defineProperty(exports, "GenericExtrinsicPayload", { enumerable: true, get: function () { return ExtrinsicPayload_3.GenericExtrinsicPayload; } });
    Object.defineProperty(exports, "GenericExtrinsicPayloadUnknown", { enumerable: true, get: function () { return ExtrinsicPayloadUnknown_1.GenericExtrinsicPayloadUnknown; } });
    Object.defineProperty(exports, "GenericExtrinsicUnknown", { enumerable: true, get: function () { return ExtrinsicUnknown_1.GenericExtrinsicUnknown; } });
    Object.defineProperty(exports, "GenericSignerPayload", { enumerable: true, get: function () { return SignerPayload_1.GenericSignerPayload; } });
    __exportStar(v4_1, exports);
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/ethereum/AccountId", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/U8aFixed"], function (require, exports, util_65, util_crypto_3, U8aFixed_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericEthereumAccountId = void 0;
    /** @internal */
    function decodeAccountId(value) {
        if (util_65.isU8a(value) || Array.isArray(value)) {
            return util_65.u8aToU8a(value);
        }
        else if (util_65.isHex(value) || util_crypto_3.isEthereumAddress(value)) {
            return util_65.hexToU8a(value.toString());
        }
        else if (util_65.isString(value)) {
            return util_65.u8aToU8a(value.toString());
        }
        return value;
    }
    /**
     * @name GenericEthereumAccountId
     * @description
     * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
     * underlying addresses (20 bytes in length), we extend from U8aFixed which is
     * just a Uint8Array wrapper with a fixed length.
     */
    class GenericEthereumAccountId extends U8aFixed_2.U8aFixed {
        constructor(registry, value = new Uint8Array()) {
            super(registry, decodeAccountId(value), 160);
        }
        static encode(value) {
            return util_crypto_3.ethereumEncode(value);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return super.eq(decodeAccountId(other));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return GenericEthereumAccountId.encode(this);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'AccountId';
        }
    }
    exports.GenericEthereumAccountId = GenericEthereumAccountId;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/AccountIndex", ["require", "exports", "bn.js", "@polkadot/util", "@polkadot/util-crypto", "types/src/primitive/U32"], function (require, exports, bn_js_4, util_66, util_crypto_4, U32_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericAccountIndex = void 0;
    bn_js_4 = __importDefault(bn_js_4);
    const PREFIX_1BYTE = 0xef;
    const PREFIX_2BYTE = 0xfc;
    const PREFIX_4BYTE = 0xfd;
    const PREFIX_8BYTE = 0xfe;
    const MAX_1BYTE = new bn_js_4.default(PREFIX_1BYTE);
    const MAX_2BYTE = new bn_js_4.default(1).shln(16);
    const MAX_4BYTE = new bn_js_4.default(1).shln(32);
    /** @internal */
    function decodeAccountIndex(value) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        if (value instanceof GenericAccountIndex) {
            // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
            // AccountIndex), which has the initial `toString()` implementation.
            return value.toBn();
        }
        else if (util_66.isBn(value) || util_66.isNumber(value) || util_66.isHex(value) || util_66.isU8a(value) || util_66.isBigInt(value)) {
            return value;
        }
        return decodeAccountIndex(util_crypto_4.decodeAddress(value));
    }
    /**
     * @name GenericAccountIndex
     * @description
     * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
     * for an Account. We extends from [[U32]] to provide the number-like properties.
     */
    class GenericAccountIndex extends U32_3.u32 {
        constructor(registry, value = new bn_js_4.default(0)) {
            super(registry, decodeAccountIndex(value));
        }
        static calcLength(_value) {
            const value = util_66.bnToBn(_value);
            if (value.lte(MAX_1BYTE)) {
                return 1;
            }
            else if (value.lt(MAX_2BYTE)) {
                return 2;
            }
            else if (value.lt(MAX_4BYTE)) {
                return 4;
            }
            return 8;
        }
        static readLength(input) {
            const first = input[0];
            if (first === PREFIX_2BYTE) {
                return [1, 2];
            }
            else if (first === PREFIX_4BYTE) {
                return [1, 4];
            }
            else if (first === PREFIX_8BYTE) {
                return [1, 8];
            }
            return [0, 1];
        }
        static writeLength(input) {
            switch (input.length) {
                case 2: return new Uint8Array([PREFIX_2BYTE]);
                case 4: return new Uint8Array([PREFIX_4BYTE]);
                case 8: return new Uint8Array([PREFIX_8BYTE]);
                default: return new Uint8Array([]);
            }
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            // shortcut for BN or Number, don't create an object
            if (util_66.isBn(other) || util_66.isNumber(other)) {
                return super.eq(other);
            }
            // convert and compare
            return super.eq(this.registry.createType('AccountIndex', other));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            const length = GenericAccountIndex.calcLength(this);
            return util_crypto_4.encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'AccountIndex';
        }
    }
    exports.GenericAccountIndex = GenericAccountIndex;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/ethereum/LookupSource", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/Base", "types/src/generic/AccountIndex", "types/src/ethereum/AccountId"], function (require, exports, util_67, util_crypto_5, Base_3, AccountIndex_1, AccountId_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericEthereumLookupSource = exports.ACCOUNT_ID_PREFIX = void 0;
    exports.ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
    /** @internal */
    function decodeString(registry, value) {
        const decoded = util_crypto_5.decodeAddress(value);
        return decoded.length === 20
            ? registry.createType('EthereumAccountId', decoded)
            : registry.createType('AccountIndex', util_67.u8aToBn(decoded, true));
    }
    /** @internal */
    function decodeU8a(registry, value) {
        // This allows us to instantiate an address with a raw publicKey. Do this first before
        // we checking the first byte, otherwise we may split an already-existent valid address
        if (value.length === 20) {
            return registry.createType('EthereumAccountId', value);
        }
        else if (value[0] === 0xff) {
            return registry.createType('EthereumAccountId', value.subarray(1));
        }
        const [offset, length] = AccountIndex_1.GenericAccountIndex.readLength(value);
        return registry.createType('AccountIndex', util_67.u8aToBn(value.subarray(offset, offset + length), true));
    }
    /**
     * @name GenericEthereumLookupSource
     * @description
     * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
     * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
     * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
     * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
     */
    class GenericEthereumLookupSource extends Base_3.Base {
        constructor(registry, value = new Uint8Array()) {
            super(registry, GenericEthereumLookupSource._decodeAddress(registry, value));
        }
        /** @internal */
        static _decodeAddress(registry, value) {
            return value instanceof GenericEthereumLookupSource
                ? value._raw
                : value instanceof AccountId_1.GenericEthereumAccountId || value instanceof AccountIndex_1.GenericAccountIndex
                    ? value
                    : util_67.isBn(value) || util_67.isNumber(value) || util_67.isBigInt(value)
                        ? registry.createType('AccountIndex', value)
                        : Array.isArray(value) || util_67.isHex(value) || util_67.isU8a(value)
                            ? decodeU8a(registry, util_67.u8aToU8a(value))
                            : decodeString(registry, value);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            const rawLength = this._rawLength;
            return rawLength + (
            // for 1 byte AccountIndexes, we are not adding a specific prefix
            rawLength > 1
                ? 1
                : 0);
        }
        /**
         * @description The length of the raw value, either AccountIndex or AccountId
         */
        get _rawLength() {
            return this._raw instanceof AccountIndex_1.GenericAccountIndex
                ? AccountIndex_1.GenericAccountIndex.calcLength(this._raw)
                : this._raw.encodedLength;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_67.u8aToHex(this.toU8a());
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Address';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = this._raw.toU8a().subarray(0, this._rawLength);
            return isBare
                ? encoded
                : util_67.u8aConcat(this._raw instanceof AccountIndex_1.GenericAccountIndex
                    ? AccountIndex_1.GenericAccountIndex.writeLength(encoded)
                    : exports.ACCOUNT_ID_PREFIX, encoded);
        }
    }
    exports.GenericEthereumLookupSource = GenericEthereumLookupSource;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/ethereum/index", ["require", "exports", "types/src/ethereum/AccountId", "types/src/ethereum/LookupSource"], function (require, exports, AccountId_2, LookupSource_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericEthereumLookupSource = exports.GenericEthereumAccountId = void 0;
    Object.defineProperty(exports, "GenericEthereumAccountId", { enumerable: true, get: function () { return AccountId_2.GenericEthereumAccountId; } });
    Object.defineProperty(exports, "GenericEthereumLookupSource", { enumerable: true, get: function () { return LookupSource_1.GenericEthereumLookupSource; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/AccountId", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/U8aFixed"], function (require, exports, util_68, util_crypto_6, U8aFixed_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericAccountId = void 0;
    /** @internal */
    function decodeAccountId(value) {
        if (!value) {
            return new Uint8Array();
        }
        else if (util_68.isU8a(value) || Array.isArray(value)) {
            return util_68.u8aToU8a(value);
        }
        else if (util_68.isHex(value)) {
            return util_68.hexToU8a(value.toString());
        }
        else if (util_68.isString(value)) {
            return util_crypto_6.decodeAddress(value.toString());
        }
        throw new Error('Unknown type passed to AccountId constructor');
    }
    /**
     * @name GenericAccountId
     * @description
     * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
     * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
     * just a Uint8Array wrapper with a fixed length.
     */
    class GenericAccountId extends U8aFixed_3.U8aFixed {
        constructor(registry, value) {
            const decoded = decodeAccountId(value);
            // Part of stream containing >= 32 bytes or a all empty (defaults)
            util_68.assert(decoded.length >= 32 || !decoded.some((b) => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
            super(registry, decoded, 256);
        }
        static encode(value, ss58Format) {
            return util_crypto_6.encodeAddress(value, ss58Format);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return super.eq(decodeAccountId(other));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return GenericAccountId.encode(this, this.registry.chainSS58);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'AccountId';
        }
    }
    exports.GenericAccountId = GenericAccountId;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Block", ["require", "exports", "types/src/codec/Struct"], function (require, exports, Struct_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericBlock = void 0;
    /**
     * @name GenericBlock
     * @description
     * A block encoded with header and extrinsics
     */
    class GenericBlock extends Struct_11.Struct {
        constructor(registry, value) {
            super(registry, {
                header: 'Header',
                // eslint-disable-next-line sort-keys
                extrinsics: 'Vec<Extrinsic>'
            }, value);
        }
        /**
         * @description Encodes a content [[Hash]] for the block
         */
        get contentHash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description The [[Extrinsic]] contained in the block
         */
        get extrinsics() {
            return this.get('extrinsics');
        }
        /**
         * @description Block/header [[Hash]]
         */
        get hash() {
            return this.header.hash;
        }
        /**
         * @description The [[Header]] of the block
         */
        get header() {
            return this.get('header');
        }
    }
    exports.GenericBlock = GenericBlock;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Call", ["require", "exports", "@polkadot/util", "types/src/codec/Struct", "types/src/codec/U8aFixed", "types/src/create/createClass", "types/src/create/getTypeDef"], function (require, exports, util_69, Struct_12, U8aFixed_4, createClass_2, getTypeDef_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericCall = exports.GenericCallIndex = void 0;
    /**
     * Get a mapping of `argument name -> argument type` for the function, from
     * its metadata.
     *
     * @param meta - The function metadata used to get the definition.
     * @internal
     */
    function getArgsDef(registry, meta) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return GenericCall.filterOrigin(meta).reduce((result, { name, type }) => {
            const Type = createClass_2.getTypeClass(registry, getTypeDef_3.getTypeDef(type));
            result[name.toString()] = Type;
            return result;
        }, {});
    }
    /** @internal */
    function decodeCallViaObject(registry, value, _meta) {
        // we only pass args/methodsIndex out
        const { args, callIndex } = value;
        // Get the correct lookupIndex
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        const lookupIndex = callIndex instanceof GenericCallIndex
            ? callIndex.toU8a()
            : callIndex;
        // Find metadata with callIndex
        const meta = _meta || registry.findMetaCall(lookupIndex).meta;
        return {
            args,
            argsDef: getArgsDef(registry, meta),
            callIndex,
            meta
        };
    }
    /** @internal */
    function decodeCallViaU8a(registry, value, _meta) {
        // We need 2 bytes for the callIndex
        const callIndex = new Uint8Array(2);
        callIndex.set(value.subarray(0, 2), 0);
        // Find metadata with callIndex
        const meta = _meta || registry.findMetaCall(callIndex).meta;
        return {
            args: value.subarray(2),
            argsDef: getArgsDef(registry, meta),
            callIndex,
            meta
        };
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param value - Value to decode, one of:
     * - hex
     * - Uint8Array
     * - {@see DecodeMethodInput}
     * @param _meta - Metadata to use, so that `injectMethods` lookup is not
     * necessary.
     * @internal
     */
    function decodeCall(registry, value = new Uint8Array(), _meta) {
        if (util_69.isHex(value) || util_69.isU8a(value)) {
            return decodeCallViaU8a(registry, util_69.u8aToU8a(value), _meta);
        }
        else if (util_69.isObject(value) && value.callIndex && value.args) {
            return decodeCallViaObject(registry, value, _meta);
        }
        throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
    }
    /**
     * @name GenericCallIndex
     * @description
     * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
     */
    class GenericCallIndex extends U8aFixed_4.U8aFixed {
        constructor(registry, value) {
            super(registry, value, 16);
        }
    }
    exports.GenericCallIndex = GenericCallIndex;
    /**
     * @name GenericCall
     * @description
     * Extrinsic function descriptor
     */
    class GenericCall extends Struct_12.Struct {
        constructor(registry, value, meta) {
            const decoded = decodeCall(registry, value, meta);
            try {
                super(registry, {
                    callIndex: GenericCallIndex,
                    // eslint-disable-next-line sort-keys
                    args: Struct_12.Struct.with(decoded.argsDef)
                }, decoded);
            }
            catch (error) {
                let method = 'unknown.unknown';
                try {
                    const c = registry.findMetaCall(decoded.callIndex);
                    method = `${c.section}.${c.method}`;
                }
                catch (error) {
                    // ignore
                }
                throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
            }
            this._meta = decoded.meta;
        }
        // If the extrinsic function has an argument of type `Origin`, we ignore it
        static filterOrigin(meta) {
            // FIXME should be `arg.type !== Origin`, but doesn't work...
            return meta
                ? meta.args.filter(({ type }) => type.toString() !== 'Origin')
                : [];
        }
        /**
         * @description The arguments for the function call
         */
        get args() {
            // FIXME This should return a Struct instead of an Array
            return [...this.get('args').values()];
        }
        /**
         * @description The argument definitions
         */
        get argsDef() {
            return getArgsDef(this.registry, this.meta);
        }
        /**
         * @description The encoded `[sectionIndex, methodIndex]` identifier
         */
        get callIndex() {
            return this.get('callIndex').toU8a();
        }
        /**
         * @description The encoded data
         */
        get data() {
            return this.get('args').toU8a();
        }
        /**
         * @description The [[FunctionMetadata]]
         */
        get meta() {
            return this._meta;
        }
        /**
         * @description Returns the name of the method
         */
        get method() {
            return this.registry.findMetaCall(this.callIndex).method;
        }
        /**
         * @description Returns the module containing the method
         */
        get section() {
            return this.registry.findMetaCall(this.callIndex).section;
        }
        /**
         * @description Checks if the source matches this in type
         */
        is(other) {
            return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            let call;
            try {
                call = this.registry.findMetaCall(this.callIndex);
            }
            catch (error) {
                // swallow
            }
            return {
                args: this.args.map((arg) => arg.toHuman(isExpanded)),
                // args: this.args.map((arg, index) => call
                //   ? { [call.meta.args[index].name.toString()]: arg.toHuman(isExpanded) }
                //   : arg.toHuman(isExpanded)
                // ),
                // callIndex: u8aToHex(this.callIndex),
                method: call?.method,
                section: call?.section,
                ...(isExpanded && call
                    ? { documentation: call.meta.documentation.map((d) => d.toString()) }
                    : {})
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Call';
        }
    }
    exports.GenericCall = GenericCall;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/ConsensusEngineId", ["require", "exports", "bn.js", "@polkadot/util", "types/src/primitive/U32"], function (require, exports, bn_js_5, util_70, U32_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericConsensusEngineId = exports.CID_POW = exports.CID_GRPA = exports.CID_BABE = exports.CID_AURA = void 0;
    bn_js_5 = __importDefault(bn_js_5);
    // there are all reversed since it is actually encoded as u32, LE,
    // this means that FRNK has the bytes as KNRF
    const CID_AURA = 0x61727561; // 'aura'
    exports.CID_AURA = CID_AURA;
    const CID_BABE = 0x45424142; // 'BABE'
    exports.CID_BABE = CID_BABE;
    const CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)
    exports.CID_GRPA = CID_GRPA;
    const CID_POW = 0x5f776f70; // 'pow_'
    exports.CID_POW = CID_POW;
    /**
     * @name GenericConsensusEngineId
     * @description
     * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']
     */
    class GenericConsensusEngineId extends U32_4.u32 {
        static idToString(input) {
            return util_70.bnToBn(input)
                .toArray('le')
                .map((code) => String.fromCharCode(code))
                .join('');
        }
        static stringToId(input) {
            return input
                .split('')
                .reverse()
                .reduce((result, char) => (result * 256) + char.charCodeAt(0), 0);
        }
        /**
         * @description `true` if the engine matches aura
         */
        get isAura() {
            return this.eq(CID_AURA);
        }
        /**
         * @description `true` is the engine matches babe
         */
        get isBabe() {
            return this.eq(CID_BABE);
        }
        /**
         * @description `true` is the engine matches grandpa
         */
        get isGrandpa() {
            return this.eq(CID_GRPA);
        }
        /**
         * @description `true` is the engine matches pow
         */
        get isPow() {
            return this.eq(CID_POW);
        }
        _getAuraAuthor(bytes, sessionValidators) {
            return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true))
                .slotNumber
                .mod(new bn_js_5.default(sessionValidators.length))
                .toNumber()];
        }
        _getBabeAuthor(bytes, sessionValidators) {
            const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));
            return sessionValidators[digest.value.toNumber()];
        }
        _getPowAuthor(bytes) {
            return this.registry.createType('AccountId', bytes);
        }
        /**
         * @description From the input bytes, decode into an author
         */
        extractAuthor(bytes, sessionValidators) {
            if (sessionValidators?.length) {
                if (this.isAura) {
                    return this._getAuraAuthor(bytes, sessionValidators);
                }
                else if (this.isBabe) {
                    return this._getBabeAuthor(bytes, sessionValidators);
                }
            }
            if (this.isPow) {
                return this._getPowAuthor(bytes);
            }
            return undefined;
        }
        /**
         * @description Override the default toString to return a 4-byte string
         */
        toString() {
            return GenericConsensusEngineId.idToString(this);
        }
    }
    exports.GenericConsensusEngineId = GenericConsensusEngineId;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/LookupSource", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/Base", "types/src/generic/AccountId", "types/src/generic/AccountIndex"], function (require, exports, util_71, util_crypto_7, Base_4, AccountId_3, AccountIndex_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericLookupSource = exports.ACCOUNT_ID_PREFIX = void 0;
    exports.ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
    /** @internal */
    function decodeString(registry, value) {
        const decoded = util_crypto_7.decodeAddress(value);
        return decoded.length === 32
            ? registry.createType('AccountId', decoded)
            : registry.createType('AccountIndex', util_71.u8aToBn(decoded, true));
    }
    /** @internal */
    function decodeU8a(registry, value) {
        // This allows us to instantiate an address with a raw publicKey. Do this first before
        // we checking the first byte, otherwise we may split an already-existent valid address
        if (value.length === 32) {
            return registry.createType('AccountId', value);
        }
        else if (value[0] === 0xff) {
            return registry.createType('AccountId', value.subarray(1));
        }
        const [offset, length] = AccountIndex_2.GenericAccountIndex.readLength(value);
        return registry.createType('AccountIndex', util_71.u8aToBn(value.subarray(offset, offset + length), true));
    }
    /**
     * @name LookupSource
     * @description
     * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
     * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
     * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
     * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
     */
    class GenericLookupSource extends Base_4.Base {
        constructor(registry, value = new Uint8Array()) {
            super(registry, GenericLookupSource._decodeAddress(registry, value));
        }
        /** @internal */
        static _decodeAddress(registry, value) {
            return value instanceof GenericLookupSource
                ? value._raw
                : value instanceof AccountId_3.GenericAccountId || value instanceof AccountIndex_2.GenericAccountIndex
                    ? value
                    : util_71.isBn(value) || util_71.isNumber(value) || util_71.isBigInt(value)
                        ? registry.createType('AccountIndex', value)
                        : Array.isArray(value) || util_71.isHex(value) || util_71.isU8a(value)
                            ? decodeU8a(registry, util_71.u8aToU8a(value))
                            : decodeString(registry, value);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            const rawLength = this._rawLength;
            return rawLength + (
            // for 1 byte AccountIndexes, we are not adding a specific prefix
            rawLength > 1
                ? 1
                : 0);
        }
        /**
         * @description The length of the raw value, either AccountIndex or AccountId
         */
        get _rawLength() {
            return this._raw instanceof AccountIndex_2.GenericAccountIndex
                ? AccountIndex_2.GenericAccountIndex.calcLength(this._raw)
                : this._raw.encodedLength;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return util_71.u8aToHex(this.toU8a());
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Address';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = this._raw.toU8a().subarray(0, this._rawLength);
            return isBare
                ? encoded
                : util_71.u8aConcat(this._raw instanceof AccountIndex_2.GenericAccountIndex
                    ? AccountIndex_2.GenericAccountIndex.writeLength(encoded)
                    : exports.ACCOUNT_ID_PREFIX, encoded);
        }
    }
    exports.GenericLookupSource = GenericLookupSource;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/MultiAddress", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/Enum", "types/src/generic/AccountId", "types/src/generic/AccountIndex"], function (require, exports, util_72, util_crypto_8, Enum_7, AccountId_4, AccountIndex_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericMultiAddress = void 0;
    function decodeMultiU8a(registry, value) {
        if (util_72.isU8a(value) && value.length <= 32) {
            if (value.length === 32) {
                return { id: value };
            }
            else if (value.length === 20) {
                return { Address20: value };
            }
            else {
                return decodeMultiAny(registry, registry.createType('AccountIndex', value));
            }
        }
        return value;
    }
    function decodeMultiAny(registry, value) {
        if (value instanceof GenericMultiAddress) {
            return value;
        }
        else if (value instanceof AccountId_4.GenericAccountId) {
            return { Id: value };
        }
        else if (value instanceof AccountIndex_3.GenericAccountIndex || util_72.isNumber(value) || util_72.isBn(value)) {
            return { Index: registry.createType('Compact<AccountIndex>', value) };
        }
        else if (util_72.isString(value)) {
            return decodeMultiU8a(registry, util_crypto_8.decodeAddress(value.toString()));
        }
        return decodeMultiU8a(registry, value);
    }
    class GenericMultiAddress extends Enum_7.Enum {
        constructor(registry, value) {
            super(registry, {
                Id: 'AccountId',
                Index: 'Compact<AccountIndex>',
                Raw: 'Bytes',
                // eslint-disable-next-line sort-keys
                Address32: 'H256',
                // eslint-disable-next-line sort-keys
                Address20: 'H160'
            }, decodeMultiAny(registry, value));
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.value.toString();
        }
    }
    exports.GenericMultiAddress = GenericMultiAddress;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/democracy/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AllConvictions = void 0;
    const AllConvictions = [
        // 0.1x votes, unlocked.
        'None',
        // 1x votes, locked for an enactment period following a successful vote.
        'Locked1x',
        // 2x votes, locked for 2x enactment periods following a successful vote.
        'Locked2x',
        // 3x votes, locked for 4x...
        'Locked3x',
        // 4x votes, locked for 8x...
        'Locked4x',
        // 5x votes, locked for 16x...
        'Locked5x',
        /// 6x votes, locked for 32x...
        'Locked6x'
    ];
    exports.AllConvictions = AllConvictions;
    exports.default = {
        rpc: {},
        types: {
            AccountVote: {
                _enum: {
                    Standard: 'AccountVoteStandard',
                    Split: 'AccountVoteSplit'
                }
            },
            AccountVoteSplit: {
                aye: 'Balance',
                nay: 'Balance'
            },
            AccountVoteStandard: {
                vote: 'Vote',
                balance: 'Balance'
            },
            Conviction: {
                _enum: AllConvictions
            },
            Delegations: {
                votes: 'Balance',
                capital: 'Balance'
            },
            PreimageStatus: {
                _enum: {
                    Missing: 'BlockNumber',
                    Available: 'PreimageStatusAvailable'
                }
            },
            PreimageStatusAvailable: {
                data: 'Bytes',
                provider: 'AccountId',
                deposit: 'Balance',
                since: 'BlockNumber',
                expiry: 'Option<BlockNumber>'
            },
            PriorLock: '(BlockNumber, Balance)',
            PropIndex: 'u32',
            Proposal: 'Call',
            ProxyState: {
                _enum: {
                    Open: 'AccountId',
                    Active: 'AccountId'
                }
            },
            ReferendumIndex: 'u32',
            ReferendumInfoTo239: {
                end: 'BlockNumber',
                proposalHash: 'Hash',
                threshold: 'VoteThreshold',
                delay: 'BlockNumber'
            },
            ReferendumInfo: {
                _enum: {
                    Ongoing: 'ReferendumStatus',
                    Finished: 'ReferendumInfoFinished'
                }
            },
            ReferendumInfoFinished: {
                approved: 'bool',
                end: 'BlockNumber'
            },
            ReferendumStatus: {
                end: 'BlockNumber',
                proposalHash: 'Hash',
                threshold: 'VoteThreshold',
                delay: 'BlockNumber',
                tally: 'Tally'
            },
            Tally: {
                ayes: 'Balance',
                nays: 'Balance',
                turnout: 'Balance'
            },
            Voting: {
                _enum: {
                    Direct: 'VotingDirect',
                    Delegating: 'VotingDelegating'
                }
            },
            VotingDirect: {
                votes: 'Vec<VotingDirectVote>',
                delegations: 'Delegations',
                prior: 'PriorLock'
            },
            VotingDirectVote: '(ReferendumIndex, AccountVote)',
            VotingDelegating: {
                balance: 'Balance',
                target: 'AccountId',
                conviction: 'Conviction',
                delegations: 'Delegations',
                prior: 'PriorLock'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Vote", ["require", "exports", "@polkadot/util", "types/src/codec/U8aFixed", "types/src/primitive/Bool"], function (require, exports, util_73, U8aFixed_5, Bool_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericVote = void 0;
    // For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction
    const AYE_BITS = 0b10000000;
    const NAY_BITS = 0b00000000;
    const CON_MASK = 0b01111111;
    const DEF_CONV = 0b00000000; // the default conviction, None
    /** @internal */
    function decodeVoteBool(value) {
        return value
            ? new Uint8Array([AYE_BITS | DEF_CONV])
            : new Uint8Array([NAY_BITS]);
    }
    /** @internal */
    function decodeVoteU8a(value) {
        return value.length
            ? value.subarray(0, 1)
            : new Uint8Array([NAY_BITS]);
    }
    /** @internal */
    function decodeVoteType(registry, value) {
        const vote = new Bool_2.bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;
        const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);
        return new Uint8Array([vote | conviction.index]);
    }
    /** @internal */
    function decodeVote(registry, value) {
        if (util_73.isUndefined(value) || value instanceof Boolean || util_73.isBoolean(value)) {
            return decodeVoteBool(new Bool_2.bool(registry, value).isTrue);
        }
        else if (util_73.isNumber(value)) {
            return decodeVoteBool(value < 0);
        }
        else if (util_73.isU8a(value)) {
            return decodeVoteU8a(value);
        }
        return decodeVoteType(registry, value);
    }
    /**
     * @name GenericVote
     * @description
     * A number of lock periods, plus a vote, one way or the other.
     */
    class GenericVote extends U8aFixed_5.U8aFixed {
        constructor(registry, value) {
            // decoded is just 1 byte
            // Aye: Most Significant Bit
            // Conviction: 0000 - 0101
            const decoded = decodeVote(registry, value);
            super(registry, decoded, 8);
            this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;
            this._conviction = this.registry.createType('Conviction', decoded[0] & CON_MASK);
        }
        /**
         * @description returns a V2 conviction
         */
        get conviction() {
            return this._conviction;
        }
        /**
         * @description true if the wrapped value is a positive vote
         */
        get isAye() {
            return this._aye;
        }
        /**
         * @description true if the wrapped value is a negative vote
         */
        get isNay() {
            return !this.isAye;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            return {
                conviction: this.conviction.toHuman(isExpanded),
                vote: this.isAye ? 'Aye' : 'Nay'
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Vote';
        }
    }
    exports.GenericVote = GenericVote;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/index", ["require", "exports", "types/src/ethereum/index", "types/src/generic/AccountId", "types/src/generic/AccountIndex", "types/src/generic/Block", "types/src/generic/Call", "types/src/generic/ConsensusEngineId", "types/src/generic/Event", "types/src/generic/LookupSource", "types/src/generic/MultiAddress", "types/src/generic/Vote"], function (require, exports, ethereum_1, AccountId_5, AccountIndex_4, Block_1, Call_1, ConsensusEngineId_1, Event_1, LookupSource_2, MultiAddress_1, Vote_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenericVote = exports.GenericMultiAddress = exports.GenericLookupSource = exports.GenericEventData = exports.GenericEvent = exports.GenericConsensusEngineId = exports.GenericCall = exports.GenericBlock = exports.GenericAccountIndex = exports.GenericAccountId = void 0;
    __exportStar(ethereum_1, exports);
    Object.defineProperty(exports, "GenericAccountId", { enumerable: true, get: function () { return AccountId_5.GenericAccountId; } });
    Object.defineProperty(exports, "GenericAccountIndex", { enumerable: true, get: function () { return AccountIndex_4.GenericAccountIndex; } });
    Object.defineProperty(exports, "GenericBlock", { enumerable: true, get: function () { return Block_1.GenericBlock; } });
    Object.defineProperty(exports, "GenericCall", { enumerable: true, get: function () { return Call_1.GenericCall; } });
    Object.defineProperty(exports, "GenericConsensusEngineId", { enumerable: true, get: function () { return ConsensusEngineId_1.GenericConsensusEngineId; } });
    Object.defineProperty(exports, "GenericEvent", { enumerable: true, get: function () { return Event_1.GenericEvent; } });
    Object.defineProperty(exports, "GenericEventData", { enumerable: true, get: function () { return Event_1.GenericEventData; } });
    Object.defineProperty(exports, "GenericLookupSource", { enumerable: true, get: function () { return LookupSource_2.GenericLookupSource; } });
    Object.defineProperty(exports, "GenericMultiAddress", { enumerable: true, get: function () { return MultiAddress_1.GenericMultiAddress; } });
    Object.defineProperty(exports, "GenericVote", { enumerable: true, get: function () { return Vote_1.GenericVote; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/index.types", ["require", "exports", "types/src/extrinsic/index", "types/src/generic/index", "types/src/primitive/index"], function (require, exports, extrinsic_2, generic_1, primitive_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(extrinsic_2, exports);
    __exportStar(generic_1, exports);
    __exportStar(primitive_3, exports);
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/runtime/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const numberTypes = {
        Fixed64: 'Int<64, Fixed64>',
        FixedI64: 'Int<64, FixedI64>',
        FixedU64: 'UInt<64, FixedU64>',
        Fixed128: 'Int<128, Fixed128>',
        FixedI128: 'Int<128, FixedI128>',
        FixedU128: 'UInt<128, FixedU128>',
        I32F32: 'Int<64, I32F32>',
        U32F32: 'UInt<64, U32F32>',
        PerU16: 'UInt<16, PerU16>',
        Perbill: 'UInt<32, Perbill>',
        Percent: 'UInt<8, Percent>',
        Permill: 'UInt<32, Permill>',
        Perquintill: 'UInt<64, Perquintill>'
    };
    exports.default = {
        rpc: {},
        types: {
            ...numberTypes,
            AccountId: 'GenericAccountId',
            AccountIdOf: 'AccountId',
            AccountIndex: 'GenericAccountIndex',
            Address: 'LookupSource',
            AssetId: 'u32',
            Balance: 'UInt<128, Balance>',
            BalanceOf: 'Balance',
            Block: 'GenericBlock',
            BlockNumber: 'u32',
            Call: 'GenericCall',
            CallHash: 'Hash',
            CallHashOf: 'CallHash',
            ChangesTrieConfiguration: {
                digestInterval: 'u32',
                digestLevels: 'u32'
            },
            ConsensusEngineId: 'GenericConsensusEngineId',
            Digest: {
                logs: 'Vec<DigestItem>'
            },
            DigestItem: {
                _enum: {
                    Other: 'Bytes',
                    AuthoritiesChange: 'Vec<AuthorityId>',
                    ChangesTrieRoot: 'Hash',
                    SealV0: 'SealV0',
                    Consensus: 'Consensus',
                    Seal: 'Seal',
                    PreRuntime: 'PreRuntime' // 6
                }
            },
            ExtrinsicsWeight: {
                normal: 'Weight',
                operational: 'Weight'
            },
            H64: '[u8; 8; H64]',
            H128: '[u8; 16; H64]',
            H160: '[u8; 20; H160]',
            H256: '[u8; 32; H256]',
            H512: '[u8; 64; H512]',
            H1024: '[u8; 128; H1024]',
            H2048: '[u8; 256; H2048]',
            Hash: 'H256',
            Header: {
                parentHash: 'Hash',
                number: 'Compact<BlockNumber>',
                stateRoot: 'Hash',
                extrinsicsRoot: 'Hash',
                digest: 'Digest'
            },
            IndicesLookupSource: 'GenericLookupSource',
            Index: 'u32',
            Justification: 'Bytes',
            KeyValue: '(StorageKey, StorageData)',
            KeyTypeId: 'u32',
            LockIdentifier: '[u8; 8]',
            LookupSource: 'IndicesLookupSource',
            LookupTarget: 'AccountId',
            ModuleId: 'LockIdentifier',
            MultiAddress: 'GenericMultiAddress',
            Moment: 'UInt<64, Moment>',
            OpaqueCall: 'Bytes',
            Origin: 'DoNotConstruct<Origin>',
            OriginCaller: {
                _enum: {
                    // this should be dynamically built from the actual modules, based on index
                    System: 'SystemOrigin'
                }
            },
            PalletsOrigin: 'OriginCaller',
            PalletVersion: {
                major: 'u16',
                minor: 'u8',
                patch: 'u8'
            },
            Pays: {
                _enum: ['Yes', 'No']
            },
            Phantom: 'Null',
            PhantomData: 'Null',
            Releases: {
                _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
            },
            RuntimeDbWeight: {
                read: 'Weight',
                write: 'Weight'
            },
            SignedBlock: {
                block: 'Block',
                justification: 'Justification'
            },
            StorageData: 'Bytes',
            TransactionPriority: 'u64',
            ValidatorId: 'AccountId',
            ValidatorIdOf: 'ValidatorId',
            Weight: 'u64',
            WeightMultiplier: 'Fixed64',
            // digest
            PreRuntime: '(ConsensusEngineId, Bytes)',
            SealV0: '(u64, Signature)',
            Seal: '(ConsensusEngineId, Bytes)',
            Consensus: '(ConsensusEngineId, Bytes)'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/assets/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            AssetBalance: {
                balance: 'TAssetBalance',
                isFrozen: 'bool',
                isZombie: 'bool'
            },
            AssetDetails: {
                owner: 'AccountId',
                issuer: 'AccountId',
                admin: 'AccountId',
                freezer: 'AccountId',
                supply: 'TAssetBalance',
                deposit: 'TAssetDepositBalance',
                maxZombies: 'u32',
                minBalance: 'TAssetBalance',
                zombies: 'u32',
                accounts: 'u32'
            },
            TAssetBalance: 'u64',
            TAssetDepositBalance: 'BalanceOf'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/authorship/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            UncleEntryItem: {
                _enum: {
                    InclusionHeight: 'BlockNumber',
                    Uncle: '(Hash, Option<AccountId>)'
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/aura/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            RawAuraPreDigest: {
                slotNumber: 'u64'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/babe/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            epochAuthorship: {
                description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
                params: [],
                type: 'HashMap<AuthorityId, EpochAuthorship>'
            }
        },
        types: {
            AllowedSlots: {
                _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
            },
            BabeAuthorityWeight: 'u64',
            BabeBlockWeight: 'u32',
            BabeEquivocationProof: {
                offender: 'AuthorityId',
                slotNumber: 'SlotNumber',
                firstHeader: 'Header',
                secondHeader: 'Header'
            },
            BabeWeight: 'u64',
            MaybeRandomness: 'Option<Randomness>',
            MaybeVrf: 'Option<VrfData>',
            EpochAuthorship: {
                primary: 'Vec<u64>',
                secondary: 'Vec<u64>',
                secondary_vrf: 'Vec<u64>'
            },
            NextConfigDescriptor: {
                _enum: {
                    V0: 'Null',
                    V1: 'NextConfigDescriptorV1'
                }
            },
            NextConfigDescriptorV1: {
                c: '(u64, u64)',
                allowedSlots: 'AllowedSlots'
            },
            Randomness: 'Hash',
            RawBabePreDigest: {
                _enum: {
                    Phantom: 'Null',
                    Primary: 'RawBabePreDigestPrimary',
                    SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
                    SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
                }
            },
            RawBabePreDigestPrimary: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                vrfOutput: 'VrfOutput',
                vrfProof: 'VrfProof'
            },
            RawBabePreDigestSecondaryPlain: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber'
            },
            RawBabePreDigestSecondaryVRF: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                vrfOutput: 'VrfOutput',
                vrfProof: 'VrfProof'
            },
            RawBabePreDigestTo159: {
                _enum: {
                    Primary: 'RawBabePreDigestPrimaryTo159',
                    Secondary: 'RawBabePreDigestSecondaryTo159'
                }
            },
            RawBabePreDigestPrimaryTo159: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                weight: 'BabeBlockWeight',
                vrfOutput: 'VrfOutput',
                vrfProof: 'VrfProof'
            },
            RawBabePreDigestSecondaryTo159: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                weight: 'BabeBlockWeight'
            },
            // a cross old/new compatible version of the digest, that is _only_ useful
            // for partial parsing and extraction of the author. This assumes that all
            // entries has the authorityIndex in the first position - and that it is all
            // we are interested in
            RawBabePreDigestCompat: {
                _enum: {
                    Zero: 'u32',
                    One: 'u32',
                    Two: 'u32',
                    Three: 'u32'
                }
            },
            SlotNumber: 'u64',
            VrfData: '[u8; 32]',
            VrfOutput: '[u8; 32]',
            VrfProof: '[u8; 64]'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/balances/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            AccountData: {
                free: 'Balance',
                reserved: 'Balance',
                miscFrozen: 'Balance',
                feeFrozen: 'Balance'
            },
            BalanceLockTo212: {
                id: 'LockIdentifier',
                amount: 'Balance',
                until: 'BlockNumber',
                reasons: 'WithdrawReasons'
            },
            BalanceLock: {
                id: 'LockIdentifier',
                amount: 'Balance',
                reasons: 'Reasons'
            },
            BalanceStatus: {
                _enum: ['Free', 'Reserved']
            },
            Reasons: {
                _enum: ['Fee', 'Misc', 'All']
            },
            VestingSchedule: {
                offset: 'Balance',
                perBlock: 'Balance',
                startingBlock: 'BlockNumber'
            },
            WithdrawReasons: {
                _set: {
                    TransactionPayment: 1,
                    Transfer: 2,
                    Reserve: 4,
                    Fee: 8,
                    Tip: 16
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/collective/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            CollectiveOrigin: {
                _enum: {
                    Members: '(MemberCount, MemberCount)',
                    Member: 'AccountId'
                }
            },
            MemberCount: 'u32',
            ProposalIndex: 'u32',
            VotesTo230: {
                index: 'ProposalIndex',
                threshold: 'MemberCount',
                ayes: 'Vec<AccountId>',
                nays: 'Vec<AccountId>'
            },
            Votes: {
                index: 'ProposalIndex',
                threshold: 'MemberCount',
                ayes: 'Vec<AccountId>',
                nays: 'Vec<AccountId>',
                end: 'BlockNumber'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/consensus/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            AuthorityId: 'AccountId',
            RawVRFOutput: '[u8; 32]'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/contracts/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            call: {
                description: 'Executes a call to a contract',
                params: [
                    {
                        name: 'callRequest',
                        type: 'ContractCallRequest'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'ContractExecResult'
            },
            getStorage: {
                description: 'Returns the value under a specified storage key in a contract',
                params: [
                    {
                        name: 'address',
                        type: 'AccountId'
                    },
                    {
                        name: 'key',
                        type: 'H256'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Option<Bytes>'
            },
            rentProjection: {
                description: 'Returns the projected time a given contract will be able to sustain paying its rent',
                params: [
                    {
                        name: 'address',
                        type: 'AccountId'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Option<BlockNumber>'
            }
        },
        types: {
            AliveContractInfo: {
                trieId: 'TrieId',
                storageSize: 'u32',
                emptyPairCount: 'u32',
                totalPairCount: 'u32',
                codeHash: 'CodeHash',
                rentAllowance: 'Balance',
                deductBlock: 'BlockNumber',
                lastWrite: 'Option<BlockNumber>'
            },
            CodeHash: 'Hash',
            ContractCallRequest: {
                origin: 'AccountId',
                dest: 'AccountId',
                value: 'Balance',
                gasLimit: 'u64',
                inputData: 'Bytes'
            },
            ContractExecResultSuccessTo255: {
                status: 'u8',
                data: 'Raw'
            },
            ContractExecResultTo255: {
                _enum: {
                    Success: 'ContractExecResultSuccessTo255',
                    Error: 'Null'
                }
            },
            ContractExecResultSuccessTo260: {
                flags: 'u32',
                data: 'Bytes',
                gasConsumed: 'u64'
            },
            ContractExecResultTo260: {
                _enum: {
                    Success: 'ContractExecResultSuccessTo260',
                    Error: 'Null'
                }
            },
            ContractExecResultErrModule: {
                index: 'u8',
                error: 'u8',
                message: 'Option<Text>'
            },
            ContractExecResultErr: {
                _enum: {
                    Other: 'Text',
                    CannotLookup: 'Null',
                    BadOrigin: 'Null',
                    Module: 'ContractExecResultErrModule'
                }
            },
            ContractExecResultOk: {
                flags: 'u32',
                data: 'Bytes'
            },
            ContractExecResultResult: {
                _enum: {
                    Ok: 'ContractExecResultOk',
                    Err: 'ContractExecResultErr'
                }
            },
            ContractExecResult: {
                gasConsumed: 'u64',
                debugMessage: 'Text',
                result: 'ContractExecResultResult'
            },
            ContractInfo: {
                _enum: {
                    Alive: 'AliveContractInfo',
                    Tombstone: 'TombstoneContractInfo'
                }
            },
            ContractStorageKey: '[u8; 32]',
            DeletedContract: {
                pairCount: 'u32',
                trieId: 'TrieId'
            },
            Gas: 'u64',
            HostFnWeights: {
                caller: 'Weight',
                address: 'Weight',
                gasLeft: 'Weight',
                balance: 'Weight',
                valueTransferred: 'Weight',
                minimumBalance: 'Weight',
                tombstoneDeposit: 'Weight',
                rentAllowance: 'Weight',
                blockNumber: 'Weight',
                now: 'Weight',
                weightToFee: 'Weight',
                gas: 'Weight',
                input: 'Weight',
                inputPerByte: 'Weight',
                return: 'Weight',
                returnPerByte: 'Weight',
                terminate: 'Weight',
                restoreTo: 'Weight',
                restoreToPerDelta: 'Weight',
                random: 'Weight',
                depositEvent: 'Weight',
                depositEventPerTopic: 'Weight',
                depositEventPerByte: 'Weight',
                setRentAllowance: 'Weight',
                setStorage: 'Weight',
                setStoragePerByte: 'Weight',
                clearStorage: 'Weight',
                getStorage: 'Weight',
                getStoragePerByte: 'Weight',
                transfer: 'Weight',
                call: 'Weight',
                callTransferSurcharge: 'Weight',
                callPerInputByte: 'Weight',
                callPerOutputByte: 'Weight',
                instantiate: 'Weight',
                instantiatePerInputByte: 'Weight',
                instantiatePerOutputByte: 'Weight',
                hashSha2256: 'Weight',
                hashSha2256PerByte: 'Weight',
                hashKeccak256: 'Weight',
                hashKeccak256PerByte: 'Weight',
                hashBlake2256: 'Weight',
                hashBlake2256PerByte: 'Weight',
                hashBlake2128: 'Weight',
                hashBlake2128PerByte: 'Weight'
            },
            InstructionWeights: {
                i64const: 'u32',
                i64load: 'u32',
                i64store: 'u32',
                select: 'u32',
                rIf: 'u32',
                br: 'u32',
                brIf: 'u32',
                brIable: 'u32',
                brIablePerEntry: 'u32',
                call: 'u32',
                callIndirect: 'u32',
                callIndirectPerParam: 'u32',
                localGet: 'u32',
                localSet: 'u32',
                local_tee: 'u32',
                globalGet: 'u32',
                globalSet: 'u32',
                memoryCurrent: 'u32',
                memoryGrow: 'u32',
                i64clz: 'u32',
                i64ctz: 'u32',
                i64popcnt: 'u32',
                i64eqz: 'u32',
                i64extendsi32: 'u32',
                i64extendui32: 'u32',
                i32wrapi64: 'u32',
                i64eq: 'u32',
                i64ne: 'u32',
                i64lts: 'u32',
                i64ltu: 'u32',
                i64gts: 'u32',
                i64gtu: 'u32',
                i64les: 'u32',
                i64leu: 'u32',
                i64ges: 'u32',
                i64geu: 'u32',
                i64add: 'u32',
                i64sub: 'u32',
                i64mul: 'u32',
                i64divs: 'u32',
                i64divu: 'u32',
                i64rems: 'u32',
                i64remu: 'u32',
                i64and: 'u32',
                i64or: 'u32',
                i64xor: 'u32',
                i64shl: 'u32',
                i64shrs: 'u32',
                i64shru: 'u32',
                i64rotl: 'u32',
                i64rotr: 'u32'
            },
            Limits: {
                eventTopics: 'u32',
                stackHeight: 'u32',
                globals: 'u32',
                parameters: 'u32',
                memoryPages: 'u32',
                tableSize: 'u32',
                brTableSize: 'u32',
                subjectLen: 'u32',
                codeSize: 'u32'
            },
            PrefabWasmModule: {
                scheduleVersion: 'Compact<u32>',
                initial: 'Compact<u32>',
                maximum: 'Compact<u32>',
                _reserved: 'PrefabWasmModuleReserved',
                code: 'Bytes'
            },
            PrefabWasmModuleReserved: 'Option<Null>',
            ScheduleTo212: {
                version: 'u32',
                putCodePerByteCost: 'Gas',
                growMemCost: 'Gas',
                regularOpCost: 'Gas',
                returnDataPerByteCost: 'Gas',
                eventDataPerByteCost: 'Gas',
                eventPerTopicCost: 'Gas',
                eventBaseCost: 'Gas',
                sandboxDataReadCost: 'Gas',
                sandboxDataWriteCost: 'Gas',
                maxEventTopics: 'u32',
                maxStackHeight: 'u32',
                maxMemoryPages: 'u32',
                enablePrintln: 'bool',
                maxSubjectLen: 'u32'
            },
            ScheduleTo258: {
                version: 'u32',
                putCodePerByteCost: 'Gas',
                growMemCost: 'Gas',
                regularOpCost: 'Gas',
                returnDataPerByteCost: 'Gas',
                eventDataPerByteCost: 'Gas',
                eventPerTopicCost: 'Gas',
                eventBaseCost: 'Gas',
                sandboxDataReadCost: 'Gas',
                sandboxDataWriteCost: 'Gas',
                transferCost: 'Gas',
                maxEventTopics: 'u32',
                maxStackHeight: 'u32',
                maxMemoryPages: 'u32',
                enablePrintln: 'bool',
                maxSubjectLen: 'u32'
            },
            Schedule: {
                version: 'u32',
                enablePrintln: 'bool',
                limits: 'Limits',
                instructionWeights: 'InstructionWeights',
                hostFnWeights: 'HostFnWeights'
            },
            SeedOf: 'Hash',
            TombstoneContractInfo: 'Hash',
            TrieId: 'Bytes'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/elections/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            ApprovalFlag: 'u32',
            DefunctVoter: {
                who: 'AccountId',
                voteCount: 'Compact<u32>',
                candidateCount: 'Compact<u32>'
            },
            Renouncing: {
                _enum: {
                    Member: 'Null',
                    RunnerUp: 'Null',
                    Candidate: 'Compact<u32>'
                }
            },
            SetIndex: 'u32',
            Vote: 'GenericVote',
            VoteIndex: 'u32',
            VoterInfo: {
                lastActive: 'VoteIndex',
                lastWin: 'VoteIndex',
                pot: 'Balance',
                stake: 'Balance'
            },
            VoteThreshold: {
                _enum: [
                    'Super majority approval',
                    'Super majority rejection',
                    'Simple majority'
                ]
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/engine/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            createBlock: {
                description: 'Instructs the manual-seal authorship task to create a new block',
                params: [
                    {
                        name: 'createEmpty',
                        type: 'bool'
                    },
                    {
                        name: 'finalize',
                        type: 'bool'
                    },
                    {
                        name: 'parentHash',
                        type: 'BlockHash',
                        isOptional: true
                    }
                ],
                type: 'CreatedBlock'
            },
            finalizeBlock: {
                description: 'Instructs the manual-seal authorship task to finalize a block',
                params: [
                    {
                        name: 'hash',
                        type: 'BlockHash'
                    },
                    {
                        name: 'justification',
                        type: 'Justification',
                        isOptional: true
                    }
                ],
                type: 'bool'
            }
        },
        types: {
            CreatedBlock: {
                hash: 'BlockHash',
                aux: 'ImportedAux'
            },
            ImportedAux: {
                headerOnly: 'bool',
                clearJustificationRequests: 'bool',
                needsJustification: 'bool',
                badJustification: 'bool',
                needsFinalityProof: 'bool',
                isNewBest: 'bool'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/evm/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            EvmAccount: {
                nonce: 'u256',
                balance: 'u256'
            },
            EvmLog: {
                address: 'H160',
                topics: 'Vec<H256>',
                data: 'Bytes'
            },
            EvmVicinity: {
                gasPrice: 'u256',
                origin: 'H160'
            },
            ExitError: {
                _enum: {
                    StackUnderflow: 'Null',
                    StackOverflow: 'Null',
                    InvalidJump: 'Null',
                    InvalidRange: 'Null',
                    DesignatedInvalid: 'Null',
                    CallTooDeep: 'Null',
                    CreateCollision: 'Null',
                    CreateContractLimit: 'Null',
                    OutOfOffset: 'Null',
                    OutOfGas: 'Null',
                    OutOfFund: 'Null',
                    PCUnderflow: 'Null',
                    CreateEmpty: 'Null',
                    Other: 'Text'
                }
            },
            ExitFatal: {
                _enum: {
                    NotSupported: 'Null',
                    UnhandledInterrupt: 'Null',
                    CallErrorAsFatal: 'ExitError',
                    Other: 'Text'
                }
            },
            ExitReason: {
                _enum: {
                    Succeed: 'ExitSucceed',
                    Error: 'ExitError',
                    Revert: 'ExitRevert',
                    Fatal: 'ExitFatal'
                }
            },
            ExitRevert: {
                _enum: ['Reverted']
            },
            ExitSucceed: {
                _enum: ['Stopped', 'Returned', 'Suicided']
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/extrinsics/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Extrinsic: 'GenericExtrinsic',
            ExtrinsicEra: 'GenericExtrinsicEra',
            ExtrinsicPayload: 'GenericExtrinsicPayload',
            ExtrinsicSignature: 'MultiSignature',
            ExtrinsicV4: 'GenericExtrinsicV4',
            ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
            ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
            ExtrinsicUnknown: 'GenericExtrinsicUnknown',
            ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
            // eras
            ImmortalEra: 'GenericImmortalEra',
            MortalEra: 'GenericMortalEra',
            // signatures & signer
            AnySignature: 'H512',
            MultiSignature: {
                _enum: {
                    Ed25519: 'Ed25519Signature',
                    Sr25519: 'Sr25519Signature',
                    Ecdsa: 'EcdsaSignature'
                }
            },
            Signature: 'H512',
            SignerPayload: 'GenericSignerPayload',
            EcdsaSignature: '[u8; 65]',
            Ed25519Signature: 'H512',
            Sr25519Signature: 'H512'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/genericAsset/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            AssetOptions: {
                initalIssuance: 'Compact<Balance>',
                permissions: 'PermissionLatest'
            },
            Owner: {
                _enum: {
                    None: 'Null',
                    Address: 'AccountId'
                }
            },
            PermissionsV1: {
                update: 'Owner',
                mint: 'Owner',
                burn: 'Owner'
            },
            PermissionVersions: {
                _enum: {
                    V1: 'PermissionsV1'
                }
            },
            PermissionLatest: 'PermissionsV1'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/grandpa/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            proveFinality: {
                description: 'Prove finality for the range (begin; end] hash.',
                params: [
                    {
                        name: 'begin',
                        type: 'BlockHash'
                    },
                    {
                        name: 'end',
                        type: 'BlockHash'
                    },
                    {
                        name: 'authoritiesSetId',
                        type: 'u64',
                        isOptional: true
                    }
                ],
                type: 'Option<EncodedFinalityProofs>'
            },
            roundState: {
                description: 'Returns the state of the current best round state as well as the ongoing background rounds',
                params: [],
                type: 'ReportedRoundStates'
            },
            subscribeJustifications: {
                description: 'Subscribes to grandpa justifications',
                params: [],
                pubsub: [
                    'justifications',
                    'subscribeJustifications',
                    'unsubscribeJustifications'
                ],
                type: 'JustificationNotification'
            }
        },
        types: {
            AuthorityIndex: 'u64',
            AuthorityList: 'Vec<NextAuthority>',
            AuthorityWeight: 'u64',
            EncodedFinalityProofs: 'Bytes',
            GrandpaEquivocation: {
                _enum: {
                    Prevote: 'GrandpaEquivocationValue',
                    Precommit: 'GrandpaEquivocationValue'
                }
            },
            GrandpaEquivocationProof: {
                setId: 'SetId',
                equivocation: 'GrandpaEquivocation'
            },
            GrandpaEquivocationValue: {
                roundNumber: 'u64',
                identity: 'AuthorityId',
                first: '(GrandpaPrevote, AuthoritySignature)',
                second: '(GrandpaPrevote, AuthoritySignature)'
            },
            GrandpaPrevote: {
                targetHash: 'Hash',
                targetNumber: 'BlockNumber'
            },
            JustificationNotification: 'Bytes',
            KeyOwnerProof: 'MembershipProof',
            NextAuthority: '(AuthorityId, AuthorityWeight)',
            PendingPause: {
                /// Block at which the intention to pause was scheduled.
                scheduledAt: 'BlockNumber',
                /// Number of blocks after which the change will be enacted.
                delay: 'BlockNumber'
            },
            PendingResume: {
                /// Block at which the intention to resume was scheduled.
                scheduledAt: 'BlockNumber',
                /// Number of blocks after which the change will be enacted.
                delay: 'BlockNumber'
            },
            Precommits: {
                currentWeight: 'u32',
                missing: 'BTreeSet<AuthorityId>'
            },
            Prevotes: {
                currentWeight: 'u32',
                missing: 'BTreeSet<AuthorityId>'
            },
            ReportedRoundStates: {
                setId: 'u32',
                best: 'RoundState',
                background: 'Vec<RoundState>'
            },
            RoundState: {
                round: 'u32',
                totalWeight: 'u32',
                thresholdWeight: 'u32',
                prevotes: 'Prevotes',
                precommits: 'Precommits'
            },
            SetId: 'u64',
            StoredPendingChange: {
                scheduledAt: 'BlockNumber',
                delay: 'BlockNumber',
                nextAuthorities: 'AuthorityList'
            },
            StoredState: {
                _enum: {
                    /// The current authority set is live, and GRANDPA is enabled.
                    Live: 'Null',
                    /// There is a pending pause event which will be enacted at the given block height.
                    PendingPause: 'PendingPause',
                    /// The current GRANDPA authority set is paused.
                    Paused: 'Null',
                    /// There is a pending resume event which will be enacted at the given block height.
                    PendingResume: 'PendingResume'
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/identity/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            IdentityFields: {
                _set: {
                    _bitLength: 64,
                    // Mapped here to 32 bits, in Rust these are 64-bit values
                    Display: 1,
                    Legal: 2,
                    Web: 4,
                    Riot: 8,
                    Email: 16,
                    PgpFingerprint: 32,
                    Image: 64,
                    Twitter: 128
                }
            },
            IdentityInfoAdditional: '(Data, Data)',
            IdentityInfo: {
                additional: 'Vec<IdentityInfoAdditional>',
                display: 'Data',
                legal: 'Data',
                web: 'Data',
                riot: 'Data',
                email: 'Data',
                pgpFingerprint: 'Option<H160>',
                image: 'Data',
                twitter: 'Data'
            },
            IdentityJudgement: {
                _enum: {
                    Unknown: 'Null',
                    FeePaid: 'Balance',
                    Reasonable: 'Null',
                    KnownGood: 'Null',
                    OutOfDate: 'Null',
                    LowQuality: 'Null',
                    Erroneous: 'Null'
                }
            },
            RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
            Registration: {
                judgements: 'Vec<RegistrationJudgement>',
                deposit: 'Balance',
                info: 'IdentityInfo'
            },
            RegistrarIndex: 'u32',
            RegistrarInfo: {
                account: 'AccountId',
                fee: 'Balance',
                fields: 'IdentityFields'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/imOnline/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            AuthIndex: 'u32',
            AuthoritySignature: 'Signature',
            Heartbeat: {
                blockNumber: 'BlockNumber',
                networkState: 'OpaqueNetworkState',
                sessionIndex: 'SessionIndex',
                authorityIndex: 'AuthIndex',
                validatorsLen: 'u32'
            },
            HeartbeatTo244: {
                blockNumber: 'BlockNumber',
                networkState: 'OpaqueNetworkState',
                sessionIndex: 'SessionIndex',
                authorityIndex: 'AuthIndex'
            },
            OpaqueMultiaddr: 'Bytes',
            OpaquePeerId: 'Bytes',
            OpaqueNetworkState: {
                peerId: 'OpaquePeerId',
                externalAddresses: 'Vec<OpaqueMultiaddr>'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/offences/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
            Kind: '[u8; 16]',
            OffenceDetails: {
                offender: 'Offender',
                reporters: 'Vec<Reporter>'
            },
            Offender: 'IdentificationTuple',
            OpaqueTimeSlot: 'Bytes',
            ReportIdOf: 'Hash',
            Reporter: 'AccountId'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/proxy/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            ProxyDefinition: {
                delegate: 'AccountId',
                proxyType: 'ProxyType',
                delay: 'BlockNumber'
            },
            ProxyType: {
                _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
            },
            ProxyAnnouncement: {
                real: 'AccountId',
                callHash: 'Hash',
                height: 'BlockNumber'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/recovery/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            ActiveRecovery: {
                created: 'BlockNumber',
                deposit: 'Balance',
                friends: 'Vec<AccountId>'
            },
            RecoveryConfig: {
                delayPeriod: 'BlockNumber',
                deposit: 'Balance',
                friends: 'Vec<AccountId>',
                threshold: 'u16'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/scheduler/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Period: '(BlockNumber, u32)',
            Priority: 'u8',
            SchedulePeriod: 'Period',
            SchedulePriority: 'Priority',
            Scheduled: {
                maybeId: 'Option<Bytes>',
                priority: 'SchedulePriority',
                call: 'Call',
                maybePeriodic: 'Option<SchedulePeriod>',
                origin: 'PalletsOrigin'
            },
            ScheduledTo254: {
                maybeId: 'Option<Bytes>',
                priority: 'SchedulePriority',
                call: 'Call',
                maybePeriodic: 'Option<SchedulePeriod>'
            },
            TaskAddress: '(BlockNumber, u32)'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/session/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // The runtime definition of SessionKeys are passed as a Trait to session
    // Defined in `node/runtime/src/lib.rs` as follow
    //   impl_opaque_keys! {
    //     pub struct SessionKeys {
    // Here we revert to tuples to keep the interfaces "opaque", as per the use
    const keyTypes = {
        // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
        Keys: 'SessionKeys4',
        // shortcuts for 1-9 key tuples
        SessionKeys1: '(AccountId)',
        SessionKeys2: '(AccountId, AccountId)',
        // older substrate master
        SessionKeys3: '(AccountId, AccountId, AccountId)',
        // CC2, Substrate master
        SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
        // CC3
        SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)'
    };
    exports.default = {
        rpc: {},
        types: {
            ...keyTypes,
            FullIdentification: 'Exposure',
            IdentificationTuple: '(ValidatorId, FullIdentification)',
            MembershipProof: {
                session: 'SessionIndex',
                trieNodes: 'Vec<Vec<u8>>',
                validatorCount: 'ValidatorCount'
            },
            SessionIndex: 'u32',
            ValidatorCount: 'u32'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/society/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Bid: {
                who: 'AccountId',
                kind: 'BidKind',
                value: 'Balance'
            },
            BidKind: {
                _enum: {
                    Deposit: 'Balance',
                    Vouch: '(AccountId, Balance)'
                }
            },
            // a society-specific Judgement (not the same as identity Judgement)
            SocietyJudgement: {
                _enum: ['Rebid', 'Reject', 'Approve']
            },
            // a society-specific Vote
            SocietyVote: {
                _enum: ['Skeptic', 'Reject', 'Approve']
            },
            StrikeCount: 'u32',
            VouchingStatus: {
                _enum: ['Vouching', 'Banned']
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/staking/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const deprecated = {
        Points: 'u32',
        EraPoints: {
            total: 'Points',
            individual: 'Vec<Points>'
        }
    };
    exports.default = {
        rpc: {},
        types: {
            ...deprecated,
            ActiveEraInfo: {
                index: 'EraIndex',
                start: 'Option<Moment>'
            },
            CompactAssignments: {
                votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
                votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
                votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
                votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
                votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
                votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
                votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
                votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
                votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
                votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
                votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
                votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
                votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
                votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
                votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
                votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
            },
            CompactAssignmentsTo257: {
                votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
                votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
                votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
                votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
                votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
                votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
                votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
                votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
                votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
                votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
                votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
                votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
                votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
                votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
                votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
                votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
            },
            CompactScore: '(ValidatorIndex, OffchainAccuracy)',
            CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
            ElectionCompute: {
                _enum: ['OnChain', 'Signed', 'Authority']
            },
            ElectionResult: {
                compute: 'ElectionCompute',
                slotStake: 'Balance',
                electedStashes: 'Vec<AccountId>',
                exposures: 'Vec<(AccountId, Exposure)>'
            },
            ElectionScore: '[u128; 3]',
            ElectionSize: {
                validators: 'Compact<ValidatorIndex>',
                nominators: 'Compact<NominatorIndex>'
            },
            ElectionStatus: {
                _enum: {
                    Close: 'Null',
                    Open: 'BlockNumber'
                }
            },
            EraIndex: 'u32',
            EraRewardPoints: {
                total: 'RewardPoint',
                individual: 'BTreeMap<AccountId, RewardPoint>'
            },
            EraRewards: {
                total: 'u32',
                rewards: 'Vec<u32>'
            },
            Exposure: {
                total: 'Compact<Balance>',
                own: 'Compact<Balance>',
                others: 'Vec<IndividualExposure>'
            },
            Forcing: {
                _enum: [
                    'NotForcing',
                    'ForceNew',
                    'ForceNone',
                    'ForceAlways'
                ]
            },
            IndividualExposure: {
                who: 'AccountId',
                value: 'Compact<Balance>'
            },
            KeyType: 'AccountId',
            MomentOf: 'Moment',
            Nominations: {
                targets: 'Vec<AccountId>',
                submittedIn: 'EraIndex',
                suppressed: 'bool'
            },
            NominatorIndex: 'u32',
            NominatorIndexCompact: 'Compact<NominatorIndex>',
            OffchainAccuracy: 'PerU16',
            OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
            PhragmenScore: '[u128; 3]',
            Points: 'u32',
            RewardDestination: {
                _enum: {
                    Staked: 'Null',
                    Stash: 'Null',
                    Controller: 'Null',
                    Account: 'AccountId'
                }
            },
            RewardDestinationTo257: {
                _enum: [
                    'Staked',
                    'Stash',
                    'Controller'
                ]
            },
            RewardPoint: 'u32',
            SlashJournalEntry: {
                who: 'AccountId',
                amount: 'Balance',
                ownSlash: 'Balance'
            },
            SlashingSpansTo204: {
                spanIndex: 'SpanIndex',
                lastStart: 'EraIndex',
                prior: 'Vec<EraIndex>'
            },
            SlashingSpans: {
                spanIndex: 'SpanIndex',
                lastStart: 'EraIndex',
                lastNonzeroSlash: 'EraIndex',
                prior: 'Vec<EraIndex>'
            },
            SpanIndex: 'u32',
            SpanRecord: {
                slashed: 'Balance',
                paidOut: 'Balance'
            },
            StakingLedgerTo223: {
                stash: 'AccountId',
                total: 'Compact<Balance>',
                active: 'Compact<Balance>',
                unlocking: 'Vec<UnlockChunk>'
            },
            StakingLedgerTo240: {
                stash: 'AccountId',
                total: 'Compact<Balance>',
                active: 'Compact<Balance>',
                unlocking: 'Vec<UnlockChunk>',
                lastReward: 'Option<EraIndex>'
            },
            StakingLedger: {
                stash: 'AccountId',
                total: 'Compact<Balance>',
                active: 'Compact<Balance>',
                unlocking: 'Vec<UnlockChunk>',
                claimedRewards: 'Vec<EraIndex>'
            },
            UnappliedSlashOther: '(AccountId, Balance)',
            UnappliedSlash: {
                validator: 'AccountId',
                own: 'Balance',
                others: 'Vec<UnappliedSlashOther>',
                reporters: 'Vec<AccountId>',
                payout: 'Balance'
            },
            UnlockChunk: {
                value: 'Compact<Balance>',
                era: 'Compact<BlockNumber>'
            },
            ValidatorIndex: 'u16',
            ValidatorIndexCompact: 'Compact<ValidatorIndex>',
            ValidatorPrefs: {
                commission: 'Compact<Perbill>'
            },
            ValidatorPrefsTo196: {
                validatorPayment: 'Compact<Balance>'
            },
            ValidatorPrefsTo145: {
                unstakeThreshold: 'Compact<u32>',
                validatorPayment: 'Compact<Balance>'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/support/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            WeightToFeeCoefficient: {
                coeffInteger: 'Balance',
                coeffFrac: 'Perbill',
                negative: 'bool',
                degree: 'u8'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/syncstate/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            genSyncSpec: {
                endpoint: 'sync_state_genSyncSpec',
                description: 'Returns the json-serialized chainspec running the node, with a sync state.',
                params: [
                    {
                        name: 'raw',
                        type: 'bool'
                    }
                ],
                type: 'Json'
            }
        },
        types: {}
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/system/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            accountNextIndex: {
                alias: ['account_nextIndex'],
                description: 'Retrieves the next accountIndex as available on the node',
                params: [
                    {
                        name: 'accountId',
                        type: 'AccountId'
                    }
                ],
                type: 'Index'
            },
            dryRun: {
                alias: ['system_dryRunAt'],
                description: 'Dry run an extrinsic at a given block',
                params: [
                    {
                        name: 'extrinsic',
                        type: 'Bytes'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'ApplyExtrinsicResult'
            },
            name: {
                description: 'Retrieves the node name',
                params: [],
                type: 'Text'
            },
            version: {
                description: 'Retrieves the version of the node',
                params: [],
                type: 'Text'
            },
            chain: {
                description: 'Retrieves the chain',
                params: [],
                type: 'Text'
            },
            chainType: {
                description: 'Retrieves the chain type',
                params: [],
                type: 'ChainType'
            },
            properties: {
                description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
                params: [],
                type: 'ChainProperties'
            },
            health: {
                description: 'Return health status of the node',
                params: [],
                type: 'Health'
            },
            localPeerId: {
                description: 'Returns the base58-encoded PeerId of the node',
                params: [],
                type: 'Text'
            },
            localListenAddresses: {
                description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
                params: [],
                type: 'Vec<Text>'
            },
            peers: {
                description: 'Returns the currently connected peers',
                params: [],
                type: 'Vec<PeerInfo>'
            },
            networkState: {
                description: 'Returns current state of the network',
                params: [],
                type: 'NetworkState'
            },
            addReservedPeer: {
                description: 'Adds a reserved peer',
                params: [
                    {
                        name: 'peer',
                        type: 'Text'
                    }
                ],
                type: 'Text'
            },
            removeReservedPeer: {
                description: 'Remove a reserved peer',
                params: [
                    {
                        name: 'peerId',
                        type: 'Text'
                    }
                ],
                type: 'Text'
            },
            nodeRoles: {
                description: 'Returns the roles the node is running as',
                params: [],
                type: 'Vec<NodeRole>'
            },
            syncState: {
                description: 'Returns the state of the syncing of the node',
                params: [],
                type: 'SyncState'
            },
            addLogFilter: {
                description: 'Adds the supplied directives to the current log filter',
                params: [
                    {
                        name: 'directives',
                        type: 'Text'
                    }
                ],
                type: 'Null'
            },
            resetLogFilter: {
                description: 'Resets the log filter to Substrate defaults',
                params: [],
                type: 'Null'
            }
        },
        types: {
            AccountInfo: 'AccountInfoWithRefCount',
            AccountInfoWithRefCount: {
                nonce: 'Index',
                refcount: 'RefCount',
                data: 'AccountData'
            },
            AccountInfoWithProviders: {
                nonce: 'Index',
                consumers: 'RefCount',
                providers: 'RefCount',
                data: 'AccountData'
            },
            ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
            BlockWeights: {
                baseBlock: 'Weight',
                maxBlock: 'Weight',
                perClass: 'PerDispatchClass'
            },
            ChainProperties: {
                ss58Format: 'Option<u8>',
                tokenDecimals: 'Option<u32>',
                tokenSymbol: 'Option<Text>'
            },
            ChainType: {
                _enum: {
                    Development: 'Null',
                    Local: 'Null',
                    Live: 'Null',
                    Custom: 'Text'
                }
            },
            ConsumedWeight: 'PerDispatchClass',
            DigestOf: 'Digest',
            DispatchClass: {
                _enum: ['Normal', 'Operational', 'Mandatory']
            },
            DispatchError: {
                _enum: {
                    Other: 'Null',
                    CannotLookup: 'Null',
                    BadOrigin: 'Null',
                    Module: 'DispatchErrorModule'
                }
            },
            DispatchErrorModule: {
                index: 'u8',
                error: 'u8'
            },
            DispatchErrorTo198: {
                module: 'Option<u8>',
                error: 'u8'
            },
            DispatchInfo: {
                weight: 'Weight',
                class: 'DispatchClass',
                paysFee: 'Pays'
            },
            DispatchInfoTo190: {
                weight: 'Weight',
                class: 'DispatchClass'
            },
            DispatchInfoTo244: {
                weight: 'Weight',
                class: 'DispatchClass',
                paysFee: 'bool'
            },
            DispatchOutcome: 'Result<(), DispatchError>',
            DispatchResult: 'Result<(), DispatchError>',
            DispatchResultOf: 'DispatchResult',
            DispatchResultTo198: 'Result<(), Text>',
            Event: 'GenericEvent',
            EventId: '[u8; 2]',
            EventIndex: 'u32',
            EventRecord: {
                phase: 'Phase',
                event: 'Event',
                topics: 'Vec<Hash>'
            },
            Health: {
                peers: 'u64',
                isSyncing: 'bool',
                shouldHavePeers: 'bool'
            },
            InvalidTransaction: {
                _enum: {
                    Call: 'Null',
                    Payment: 'Null',
                    Future: 'Null',
                    Stale: 'Null',
                    BadProof: 'Null',
                    AncientBirthBlock: 'Null',
                    ExhaustsResources: 'Null',
                    Custom: 'u8',
                    BadMandatory: 'Null',
                    MandatoryDispatch: 'Null'
                }
            },
            Key: 'Bytes',
            LastRuntimeUpgradeInfo: {
                specVersion: 'Compact<u32>',
                specName: 'Text'
            },
            NetworkState: {
                peerId: 'Text',
                listenedAddresses: 'Vec<Text>',
                externalAddresses: 'Vec<Text>',
                connectedPeers: 'HashMap<Text, Peer>',
                notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
                averageDownloadPerSec: 'u64',
                averageUploadPerSec: 'u64',
                peerset: 'NetworkStatePeerset'
            },
            NetworkStatePeerset: {
                messageQueue: 'u64',
                nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
            },
            NetworkStatePeersetInfo: {
                connected: 'bool',
                reputation: 'i32'
            },
            NodeRole: {
                _enum: {
                    Full: 'Null',
                    LightClient: 'Null',
                    Authority: 'Null',
                    UnknownRole: 'u8'
                }
            },
            NotConnectedPeer: {
                knownAddresses: 'Vec<Text>',
                latestPingTime: 'Option<PeerPing>',
                versionString: 'Option<Text>'
            },
            Peer: {
                enabled: 'bool',
                endpoint: 'PeerEndpoint',
                knownAddresses: 'Vec<Text>',
                latestPingTime: 'PeerPing',
                open: 'bool',
                versionString: 'Text'
            },
            PeerEndpoint: {
                listening: 'PeerEndpointAddr'
            },
            PeerEndpointAddr: {
                _alias: {
                    localAddr: 'local_addr',
                    sendBackAddr: 'send_back_addr'
                },
                localAddr: 'Text',
                sendBackAddr: 'Text'
            },
            PeerPing: {
                nanos: 'u64',
                secs: 'u64'
            },
            PeerInfo: {
                peerId: 'Text',
                roles: 'Text',
                protocolVersion: 'u32',
                bestHash: 'Hash',
                bestNumber: 'BlockNumber'
            },
            PerDispatchClass: {
                normal: 'WeightPerClass',
                operational: 'WeightPerClass',
                mandatory: 'WeightPerClass'
            },
            Phase: {
                _enum: {
                    ApplyExtrinsic: 'u32',
                    Finalization: 'Null',
                    Initialization: 'Null'
                }
            },
            RawOrigin: {
                _enum: {
                    Root: 'Null',
                    Signed: 'AccountId',
                    None: 'Null'
                }
            },
            RefCount: 'u32',
            RefCountTo259: 'u8',
            SyncState: {
                startingBlock: 'BlockNumber',
                currentBlock: 'BlockNumber',
                highestBlock: 'Option<BlockNumber>'
            },
            SystemOrigin: 'RawOrigin',
            TransactionValidityError: {
                _enum: {
                    Invalid: 'InvalidTransaction',
                    Unknown: 'UnknownTransaction'
                }
            },
            UnknownTransaction: {
                _enum: {
                    CannotLookup: 'Null',
                    NoUnsignedValidator: 'Null',
                    Custom: 'u8'
                }
            },
            WeightPerClass: {
                baseExtrinsic: 'Weight',
                maxExtrinsic: 'Weight',
                maxTotal: 'Option<Weight>',
                reserved: 'Option<Weight>'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/treasury/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Bounty: {
                proposer: 'AccountId',
                value: 'Balance',
                fee: 'Balance',
                curatorDeposit: 'Balance',
                bond: 'Balance',
                status: 'BountyStatus'
            },
            BountyIndex: 'u32',
            BountyStatus: {
                _enum: {
                    Proposed: 'Null',
                    Approved: 'Null',
                    Funded: 'Null',
                    CuratorProposed: 'BountyStatusCuratorProposed',
                    Active: 'BountyStatusActive',
                    PendingPayout: 'BountyStatusPendingPayout'
                }
            },
            BountyStatusActive: {
                curator: 'AccountId',
                updateDue: 'BlockNumber'
            },
            BountyStatusCuratorProposed: {
                curator: 'AccountId'
            },
            BountyStatusPendingPayout: {
                curator: 'AccountId',
                beneficiary: 'AccountId',
                unlockAt: 'BlockNumber'
            },
            OpenTip: {
                reason: 'Hash',
                who: 'AccountId',
                finder: 'AccountId',
                deposit: 'Balance',
                closes: 'Option<BlockNumber>',
                tips: 'Vec<OpenTipTip>',
                findersFee: 'bool'
            },
            OpenTipTo225: {
                reason: 'Hash',
                who: 'AccountId',
                finder: 'Option<OpenTipFinderTo225>',
                closes: 'Option<BlockNumber>',
                tips: 'Vec<OpenTipTip>'
            },
            OpenTipFinderTo225: '(AccountId, Balance)',
            OpenTipTip: '(AccountId, Balance)',
            TreasuryProposal: {
                proposer: 'AccountId',
                value: 'Balance',
                beneficiary: 'AccountId',
                bond: 'Balance'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/txpayment/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Multiplier: 'Fixed128'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/utility/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Multisig: {
                when: 'Timepoint',
                deposit: 'Balance',
                depositor: 'AccountId',
                approvals: 'Vec<AccountId>'
            },
            Timepoint: {
                height: 'BlockNumber',
                index: 'u32'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/vesting/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            VestingInfo: {
                locked: 'Balance',
                perBlock: 'Balance',
                startingBlock: 'BlockNumber'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/attestations/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            BlockAttestations: {
                receipt: 'CandidateReceipt',
                valid: 'Vec<AccountId>',
                invalid: 'Vec<AccountId>'
            },
            IncludedBlocks: {
                actualNumber: 'BlockNumber',
                session: 'SessionIndex',
                randomSeed: 'H256',
                activeParachains: 'Vec<ParaId>',
                paraBlocks: 'Vec<Hash>'
            },
            MoreAttestations: {}
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/claims/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            EthereumAddress: 'H160',
            StatementKind: {
                _enum: ['Regular', 'Saft']
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/parachains/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const SLOT_RANGE_COUNT = 10;
    // proposeParachain
    const proposeTypes = {
        ParachainProposal: {
            proposer: 'AccountId',
            validationCode: 'ValidationCode',
            genesisHead: 'HeadData',
            validators: 'Vec<ValidatorId>',
            name: 'Bytes',
            balance: 'Balance'
        },
        RegisteredParachainInfo: {
            validators: 'Vec<ValidatorId>',
            proposer: 'AccountId'
        }
    };
    // hrmp
    const hrmpTypes = {
        HrmpChannelTo13: {
            senderDeposit: 'Balance',
            recipientDeposit: 'Balance',
            maxCapacity: 'u32',
            maxTotalSize: 'u32',
            maxMessageSize: 'u32',
            msgCount: 'u32',
            totalSize: 'u32',
            mqcHead: 'Option<Hash>'
        },
        HrmpChannel: {
            maxCapacity: 'u32',
            maxTotalSize: 'u32',
            maxMessageSize: 'u32',
            msgCount: 'u32',
            totalSize: 'u32',
            mqcHead: 'Option<Hash>',
            senderDeposit: 'Balance',
            recipientDeposit: 'Balance'
        },
        HrmpChannelId: {
            sender: 'u32',
            receiver: 'u32'
        },
        HrmpOpenChannelRequest: {
            confirmed: 'bool',
            age: 'SessionIndex',
            senderDeposit: 'Balance',
            maxMessageSize: 'u32',
            maxCapacity: 'u32',
            maxTotalSize: 'u32'
        }
    };
    exports.default = {
        rpc: {},
        types: {
            ...proposeTypes,
            ...hrmpTypes,
            AbridgedCandidateReceipt: {
                parachainIndex: 'ParaId',
                relayParent: 'Hash',
                headData: 'HeadData',
                collator: 'CollatorId',
                signature: 'CollatorSignature',
                povBlockHash: 'Hash',
                commitments: 'CandidateCommitments'
            },
            AbridgedHostConfiguration: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                maxUpwardQueueCount: 'u32',
                maxUpwardQueueSize: 'u32',
                maxUpwardMessageSize: 'u32',
                maxUpwardMessageNumPerCandidate: 'u32',
                hrmpMaxMessageNumPerCandidate: 'u32',
                validationUpgradeFrequency: 'BlockNumber',
                validationUpgradeDelay: 'BlockNumber'
            },
            AbridgedHrmpChannel: {
                maxCapacity: 'u32',
                maxTotalSize: 'u32',
                maxMessageSize: 'u32',
                msgCount: 'u32',
                totalSize: 'u32',
                mqcHead: 'Option<Hash>'
            },
            AssignmentId: 'AccountId',
            AssignmentKind: {
                _enum: {
                    Parachain: 'Null',
                    Parathread: '(CollatorId, u32)'
                }
            },
            AttestedCandidate: {
                candidate: 'AbridgedCandidateReceipt',
                validityVotes: 'Vec<ValidityAttestation>',
                validatorIndices: 'BitVec'
            },
            AuthorityDiscoveryId: 'AccountId',
            AuctionIndex: 'u32',
            AvailabilityBitfield: 'BitVec',
            AvailabilityBitfieldRecord: {
                bitfield: 'AvailabilityBitfield',
                submittedTt: 'BlockNumber'
            },
            BackedCandidate: {
                candidate: 'CommittedCandidateReceipt',
                validityVotes: 'Vec<ValidityAttestation>',
                validatorIndices: 'BitVec'
            },
            Bidder: {
                _enum: {
                    New: 'NewBidder',
                    Existing: 'ParaId'
                }
            },
            BufferedSessionChange: {
                applyAt: 'BlockNumber',
                validators: 'Vec<ValidatorId>',
                queued: 'Vec<ValidatorId>',
                sessionIndex: 'SessionIndex'
            },
            CandidateCommitments: {
                upwardMessages: 'Vec<UpwardMessage>',
                horizontalMessages: 'Vec<OutboundHrmpMessage>',
                newValidationCode: 'Option<ValidationCode>',
                headData: 'HeadData',
                processedDownwardMessages: 'u32',
                hrmpWatermark: 'BlockNumber'
            },
            CandidateDescriptor: {
                paraId: 'ParaId',
                relayParent: 'Hash',
                collatorId: 'Hash',
                persistedValidationDataHash: 'Hash',
                povHash: 'Hash',
                erasureRoot: 'Hash',
                signature: 'Signature'
            },
            CandidateHash: 'Hash',
            CandidatePendingAvailability: {
                core: 'CoreIndex',
                hash: 'CandidateHash',
                descriptor: 'CandidateDescriptor',
                availabilityVotes: 'BitVec',
                backers: 'BitVec',
                relayParentNumber: 'BlockNumber',
                backedInNumber: 'BlockNumber'
            },
            CandidateReceipt: {
                descriptor: 'CandidateDescriptor',
                commitmentsHash: 'Hash'
            },
            CollatorId: '[u8; 32]',
            CollatorSignature: 'Signature',
            CommittedCandidateReceipt: {
                descriptor: 'CandidateDescriptor',
                commitments: 'CandidateCommitments'
            },
            CoreAssignment: {
                core: 'CoreIndex',
                paraId: 'ParaId',
                kind: 'AssignmentKind',
                groupIdx: 'GroupIndex'
            },
            CoreIndex: 'u32',
            CoreOccupied: {
                _enum: {
                    Parathread: 'ParathreadEntry',
                    Parachain: 'Null'
                }
            },
            DoubleVoteReport: {
                identity: 'ValidatorId',
                first: '(Statement, ValidatorSignature)',
                second: '(Statement, ValidatorSignature)',
                proof: 'MembershipProof',
                signingContext: 'SigningContext'
            },
            DownwardMessage: 'Bytes',
            GroupIndex: 'u32',
            GlobalValidationSchedule: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                blockNumber: 'BlockNumber'
            },
            HeadData: 'Bytes',
            HostConfiguration: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                maxUpwardQueueCount: 'u32',
                maxUpwardQueueSize: 'u32',
                maxUpwardMessageSize: 'u32',
                maxUpwardMessageNumPerCandidate: 'u32',
                hrmpMaxMessageNumPerCandidate: 'u32',
                validationUpgradeFrequency: 'BlockNumber',
                validationUpgradeDelay: 'BlockNumber',
                maxPovSize: 'u32',
                maxDownwardMessageSize: 'u32',
                preferredDispatchableUpwardMessagesStepWeight: 'Weight',
                hrmpMaxParachainOutboundChannels: 'u32',
                hrmpMaxParathreadOutboundChannels: 'u32',
                hrmpOpenRequestTtl: 'u32',
                hrmpSenderDeposit: 'Balance',
                hrmpRecipientDeposit: 'Balance',
                hrmpChannelMaxCapacity: 'u32',
                hrmpChannelMaxTotalSize: 'u32',
                hrmpMaxParachainInboundChannels: 'u32',
                hrmpMaxParathreadInboundChannels: 'u32',
                hrmpChannelMaxMessageSize: 'u32',
                acceptancePeriod: 'BlockNumber',
                parathreadCores: 'u32',
                parathreadRetries: 'u32',
                groupRotationFrequency: 'BlockNumber',
                chainAvailabilityPeriod: 'BlockNumber',
                threadAvailabilityPeriod: 'BlockNumber',
                schedulingLookahead: 'u32',
                maxValidatorsPerCore: 'Option<u32>',
                disputePeriod: 'SessionIndex',
                noShowSlots: 'u32',
                nDelayTranches: 'u32',
                zerothDelayTrancheWidth: 'u32',
                neededApprovals: 'u32',
                relayVrfModuloSamples: 'u32'
            },
            HostConfigurationTo13: {
                validationUpgradeFrequency: 'BlockNumber',
                validationUpgradeDelay: 'BlockNumber',
                acceptancePeriod: 'BlockNumber',
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                maxPovSize: 'u32',
                parathreadCores: 'u32',
                parathreadRetries: 'u32',
                groupRotationFrequency: 'BlockNumber',
                chainAvailabilityPeriod: 'BlockNumber',
                threadAvailabilityPeriod: 'BlockNumber',
                schedulingLookahead: 'u32',
                maxValidatorsPerCore: 'Option<u32>',
                disputePeriod: 'SessionIndex',
                noShowSlots: 'u32',
                nDelayTranches: 'u32',
                zerothDelayTrancheWidth: 'u32',
                neededApprovals: 'u32',
                relayVrfModuloSamples: 'u32',
                maxUpwardQueueCount: 'u32',
                maxUpwardQueueSize: 'u32',
                maxDownwardMessageSize: 'u32',
                preferredDispatchableUpwardMessagesStepWeight: 'Weight',
                maxUpwardMessageSize: 'u32',
                maxUpwardMessageNumPerCandidate: 'u32',
                hrmpOpenRequestTtl: 'u32',
                hrmpSenderDeposit: 'Balance',
                hrmpRecipientDeposit: 'Balance',
                hrmpChannelMaxCapacity: 'u32',
                hrmpChannelMaxTotalSize: 'u32',
                hrmpMaxParachainInboundChannels: 'u32',
                hrmpMaxParathreadInboundChannels: 'u32',
                hrmpChannelMaxMessageSize: 'u32',
                hrmpMaxParachainOutboundChannels: 'u32',
                hrmpMaxParathreadOutboundChannels: 'u32',
                hrmpMaxMessageNumPerCandidate: 'u32'
            },
            InboundDownwardMessage: {
                pubSentAt: 'BlockNumber',
                pubMsg: 'DownwardMessage'
            },
            InboundHrmpMessage: {
                sentAt: 'BlockNumber',
                data: 'Bytes'
            },
            InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
            IncomingParachain: {
                _enum: {
                    Unset: 'NewBidder',
                    Fixed: 'IncomingParachainFixed',
                    Deploy: 'IncomingParachainDeploy'
                }
            },
            IncomingParachainFixed: {
                codeHash: 'Hash',
                codeSize: 'u32',
                initialHeadData: 'HeadData'
            },
            IncomingParachainDeploy: {
                code: 'ValidationCode',
                initialHeadData: 'HeadData'
            },
            LeasePeriod: 'BlockNumber',
            LeasePeriodOf: 'LeasePeriod',
            LocalValidationData: {
                parentHead: 'HeadData',
                balance: 'Balance',
                codeUpgradeAllowed: 'Option<BlockNumber>'
            },
            MessageIngestionType: {
                downwardMessages: 'Vec<InboundDownwardMessage>',
                horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
            },
            NewBidder: {
                who: 'AccountId',
                sub: 'SubId'
            },
            OutboundHrmpMessage: {
                recipient: 'u32',
                data: 'Bytes'
            },
            ParachainDispatchOrigin: {
                _enum: ['Signed', 'Parachain', 'Root']
            },
            ParaGenesisArgs: {
                genesisHead: 'Bytes',
                validationCode: 'Bytes',
                parachain: 'bool'
            },
            ParaId: 'u32',
            ParaInfo: {
                scheduling: 'Scheduling'
            },
            ParaPastCodeMeta: {
                upgradeTimes: 'Vec<BlockNumber>',
                lastPruned: 'Option<BlockNumber>'
            },
            ParaScheduling: {
                _enum: ['Always', 'Dynamic']
            },
            ParathreadClaim: '(ParaId, CollatorId)',
            ParathreadClaimQueue: {
                queue: 'Vec<QueuedParathread>',
                nextCoreOffset: 'u32'
            },
            ParathreadEntry: {
                claim: 'ParathreadClaim',
                retries: 'u32'
            },
            PersistedValidationData: {
                parentHead: 'HeadData',
                blockNumber: 'BlockNumber',
                relayStorageRoot: 'Hash',
                hrmpMqcHeads: 'Vec<(u32, Hash)>',
                dmqMqcHead: 'Hash',
                maxPovSize: 'u32'
            },
            RelayChainBlockNumber: 'BlockNumber',
            QueuedParathread: {
                claim: 'ParathreadEntry',
                coreOffset: 'u32'
            },
            Remark: '[u8; 32]',
            Retriable: {
                _enum: {
                    Never: 'Null',
                    WithRetries: 'u32'
                }
            },
            Scheduling: {
                _enum: ['Always', 'Dynamic']
            },
            SessionInfo: {
                validators: 'Vec<ValidatorId>',
                discoveryKeys: 'Vec<AuthorityDiscoveryId>',
                assignmentKeys: 'Vec<AssignmentId>',
                validatorGroups: 'Vec<ValidatorGroup>',
                nCores: 'u32',
                zerothDelayTrancheWidth: 'u32',
                relayVrfModuloSamples: 'u32',
                nDelayTranches: 'u32',
                noShowSlots: 'u32',
                neededApprovals: 'u32'
            },
            SignedAvailabilityBitfield: {
                payload: 'BitVec',
                validatorIndex: 'u32',
                signature: 'Signature'
            },
            SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
            SigningContext: {
                sessionIndex: 'SessionIndex',
                parentHash: 'Hash'
            },
            SlotRange: {
                _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
            },
            Statement: {
                _enum: {
                    Never: 'Null',
                    Candidate: 'Hash',
                    Valid: 'Hash',
                    Invalid: 'Hash'
                }
            },
            SubId: 'u32',
            TransientValidationData: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                balance: 'Balance',
                codeUpgradeAllowed: 'Option<BlockNumber>',
                dmqLength: 'u32'
            },
            UpwardMessage: 'Bytes',
            ValidationFunctionParams: {
                maxCodeSize: 'u32',
                relayChainHeight: 'RelayChainBlockNumber',
                codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
            },
            ValidationCode: 'Bytes',
            ValidationData: {
                persisted: 'PersistedValidationData',
                transient: 'TransientValidationData'
            },
            ValidationDataType: {
                validationData: 'ValidationData',
                relayChainState: 'Vec<Bytes>'
            },
            ValidatorGroup: 'Vec<ValidatorIndex>',
            ValidatorSignature: 'Signature',
            ValidityAttestation: {
                _enum: {
                    Never: 'Null',
                    Implicit: 'ValidatorSignature',
                    Explicit: 'ValidatorSignature'
                }
            },
            VersionedXcm: {
                _enum: {
                    V0: 'Xcm'
                }
            },
            WinningData: `[WinningDataEntry; ${SLOT_RANGE_COUNT}]`,
            WinningDataEntry: 'Option<Bidder>',
            WithdrawAsset: {
                assets: 'Vec<MultiAsset>',
                effects: 'Vec<Order>'
            },
            ReserveAssetDeposit: {
                assets: 'Vec<MultiAsset>',
                effects: 'Vec<Order>'
            },
            TeleportAsset: {
                assets: 'Vec<MultiAsset>',
                effects: 'Vec<Order>'
            },
            Balances: {
                queryId: 'Compact<u64>',
                assets: 'Vec<MultiAsset>'
            },
            Transact: {
                originType: 'OriginKind',
                call: 'Vec<u8>'
            },
            RelayTo: {
                dest: 'MultiLocation',
                inner: 'VersionedXcm'
            },
            RelayedFrom: {
                superorigin: 'MultiLocation',
                inner: 'VersionedXcm'
            },
            Xcm: {
                _enum: {
                    WithdrawAsset: 'WithdrawAsset',
                    ReserveAssetDeposit: 'ReserveAssetDeposit',
                    TeleportAsset: 'TeleportAsset',
                    Balances: 'Balances',
                    Transact: 'Transact',
                    RelayTo: 'RelayTo',
                    RelayedFrom: 'RelayedFrom'
                }
            },
            XcmError: {
                _enum: ['Undefined', 'Unimplemented', 'UnhandledXcmVersion', 'UnhandledXcmMessage', 'UnhandledEffect', 'EscalationOfPrivilege', 'UntrustedReserveLocation', 'UntrustedTeleportLocation', 'DestinationBufferOverflow', 'CannotReachDestination', 'MultiLocationFull', 'FailedToDecode', 'BadOrigin']
            },
            XcmResult: {
                _enum: {
                    Ok: '()',
                    Err: 'XcmError'
                }
            },
            OriginKind: {
                _enum: ['Native', 'SovereignAccount', 'Superuser']
            },
            NetworkId: {
                _enum: {
                    Any: 'Null',
                    Named: 'Vec<u8>',
                    Polkadot: 'Null',
                    Kusama: 'Null'
                }
            },
            MultiLocation: {
                _enum: {
                    Null: 'Null',
                    X1: 'Junction',
                    X2: '(Junction, Junction)',
                    X3: '(Junction, Junction, Junction)',
                    X4: '(Junction, Junction, Junction, Junction)'
                }
            },
            AccountId32Junction: {
                network: 'NetworkId',
                id: 'AccountId'
            },
            AccountIndex64Junction: {
                network: 'NetworkId',
                index: 'Compact<u64>'
            },
            AccountKey20Junction: {
                network: 'NetworkId',
                index: '[u8; 20]'
            },
            Junction: {
                _enum: {
                    Parent: 'Null',
                    Parachain: 'Compact<u32>',
                    AccountId32: 'AccountId32Junction',
                    AccountIndex64: 'AccountIndex64Junction',
                    AccountKey20: 'AccountKey20Junction',
                    PalletInstance: 'u8',
                    GeneralIndex: 'Compact<u128>',
                    GeneralKey: 'Vec<u8>',
                    OnlyChild: 'Null'
                }
            },
            VersionedMultiLocation: {
                _enum: {
                    V0: 'MultiLocation'
                }
            },
            AssetInstance: {
                _enum: {
                    Undefined: 'Null',
                    Index8: 'u8',
                    Index16: 'Compact<u16>',
                    Index32: 'Compact<u32>',
                    Index64: 'Compact<u64>',
                    Index128: 'Compact<u128>',
                    Array4: '[u8; 4]',
                    Array8: '[u8; 8]',
                    Array16: '[u8; 16]',
                    Array32: '[u8; 32]',
                    Blob: 'Vec<u8>'
                }
            },
            AbstractFungible: {
                id: 'Vec<u8>',
                instance: 'Compact<u128>'
            },
            AbstractNonFungible: {
                class: 'Vec<u8>',
                instance: 'AssetInstance'
            },
            ConcreteFungible: {
                id: 'MultiLocation',
                amount: 'Compact<u128>'
            },
            ConcreteNonFungible: {
                class: 'MultiLocation',
                instance: 'AssetInstance'
            },
            MultiAsset: {
                _enum: {
                    None: 'Null',
                    All: 'Null',
                    AllFungible: 'Null',
                    AllNonFungible: 'Null',
                    AllAbstractFungible: 'Vec<u8>',
                    AllAbstractNonFungible: 'Vec<u8>',
                    AllConcreteFungible: 'MultiLocation',
                    AllConcreteNonFungible: 'MultiLocation',
                    AbstractFungible: 'AbstractFungible',
                    AbstractNonFungible: 'AbstractNonFungible',
                    ConcreteFungible: 'ConcreteFungible',
                    ConcreteNonFungible: 'ConcreteNonFungible'
                }
            },
            VersionedMultiAsset: {
                _enum: {
                    V0: 'MultiAsset'
                }
            },
            DepositAsset: {
                assets: 'Vec<MultiAsset>',
                dest: 'MultiLocation'
            },
            DepositReserveAsset: {
                assets: 'Vec<MultiAsset>',
                dest: 'MultiLocation',
                effects: 'Vec<Order>'
            },
            ExchangeAsset: {
                give: 'Vec<MultiAsset>',
                receive: 'Vec<MultiAsset>'
            },
            InitiateReserveWithdraw: {
                assets: 'Vec<MultiAsset>',
                reserve: 'MultiLocation',
                effects: 'Vec<Order>'
            },
            InitiateTeleport: {
                assets: 'Vec<MultiAsset>',
                dest: 'MultiLocation',
                effects: 'Vec<Order>'
            },
            QueryHolding: {
                queryId: 'Compact<u64>',
                dest: 'MultiLocation',
                assets: 'Vec<MultiAsset>'
            },
            Order: {
                _enum: {
                    Null: 'Null',
                    DepositAsset: 'DepositAsset',
                    DepositReserveAsset: 'DepositReserveAsset',
                    ExchangeAsset: 'ExchangeAsset',
                    InitiateReserveWithdraw: 'InitiateReserveWithdraw',
                    InitiateTeleport: 'InitiateTeleport',
                    QueryHolding: 'QueryHolding'
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/poll/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            Approvals: '[bool; 4]'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/purchase/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {},
        types: {
            AccountStatus: {
                validity: 'AccountValidity',
                freeBalance: 'Balance',
                lockedBalance: 'Balance',
                signature: 'Vec<u8>',
                vat: 'Permill'
            },
            AccountValidity: {
                _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/contractsAbi/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // order important in structs... :)
    /* eslint-disable sort-keys */
    const layout = {
        ContractCryptoHasher: {
            _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
        },
        ContractDiscriminant: 'u32',
        ContractLayoutArray: {
            offset: 'ContractLayoutKey',
            len: 'u32',
            cellsPerElem: 'u64',
            layout: 'ContractStorageLayout'
        },
        ContractLayoutCell: {
            key: 'ContractLayoutKey',
            ty: 'SiLookupTypeId'
        },
        ContractLayoutEnum: {
            dispatchKey: 'ContractLayoutKey',
            variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
        },
        ContractLayoutHash: {
            offset: 'ContractLayoutKey',
            strategy: 'ContractLayoutHashingStrategy',
            layout: 'ContractStorageLayout'
        },
        ContractLayoutHashingStrategy: {
            hasher: 'ContractCryptoHasher',
            postfix: 'Vec<u8>',
            prefix: 'Vec<u8>'
        },
        ContractLayoutKey: '[u8; 32]',
        ContractLayoutStruct: {
            fields: 'Vec<ContractLayoutStructField>'
        },
        ContractLayoutStructField: {
            layout: 'ContractStorageLayout',
            name: 'Text'
        },
        ContractStorageLayout: {
            _enum: {
                Cell: 'ContractLayoutCell',
                Hash: 'ContractLayoutHash',
                Array: 'ContractLayoutArray',
                Struct: 'ContractLayoutStruct',
                Enum: 'ContractLayoutEnum'
            }
        }
    };
    const spec = {
        ContractConstructorSpec: {
            name: 'Text',
            selector: 'ContractSelector',
            args: 'Vec<ContractMessageParamSpec>',
            docs: 'Vec<Text>'
        },
        ContractContractSpec: {
            constructors: 'Vec<ContractConstructorSpec>',
            messages: 'Vec<ContractMessageSpec>',
            events: 'Vec<ContractEventSpec>',
            docs: 'Vec<Text>'
        },
        ContractDisplayName: 'SiPath',
        ContractEventParamSpec: {
            name: 'Text',
            indexed: 'bool',
            type: 'ContractTypeSpec',
            docs: 'Vec<Text>'
        },
        ContractEventSpec: {
            name: 'Text',
            args: 'Vec<ContractEventParamSpec>',
            docs: 'Vec<Text>'
        },
        ContractMessageParamSpec: {
            name: 'Text',
            type: 'ContractTypeSpec'
        },
        ContractMessageSpec: {
            name: 'Text',
            selector: 'ContractSelector',
            mutates: 'bool',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpec>',
            returnType: 'Option<ContractTypeSpec>',
            docs: 'Vec<Text>'
        },
        ContractSelector: '[u8; 4]',
        ContractTypeSpec: {
            type: 'SiLookupTypeId',
            displayName: 'ContractDisplayName'
        }
    };
    exports.default = {
        rpc: {},
        types: {
            ...layout,
            ...spec,
            ContractProject: {
                // added by ABI serialization
                metadataVersion: 'Text',
                source: 'ContractProjectSource',
                contract: 'ContractProjectContract',
                // expanded scale registry: RegistryReadOnly
                types: 'Vec<SiType>',
                // renamed from layout (ignored for now, incomplete)
                // storage: 'ContractStorageLayout',
                spec: 'ContractContractSpec'
            },
            ContractProjectContract: {
                name: 'Text',
                version: 'Text',
                authors: 'Vec<Text>',
                description: 'Option<Text>',
                documentation: 'Option<Text>',
                repository: 'Option<Text>',
                homepage: 'Option<Text>',
                license: 'Option<Text>'
            },
            ContractProjectSource: {
                hash: '[u8; 32]',
                language: 'Text',
                compiler: 'Text',
                wasm: 'Raw'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/scaleInfo/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // order important in structs... :)
    /* eslint-disable sort-keys */
    exports.default = {
        rpc: {},
        types: {
            SiField: {
                name: 'Option<Text>',
                type: 'SiLookupTypeId'
            },
            SiLookupTypeId: 'u32',
            SiPath: 'Vec<Text>',
            SiType: {
                path: 'SiPath',
                params: 'Vec<SiLookupTypeId>',
                def: 'SiTypeDef'
            },
            SiTypeDef: {
                _enum: {
                    Composite: 'SiTypeDefComposite',
                    Variant: 'SiTypeDefVariant',
                    Sequence: 'SiTypeDefSequence',
                    Array: 'SiTypeDefArray',
                    Tuple: 'SiTypeDefTuple',
                    Primitive: 'SiTypeDefPrimitive'
                }
            },
            SiTypeDefArray: {
                len: 'u16',
                type: 'SiLookupTypeId'
            },
            SiTypeDefComposite: {
                fields: 'Vec<SiField>'
            },
            SiTypeDefVariant: {
                variants: 'Vec<SiVariant>'
            },
            SiTypeDefPrimitive: {
                _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
            },
            SiTypeDefSequence: {
                type: 'SiLookupTypeId'
            },
            SiTypeDefTuple: 'Vec<SiLookupTypeId>',
            SiVariant: {
                name: 'Text',
                fields: 'Vec<SiField>',
                discriminant: 'Option<u64>'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/eth/rpc", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rpc = void 0;
    // We use aliasSection here to override since these are in another namespace
    const netRpc = {
        listening: {
            aliasSection: 'net',
            description: 'Returns true if client is actively listening for network connections. Otherwise false.',
            params: [],
            type: 'bool'
        },
        peerCount: {
            aliasSection: 'net',
            description: 'Returns number of peers connected to node.',
            params: [],
            type: 'String'
        },
        version: {
            aliasSection: 'net',
            description: 'Returns protocol version.',
            params: [],
            type: 'String'
        }
    };
    const web3Rpc = {
        clientVersion: {
            aliasSection: 'web3',
            description: 'Returns current client version.',
            params: [],
            type: 'String'
        },
        sha3: {
            aliasSection: 'web3',
            description: 'Returns sha3 of the given data',
            params: [{ name: 'data', type: 'Bytes' }],
            type: 'H256'
        }
    };
    exports.rpc = {
        ...netRpc,
        ...web3Rpc,
        accounts: {
            description: 'Returns accounts list.',
            params: [],
            type: 'Vec<H160>'
        },
        blockNumber: {
            description: 'Returns balance of the given account.',
            params: [],
            type: 'U256'
        },
        call: {
            description: 'Call contract, returning the output data.',
            params: [
                { name: 'request', type: 'EthCallRequest' },
                { isOptional: true, name: 'number', type: 'BlockNumber' }
            ],
            type: 'Bytes'
        },
        chainId: {
            description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
            params: [],
            type: 'U64'
        },
        coinbase: {
            description: 'Returns block author.',
            params: [],
            type: 'H160'
        },
        estimateGas: {
            description: 'Estimate gas needed for execution of given contract.',
            params: [
                { name: 'request', type: 'EthCallRequest' },
                { isOptional: true, name: 'number', type: 'BlockNumber' }
            ],
            type: 'U256'
        },
        gasPrice: {
            description: 'Returns current gas price.',
            params: [],
            type: 'U256'
        },
        getBalance: {
            description: 'Returns balance of the given account.',
            params: [
                { name: 'address', type: 'H160' },
                { isOptional: true, name: 'number', type: 'BlockNumber' }
            ],
            type: 'U256'
        },
        getBlockByHash: {
            description: 'Returns block with given hash.',
            params: [
                { name: 'hash', type: 'H256' },
                { name: 'full', type: 'bool' }
            ],
            type: 'Option<EthRichBlock>'
        },
        getBlockByNumber: {
            description: 'Returns block with given number.',
            params: [
                { name: 'block', type: 'BlockNumber' },
                { name: 'full', type: 'bool' }
            ],
            type: 'Option<EthRichBlock>'
        },
        getBlockTransactionCountByHash: {
            description: 'Returns the number of transactions in a block with given hash.',
            params: [
                { name: 'hash', type: 'H256' }
            ],
            type: 'U256'
        },
        getBlockTransactionCountByNumber: {
            description: 'Returns the number of transactions in a block with given block number.',
            params: [
                { name: 'block', type: 'BlockNumber' }
            ],
            type: 'U256'
        },
        getCode: {
            description: 'Returns the code at given address at given time (block number).',
            params: [
                { name: 'address', type: 'H160' },
                { isOptional: true, name: 'number', type: 'BlockNumber' }
            ],
            type: 'Bytes'
        },
        getLogs: {
            description: 'Returns logs matching given filter object.',
            params: [
                { name: 'filter', type: 'EthFilter' }
            ],
            type: 'Vec<EthLog>'
        },
        getProof: {
            description: 'Returns proof for account and storage.',
            params: [
                { name: 'address', type: 'H160' },
                { name: 'storageKeys', type: 'Vec<H256>' },
                { name: 'number', type: 'BlockNumber' }
            ],
            type: 'EthAccount'
        },
        getStorageAt: {
            description: 'Returns content of the storage at given address.',
            params: [
                { name: 'address', type: 'H160' },
                { name: 'index', type: 'U256' },
                { isOptional: true, name: 'number', type: 'BlockNumber' }
            ],
            type: 'H256'
        },
        getTransactionByBlockHashAndIndex: {
            description: 'Returns transaction at given block hash and index.',
            params: [
                { name: 'hash', type: 'H256' },
                { name: 'index', type: 'U256' }
            ],
            type: 'EthTransaction'
        },
        getTransactionByBlockNumberAndIndex: {
            description: 'Returns transaction by given block number and index.',
            params: [
                { name: 'number', type: 'BlockNumber' },
                { name: 'index', type: 'U256' }
            ],
            type: 'EthTransaction'
        },
        getTransactionByHash: {
            description: 'Get transaction by its hash.',
            params: [
                { name: 'hash', type: 'H256' }
            ],
            type: 'EthTransaction'
        },
        getTransactionCount: {
            description: 'Returns the number of transactions sent from given address at given time (block number).',
            params: [
                { name: 'hash', type: 'H256' },
                { isOptional: true, name: 'number', type: 'BlockNumber' }
            ],
            type: 'U256'
        },
        getTransactionReceipt: {
            description: 'Returns transaction receipt by transaction hash.',
            params: [
                { name: 'hash', type: 'H256' }
            ],
            type: 'EthReceipt'
        },
        getUncleByBlockHashAndIndex: {
            description: 'Returns an uncles at given block and index.',
            params: [
                { name: 'hash', type: 'H256' },
                { name: 'index', type: 'U256' }
            ],
            type: 'EthRichBlock'
        },
        getUncleByBlockNumberAndIndex: {
            description: 'Returns an uncles at given block and index.',
            params: [
                { name: 'number', type: 'BlockNumber' },
                { name: 'index', type: 'U256' }
            ],
            type: 'EthRichBlock'
        },
        getUncleCountByBlockHash: {
            description: 'Returns the number of uncles in a block with given hash.',
            params: [
                { name: 'hash', type: 'H256' }
            ],
            type: 'U256'
        },
        getUncleCountByBlockNumber: {
            description: 'Returns the number of uncles in a block with given block number.',
            params: [
                { name: 'number', type: 'BlockNumber' }
            ],
            type: 'U256'
        },
        getWork: {
            description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
            params: [],
            type: 'EthWork'
        },
        hashrate: {
            description: 'Returns the number of hashes per second that the node is mining with.',
            params: [],
            type: 'U256'
        },
        mining: {
            description: 'Returns true if client is actively mining new blocks.',
            params: [],
            type: 'bool'
        },
        protocolVersion: {
            description: 'Returns protocol version encoded as a string (quotes are necessary).',
            params: [],
            type: 'u64'
        },
        sendRawTransaction: {
            description: 'Sends signed transaction, returning its hash.',
            params: [
                { name: 'bytes', type: 'Bytes' }
            ],
            type: 'H256'
        },
        sendTransaction: {
            description: 'Sends transaction; will block waiting for signer to return the transaction hash',
            params: [
                { name: 'tx', type: 'EthTransactionRequest' }
            ],
            type: 'H256'
        },
        submitHashrate: {
            description: 'Used for submitting mining hashrate.',
            params: [
                { name: 'index', type: 'U256' },
                { name: 'hash', type: 'H256' }
            ],
            type: 'bool'
        },
        submitWork: {
            description: 'Used for submitting a proof-of-work solution.',
            params: [
                { name: 'nonce', type: 'H64' },
                { name: 'headerHash', type: 'H256' },
                { name: 'mixDigest', type: 'H256' }
            ],
            type: 'bool'
        },
        subscribe: {
            description: 'Subscribe to Eth subscription.',
            params: [
                { name: 'kind', type: 'EthSubKind' },
                { isOptional: true, name: 'params', type: 'EthSubParams' }
            ],
            pubsub: [
                'subscription',
                'subscribe',
                'unsubscribe'
            ],
            type: 'Null'
        },
        syncing: {
            description: 'Returns an object with data about the sync status or false.',
            params: [],
            type: 'EthSyncStatus'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/eth/definitions", ["require", "exports", "types/src/interfaces/eth/rpc"], function (require, exports, rpc_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const types = {
        EthereumAccountId: 'GenericEthereumAccountId',
        EthereumLookupSource: 'GenericEthereumLookupSource',
        EthereumSignature: '[u8; 65]',
        EthAccount: {
            address: 'H160',
            balance: 'U256',
            nonce: 'U256',
            codeHash: 'H256',
            storageHash: 'H256',
            accountProof: 'Vec<Bytes>',
            storageProof: 'Vec<EthStorageProof>'
        },
        EthBlock: {
            _alias: {
                blockHash: 'hash',
                blockSize: 'size'
            },
            blockHash: 'Option<H256>',
            parentHash: 'H256',
            sha3Uncles: 'H256',
            author: 'H160',
            miner: 'H160',
            stateRoot: 'H256',
            transactionsRoot: 'H256',
            receiptsRoot: 'H256',
            number: 'Option<U256>',
            gasUsed: 'U256',
            gasLimit: 'U256',
            extraData: 'Bytes',
            logsBloom: 'H2048',
            timestamp: 'U256',
            difficulty: 'U256',
            totalDifficulty: 'Option<U256>',
            sealFields: 'Vec<Bytes>',
            uncles: 'Vec<H256>',
            transactions: 'Vec<EthTransaction>',
            blockSize: 'Option<U256>'
        },
        EthBloom: 'H2048',
        EthCallRequest: {
            from: 'Option<H160>',
            to: 'Option<H160>',
            gasPrice: 'Option<U256>',
            gas: 'Option<U256>',
            value: 'Option<U256>',
            data: 'Option<Bytes>',
            nonce: 'Option<U256>'
        },
        EthFilter: {
            fromBlock: 'Option<BlockNumber>',
            toBlock: 'Option<BlockNumber>',
            blockHash: 'Option<H256>',
            address: 'Option<EthFilterAddress>',
            topics: 'Option<EthFilterTopic>'
        },
        EthFilterAddress: {
            _enum: {
                Single: 'H160',
                Multiple: 'Vec<H160>',
                Null: 'Null'
            }
        },
        EthFilterTopic: {
            _enum: {
                Single: 'EthFilterTopicInner',
                Multiple: 'Vec<EthFilterTopicInner>',
                Null: 'Null'
            }
        },
        EthFilterTopicEntry: 'Option<H256>',
        EthFilterTopicInner: {
            _enum: {
                Single: 'EthFilterTopicEntry',
                Multiple: 'Vec<EthFilterTopicEntry>',
                Null: 'Null'
            }
        },
        EthHeader: {
            _alias: {
                blockHash: 'hash',
                blockSize: 'size'
            },
            blockHash: 'Option<H256>',
            parentHash: 'H256',
            sha3Uncles: 'H256',
            author: 'H160',
            miner: 'H160',
            stateRoot: 'H256',
            transactionsRoot: 'H256',
            receiptsRoot: 'H256',
            number: 'Option<U256>',
            gasUsed: 'U256',
            gasLimit: 'U256',
            extraData: 'Bytes',
            logsBloom: 'H2048',
            timestamp: 'U256',
            difficulty: 'U256',
            sealFields: 'Vec<Bytes>',
            blockSize: 'Option<U256>'
        },
        EthLog: {
            address: 'H160',
            topics: 'Vec<H256>',
            data: 'Bytes',
            blockHash: 'Option<H256>',
            blockNumber: 'Option<U256>',
            transactionHash: 'Option<H256>',
            transactionIndex: 'Option<U256>',
            logIndex: 'Option<U256>',
            transactionLogIndex: 'Option<U256>',
            removed: 'bool'
        },
        EthReceipt: {
            transactionHash: 'Option<H256>',
            transactionIndex: 'Option<U256>',
            blockHash: 'Option<H256>',
            from: 'Option<H160>',
            to: 'Option<H160>',
            blockNumber: 'Option<U256>',
            cumulativeGasUsed: 'U256',
            gasUsed: 'Option<U256>',
            contractAddress: 'Option<H160>',
            logs: 'Vec<EthLog>',
            root: 'Option<H256>',
            logsBloom: 'H2048',
            statusCode: 'Option<U64>'
        },
        EthRichBlock: 'EthBlock',
        EthRichHeader: 'EthHeader',
        EthStorageProof: {
            key: 'U256',
            value: 'U256',
            proof: 'Vec<Bytes>'
        },
        EthSubKind: {
            _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
        },
        EthSubParams: {
            _enum: {
                None: 'Null',
                Logs: 'EthFilter'
            }
        },
        EthSubResult: {
            _enum: {
                Header: 'EthRichHeader',
                Log: 'EthLog',
                TransactionHash: 'H256',
                SyncState: 'EthSyncStatus'
            }
        },
        EthSyncInfo: {
            startingBlock: 'U256',
            currentBlock: 'U256',
            highestBlock: 'U256',
            warpChunksAmount: 'Option<U256>',
            warpChunksProcessed: 'Option<U256>'
        },
        EthSyncStatus: {
            _enum: {
                Info: 'EthSyncInfo',
                None: 'Null'
            }
        },
        EthTransaction: {
            nonce: 'U256',
            gasPrice: 'U256',
            gasLimit: 'U256',
            action: 'EthTransactionAction',
            value: 'U256',
            input: 'Bytes',
            // TransactionSignature (embedded)
            v: 'u64',
            r: 'H256',
            s: 'H256'
        },
        // as per the RPC definition
        // TODO: Check these, re-add
        // EthTransaction: {
        //   // hash in Rust
        //   transactionHash: 'H256',
        //   nonce: 'U256',
        //   blockHash: 'Option<H256>',
        //   blockNumber: 'Option<U256>',
        //   transactionIndex: 'Option<U256>',
        //   from: 'H160',
        //   to: 'Option<H160>',
        //   value: 'U256',
        //   gasPrice: 'U256',
        //   gas: 'U256',
        //   input: 'Bytes',
        //   creates: 'Option<H160>',
        //   raw: 'Bytes',
        //   publicKey: 'Option<H512>',
        //   chainId: 'Option<U64>',
        //   standardV: 'U256',
        //   v: 'U256',
        //   r: 'U256',
        //   s: 'U256'
        // },
        EthTransactionAction: {
            _enum: {
                Call: 'H160',
                Create: 'Null'
            }
        },
        EthTransactionCondition: {
            _enum: {
                block: 'u64',
                time: 'u64'
            }
        },
        EthTransactionRequest: {
            from: 'Option<H160>',
            to: 'Option<H160>',
            gasPrice: 'Option<U256>',
            gas: 'Option<U256>',
            value: 'Option<U256>',
            data: 'Option<Bytes>',
            nonce: 'Option<U256>'
        },
        EthTransactionStatus: {
            transactionHash: 'H256',
            transactionIndex: 'u32',
            from: 'H160',
            to: 'Option<H160>',
            contractAddress: 'Option<H160>',
            logs: 'Vec<EthLog>',
            logsBloom: 'EthBloom'
        },
        EthWork: {
            powHash: 'H256',
            seedHash: 'H256',
            target: 'H256',
            number: 'Option<u64>'
        }
    };
    exports.default = { rpc: rpc_1.rpc, types };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/rpc/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            methods: {
                description: 'Retrieves the list of RPC methods that are exposed by the node',
                params: [],
                type: 'RpcMethods'
            }
        },
        types: {
            RpcMethods: {
                version: 'u32',
                methods: 'Vec<Text>'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/author/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            hasKey: {
                description: 'Returns true if the keystore has private keys for the given public key and key type.',
                params: [
                    {
                        name: 'publicKey',
                        type: 'Bytes'
                    },
                    {
                        name: 'keyType',
                        type: 'Text'
                    }
                ],
                type: 'bool'
            },
            hasSessionKeys: {
                description: 'Returns true if the keystore has private keys for the given session public keys.',
                params: [
                    {
                        name: 'sessionKeys',
                        type: 'Bytes'
                    }
                ],
                type: 'bool'
            },
            removeExtrinsic: {
                description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
                params: [
                    {
                        name: 'bytesOrHash',
                        type: 'Vec<ExtrinsicOrHash>'
                    }
                ],
                type: 'Vec<Hash>'
            },
            insertKey: {
                description: 'Insert a key into the keystore.',
                params: [
                    {
                        name: 'keyType',
                        type: 'Text'
                    },
                    {
                        name: 'suri',
                        type: 'Text'
                    },
                    {
                        name: 'publicKey',
                        type: 'Bytes'
                    }
                ],
                type: 'Bytes'
            },
            rotateKeys: {
                description: 'Generate new session keys and returns the corresponding public keys',
                params: [],
                type: 'Bytes'
            },
            pendingExtrinsics: {
                description: 'Returns all pending extrinsics, potentially grouped by sender',
                params: [],
                type: 'Vec<Extrinsic>'
            },
            submitExtrinsic: {
                isSigned: true,
                description: 'Submit a fully formatted extrinsic for block inclusion',
                params: [
                    {
                        name: 'extrinsic',
                        type: 'Extrinsic'
                    }
                ],
                type: 'Hash'
            },
            submitAndWatchExtrinsic: {
                description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
                isSigned: true,
                params: [
                    {
                        name: 'extrinsic',
                        type: 'Extrinsic'
                    }
                ],
                pubsub: [
                    'extrinsicUpdate',
                    'submitAndWatchExtrinsic',
                    'unwatchExtrinsic'
                ],
                type: 'ExtrinsicStatus'
            }
        },
        types: {
            ExtrinsicOrHash: {
                _enum: {
                    Hash: 'Hash',
                    Extrinsic: 'Bytes'
                }
            },
            ExtrinsicStatus: {
                _enum: {
                    Future: 'Null',
                    Ready: 'Null',
                    Broadcast: 'Vec<Text>',
                    InBlock: 'Hash',
                    Retracted: 'Hash',
                    FinalityTimeout: 'Hash',
                    Finalized: 'Hash',
                    Usurped: 'Hash',
                    Dropped: 'Null',
                    Invalid: 'Null'
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/chain/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            getHeader: {
                alias: ['chain_getHead'],
                description: 'Retrieves the header for a specific block',
                params: [
                    {
                        name: 'hash',
                        type: 'BlockHash',
                        isCached: true,
                        isOptional: true
                    }
                ],
                type: 'Header'
            },
            getBlock: {
                description: 'Get header and body of a relay chain block',
                params: [
                    {
                        name: 'hash',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'SignedBlock'
            },
            getBlockHash: {
                description: 'Get the block hash for a specific block',
                params: [
                    {
                        name: 'blockNumber',
                        type: 'BlockNumber',
                        isOptional: true
                    }
                ],
                type: 'BlockHash'
            },
            getFinalizedHead: {
                alias: ['chain_getFinalisedHead'],
                description: 'Get hash of the last finalized block in the canon chain',
                params: [],
                type: 'BlockHash'
            },
            subscribeNewHeads: {
                alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
                description: 'Retrieves the best header via subscription',
                params: [],
                // NOTE These still has the aliassed version, compatible with 1.x
                pubsub: [
                    'newHead',
                    'subscribeNewHead',
                    'unsubscribeNewHead'
                ],
                type: 'Header'
            },
            subscribeFinalizedHeads: {
                alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
                description: 'Retrieves the best finalized header via subscription',
                params: [],
                pubsub: [
                    'finalizedHead',
                    'subscribeFinalizedHeads',
                    'unsubscribeFinalizedHeads'
                ],
                type: 'Header'
            },
            subscribeAllHeads: {
                description: 'Retrieves the newest header via subscription',
                params: [],
                pubsub: [
                    'allHead',
                    'subscribeAllHeads',
                    'unsubscribeAllHeads'
                ],
                type: 'Header'
            }
        },
        types: {
            BlockHash: 'Hash'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/childstate/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            getKeys: {
                description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
                params: [
                    {
                        name: 'childKey',
                        type: 'PrefixedStorageKey'
                    },
                    {
                        name: 'prefix',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'Hash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Vec<StorageKey>'
            },
            getStorage: {
                description: 'Returns a child storage entry at a specific block state',
                params: [
                    {
                        name: 'childKey',
                        type: 'PrefixedStorageKey'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'Hash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Option<StorageData>'
            },
            getStorageHash: {
                description: 'Returns the hash of a child storage entry at a block state',
                params: [
                    {
                        name: 'childKey',
                        type: 'PrefixedStorageKey'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'Hash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Option<Hash>'
            },
            getStorageSize: {
                description: 'Returns the size of a child storage entry at a block state',
                params: [
                    {
                        name: 'childKey',
                        type: 'PrefixedStorageKey'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'Hash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Option<u64>'
            }
        },
        types: {
            // StorageKey extends Bytes
            PrefixedStorageKey: 'StorageKey'
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/offchain/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            localStorageSet: {
                description: 'Set offchain local storage under given key and prefix',
                params: [
                    {
                        name: 'kind',
                        type: 'StorageKind'
                    },
                    {
                        name: 'key',
                        type: 'Bytes'
                    },
                    {
                        name: 'value',
                        type: 'Bytes'
                    }
                ],
                type: 'Null'
            },
            localStorageGet: {
                description: 'Get offchain local storage under given key and prefix',
                params: [
                    {
                        name: 'kind',
                        type: 'StorageKind'
                    },
                    {
                        name: 'key',
                        type: 'Bytes'
                    }
                ],
                type: 'Option<Bytes>'
            }
        },
        types: {
            StorageKind: {
                _enum: ['__UNUSED', 'PERSISTENT', 'LOCAL']
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/payment/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            queryInfo: {
                description: 'Retrieves the fee information for an encoded extrinsic',
                params: [
                    {
                        name: 'extrinsic',
                        type: 'Bytes'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'RuntimeDispatchInfo'
            }
        },
        types: {
            RuntimeDispatchInfo: {
                weight: 'Weight',
                class: 'DispatchClass',
                partialFee: 'Balance'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/state/definitions", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        rpc: {
            call: {
                alias: ['state_callAt'],
                description: 'Perform a call to a builtin on the chain',
                params: [
                    {
                        name: 'method',
                        type: 'Text'
                    },
                    {
                        name: 'data',
                        type: 'Bytes'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Bytes'
            },
            getKeys: {
                description: 'Retrieves the keys with a certain prefix',
                params: [
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Vec<StorageKey>'
            },
            getPairs: {
                description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
                params: [
                    {
                        name: 'prefix',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Vec<KeyValue>'
            },
            getKeysPaged: {
                alias: ['state_getKeysPagedAt'],
                description: 'Returns the keys with prefix with pagination support.',
                params: [
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'count',
                        type: 'u32'
                    },
                    {
                        name: 'startKey',
                        type: 'StorageKey',
                        isOptional: true
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Vec<StorageKey>'
            },
            getStorage: {
                alias: ['state_getStorageAt'],
                description: 'Retrieves the storage for a key',
                params: [
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'StorageData'
            },
            getStorageHash: {
                alias: ['state_getStorageHashAt'],
                description: 'Retrieves the storage hash',
                params: [
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Hash'
            },
            getStorageSize: {
                alias: ['state_getStorageSizeAt'],
                description: 'Retrieves the storage size',
                params: [
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'u64'
            },
            getChildKeys: {
                description: 'Retrieves the keys with prefix of a specific child storage',
                params: [
                    {
                        name: 'childStorageKey',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childDefinition',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childType',
                        type: 'u32'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Vec<StorageKey>'
            },
            getChildStorage: {
                description: 'Retrieves the child storage for a key',
                params: [
                    {
                        name: 'childStorageKey',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childDefinition',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childType',
                        type: 'u32'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'StorageData'
            },
            getChildStorageHash: {
                description: 'Retrieves the child storage hash',
                params: [
                    {
                        name: 'childStorageKey',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childDefinition',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childType',
                        type: 'u32'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Hash'
            },
            getChildStorageSize: {
                description: 'Retrieves the child storage size',
                params: [
                    {
                        name: 'childStorageKey',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childDefinition',
                        type: 'StorageKey'
                    },
                    {
                        name: 'childType',
                        type: 'u32'
                    },
                    {
                        name: 'key',
                        type: 'StorageKey'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'u64'
            },
            getMetadata: {
                description: 'Returns the runtime metadata',
                params: [
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isCached: true,
                        isOptional: true
                    }
                ],
                type: 'Metadata'
            },
            getRuntimeVersion: {
                alias: ['chain_getRuntimeVersion'],
                description: 'Get the runtime version',
                params: [
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isCached: true,
                        isOptional: true
                    }
                ],
                type: 'RuntimeVersion'
            },
            queryStorage: {
                description: 'Query historical storage entries (by key) starting from a start block',
                params: [
                    {
                        name: 'keys',
                        type: 'Vec<StorageKey>'
                    },
                    {
                        name: 'fromBlock',
                        type: 'Hash'
                    },
                    {
                        name: 'toBlock',
                        type: 'BlockHash',
                        isOptional: true
                    }
                ],
                type: 'Vec<StorageChangeSet>'
            },
            queryStorageAt: {
                description: 'Query storage entries (by key) starting at block hash given as the second parameter',
                params: [
                    {
                        name: 'keys',
                        type: 'Vec<StorageKey>'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'Vec<StorageChangeSet>'
            },
            getReadProof: {
                description: 'Returns proof of storage entries at a specific block state',
                params: [
                    {
                        name: 'keys',
                        type: 'Vec<StorageKey>'
                    },
                    {
                        name: 'at',
                        type: 'BlockHash',
                        isHistoric: true,
                        isOptional: true
                    }
                ],
                type: 'ReadProof'
            },
            subscribeRuntimeVersion: {
                alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
                description: 'Retrieves the runtime version via subscription',
                params: [],
                pubsub: [
                    'runtimeVersion',
                    'subscribeRuntimeVersion',
                    'unsubscribeRuntimeVersion'
                ],
                type: 'RuntimeVersion'
            },
            subscribeStorage: {
                description: 'Subscribes to storage changes for the provided keys',
                params: [
                    {
                        name: 'keys',
                        type: 'Vec<StorageKey>',
                        isOptional: true
                    }
                ],
                pubsub: [
                    'storage',
                    'subscribeStorage',
                    'unsubscribeStorage'
                ],
                type: 'StorageChangeSet'
            }
        },
        types: {
            ApiId: '[u8; 8]',
            KeyValueOption: '(StorageKey, Option<StorageData>)',
            ReadProof: {
                at: 'Hash',
                proof: 'Vec<Bytes>'
            },
            RuntimeVersionApi: '(ApiId, u32)',
            RuntimeVersion: {
                specName: 'Text',
                implName: 'Text',
                authoringVersion: 'u32',
                specVersion: 'u32',
                implVersion: 'u32',
                apis: 'Vec<RuntimeVersionApi>',
                transactionVersion: 'u32'
            },
            StorageChangeSet: {
                block: 'Hash',
                changes: 'Vec<KeyValueOption>'
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/definitions", ["require", "exports", "types/src/interfaces/runtime/definitions", "types/src/interfaces/assets/definitions", "types/src/interfaces/authorship/definitions", "types/src/interfaces/aura/definitions", "types/src/interfaces/babe/definitions", "types/src/interfaces/balances/definitions", "types/src/interfaces/collective/definitions", "types/src/interfaces/consensus/definitions", "types/src/interfaces/contracts/definitions", "types/src/interfaces/democracy/definitions", "types/src/interfaces/elections/definitions", "types/src/interfaces/engine/definitions", "types/src/interfaces/evm/definitions", "types/src/interfaces/extrinsics/definitions", "types/src/interfaces/genericAsset/definitions", "types/src/interfaces/grandpa/definitions", "types/src/interfaces/identity/definitions", "types/src/interfaces/imOnline/definitions", "types/src/interfaces/offences/definitions", "types/src/interfaces/proxy/definitions", "types/src/interfaces/recovery/definitions", "types/src/interfaces/scheduler/definitions", "types/src/interfaces/session/definitions", "types/src/interfaces/society/definitions", "types/src/interfaces/staking/definitions", "types/src/interfaces/support/definitions", "types/src/interfaces/syncstate/definitions", "types/src/interfaces/system/definitions", "types/src/interfaces/treasury/definitions", "types/src/interfaces/txpayment/definitions", "types/src/interfaces/utility/definitions", "types/src/interfaces/vesting/definitions", "types/src/interfaces/attestations/definitions", "types/src/interfaces/claims/definitions", "types/src/interfaces/parachains/definitions", "types/src/interfaces/poll/definitions", "types/src/interfaces/purchase/definitions", "types/src/interfaces/contractsAbi/definitions", "types/src/interfaces/scaleInfo/definitions", "types/src/interfaces/eth/definitions", "types/src/interfaces/metadata/definitions", "types/src/interfaces/rpc/definitions", "types/src/interfaces/author/definitions", "types/src/interfaces/chain/definitions", "types/src/interfaces/childstate/definitions", "types/src/interfaces/offchain/definitions", "types/src/interfaces/payment/definitions", "types/src/interfaces/state/definitions"], function (require, exports, definitions_2, definitions_3, definitions_4, definitions_5, definitions_6, definitions_7, definitions_8, definitions_9, definitions_10, definitions_11, definitions_12, definitions_13, definitions_14, definitions_15, definitions_16, definitions_17, definitions_18, definitions_19, definitions_20, definitions_21, definitions_22, definitions_23, definitions_24, definitions_25, definitions_26, definitions_27, definitions_28, definitions_29, definitions_30, definitions_31, definitions_32, definitions_33, definitions_34, definitions_35, definitions_36, definitions_37, definitions_38, definitions_39, definitions_40, definitions_41, definitions_42, definitions_43, definitions_44, definitions_45, definitions_46, definitions_47, definitions_48, definitions_49) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.state = exports.payment = exports.offchain = exports.childstate = exports.chain = exports.author = exports.rpc = exports.metadata = exports.eth = exports.scaleInfo = exports.contractsAbi = exports.purchase = exports.poll = exports.parachains = exports.claims = exports.attestations = exports.vesting = exports.utility = exports.txpayment = exports.treasury = exports.system = exports.syncstate = exports.support = exports.staking = exports.society = exports.session = exports.scheduler = exports.recovery = exports.proxy = exports.offences = exports.imOnline = exports.identity = exports.grandpa = exports.genericAsset = exports.extrinsics = exports.evm = exports.engine = exports.elections = exports.democracy = exports.contracts = exports.consensus = exports.collective = exports.balances = exports.babe = exports.aura = exports.authorship = exports.assets = exports.runtime = void 0;
    Object.defineProperty(exports, "runtime", { enumerable: true, get: function () { return __importDefault(definitions_2).default; } });
    Object.defineProperty(exports, "assets", { enumerable: true, get: function () { return __importDefault(definitions_3).default; } });
    Object.defineProperty(exports, "authorship", { enumerable: true, get: function () { return __importDefault(definitions_4).default; } });
    Object.defineProperty(exports, "aura", { enumerable: true, get: function () { return __importDefault(definitions_5).default; } });
    Object.defineProperty(exports, "babe", { enumerable: true, get: function () { return __importDefault(definitions_6).default; } });
    Object.defineProperty(exports, "balances", { enumerable: true, get: function () { return __importDefault(definitions_7).default; } });
    Object.defineProperty(exports, "collective", { enumerable: true, get: function () { return __importDefault(definitions_8).default; } });
    Object.defineProperty(exports, "consensus", { enumerable: true, get: function () { return __importDefault(definitions_9).default; } });
    Object.defineProperty(exports, "contracts", { enumerable: true, get: function () { return __importDefault(definitions_10).default; } });
    Object.defineProperty(exports, "democracy", { enumerable: true, get: function () { return __importDefault(definitions_11).default; } });
    Object.defineProperty(exports, "elections", { enumerable: true, get: function () { return __importDefault(definitions_12).default; } });
    Object.defineProperty(exports, "engine", { enumerable: true, get: function () { return __importDefault(definitions_13).default; } });
    Object.defineProperty(exports, "evm", { enumerable: true, get: function () { return __importDefault(definitions_14).default; } });
    Object.defineProperty(exports, "extrinsics", { enumerable: true, get: function () { return __importDefault(definitions_15).default; } });
    Object.defineProperty(exports, "genericAsset", { enumerable: true, get: function () { return __importDefault(definitions_16).default; } });
    Object.defineProperty(exports, "grandpa", { enumerable: true, get: function () { return __importDefault(definitions_17).default; } });
    Object.defineProperty(exports, "identity", { enumerable: true, get: function () { return __importDefault(definitions_18).default; } });
    Object.defineProperty(exports, "imOnline", { enumerable: true, get: function () { return __importDefault(definitions_19).default; } });
    Object.defineProperty(exports, "offences", { enumerable: true, get: function () { return __importDefault(definitions_20).default; } });
    Object.defineProperty(exports, "proxy", { enumerable: true, get: function () { return __importDefault(definitions_21).default; } });
    Object.defineProperty(exports, "recovery", { enumerable: true, get: function () { return __importDefault(definitions_22).default; } });
    Object.defineProperty(exports, "scheduler", { enumerable: true, get: function () { return __importDefault(definitions_23).default; } });
    Object.defineProperty(exports, "session", { enumerable: true, get: function () { return __importDefault(definitions_24).default; } });
    Object.defineProperty(exports, "society", { enumerable: true, get: function () { return __importDefault(definitions_25).default; } });
    Object.defineProperty(exports, "staking", { enumerable: true, get: function () { return __importDefault(definitions_26).default; } });
    Object.defineProperty(exports, "support", { enumerable: true, get: function () { return __importDefault(definitions_27).default; } });
    Object.defineProperty(exports, "syncstate", { enumerable: true, get: function () { return __importDefault(definitions_28).default; } });
    Object.defineProperty(exports, "system", { enumerable: true, get: function () { return __importDefault(definitions_29).default; } });
    Object.defineProperty(exports, "treasury", { enumerable: true, get: function () { return __importDefault(definitions_30).default; } });
    Object.defineProperty(exports, "txpayment", { enumerable: true, get: function () { return __importDefault(definitions_31).default; } });
    Object.defineProperty(exports, "utility", { enumerable: true, get: function () { return __importDefault(definitions_32).default; } });
    Object.defineProperty(exports, "vesting", { enumerable: true, get: function () { return __importDefault(definitions_33).default; } });
    Object.defineProperty(exports, "attestations", { enumerable: true, get: function () { return __importDefault(definitions_34).default; } });
    Object.defineProperty(exports, "claims", { enumerable: true, get: function () { return __importDefault(definitions_35).default; } });
    Object.defineProperty(exports, "parachains", { enumerable: true, get: function () { return __importDefault(definitions_36).default; } });
    Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return __importDefault(definitions_37).default; } });
    Object.defineProperty(exports, "purchase", { enumerable: true, get: function () { return __importDefault(definitions_38).default; } });
    Object.defineProperty(exports, "contractsAbi", { enumerable: true, get: function () { return __importDefault(definitions_39).default; } });
    Object.defineProperty(exports, "scaleInfo", { enumerable: true, get: function () { return __importDefault(definitions_40).default; } });
    Object.defineProperty(exports, "eth", { enumerable: true, get: function () { return __importDefault(definitions_41).default; } });
    Object.defineProperty(exports, "metadata", { enumerable: true, get: function () { return __importDefault(definitions_42).default; } });
    Object.defineProperty(exports, "rpc", { enumerable: true, get: function () { return __importDefault(definitions_43).default; } });
    Object.defineProperty(exports, "author", { enumerable: true, get: function () { return __importDefault(definitions_44).default; } });
    Object.defineProperty(exports, "chain", { enumerable: true, get: function () { return __importDefault(definitions_45).default; } });
    Object.defineProperty(exports, "childstate", { enumerable: true, get: function () { return __importDefault(definitions_46).default; } });
    Object.defineProperty(exports, "offchain", { enumerable: true, get: function () { return __importDefault(definitions_47).default; } });
    Object.defineProperty(exports, "payment", { enumerable: true, get: function () { return __importDefault(definitions_48).default; } });
    Object.defineProperty(exports, "state", { enumerable: true, get: function () { return __importDefault(definitions_49).default; } });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/registry", ["require", "exports", "metadata/src/decorate/index", "metadata/src/Metadata", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/Json", "types/src/codec/Raw", "types/src/extrinsic/signedExtensions/index", "types/src/generic/Event", "types/src/index.types", "types/src/interfaces/definitions", "types/src/primitive/DoNotConstruct", "types/src/create/createClass", "types/src/create/createType", "types/src/create/getTypeDef"], function (require, exports, decorate_2, Metadata_3, util_74, util_crypto_9, Json_2, Raw_7, signedExtensions_1, Event_2, baseTypes, definitions, DoNotConstruct_2, createClass_3, createType_1, getTypeDef_4) {
    "use strict";
    var _classes, _definitions, _metadataCalls, _metadataErrors, _metadataEvents, _unknownTypes, _chainProperties, _hasher, _knownDefaults, _knownDefinitions, _knownTypes, _signedExtensions, _userExtensions;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeRegistry = void 0;
    baseTypes = __importStar(baseTypes);
    definitions = __importStar(definitions);
    const l = util_74.logger('registry');
    // create error mapping from metadata
    function injectErrors(_, metadata, metadataErrors) {
        const modules = metadata.asLatest.modules;
        // decorate the errors
        modules.forEach((section, _sectionIndex) => {
            const sectionIndex = metadata.version >= 12 ? section.index.toNumber() : _sectionIndex;
            const sectionName = util_74.stringCamelCase(section.name);
            section.errors.forEach(({ documentation, name }, index) => {
                const eventIndex = new Uint8Array([sectionIndex, index]);
                metadataErrors[util_74.u8aToHex(eventIndex)] = {
                    documentation: documentation.map((d) => d.toString()),
                    index,
                    method: name.toString(),
                    name: name.toString(),
                    section: sectionName
                };
            });
        });
    }
    // create event classes from metadata
    function injectEvents(registry, metadata, metadataEvents) {
        const modules = metadata.asLatest.modules;
        // decorate the events
        modules
            .filter(({ events }) => events.isSome)
            .forEach((section, _sectionIndex) => {
            const sectionIndex = metadata.version >= 12 ? section.index.toNumber() : _sectionIndex;
            const sectionName = util_74.stringCamelCase(section.name);
            section.events.unwrap().forEach((meta, methodIndex) => {
                const methodName = meta.name.toString();
                const eventIndex = new Uint8Array([sectionIndex, methodIndex]);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
                const typeDef = meta.args.map((arg) => getTypeDef_4.getTypeDef(arg));
                let Types = [];
                try {
                    Types = typeDef.map((typeDef) => createClass_3.getTypeClass(registry, typeDef));
                }
                catch (error) {
                    l.error(error);
                }
                metadataEvents[util_74.u8aToHex(eventIndex)] = class extends Event_2.GenericEventData {
                    constructor(registry, value) {
                        super(registry, value, Types, typeDef, meta, sectionName, methodName);
                    }
                };
            });
        });
    }
    // create extrinsic mapping from metadata
    function injectExtrinsics(registry, metadata, metadataCalls) {
        const extrinsics = decorate_2.decorateExtrinsics(registry, metadata.asLatest, metadata.version);
        // decorate the extrinsics
        Object.values(extrinsics).forEach((methods) => Object.values(methods).forEach((method) => {
            metadataCalls[util_74.u8aToHex(method.callIndex)] = method;
        }));
    }
    // extract additional properties from the metadata
    function extractProperties(registry, metadata) {
        const original = registry.getChainProperties();
        const constants = decorate_2.decorateConstants(registry, metadata.asLatest);
        const ss58Format = constants.system?.ss58Prefix;
        if (!ss58Format) {
            return original;
        }
        return registry.createType('ChainProperties', {
            ...(original || {}),
            ss58Format
        });
    }
    class TypeRegistry {
        constructor() {
            _classes.set(this, new Map());
            _definitions.set(this, new Map());
            _metadataCalls.set(this, {});
            _metadataErrors.set(this, {});
            _metadataEvents.set(this, {});
            _unknownTypes.set(this, new Map());
            _chainProperties.set(this, void 0);
            _hasher.set(this, util_crypto_9.blake2AsU8a);
            _knownDefaults.set(this, void 0);
            _knownDefinitions.set(this, void 0);
            _knownTypes.set(this, {});
            _signedExtensions.set(this, signedExtensions_1.defaultExtensions);
            _userExtensions.set(this, void 0);
            __classPrivateFieldSet(this, _knownDefaults, { Json: Json_2.Json, Metadata: Metadata_3.Metadata, Raw: Raw_7.Raw, ...baseTypes });
            __classPrivateFieldSet(this, _knownDefinitions, definitions);
            this.init();
        }
        init() {
            // start clean
            __classPrivateFieldSet(this, _classes, new Map());
            __classPrivateFieldSet(this, _definitions, new Map());
            __classPrivateFieldSet(this, _unknownTypes, new Map());
            __classPrivateFieldSet(this, _knownTypes, {});
            // register know, first classes then on-demand-created definitions
            this.register(__classPrivateFieldGet(this, _knownDefaults));
            Object.values(__classPrivateFieldGet(this, _knownDefinitions)).forEach(({ types }) => this.register(types));
            return this;
        }
        get chainDecimals() {
            return __classPrivateFieldGet(this, _chainProperties)?.tokenDecimals.isSome
                ? __classPrivateFieldGet(this, _chainProperties).tokenDecimals.unwrap().toNumber()
                : 12;
        }
        get chainSS58() {
            return __classPrivateFieldGet(this, _chainProperties)?.ss58Format.isSome
                ? __classPrivateFieldGet(this, _chainProperties).ss58Format.unwrap().toNumber()
                : undefined;
        }
        get chainToken() {
            return __classPrivateFieldGet(this, _chainProperties)?.tokenSymbol.isSome
                ? __classPrivateFieldGet(this, _chainProperties).tokenSymbol.unwrap().toString()
                : util_74.formatBalance.getDefaults().unit;
        }
        get knownTypes() {
            return __classPrivateFieldGet(this, _knownTypes);
        }
        get signedExtensions() {
            return __classPrivateFieldGet(this, _signedExtensions);
        }
        /**
         * @describe Creates an instance of the class
         */
        createClass(type) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return createClass_3.createClass(this, type);
        }
        /**
         * @description Creates an instance of a type as registered
         */
        createType(type, ...params) {
            return createType_1.createType(this, type, ...params);
        }
        // find a specific call
        findMetaCall(callIndex) {
            const hexIndex = util_74.u8aToHex(callIndex);
            return util_74.assertReturn(__classPrivateFieldGet(this, _metadataCalls)[hexIndex], `findMetaCall: Unable to find Call with index ${hexIndex}/[${callIndex.toString()}]`);
        }
        // finds an error
        findMetaError(errorIndex) {
            const hexIndex = util_74.u8aToHex(util_74.isU8a(errorIndex)
                ? errorIndex
                : new Uint8Array([errorIndex.index.toNumber(), errorIndex.error.toNumber()]));
            return util_74.assertReturn(__classPrivateFieldGet(this, _metadataErrors)[hexIndex], `findMetaError: Unable to find Error with index ${hexIndex}/[${errorIndex.toString()}]`);
        }
        findMetaEvent(eventIndex) {
            const hexIndex = util_74.u8aToHex(eventIndex);
            return util_74.assertReturn(__classPrivateFieldGet(this, _metadataEvents)[hexIndex], `findMetaEvent: Unable to find Event with index ${hexIndex}/[${eventIndex.toString()}]`);
        }
        get(name, withUnknown) {
            let Type = __classPrivateFieldGet(this, _classes).get(name);
            // we have not already created the type, attempt it
            if (!Type) {
                const definition = __classPrivateFieldGet(this, _definitions).get(name);
                let BaseType;
                // we have a definition, so create the class now (lazily)
                if (definition) {
                    BaseType = createClass_3.createClass(this, definition);
                }
                else if (withUnknown) {
                    l.warn(`Unable to resolve type ${name}, it will fail on construction`);
                    __classPrivateFieldGet(this, _unknownTypes).set(name, true);
                    BaseType = DoNotConstruct_2.DoNotConstruct.with(name);
                }
                if (BaseType) {
                    // NOTE If we didn't extend here, we would have strange artifacts. An example is
                    // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
                    // Additionally, we now pass through the registry, which is a link to ourselves
                    Type = class extends BaseType {
                    };
                    __classPrivateFieldGet(this, _classes).set(name, Type);
                }
            }
            return Type;
        }
        getChainProperties() {
            return __classPrivateFieldGet(this, _chainProperties);
        }
        getClassName(clazz) {
            const entry = [...__classPrivateFieldGet(this, _classes).entries()].find(([, test]) => test === clazz);
            return entry
                ? entry[0]
                : undefined;
        }
        getDefinition(name) {
            return __classPrivateFieldGet(this, _definitions).get(name);
        }
        getOrThrow(name, msg) {
            return util_74.assertReturn(this.get(name), msg || `type ${name} not found`);
        }
        getOrUnknown(name) {
            return this.get(name, true);
        }
        getSignedExtensionExtra() {
            return signedExtensions_1.expandExtensionTypes(__classPrivateFieldGet(this, _signedExtensions), 'payload', __classPrivateFieldGet(this, _userExtensions));
        }
        getSignedExtensionTypes() {
            return signedExtensions_1.expandExtensionTypes(__classPrivateFieldGet(this, _signedExtensions), 'extrinsic', __classPrivateFieldGet(this, _userExtensions));
        }
        hasClass(name) {
            return __classPrivateFieldGet(this, _classes).has(name);
        }
        hasDef(name) {
            return __classPrivateFieldGet(this, _definitions).has(name);
        }
        hasType(name) {
            return !__classPrivateFieldGet(this, _unknownTypes).get(name) && (this.hasClass(name) || this.hasDef(name));
        }
        hash(data) {
            return this.createType('H256', __classPrivateFieldGet(this, _hasher).call(this, data));
        }
        // eslint-disable-next-line no-dupe-class-members
        register(arg1, arg2) {
            // NOTE Constructors appear as functions here
            if (util_74.isFunction(arg1)) {
                __classPrivateFieldGet(this, _classes).set(arg1.name, arg1);
            }
            else if (util_74.isString(arg1)) {
                util_74.assert(util_74.isFunction(arg2), `Expected class definition passed to '${arg1}' registration`);
                __classPrivateFieldGet(this, _classes).set(arg1, arg2);
            }
            else {
                this._registerObject(arg1);
            }
        }
        _registerObject(obj) {
            Object.entries(obj).forEach(([name, type]) => {
                if (util_74.isFunction(type)) {
                    // This _looks_ a bit funny, but `typeof Clazz === 'function'
                    __classPrivateFieldGet(this, _classes).set(name, type);
                }
                else {
                    const def = util_74.isString(type)
                        ? type
                        : JSON.stringify(type);
                    // we already have this type, remove the classes registered for it
                    if (__classPrivateFieldGet(this, _classes).has(name)) {
                        __classPrivateFieldGet(this, _classes).delete(name);
                    }
                    __classPrivateFieldGet(this, _definitions).set(name, def);
                }
            });
        }
        // sets the chain properties
        setChainProperties(properties) {
            if (properties) {
                __classPrivateFieldSet(this, _chainProperties, properties);
            }
        }
        setHasher(hasher = util_crypto_9.blake2AsU8a) {
            __classPrivateFieldSet(this, _hasher, hasher);
        }
        setKnownTypes(knownTypes) {
            __classPrivateFieldSet(this, _knownTypes, knownTypes);
        }
        // sets the metadata
        setMetadata(metadata, signedExtensions, userExtensions) {
            injectExtrinsics(this, metadata, __classPrivateFieldGet(this, _metadataCalls));
            injectErrors(this, metadata, __classPrivateFieldGet(this, _metadataErrors));
            injectEvents(this, metadata, __classPrivateFieldGet(this, _metadataEvents));
            // setup the available extensions
            this.setSignedExtensions(signedExtensions || (metadata.asLatest.extrinsic.version.gt(util_74.BN_ZERO)
                ? metadata.asLatest.extrinsic.signedExtensions.map((key) => key.toString())
                : signedExtensions_1.defaultExtensions), userExtensions);
            // setup the chain properties with format overrides
            this.setChainProperties(extractProperties(this, metadata));
        }
        // sets the available signed extensions
        setSignedExtensions(signedExtensions = signedExtensions_1.defaultExtensions, userExtensions) {
            __classPrivateFieldSet(this, _signedExtensions, signedExtensions);
            __classPrivateFieldSet(this, _userExtensions, userExtensions);
            const unknown = signedExtensions_1.findUnknownExtensions(__classPrivateFieldGet(this, _signedExtensions), __classPrivateFieldGet(this, _userExtensions));
            if (unknown.length) {
                l.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
            }
        }
    }
    exports.TypeRegistry = TypeRegistry;
    _classes = new WeakMap(), _definitions = new WeakMap(), _metadataCalls = new WeakMap(), _metadataErrors = new WeakMap(), _metadataEvents = new WeakMap(), _unknownTypes = new WeakMap(), _chainProperties = new WeakMap(), _hasher = new WeakMap(), _knownDefaults = new WeakMap(), _knownDefinitions = new WeakMap(), _knownTypes = new WeakMap(), _signedExtensions = new WeakMap(), _userExtensions = new WeakMap();
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/index", ["require", "exports", "types/src/create/createClass", "types/src/create/createType", "types/src/create/encodeTypes", "types/src/create/getTypeDef", "types/src/create/registry", "types/src/create/typeSplit"], function (require, exports, createClass_4, createType_2, encodeTypes_1, getTypeDef_5, registry_2, typeSplit_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(createClass_4, exports);
    __exportStar(createType_2, exports);
    __exportStar(encodeTypes_1, exports);
    __exportStar(getTypeDef_5, exports);
    __exportStar(registry_2, exports);
    __exportStar(typeSplit_2, exports);
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/index", ["require", "exports", "types/src/codec/index", "types/src/create/index", "types/src/index.types", "types/src/detectPackage"], function (require, exports, codec_5, create_1, index_types_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(codec_5, exports);
    __exportStar(create_1, exports);
    __exportStar(index_types_1, exports);
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/util/refCountDelay", ["require", "exports", "@polkadot/x-rxjs"], function (require, exports, x_rxjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.refCountDelay = void 0;
    /** @internal */
    function refCountDelay(delay = 1750) {
        return (source) => {
            // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
            let [state, refCount, connection, scheduler] = [0, 0, x_rxjs_1.Subscription.EMPTY, x_rxjs_1.Subscription.EMPTY];
            return new x_rxjs_1.Observable((ob) => {
                source.subscribe(ob);
                if (refCount++ === 0) {
                    if (state === 1) {
                        scheduler.unsubscribe();
                    }
                    else {
                        connection = source.connect();
                    }
                    state = 3;
                }
                return () => {
                    if (--refCount === 0) {
                        if (state === 2) {
                            state = 0;
                            scheduler.unsubscribe();
                        }
                        else {
                            // state === 3
                            state = 1;
                            scheduler = x_rxjs_1.asapScheduler.schedule(() => {
                                state = 0;
                                connection.unsubscribe();
                            }, delay);
                        }
                    }
                };
            });
        };
    }
    exports.refCountDelay = refCountDelay;
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/util/drr", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs/operators", "rpc-core/src/util/refCountDelay"], function (require, exports, util_75, operators_1, refCountDelay_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.drr = void 0;
    const l = util_75.logger('drr');
    const CMP = (a, b) => JSON.stringify({ t: a }) === JSON.stringify({ t: b });
    const ERR = (error) => {
        l.error(error);
        throw error;
    };
    const NOOP = () => undefined;
    /**
     * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
     *
     * @ignore
     * @internal
     */
    exports.drr = ({ delay, skipChange = false, skipTimeout = false } = {}) => (source$) => source$.pipe(operators_1.catchError(ERR), skipChange
        ? operators_1.tap(NOOP)
        : operators_1.distinctUntilChanged(CMP), operators_1.publishReplay(1), skipTimeout
        ? operators_1.refCount()
        : refCountDelay_1.refCountDelay(delay));
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/util/index", ["require", "exports", "rpc-core/src/util/drr", "rpc-core/src/util/refCountDelay"], function (require, exports, drr_1, refCountDelay_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(drr_1, exports);
    __exportStar(refCountDelay_2, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/approvalFlagsToBools", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.approvalFlagsToBools = void 0;
    /** @internal */
    function approvalFlagsToBools(flags) {
        const bools = [];
        flags.forEach((flag) => {
            const str = flag.toString(2);
            // read from lowest bit to highest
            for (const bit of str.split('').reverse()) {
                bools.push(!!parseInt(bit, 10));
            }
        });
        // slice off trailing "false" values, as in substrate
        const lastApproval = bools.lastIndexOf(true);
        return lastApproval >= 0
            ? bools.slice(0, lastApproval + 1)
            : [];
    }
    exports.approvalFlagsToBools = approvalFlagsToBools;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/cacheImpl", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deriveNoopCache = exports.deriveMapCache = void 0;
    const mapCache = new Map();
    const deriveMapCache = {
        del: (key) => {
            mapCache.delete(key);
        },
        forEach: (cb) => {
            const entries = mapCache.entries();
            for (const entry in entries) {
                cb(entry[0], entry[1]);
            }
        },
        get: (key) => {
            return mapCache.get(key);
        },
        set: (key, value) => {
            mapCache.set(key, value);
        }
    };
    exports.deriveMapCache = deriveMapCache;
    const deriveNoopCache = {
        del: () => undefined,
        forEach: () => undefined,
        get: () => undefined,
        set: (_, value) => value
    };
    exports.deriveNoopCache = deriveNoopCache;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/cache", ["require", "exports", "api-derive/src/util/cacheImpl"], function (require, exports, cacheImpl_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deriveCache = exports.setDeriveCache = void 0;
    const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
    let deriveCache;
    exports.deriveCache = deriveCache;
    function wrapCache(keyStart, cache) {
        return {
            del: (partial) => cache.del(`${keyStart}${partial}`),
            forEach: cache.forEach,
            get: (partial) => {
                const key = `${keyStart}${partial}`;
                const cached = cache.get(key);
                if (cached) {
                    cached.x = Date.now();
                    cache.set(key, cached);
                    return cached.v;
                }
                return undefined;
            },
            set: (partial, v) => {
                cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
            }
        };
    }
    function clearCache(cache) {
        // clear all expired values
        const now = Date.now();
        const all = [];
        cache.forEach((key, { x }) => {
            ((now - x) > CHACHE_EXPIRY) && all.push(key);
        });
        // don't do delete inside loop, just in-case
        all.forEach((key) => cache.del(key));
    }
    function setDeriveCache(prefix = '', cache) {
        exports.deriveCache = deriveCache = cache
            ? wrapCache(`derive:${prefix}:`, cache)
            : cacheImpl_1.deriveNoopCache;
        if (cache) {
            clearCache(cache);
        }
    }
    exports.setDeriveCache = setDeriveCache;
    setDeriveCache();
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/memo", ["require", "exports", "rpc-core/src/util/index", "@polkadot/util", "@polkadot/x-rxjs"], function (require, exports, util_76, util_77, x_rxjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memo = void 0;
    // Wraps a derive, doing 2 things to optimize calls -
    //   1. creates a memo of the inner fn -> Observable, removing when unsubscribed
    //   2. wraps the observable in a drr() (which includes an unsub delay)
    /** @internal */
    function memo(instanceId, inner) {
        const cached = util_77.memoize((...params) => new x_rxjs_2.Observable((observer) => {
            const subscription = inner(...params).subscribe(observer);
            return () => {
                cached.unmemoize(...params);
                subscription.unsubscribe();
            };
        }).pipe(util_76.drr()), { getInstanceId: () => instanceId });
        return cached;
    }
    exports.memo = memo;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/index", ["require", "exports", "rpc-core/src/util/index", "api-derive/src/util/approvalFlagsToBools", "api-derive/src/util/cache", "api-derive/src/util/cacheImpl", "api-derive/src/util/memo"], function (require, exports, util_78, approvalFlagsToBools_1, cache_1, cacheImpl_2, memo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.drr = void 0;
    Object.defineProperty(exports, "drr", { enumerable: true, get: function () { return util_78.drr; } });
    __exportStar(approvalFlagsToBools_1, exports);
    __exportStar(cache_1, exports);
    __exportStar(cacheImpl_2, exports);
    __exportStar(memo_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/accountId", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_79, util_crypto_10, x_rxjs_3, operators_2, util_80) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountId = void 0;
    function retrieve(api, address) {
        const decoded = util_79.isU8a(address)
            ? address
            : util_crypto_10.decodeAddress((address || '').toString());
        if (decoded.length > 8) {
            return x_rxjs_3.of(api.registry.createType('AccountId', decoded));
        }
        const accountIndex = api.registry.createType('AccountIndex', decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(operators_2.map((accountId) => util_79.assertReturn(accountId, 'Unable to retrieve accountId')));
    }
    /**
     * @name accountId
     * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
     * @description  An [[AccountId]]
     */
    function accountId(instanceId, api) {
        return util_80.memo(instanceId, (address) => retrieve(api, address));
    }
    exports.accountId = accountId;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/council/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/elections/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/parachains/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/types", ["require", "exports", "api-derive/src/accounts/types", "api-derive/src/council/types", "api-derive/src/democracy/types", "api-derive/src/elections/types", "api-derive/src/parachains/types", "api-derive/src/session/types", "api-derive/src/staking/types"], function (require, exports, types_102, types_103, types_104, types_105, types_106, types_107, types_108) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_102, exports);
    __exportStar(types_103, exports);
    __exportStar(types_104, exports);
    __exportStar(types_105, exports);
    __exportStar(types_106, exports);
    __exportStar(types_107, exports);
    __exportStar(types_108, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/flags", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_4, operators_3, util_81) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flags = void 0;
    function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
        const isIncluded = (id) => address
            ? id.toString() === address.toString()
            : false;
        return {
            isCouncil: (electionsMembers?.map(([id]) => id) || councilMembers || []).some(isIncluded),
            isSociety: (societyMembers || []).some(isIncluded),
            isSudo: sudoKey?.toString() === address?.toString(),
            isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
        };
    }
    /**
     * @name info
     * @description Returns account membership flags
     */
    function flags(instanceId, api) {
        return util_81.memo(instanceId, (address) => {
            const councilSection = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';
            return x_rxjs_4.combineLatest([
                address && api.query[councilSection]?.members
                    ? api.query[councilSection].members()
                    : x_rxjs_4.of(undefined),
                address && api.query.council?.members
                    ? api.query.council.members()
                    : x_rxjs_4.of([]),
                address && api.query.technicalCommittee?.members
                    ? api.query.technicalCommittee.members()
                    : x_rxjs_4.of([]),
                address && api.query.society?.members
                    ? api.query.society.members()
                    : x_rxjs_4.of([]),
                address && api.query.sudo?.key
                    ? api.query.sudo.key()
                    : x_rxjs_4.of(undefined)
            ]).pipe(operators_3.map((result) => parseFlags(address, result)));
        });
    }
    exports.flags = flags;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/idAndIndex", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_82, util_crypto_11, x_rxjs_5, operators_4, util_83) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.idAndIndex = void 0;
    function retrieve(api, address) {
        try {
            // yes, this can fail, don't care too much, catch will catch it
            const decoded = util_82.isU8a(address)
                ? address
                : util_crypto_11.decodeAddress((address || '').toString());
            if (decoded.length > 8) {
                const accountId = api.registry.createType('AccountId', decoded);
                return api.derive.accounts.idToIndex(accountId).pipe(operators_4.map((accountIndex) => [accountId, accountIndex]));
            }
            const accountIndex = api.registry.createType('AccountIndex', decoded);
            return api.derive.accounts.indexToId(accountIndex.toString()).pipe(operators_4.map((accountId) => [accountId, accountIndex]));
        }
        catch (error) {
            return x_rxjs_5.of([undefined, undefined]);
        }
    }
    /**
     * @name idAndIndex
     * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
     * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
     *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
     * });
     * ```
     */
    function idAndIndex(instanceId, api) {
        return util_83.memo(instanceId, (address) => retrieve(api, address));
    }
    exports.idAndIndex = idAndIndex;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/idToIndex", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_5, util_84) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.idToIndex = void 0;
    /**
     * @name idToIndex
     * @param {( AccountId | string )} accountId - An accounts Id in different formats.
     * @returns Returns the corresponding AccountIndex.
     * @example
     * <BR>
     *
     * ```javascript
     * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
     * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
     *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
     * });
     * ```
     */
    function idToIndex(instanceId, api) {
        return util_84.memo(instanceId, (accountId) => api.derive.accounts.indexes().pipe(operators_5.map((indexes) => (indexes || {})[accountId.toString()])));
    }
    exports.idToIndex = idToIndex;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/identity", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_85, x_rxjs_6, operators_6, util_86) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasIdentityMulti = exports.hasIdentity = exports.identity = void 0;
    const UNDEF_HEX = { toHex: () => undefined };
    function dataAsString(data) {
        return data.isRaw
            ? util_85.u8aToString(data.asRaw.toU8a(true))
            : data.isNone
                ? undefined
                : data.toHex();
    }
    function extractOther(additional) {
        return additional.reduce((other, [_key, _value]) => {
            const key = dataAsString(_key);
            const value = dataAsString(_value);
            if (key && value) {
                other[key] = value;
            }
            return other;
        }, {});
    }
    function extractIdentity(identityOfOpt, superOf) {
        if (!identityOfOpt?.isSome) {
            return { judgements: [] };
        }
        const { info, judgements } = identityOfOpt.unwrap();
        const topDisplay = dataAsString(info.display);
        return {
            display: (superOf && dataAsString(superOf[1])) || topDisplay,
            displayParent: superOf && topDisplay,
            email: dataAsString(info.email),
            image: dataAsString(info.image),
            judgements,
            legal: dataAsString(info.legal),
            other: extractOther(info.additional),
            parent: superOf && superOf[0],
            pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
            riot: dataAsString(info.riot),
            twitter: dataAsString(info.twitter),
            web: dataAsString(info.web)
        };
    }
    function getParent(api, identityOfOpt, superOfOpt) {
        if (identityOfOpt?.isSome) {
            // this identity has something set
            return x_rxjs_6.of([identityOfOpt, undefined]);
        }
        else if (superOfOpt?.isSome) {
            const superOf = superOfOpt.unwrap();
            // we have a super
            return x_rxjs_6.combineLatest([
                api.query.identity.identityOf(superOf[0]),
                x_rxjs_6.of(superOf)
            ]);
        }
        // nothing of value returned
        return x_rxjs_6.of([undefined, undefined]);
    }
    function getBase(api, accountId) {
        return accountId && api.query.identity?.identityOf
            ? api.queryMulti([
                [api.query.identity.identityOf, accountId],
                [api.query.identity.superOf, accountId]
            ])
            : x_rxjs_6.of([undefined, undefined]);
    }
    /**
     * @name identity
     * @description Returns identity info for an account
     */
    function identity(instanceId, api) {
        return util_86.memo(instanceId, (accountId) => getBase(api, accountId).pipe(operators_6.switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), operators_6.map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
    }
    exports.identity = identity;
    function hasIdentity(instanceId, api) {
        return util_86.memo(instanceId, (accountId) => api.derive.accounts.hasIdentityMulti([accountId]).pipe(operators_6.map(([first]) => first)));
    }
    exports.hasIdentity = hasIdentity;
    function hasIdentityMulti(instanceId, api) {
        return util_86.memo(instanceId, (accountIds) => api.query.identity?.identityOf
            ? x_rxjs_6.combineLatest([
                api.query.identity.identityOf.multi(accountIds),
                api.query.identity.superOf.multi(accountIds)
            ]).pipe(operators_6.map(([identities, supers]) => identities.map((identityOfOpt, index) => {
                const superOfOpt = supers[index];
                const parentId = superOfOpt && superOfOpt.isSome
                    ? superOfOpt.unwrap()[0].toString()
                    : undefined;
                let display;
                if (identityOfOpt && identityOfOpt.isSome) {
                    const value = dataAsString(identityOfOpt.unwrap().info.display);
                    if (value && !util_85.isHex(value)) {
                        display = value;
                    }
                }
                return { display, hasIdentity: !!(display || parentId), parentId };
            })))
            : x_rxjs_6.of(accountIds.map(() => ({ hasIdentity: false }))));
    }
    exports.hasIdentityMulti = hasIdentityMulti;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/indexToId", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_7, operators_7, util_87) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.indexToId = void 0;
    /**
     * @name indexToId
     * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
     * @returns Returns the corresponding AccountId.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.accounts.indexToId('F7Hs', (accountId) => {
     *   console.log(`The AccountId of F7Hs is ${accountId}`);
     * });
     * ```
     */
    function indexToId(instanceId, api) {
        return util_87.memo(instanceId, (accountIndex) => api.query.indices
            ? api.query.indices.accounts(accountIndex).pipe(operators_7.map((optResult) => optResult.unwrapOr([])[0]))
            : x_rxjs_7.of(undefined));
    }
    exports.indexToId = indexToId;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/indexes", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_8, operators_8, util_88) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.indexes = void 0;
    let indicesCache = null;
    function queryAccounts(api) {
        return api.query.indices.accounts.entries().pipe(operators_8.map((entries) => entries.reduce((indexes, [key, idOpt]) => {
            if (idOpt.isSome) {
                indexes[idOpt.unwrap()[0].toString()] = key.args[0];
            }
            return indexes;
        }, {})));
    }
    /**
     * @name indexes
     * @returns Returns all the indexes on the system.
     * @description This is an unwieldly query since it loops through
     * all of the enumsets and returns all of the values found. This could be up to 32k depending
     * on the number of active accounts in the system
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.accounts.indexes((indexes) => {
     *   console.log('All existing AccountIndexes', indexes);
     * });
     * ```
     */
    function indexes(instanceId, api) {
        return util_88.memo(instanceId, () => indicesCache
            ? x_rxjs_8.of(indicesCache)
            : (api.query.indices
                ? queryAccounts(api).pipe(operators_8.startWith({}))
                : x_rxjs_8.of({})).pipe(operators_8.map((indices) => {
                indicesCache = indices;
                return indices;
            })));
    }
    exports.indexes = indexes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/info", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_89, x_rxjs_9, operators_9, util_90) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.info = void 0;
    function retrieveNick(api, accountId) {
        return (accountId && api.query.nicks?.nameOf
            ? api.query.nicks.nameOf(accountId)
            : x_rxjs_9.of(undefined)).pipe(operators_9.map((nameOf) => nameOf?.isSome
            ? util_89.u8aToString(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber())
            : undefined));
    }
    /**
     * @name info
     * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
     */
    function info(instanceId, api) {
        return util_90.memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(operators_9.switchMap(([accountId, accountIndex]) => x_rxjs_9.combineLatest([
            x_rxjs_9.of({ accountId, accountIndex }),
            api.derive.accounts.identity(accountId),
            retrieveNick(api, accountId)
        ])), operators_9.map(([{ accountId, accountIndex }, identity, nickname]) => ({
            accountId, accountIndex, identity, nickname
        }))));
    }
    exports.info = info;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/accounts/index", ["require", "exports", "api-derive/src/accounts/accountId", "api-derive/src/accounts/flags", "api-derive/src/accounts/idAndIndex", "api-derive/src/accounts/idToIndex", "api-derive/src/accounts/identity", "api-derive/src/accounts/indexToId", "api-derive/src/accounts/indexes", "api-derive/src/accounts/info"], function (require, exports, accountId_1, flags_1, idAndIndex_1, idToIndex_1, identity_1, indexToId_1, indexes_1, info_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(accountId_1, exports);
    __exportStar(flags_1, exports);
    __exportStar(idAndIndex_1, exports);
    __exportStar(idToIndex_1, exports);
    __exportStar(identity_1, exports);
    __exportStar(indexToId_1, exports);
    __exportStar(indexes_1, exports);
    __exportStar(info_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/balances/all", ["require", "exports", "bn.js", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, bn_js_6, util_91, x_rxjs_10, operators_10, util_92) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.all = void 0;
    bn_js_6 = __importDefault(bn_js_6);
    const VESTING_ID = '0x76657374696e6720';
    function calcLocked(api, bestNumber, locks) {
        let lockedBalance = api.registry.createType('Balance');
        let lockedBreakdown = [];
        let vestingLocked = api.registry.createType('Balance');
        let allLocked = false;
        if (Array.isArray(locks)) {
            // only get the locks that are valid until passed the current block
            lockedBreakdown = locks.filter(({ until }) => !until || (bestNumber && until.gt(bestNumber)));
            allLocked = lockedBreakdown.some(({ amount }) => amount.isMax());
            vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new bn_js_6.default(0)));
            // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699
            const notAll = lockedBreakdown.filter(({ amount }) => !amount.isMax());
            if (notAll.length) {
                lockedBalance = api.registry.createType('Balance', util_91.bnMax(...notAll.map(({ amount }) => amount)));
            }
        }
        return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
    }
    function calcBalances(api, [{ accountId, accountNonce, freeBalance, frozenFee, frozenMisc, reservedBalance, votingBalance }, bestNumber, [vesting, locks]]) {
        const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber, locks);
        // Calculate the vesting balances,
        //  - offset = balance locked at startingBlock
        //  - perBlock is the unlock amount
        const { locked: vestingTotal, perBlock, startingBlock } = vesting || api.registry.createType('VestingInfo');
        const isStarted = bestNumber.gt(startingBlock);
        const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new bn_js_6.default(0);
        const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);
        const isVesting = isStarted && !vestingLocked.isZero();
        const vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);
        const availableBalance = api.registry.createType('Balance', allLocked ? 0 : util_91.bnMax(new bn_js_6.default(0), freeBalance.sub(lockedBalance)));
        const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);
        return {
            accountId,
            accountNonce,
            availableBalance,
            freeBalance,
            frozenFee,
            frozenMisc,
            isVesting,
            lockedBalance,
            lockedBreakdown,
            reservedBalance,
            vestedBalance,
            vestedClaimable,
            vestingEndBlock,
            vestingLocked,
            vestingPerBlock: perBlock,
            vestingTotal,
            votingBalance
        };
    }
    // old
    function queryOld(api, accountId) {
        return api.queryMulti([
            [api.query.balances.locks, accountId],
            [api.query.balances.vesting, accountId]
        ]).pipe(operators_10.map(([locks, optVesting]) => {
            let vestingNew = null;
            if (optVesting.isSome) {
                const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
                vestingNew = api.registry.createType('VestingInfo', { locked, perBlock, startingBlock });
            }
            return [vestingNew, locks];
        }));
    }
    // current (balances  vesting)
    function queryCurrent(api, accountId) {
        return (api.query.vesting?.vesting
            ? api.queryMulti([
                [api.query.balances.locks, accountId],
                [api.query.vesting.vesting, accountId]
            ])
            : api.query.balances.locks(accountId).pipe(operators_10.map((locks) => [locks, api.registry.createType('Option<VestingInfo>')]))).pipe(operators_10.map(([locks, optVesting]) => [optVesting.unwrapOr(null), locks]));
    }
    /**
     * @name all
     * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
     * @returns An object containing the results of various balance queries
     * @example
     * <BR>
     *
     * ```javascript
     * const ALICE = 'F7Hs';
     *
     * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
     *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
     * });
     * ```
     */
    function all(instanceId, api) {
        return util_92.memo(instanceId, (address) => api.derive.balances.account(address).pipe(operators_10.switchMap((account) => (!account.accountId.isEmpty
            ? x_rxjs_10.combineLatest([
                x_rxjs_10.of(account),
                api.derive.chain.bestNumber(),
                util_91.isFunction(api.query.system.account) || util_91.isFunction(api.query.balances.account)
                    ? queryCurrent(api, account.accountId)
                    : queryOld(api, account.accountId)
            ])
            : x_rxjs_10.of([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]]))), operators_10.map((result) => calcBalances(api, result))));
    }
    exports.all = all;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/balances/account", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_93, x_rxjs_11, operators_11, util_94) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.account = void 0;
    function calcBalances(api, [accountId, [freeBalance, reservedBalance, frozenFee, frozenMisc, accountNonce]]) {
        return {
            accountId,
            accountNonce,
            freeBalance,
            frozenFee,
            frozenMisc,
            reservedBalance,
            votingBalance: api.registry.createType('Balance', freeBalance.toBn())
        };
    }
    // old
    function queryBalancesFree(api, accountId) {
        return api.queryMulti([
            [api.query.balances.freeBalance, accountId],
            [api.query.balances.reservedBalance, accountId],
            [api.query.system.accountNonce, accountId]
        ]).pipe(operators_11.map(([freeBalance, reservedBalance, accountNonce]) => [freeBalance, reservedBalance, api.registry.createType('Balance'), api.registry.createType('Balance'), accountNonce]));
    }
    function queryBalancesAccount(api, accountId) {
        return api.queryMulti([
            [api.query.balances.account, accountId],
            [api.query.system.accountNonce, accountId]
        ]).pipe(operators_11.map(([{ feeFrozen, free, miscFrozen, reserved }, accountNonce]) => [free, reserved, feeFrozen, miscFrozen, accountNonce]));
    }
    function queryCurrent(api, accountId) {
        // AccountInfo is current, support old, eg. Edgeware
        return api.query.system.account(accountId).pipe(operators_11.map((infoOrTuple) => {
            const { feeFrozen, free, miscFrozen, reserved } = infoOrTuple.nonce
                ? infoOrTuple.data
                : infoOrTuple[1];
            const accountNonce = infoOrTuple.nonce || infoOrTuple[0];
            return [free, reserved, feeFrozen, miscFrozen, accountNonce];
        }));
    }
    /**
     * @name account
     * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
     * @returns An object containing the results of various balance queries
     * @example
     * <BR>
     *
     * ```javascript
     * const ALICE = 'F7Hs';
     *
     * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
     *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
     * });
     * ```
     */
    function account(instanceId, api) {
        return util_94.memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(operators_11.switchMap((accountId) => (accountId
            ? x_rxjs_11.combineLatest([
                x_rxjs_11.of(accountId),
                util_93.isFunction(api.query.system.account)
                    ? queryCurrent(api, accountId)
                    : util_93.isFunction(api.query.balances.account)
                        ? queryBalancesAccount(api, accountId)
                        : queryBalancesFree(api, accountId)
            ])
            : x_rxjs_11.of([api.registry.createType('AccountId'), [api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Index')]]))), operators_11.map((result) => calcBalances(api, result))));
    }
    exports.account = account;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/balances/fees", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_12, operators_12, util_95) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fees = void 0;
    /**
     * @name fees
     * @returns An object containing the combined results of the storage queries for
     * all relevant fees as declared in the substrate chain spec.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.balances.fees(({ creationFee, transferFee }) => {
     *   console.log(`The fee for creating a new account on this chain is ${creationFee} units. The fee required for making a transfer is ${transferFee} units.`);
     * });
     * ```
     */
    function fees(instanceId, api) {
        return util_95.memo(instanceId, () => x_rxjs_12.of([
            // deprecated - remove
            api.consts.balances?.creationFee || api.registry.createType('Balance'),
            api.consts.balances?.transferFee || api.registry.createType('Balance'),
            // current
            api.consts.balances?.existentialDeposit || api.registry.createType('Balance'),
            api.consts.transactionPayment?.transactionBaseFee || api.registry.createType('Balance'),
            api.consts.transactionPayment?.transactionByteFee || api.registry.createType('Balance')
        ]).pipe(operators_12.map(([creationFee, transferFee, existentialDeposit, transactionBaseFee, transactionByteFee]) => ({
            creationFee,
            existentialDeposit,
            transactionBaseFee,
            transactionByteFee,
            transferFee
        }))));
    }
    exports.fees = fees;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/balances/votingBalances", ["require", "exports", "@polkadot/x-rxjs", "api-derive/src/util/index"], function (require, exports, x_rxjs_13, util_96) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.votingBalances = void 0;
    function votingBalances(instanceId, api) {
        return util_96.memo(instanceId, (addresses) => !addresses || !addresses.length
            ? x_rxjs_13.of([])
            : x_rxjs_13.combineLatest(addresses.map((accountId) => api.derive.balances.account(accountId))));
    }
    exports.votingBalances = votingBalances;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/balances/index", ["require", "exports", "api-derive/src/balances/all", "api-derive/src/balances/account", "api-derive/src/balances/fees", "api-derive/src/balances/votingBalances"], function (require, exports, all_1, account_1, fees_1, votingBalances_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.votingBalance = exports.all = void 0;
    Object.defineProperty(exports, "all", { enumerable: true, get: function () { return all_1.all; } });
    __exportStar(account_1, exports);
    __exportStar(fees_1, exports);
    __exportStar(votingBalances_1, exports);
    const votingBalance = all_1.all;
    exports.votingBalance = votingBalance;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/bounties/helpers/filterBountyProposals", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filterBountiesProposals = void 0;
    function filterBountiesProposals(api, allProposals) {
        const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
        const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
        return allProposals.filter((proposal) => bountyProposalCalls.find((bountyCall) => bountyCall.is(proposal.proposal)));
    }
    exports.filterBountiesProposals = filterBountiesProposals;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/bounties/bounties", ["require", "exports", "api-derive/src/util/index", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/bounties/helpers/filterBountyProposals"], function (require, exports, util_97, x_rxjs_14, operators_13, filterBountyProposals_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bounties = void 0;
    function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
        const bounties = [];
        maybeBounties.forEach((bounty, index) => {
            if (bounty.isSome) {
                bounties.push({
                    bounty: bounty.unwrap(),
                    description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
                    index: ids[index],
                    proposals: bountyProposals.filter((bountyProposal) => ids[index].eq(bountyProposal.proposal.args[0]))
                });
            }
        });
        return bounties;
    }
    function bounties(instanceId, api) {
        const bountyBase = api.query.bounties ? api.query.bounties : api.query.treasury;
        return util_97.memo(instanceId, () => x_rxjs_14.combineLatest([
            bountyBase.bountyCount(),
            api.query.council.proposalCount()
        ]).pipe(operators_13.switchMap(() => x_rxjs_14.combineLatest([
            bountyBase.bounties.keys(),
            api.derive.council.proposals()
        ])), operators_13.switchMap(([keys, proposals]) => {
            const ids = keys.map(({ args: [id] }) => id);
            return x_rxjs_14.combineLatest([
                bountyBase.bounties.multi(ids),
                bountyBase.bountyDescriptions.multi(ids),
                x_rxjs_14.of(ids),
                x_rxjs_14.of(filterBountyProposals_1.filterBountiesProposals(api, proposals))
            ]);
        }), operators_13.map(parseResult)));
    }
    exports.bounties = bounties;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/bounties/index", ["require", "exports", "api-derive/src/bounties/bounties"], function (require, exports, bounties_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(bounties_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/bestNumber", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_14, util_98) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bestNumber = void 0;
    /**
     * @name bestNumber
     * @returns The latest block number.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((blockNumber) => {
     *   console.log(`the current best block is #${blockNumber}`);
     * });
     * ```
     */
    function bestNumber(instanceId, api) {
        return util_98.memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(operators_14.map((header) => header.number.unwrap())));
    }
    exports.bestNumber = bestNumber;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/bestNumberFinalized", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_15, util_99) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bestNumberFinalized = void 0;
    /**
     * @name bestNumberFinalized
     * @returns A BlockNumber
     * @description Get the latest finalized block number.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumberFinalized((blockNumber) => {
     *   console.log(`the current finalized block is #${blockNumber}`);
     * });
     * ```
     */
    function bestNumberFinalized(instanceId, api) {
        return util_99.memo(instanceId, () => api.rpc.chain.subscribeFinalizedHeads().pipe(operators_15.map((header) => header.number.unwrap())));
    }
    exports.bestNumberFinalized = bestNumberFinalized;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/bestNumberLag", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_15, operators_16, util_100) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bestNumberLag = void 0;
    /**
     * @name bestNumberLag
     * @returns A number of blocks
     * @description Calculates the lag between finalized head and best head
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumberLag((lag) => {
     *   console.log(`finalized is ${lag} blocks behind head`);
     * });
     * ```
     */
    function bestNumberLag(instanceId, api) {
        return util_100.memo(instanceId, () => x_rxjs_15.combineLatest([
            api.derive.chain.bestNumber(),
            api.derive.chain.bestNumberFinalized()
        ]).pipe(operators_16.map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
    }
    exports.bestNumberLag = bestNumberLag;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/type/util", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractAuthor = void 0;
    function extractAuthor(digest, sessionValidators = []) {
        const [pitem] = digest.logs.filter(({ type }) => type === 'PreRuntime');
        // extract from the substrate 2.0 PreRuntime digest
        if (pitem) {
            const [engine, data] = pitem.asPreRuntime;
            return engine.extractAuthor(data, sessionValidators);
        }
        else {
            const [citem] = digest.logs.filter(({ type }) => type === 'Consensus');
            // extract author from the consensus (substrate 1.0, digest)
            if (citem) {
                const [engine, data] = citem.asConsensus;
                return engine.extractAuthor(data, sessionValidators);
            }
        }
        return undefined;
    }
    exports.extractAuthor = extractAuthor;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/type/HeaderExtended", ["require", "exports", "types/src/index", "types/src/interfaces/runtime/definitions", "api-derive/src/type/util"], function (require, exports, types_109, definitions_50, util_101) {
    "use strict";
    var _author, _validators;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeaderExtended = void 0;
    definitions_50 = __importDefault(definitions_50);
    // We can ignore the properties, added via Struct.with
    const _Header = types_109.Struct.with(definitions_50.default.types.Header);
    /**
     * @name HeaderExtended
     * @description
     * A [[Block]] header with an additional `author` field that indicates the block author
     */
    class HeaderExtended extends _Header {
        constructor(registry, header, validators) {
            super(registry, header);
            _author.set(this, void 0);
            _validators.set(this, void 0);
            __classPrivateFieldSet(this, _author, util_101.extractAuthor(this.digest, validators));
            __classPrivateFieldSet(this, _validators, validators);
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return __classPrivateFieldGet(this, _author);
        }
        /**
         * @description Convenience method, returns the validators for the block
         */
        get validators() {
            return __classPrivateFieldGet(this, _validators);
        }
    }
    exports.HeaderExtended = HeaderExtended;
    _author = new WeakMap(), _validators = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/type/SignedBlockExtended", ["require", "exports", "types/src/index", "types/src/interfaces/runtime/definitions", "api-derive/src/type/util"], function (require, exports, types_110, definitions_51, util_102) {
    "use strict";
    var _author, _events, _extrinsics;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignedBlockExtended = void 0;
    definitions_51 = __importDefault(definitions_51);
    // We can ignore the properties, added via Struct.with
    const _SignedBlock = types_110.Struct.with(definitions_51.default.types.SignedBlock);
    function mapExtrinsics(extrinsics, records) {
        return extrinsics.map((extrinsic, index) => {
            let dispatchError;
            let dispatchInfo;
            const events = records
                .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))
                .map(({ event }) => {
                if (event.section === 'system') {
                    if (event.method === 'ExtrinsicSuccess') {
                        dispatchInfo = event.data[0];
                    }
                    else if (event.method === 'ExtrinsicFailed') {
                        dispatchError = event.data[0];
                        dispatchInfo = event.data[1];
                    }
                }
                return event;
            });
            return { dispatchError, dispatchInfo, events, extrinsic };
        });
    }
    /**
     * @name SignedBlockExtended
     * @description
     * A [[Block]] header with an additional `author` field that indicates the block author
     */
    class SignedBlockExtended extends _SignedBlock {
        constructor(registry, block, events, sessionValidators) {
            super(registry, block);
            _author.set(this, void 0);
            _events.set(this, void 0);
            _extrinsics.set(this, void 0);
            __classPrivateFieldSet(this, _author, util_102.extractAuthor(this.block.header.digest, sessionValidators));
            __classPrivateFieldSet(this, _events, events || []);
            __classPrivateFieldSet(this, _extrinsics, mapExtrinsics(this.block.extrinsics, __classPrivateFieldGet(this, _events)));
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return __classPrivateFieldGet(this, _author);
        }
        /**
         * @description Convenience method, returns the events associated with the block
         */
        get events() {
            return __classPrivateFieldGet(this, _events);
        }
        /**
         * @description Returns the extrinsics and their events, mapped
         */
        get extrinsics() {
            return __classPrivateFieldGet(this, _extrinsics);
        }
    }
    exports.SignedBlockExtended = SignedBlockExtended;
    _author = new WeakMap(), _events = new WeakMap(), _extrinsics = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/type/index", ["require", "exports", "api-derive/src/type/HeaderExtended", "api-derive/src/type/SignedBlockExtended"], function (require, exports, HeaderExtended_1, SignedBlockExtended_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignedBlockExtended = exports.HeaderExtended = void 0;
    Object.defineProperty(exports, "HeaderExtended", { enumerable: true, get: function () { return HeaderExtended_1.HeaderExtended; } });
    Object.defineProperty(exports, "SignedBlockExtended", { enumerable: true, get: function () { return SignedBlockExtended_1.SignedBlockExtended; } });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/getHeader", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/type/index", "api-derive/src/util/index"], function (require, exports, x_rxjs_16, operators_17, type_1, util_103) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHeader = void 0;
    /**
     * @name getHeader
     * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
     * @returns An array containing the block header and the block author
     * @description Get a specific block header and extend it with the author
     * @example
     * <BR>
     *
     * ```javascript
     * const { author, number } = await api.derive.chain.getHeader('0x123...456');
     *
     * console.log(`block #${number} was authored by ${author}`);
     * ```
     */
    function getHeader(instanceId, api) {
        return util_103.memo(instanceId, (hash) => x_rxjs_16.combineLatest([
            api.rpc.chain.getHeader(hash),
            api.query.session
                ? api.query.session.validators.at(hash)
                : x_rxjs_16.of([])
        ]).pipe(operators_17.map(([header, validators]) => new type_1.HeaderExtended(api.registry, header, validators)), operators_17.catchError(() => 
        // where rpc.chain.getHeader throws, we will land here - it can happen that
        // we supplied an invalid hash. (Due to defaults, storeage will have an
        // empty value, so only the RPC is affected). So return undefined
        x_rxjs_16.of())));
    }
    exports.getHeader = getHeader;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/getBlock", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/type/index", "api-derive/src/util/index"], function (require, exports, x_rxjs_17, operators_18, type_2, util_104) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBlock = void 0;
    /**
     * @name getBlock
     * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
     * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
     * @example
     * <BR>
     *
     * ```javascript
     * const { author, block } = await api.derive.chain.getBlock('0x123...456');
     *
     * console.log(`block #${block.header.number} was authored by ${author}`);
     * ```
     */
    function getBlock(instanceId, api) {
        return util_104.memo(instanceId, (hash) => x_rxjs_17.combineLatest([
            api.rpc.chain.getBlock(hash),
            api.query.system.events.at(hash),
            api.query.session
                ? api.query.session.validators.at(hash)
                : x_rxjs_17.of([])
        ]).pipe(operators_18.map(([signedBlock, events, validators]) => new type_2.SignedBlockExtended(api.registry, signedBlock, events, validators)), operators_18.catchError(() => 
        // where rpc.chain.getHeader throws, we will land here - it can happen that
        // we supplied an invalid hash. (Due to defaults, storage will have an
        // empty value, so only the RPC is affected). So return undefined
        x_rxjs_17.of())));
    }
    exports.getBlock = getBlock;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/subscribeNewBlocks", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/type/index", "api-derive/src/util/index"], function (require, exports, x_rxjs_18, operators_19, type_3, util_105) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.subscribeNewBlocks = void 0;
    /**
     * @name subscribeNewBlocks
     * @returns The latest block & events for that block
     */
    function subscribeNewBlocks(instanceId, api) {
        return util_105.memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(operators_19.switchMap((header) => {
            const blockHash = header.hash;
            return x_rxjs_18.combineLatest(api.rpc.chain.getBlock(blockHash), api.query.system.events.at(blockHash), x_rxjs_18.of(header.validators));
        }), operators_19.map(([block, events, validators]) => new type_3.SignedBlockExtended(api.registry, block, events, validators))));
    }
    exports.subscribeNewBlocks = subscribeNewBlocks;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/subscribeNewHeads", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/type/index", "api-derive/src/util/index"], function (require, exports, x_rxjs_19, operators_20, type_4, util_106) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.subscribeNewHeads = void 0;
    /**
     * @name subscribeNewHeads
     * @returns A header with the current header (including extracted author)
     * @description An observable of the current block header and it's author
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.subscribeNewHeads((header) => {
     *   console.log(`block #${header.number} was authored by ${header.author}`);
     * });
     * ```
     */
    function subscribeNewHeads(instanceId, api) {
        return util_106.memo(instanceId, () => x_rxjs_19.combineLatest([
            api.rpc.chain.subscribeNewHeads(),
            api.query.session
                ? api.query.session.validators()
                : x_rxjs_19.of([])
        ]).pipe(operators_20.map(([header, validators]) => new type_4.HeaderExtended(api.registry, header, validators))));
    }
    exports.subscribeNewHeads = subscribeNewHeads;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/chain/index", ["require", "exports", "api-derive/src/chain/bestNumber", "api-derive/src/chain/bestNumberFinalized", "api-derive/src/chain/bestNumberLag", "api-derive/src/chain/getHeader", "api-derive/src/chain/getBlock", "api-derive/src/chain/subscribeNewBlocks", "api-derive/src/chain/subscribeNewHeads"], function (require, exports, bestNumber_1, bestNumberFinalized_1, bestNumberLag_1, getHeader_1, getBlock_1, subscribeNewBlocks_1, subscribeNewHeads_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(bestNumber_1, exports);
    __exportStar(bestNumberFinalized_1, exports);
    __exportStar(bestNumberLag_1, exports);
    __exportStar(getHeader_1, exports);
    __exportStar(getBlock_1, exports);
    __exportStar(subscribeNewBlocks_1, exports);
    __exportStar(subscribeNewHeads_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/contracts/fees", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_20, operators_21, util_107) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fees = void 0;
    // query via constants (current applicable path)
    function queryConstants(api) {
        return x_rxjs_20.of([
            // deprecated
            api.consts.contracts.callBaseFee || api.registry.createType('Balance'),
            api.consts.contracts.contractFee || api.registry.createType('Balance'),
            api.consts.contracts.creationFee || api.registry.createType('Balance'),
            api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'),
            api.consts.contracts.transactionByteFee || api.registry.createType('Balance'),
            api.consts.contracts.transferFee || api.registry.createType('Balance'),
            // current
            api.consts.contracts.rentByteFee,
            api.consts.contracts.rentDepositOffset,
            api.consts.contracts.surchargeReward,
            api.consts.contracts.tombstoneDeposit
        ]);
    }
    /**
     * @name fees
     * @returns An object containing the combined results of the queries for
     * all relevant contract fees as declared in the substrate chain spec.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.contracts.fees(([creationFee, transferFee]) => {
     *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
     * });
     * ```
     */
    function fees(instanceId, api) {
        return util_107.memo(instanceId, () => {
            return queryConstants(api).pipe(operators_21.map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
                callBaseFee,
                contractFee,
                creationFee,
                rentByteFee,
                rentDepositOffset,
                surchargeReward,
                tombstoneDeposit,
                transactionBaseFee,
                transactionByteFee,
                transferFee
            })));
        });
    }
    exports.fees = fees;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/contracts/index", ["require", "exports", "api-derive/src/contracts/fees"], function (require, exports, fees_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(fees_2, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/collective/proposals", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_108, x_rxjs_21, operators_22, util_109) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proposal = exports.proposals = void 0;
    function parse(api, [hashes, proposals, votes]) {
        return proposals
            .map((proposalOpt, index) => proposalOpt && proposalOpt.isSome
            ? {
                hash: api.registry.createType('Hash', hashes[index]),
                proposal: proposalOpt.unwrap(),
                votes: votes[index].unwrapOr(null)
            }
            : null)
            .filter((proposal) => !!proposal);
    }
    function _proposalsFrom(instanceId, api, section = 'council') {
        return util_109.memo(instanceId, (hashes) => (util_108.isFunction(api.query[section]?.proposals) && hashes.length
            ? x_rxjs_21.combineLatest([
                x_rxjs_21.of(hashes),
                x_rxjs_21.combineLatest(hashes.map((hash) => 
                // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
                // however we have had cases on Edgeware where the indices have moved around after an
                // upgrade, which results in invalid on-chain data
                api.query[section].proposalOf(hash).pipe(operators_22.catchError(() => x_rxjs_21.of(null))))),
                api.query[section].voting.multi(hashes)
            ])
            : x_rxjs_21.of([[], [], []])).pipe(operators_22.map((result) => parse(api, result))));
    }
    function proposals(instanceId, api, section = 'council') {
        const proposalsFrom = _proposalsFrom(instanceId, api, section);
        return util_109.memo(instanceId, () => util_108.isFunction(api.query[section]?.proposals)
            ? api.query[section].proposals().pipe(operators_22.switchMap(proposalsFrom))
            : x_rxjs_21.of([]));
    }
    exports.proposals = proposals;
    function proposal(instanceId, api, section = 'council') {
        const proposalsFrom = _proposalsFrom(instanceId, api, section);
        return util_109.memo(instanceId, (hash) => util_108.isFunction(api.query[section]?.proposals)
            ? proposalsFrom([hash]).pipe(operators_22.map(([proposal]) => proposal))
            : x_rxjs_21.of(null));
    }
    exports.proposal = proposal;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/collective/index", ["require", "exports", "api-derive/src/collective/proposals"], function (require, exports, proposals_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(proposals_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/council/proposals", ["require", "exports", "api-derive/src/collective/index", "api-derive/src/util/index"], function (require, exports, collective_1, util_110) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proposals = exports.proposal = void 0;
    function proposal(instanceId, api) {
        return util_110.memo(instanceId, collective_1.proposal(instanceId, api));
    }
    exports.proposal = proposal;
    function proposals(instanceId, api) {
        return util_110.memo(instanceId, collective_1.proposals(instanceId, api));
    }
    exports.proposals = proposals;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/council/votes", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_22, operators_23, util_111) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.votes = void 0;
    function retrieveStakeOf(api) {
        return (api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(operators_23.map((entries) => entries.map(([key, stake]) => [key.args[0], stake])));
    }
    function retrieveVoteOf(api) {
        return (api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(operators_23.map((entries) => entries.map(([key, votes]) => [key.args[0], votes])));
    }
    function retrievePrev(api) {
        return x_rxjs_22.combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(operators_23.map(([stakes, votes]) => {
            const result = [];
            votes.forEach(([voter, votes]) => {
                result.push([voter, { stake: api.registry.createType('Balance'), votes }]);
            });
            stakes.forEach(([staker, stake]) => {
                const entry = result.find(([voter]) => voter.eq(staker));
                if (entry) {
                    entry[1].stake = stake;
                }
                else {
                    result.push([staker, { stake, votes: [] }]);
                }
            });
            return result;
        }));
    }
    function retrieveCurrent(api) {
        const elections = (api.query.electionsPhragmen || api.query.elections);
        return elections.voting.entries().pipe(operators_23.map((entries) => entries.map(([key, [stake, votes]]) => [key.args[0], { stake, votes }])));
    }
    function votes(instanceId, api) {
        return util_111.memo(instanceId, () => (api.query.electionsPhragmen || api.query.elections).stakeOf
            ? retrievePrev(api)
            : retrieveCurrent(api));
    }
    exports.votes = votes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/council/votesOf", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_24, util_112) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.votesOf = void 0;
    function votesOf(instanceId, api) {
        return util_112.memo(instanceId, (accountId) => api.derive.council.votes().pipe(operators_24.map((votes) => (votes.find(([from]) => from.eq(accountId)) ||
            [null, { stake: api.registry.createType('Balance'), votes: [] }])[1])));
    }
    exports.votesOf = votesOf;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/council/index", ["require", "exports", "api-derive/src/council/proposals", "api-derive/src/council/votes", "api-derive/src/council/votesOf"], function (require, exports, proposals_2, votes_1, votesOf_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(proposals_2, exports);
    __exportStar(votes_1, exports);
    __exportStar(votesOf_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/dispatchQueue", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_113, x_rxjs_23, operators_25, util_114) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dispatchQueue = void 0;
    const DEMOCRACY_ID = util_113.stringToHex('democrac');
    function queryQueue(api) {
        return api.query.democracy.dispatchQueue().pipe(operators_25.switchMap((dispatches) => x_rxjs_23.combineLatest([
            x_rxjs_23.of(dispatches),
            api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))
        ])), operators_25.map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
            at,
            image: images[dispatchIndex],
            imageHash,
            index
        }))));
    }
    function schedulerEntries(api) {
        // We don't get entries, but rather we get the keys (triggered via finished referendums) and
        // the subscribe to those keys - this means we pickup when the schedulers actually executes
        // at a block, the entry for that block will become empty
        return api.derive.democracy.referendumsFinished().pipe(operators_25.switchMap(() => api.query.scheduler.agenda.keys()), operators_25.switchMap((keys) => {
            const blockNumbers = keys.map((key) => key.args[0]);
            return x_rxjs_23.combineLatest([
                x_rxjs_23.of(blockNumbers),
                api.query.scheduler.agenda.multi(blockNumbers)
            ]);
        }));
    }
    function queryScheduler(api) {
        return schedulerEntries(api).pipe(operators_25.switchMap(([blockNumbers, agendas]) => {
            const result = [];
            blockNumbers.forEach((at, index) => {
                agendas[index].filter((optScheduled) => optScheduled.isSome).forEach((optScheduled) => {
                    const scheduled = optScheduled.unwrap();
                    if (scheduled.maybeId.isSome) {
                        const id = scheduled.maybeId.unwrap().toHex();
                        if (id.startsWith(DEMOCRACY_ID)) {
                            const [, index] = api.registry.createType('(u64, ReferendumIndex)', id);
                            const imageHash = scheduled.call.args[0];
                            result.push({ at, imageHash, index });
                        }
                    }
                });
            });
            return x_rxjs_23.combineLatest([
                x_rxjs_23.of(result),
                api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash))
            ]);
        }), operators_25.map(([infos, images]) => infos.map((info, index) => ({ ...info, image: images[index] }))));
    }
    function dispatchQueue(instanceId, api) {
        return util_114.memo(instanceId, () => util_113.isFunction(api.query.scheduler?.agenda)
            ? queryScheduler(api)
            : api.query.democracy.dispatchQueue
                ? queryQueue(api)
                : x_rxjs_23.of([]));
    }
    exports.dispatchQueue = dispatchQueue;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/locks", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_115, x_rxjs_24, operators_26, util_116) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.locks = void 0;
    const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
    function parseEnd(api, vote, { approved, end }) {
        return [
            end,
            (approved.isTrue && vote.isAye) || (approved.isFalse && vote.isNay)
                ? end.add(api.consts.democracy.enactmentPeriod.muln(LOCKUPS[vote.conviction.index]))
                : util_115.BN_ZERO
        ];
    }
    function parseLock(api, [referendumId, accountVote], referendum) {
        const { balance, vote } = accountVote.asStandard;
        const [referendumEnd, unlockAt] = referendum.isFinished
            ? parseEnd(api, vote, referendum.asFinished)
            : [util_115.BN_ZERO, util_115.BN_ZERO];
        return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
    }
    function delegateLocks(api, { balance, conviction, target }) {
        return api.derive.democracy.locks(target).pipe(operators_26.map((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
            balance,
            isDelegated: true,
            isFinished,
            referendumEnd,
            referendumId,
            unlockAt: unlockAt.isZero()
                ? unlockAt
                : referendumEnd.add(api.consts.democracy.enactmentPeriod.muln(LOCKUPS[conviction.index])),
            vote: api.registry.createType('Vote', { aye: vote.isAye, conviction })
        }))));
    }
    function directLocks(api, { votes }) {
        if (!votes.length) {
            return x_rxjs_24.of([]);
        }
        return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(operators_26.map((referendums) => votes
            .map((vote, index) => [vote, referendums[index].unwrapOr(null)])
            .filter((item) => !!item[1] && util_115.isUndefined(item[1].end) && item[0][1].isStandard)
            .map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
    }
    function locks(instanceId, api) {
        return util_116.memo(instanceId, (accountId) => api.query.democracy.votingOf
            ? api.query.democracy.votingOf(accountId).pipe(operators_26.switchMap((voting) => voting.isDirect
                ? directLocks(api, voting.asDirect)
                : voting.isDelegating
                    ? delegateLocks(api, voting.asDelegating)
                    : x_rxjs_24.of([])))
            : x_rxjs_24.of([]));
    }
    exports.locks = locks;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/nextExternal", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_25, operators_27, util_117) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nextExternal = void 0;
    function withImage(api, nextOpt) {
        if (nextOpt.isNone) {
            return x_rxjs_25.of(null);
        }
        const [imageHash, threshold] = nextOpt.unwrap();
        return api.derive.democracy.preimage(imageHash).pipe(operators_27.map((image) => ({
            image,
            imageHash,
            threshold
        })));
    }
    function nextExternal(instanceId, api) {
        return util_117.memo(instanceId, () => api.query.democracy?.nextExternal
            ? api.query.democracy.nextExternal().pipe(operators_27.switchMap((nextOpt) => withImage(api, nextOpt)))
            : x_rxjs_25.of(null));
    }
    exports.nextExternal = nextExternal;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/util", ["require", "exports", "bn.js", "@polkadot/util"], function (require, exports, bn_js_7, util_118) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseImage = exports.getStatus = exports.calcVotes = exports.calcPassing = exports.compareRationals = void 0;
    bn_js_7 = __importDefault(bn_js_7);
    function isOldInfo(info) {
        return !!info.proposalHash;
    }
    function isCurrentStatus(status) {
        return !!status.tally;
    }
    function isCurrentPreimage(api, imageOpt) {
        return !!imageOpt && !api.query.democracy.dispatchQueue;
    }
    function compareRationals(n1, d1, n2, d2) {
        while (true) {
            const q1 = n1.div(d1);
            const q2 = n2.div(d2);
            if (q1.lt(q2)) {
                return true;
            }
            else if (q2.lt(q1)) {
                return false;
            }
            const r1 = n1.mod(d1);
            const r2 = n2.mod(d2);
            if (r2.isZero()) {
                return false;
            }
            else if (r1.isZero()) {
                return true;
            }
            n1 = d2;
            n2 = d1;
            d1 = r2;
            d2 = r1;
        }
    }
    exports.compareRationals = compareRationals;
    function calcPassingOther(threshold, sqrtElectorate, { votedAye, votedNay, votedTotal }) {
        const sqrtVoters = util_118.bnSqrt(votedTotal);
        return sqrtVoters.isZero()
            ? false
            : threshold.isSupermajorityapproval
                ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate)
                : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
    }
    function calcPassing(threshold, sqrtElectorate, state) {
        return threshold.isSimplemajority
            ? state.votedAye.gt(state.votedNay)
            : calcPassingOther(threshold, sqrtElectorate, state);
    }
    exports.calcPassing = calcPassing;
    function calcVotesPrev(votesFor) {
        return votesFor.reduce((state, derived) => {
            const { balance, vote } = derived;
            const isDefault = vote.conviction.index === 0;
            const counted = balance
                .muln(isDefault ? 1 : vote.conviction.index)
                .divn(isDefault ? 10 : 1);
            if (vote.isAye) {
                state.allAye.push(derived);
                state.voteCountAye++;
                state.votedAye.iadd(counted);
            }
            else {
                state.allNay.push(derived);
                state.voteCountNay++;
                state.votedNay.iadd(counted);
            }
            state.voteCount++;
            state.votedTotal.iadd(counted);
            return state;
        }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new bn_js_7.default(0), votedNay: new bn_js_7.default(0), votedTotal: new bn_js_7.default(0) });
    }
    function calcVotesCurrent(tally, votes) {
        const allAye = [];
        const allNay = [];
        votes.forEach((derived) => {
            if (derived.vote.isAye) {
                allAye.push(derived);
            }
            else {
                allNay.push(derived);
            }
        });
        return {
            allAye,
            allNay,
            voteCount: allAye.length + allNay.length,
            voteCountAye: allAye.length,
            voteCountNay: allNay.length,
            votedAye: tally.ayes,
            votedNay: tally.nays,
            votedTotal: tally.turnout
        };
    }
    function calcVotes(sqrtElectorate, referendum, votes) {
        const state = isCurrentStatus(referendum.status)
            ? calcVotesCurrent(referendum.status.tally, votes)
            : calcVotesPrev(votes);
        return {
            ...state,
            isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
            votes
        };
    }
    exports.calcVotes = calcVotes;
    function getStatus(info) {
        if (info.isNone) {
            return null;
        }
        const unwrapped = info.unwrap();
        if (isOldInfo(unwrapped)) {
            return unwrapped;
        }
        else if (unwrapped.isOngoing) {
            return unwrapped.asOngoing;
        }
        // done, we don't include it here... only currently active
        return null;
    }
    exports.getStatus = getStatus;
    function constructProposal(api, [bytes, proposer, balance, at]) {
        let proposal;
        try {
            proposal = api.registry.createType('Proposal', bytes.toU8a(true));
        }
        catch (error) {
            console.error(error);
        }
        return { at, balance, proposal, proposer };
    }
    function parseImage(api, imageOpt) {
        if (imageOpt.isNone) {
            return;
        }
        if (isCurrentPreimage(api, imageOpt)) {
            const status = imageOpt.unwrap();
            if (status.isMissing) {
                return;
            }
            const { data, deposit, provider, since } = status.asAvailable;
            return constructProposal(api, [data, provider, deposit, since]);
        }
        return constructProposal(api, imageOpt.unwrap());
    }
    exports.parseImage = parseImage;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/preimage", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/democracy/util"], function (require, exports, operators_28, util_119, util_120) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.preimage = void 0;
    function preimage(instanceId, api) {
        return util_119.memo(instanceId, (hash) => api.query.democracy.preimages(hash).pipe(operators_28.map((imageOpt) => util_120.parseImage(api, imageOpt))));
    }
    exports.preimage = preimage;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/preimages", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/democracy/util"], function (require, exports, operators_29, util_121, util_122) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.preimages = void 0;
    function preimages(instanceId, api) {
        return util_121.memo(instanceId, (hashes) => api.query.democracy.preimages.multi(hashes).pipe(operators_29.map((images) => images.map((imageOpt) => util_122.parseImage(api, imageOpt)))));
    }
    exports.preimages = preimages;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/proposals", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_123, x_rxjs_26, operators_30, util_124) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proposals = void 0;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function isNewDepositors(depositors) {
        // Detect balance...
        // eslint-disable-next-line @typescript-eslint/unbound-method
        return util_123.isFunction(depositors[1].mul);
    }
    function parse([proposals, images, optDepositors]) {
        return proposals
            .filter(([, , proposer], index) => !!(optDepositors[index]?.isSome) && !proposer.isEmpty)
            .map(([index, imageHash, proposer], proposalIndex) => {
            const depositors = optDepositors[proposalIndex].unwrap();
            return {
                ...(isNewDepositors(depositors)
                    ? { balance: depositors[1], seconds: depositors[0] }
                    : { balance: depositors[0], seconds: depositors[1] }),
                image: images[proposalIndex],
                imageHash,
                index,
                proposer
            };
        });
    }
    function proposals(instanceId, api) {
        return util_124.memo(instanceId, () => api.query.democracy?.publicProps && api.query.democracy?.preimages
            ? api.query.democracy.publicProps().pipe(operators_30.switchMap((proposals) => x_rxjs_26.combineLatest([
                x_rxjs_26.of(proposals),
                api.derive.democracy.preimages(proposals.map(([, hash]) => hash)),
                api.query.democracy.depositOf.multi(proposals.map(([index]) => index))
            ])), operators_30.map(parse))
            : x_rxjs_26.of([]));
    }
    exports.proposals = proposals;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/referendumIds", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_27, operators_31, util_125) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.referendumIds = void 0;
    function referendumIds(instanceId, api) {
        return util_125.memo(instanceId, () => api.query.democracy?.lowestUnbaked
            ? api.queryMulti([
                api.query.democracy.lowestUnbaked,
                api.query.democracy.referendumCount
            ]).pipe(operators_31.map(([first, total]) => total.gt(first)
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i))
                : []))
            : x_rxjs_27.of([]));
    }
    exports.referendumIds = referendumIds;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/referendums", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_28, operators_32, util_126) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.referendums = void 0;
    function referendums(instanceId, api) {
        return util_126.memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(operators_32.switchMap((referendums) => x_rxjs_28.combineLatest([
            x_rxjs_28.of(referendums),
            api.derive.democracy._referendumsVotes(referendums)
        ])), operators_32.map(([referendums, votes]) => referendums.map((referendum, index) => ({
            ...referendum,
            ...votes[index]
        })))));
    }
    exports.referendums = referendums;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/referendumsActive", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_29, operators_33, util_127) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.referendumsActive = void 0;
    function referendumsActive(instanceId, api) {
        return util_127.memo(instanceId, () => api.derive.democracy.referendumIds().pipe(operators_33.switchMap((ids) => ids.length
            ? api.derive.democracy.referendumsInfo(ids)
            : x_rxjs_29.of([]))));
    }
    exports.referendumsActive = referendumsActive;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/referendumsFinished", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_34, util_128) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.referendumsFinished = void 0;
    function referendumsFinished(instanceId, api) {
        return util_128.memo(instanceId, () => api.derive.democracy.referendumIds().pipe(operators_34.switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), operators_34.map((infos) => infos
            .filter((optInfo) => optInfo.isSome)
            .map((optInfo) => optInfo.unwrap())
            .filter((info) => info.isFinished)
            .map((info) => info.asFinished))));
    }
    exports.referendumsFinished = referendumsFinished;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/referendumsInfo", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/democracy/util"], function (require, exports, util_129, x_rxjs_30, operators_35, util_130, util_131) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.referendumsInfo = exports._referendumInfo = exports._referendumsVotes = exports._referendumVotes = void 0;
    function votesPrev(api, referendumId) {
        return api.query.democracy.votersFor(referendumId).pipe(operators_35.switchMap((votersFor) => x_rxjs_30.combineLatest([
            x_rxjs_30.of(votersFor),
            votersFor.length
                ? api.query.democracy.voteOf.multi(votersFor.map((accountId) => [referendumId, accountId]))
                : x_rxjs_30.of([]),
            api.derive.balances.votingBalances(votersFor)
        ])), operators_35.map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
            accountId,
            balance: balances[index].votingBalance || api.registry.createType('Balance'),
            isDelegating: false,
            vote: votes[index] || api.registry.createType('Vote')
        }))));
    }
    function extractVotes(mapped, referendumId) {
        return mapped
            .filter(([, voting]) => voting.isDirect)
            .map(([accountId, voting]) => [
            accountId,
            voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
        ])
            .filter(([, directVotes]) => !!directVotes.length)
            .reduce((result, [accountId, votes]) => 
        // FIXME We are ignoring split votes
        votes.reduce((result, [, vote]) => {
            if (vote.isStandard) {
                result.push({
                    accountId,
                    isDelegating: false,
                    ...vote.asStandard
                });
            }
            return result;
        }, result), []);
    }
    function votesCurr(api, referendumId) {
        return api.query.democracy.votingOf.entries().pipe(operators_35.map((allVoting) => {
            const mapped = allVoting.map(([key, voting]) => [key.args[0], voting]);
            const votes = extractVotes(mapped, referendumId);
            const delegations = mapped
                .filter(([, voting]) => voting.isDelegating)
                .map(([accountId, voting]) => [accountId, voting.asDelegating]);
            // add delegations
            delegations.forEach(([accountId, { balance, conviction, target }]) => {
                // Are we delegating to a delegator
                const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
                const to = votes.find(({ accountId }) => accountId.eq(toDelegator ? toDelegator[0] : target));
                // this delegation has a target
                if (to) {
                    votes.push({
                        accountId,
                        balance,
                        isDelegating: true,
                        vote: api.registry.createType('Vote', { aye: to.vote.isAye, conviction })
                    });
                }
            });
            return votes;
        }));
    }
    function _referendumVotes(instanceId, api) {
        return util_130.memo(instanceId, (referendum) => x_rxjs_30.combineLatest([
            api.derive.democracy.sqrtElectorate(),
            util_129.isFunction(api.query.democracy.votingOf)
                ? votesCurr(api, referendum.index)
                : votesPrev(api, referendum.index)
        ]).pipe(operators_35.map(([sqrtElectorate, votes]) => util_131.calcVotes(sqrtElectorate, referendum, votes))));
    }
    exports._referendumVotes = _referendumVotes;
    function _referendumsVotes(instanceId, api) {
        return util_130.memo(instanceId, (referendums) => referendums.length
            ? x_rxjs_30.combineLatest(referendums.map((referendum) => api.derive.democracy._referendumVotes(referendum)))
            : x_rxjs_30.of([]));
    }
    exports._referendumsVotes = _referendumsVotes;
    function _referendumInfo(instanceId, api) {
        return util_130.memo(instanceId, (index, info) => {
            const status = util_131.getStatus(info);
            return status
                ? api.query.democracy.preimages(status.proposalHash).pipe(operators_35.map((preimage) => ({
                    image: util_131.parseImage(api, preimage),
                    imageHash: status.proposalHash,
                    index: api.registry.createType('ReferendumIndex', index),
                    status
                })))
                : x_rxjs_30.of(null);
        });
    }
    exports._referendumInfo = _referendumInfo;
    function referendumsInfo(instanceId, api) {
        return util_130.memo(instanceId, (ids) => ids.length
            ? api.query.democracy.referendumInfoOf.multi(ids).pipe(operators_35.switchMap((infos) => x_rxjs_30.combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), operators_35.map((infos) => infos.filter((referendum) => !!referendum)))
            : x_rxjs_30.of([]));
    }
    exports.referendumsInfo = referendumsInfo;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/sqrtElectorate", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_132, operators_36, util_133) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sqrtElectorate = void 0;
    function sqrtElectorate(instanceId, api) {
        return util_133.memo(instanceId, () => api.query.balances.totalIssuance().pipe(operators_36.map((totalIssuance) => util_132.bnSqrt(totalIssuance))));
    }
    exports.sqrtElectorate = sqrtElectorate;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/democracy/index", ["require", "exports", "api-derive/src/democracy/dispatchQueue", "api-derive/src/democracy/locks", "api-derive/src/democracy/nextExternal", "api-derive/src/democracy/preimage", "api-derive/src/democracy/preimages", "api-derive/src/democracy/proposals", "api-derive/src/democracy/referendumIds", "api-derive/src/democracy/referendums", "api-derive/src/democracy/referendumsActive", "api-derive/src/democracy/referendumsFinished", "api-derive/src/democracy/referendumsInfo", "api-derive/src/democracy/sqrtElectorate"], function (require, exports, dispatchQueue_1, locks_1, nextExternal_1, preimage_1, preimages_1, proposals_3, referendumIds_1, referendums_1, referendumsActive_1, referendumsFinished_1, referendumsInfo_1, sqrtElectorate_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(dispatchQueue_1, exports);
    __exportStar(locks_1, exports);
    __exportStar(nextExternal_1, exports);
    __exportStar(preimage_1, exports);
    __exportStar(preimages_1, exports);
    __exportStar(proposals_3, exports);
    __exportStar(referendumIds_1, exports);
    __exportStar(referendums_1, exports);
    __exportStar(referendumsActive_1, exports);
    __exportStar(referendumsFinished_1, exports);
    __exportStar(referendumsInfo_1, exports);
    __exportStar(sqrtElectorate_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/elections/info", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_37, util_134) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.info = void 0;
    function sortAccounts([, balanceA], [, balanceB]) {
        return balanceB.cmp(balanceA);
    }
    function queryElections(api) {
        const section = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';
        return api.queryMulti([
            api.query.council.members,
            api.query[section].candidates,
            api.query[section].members,
            api.query[section].runnersUp
        ]).pipe(operators_37.map(([councilMembers, candidates, members, runnersUp]) => ({
            candidacyBond: api.consts[section].candidacyBond,
            candidateCount: api.registry.createType('u32', candidates.length),
            candidates,
            desiredRunnersUp: api.consts[section].desiredRunnersUp,
            desiredSeats: api.consts[section].desiredMembers,
            members: members.length
                ? members.sort(sortAccounts)
                : councilMembers.map((accountId) => [accountId, api.registry.createType('Balance')]),
            runnersUp: runnersUp.sort(sortAccounts),
            termDuration: api.consts[section].termDuration,
            votingBond: api.consts[section].votingBond
        })));
    }
    /**
     * @name info
     * @returns An object containing the combined results of the storage queries for
     * all relevant election module properties.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.elections.info(({ members, candidates }) => {
     *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
     * });
     * ```
     */
    function info(instanceId, api) {
        return util_134.memo(instanceId, () => queryElections(api));
    }
    exports.info = info;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/elections/index", ["require", "exports", "api-derive/src/elections/info"], function (require, exports, info_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(info_2, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/imOnline/receivedHeartbeats", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_135, x_rxjs_31, operators_38, util_136) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.receivedHeartbeats = void 0;
    function mapResult([result, validators, heartbeats, numBlocks]) {
        validators.forEach((validator, index) => {
            const validatorId = validator.toString();
            const blockCount = numBlocks[index];
            const hasMessage = !heartbeats[index].isEmpty;
            const prev = result[validatorId];
            if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
                result[validatorId] = {
                    blockCount,
                    hasMessage,
                    isOnline: hasMessage || blockCount.gt(util_135.BN_ZERO)
                };
            }
        });
        return result;
    }
    /**
     * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
     */
    function receivedHeartbeats(instanceId, api) {
        return util_136.memo(instanceId, () => api.query.imOnline?.receivedHeartbeats
            ? api.derive.staking.overview().pipe(operators_38.switchMap(({ currentIndex, validators }) => x_rxjs_31.combineLatest([
                x_rxjs_31.of({}),
                x_rxjs_31.of(validators),
                api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])),
                api.query.imOnline.authoredBlocks.multi(validators.map((address) => [currentIndex, address]))
            ])), operators_38.map(mapResult))
            : x_rxjs_31.of({}));
    }
    exports.receivedHeartbeats = receivedHeartbeats;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/imOnline/index", ["require", "exports", "api-derive/src/imOnline/receivedHeartbeats"], function (require, exports, receivedHeartbeats_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(receivedHeartbeats_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/parachains/util", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.didUpdateToBool = void 0;
    function didUpdateToBool(didUpdate, id) {
        return didUpdate.isSome
            ? didUpdate.unwrap().some((paraId) => paraId.eq(id))
            : false;
    }
    exports.didUpdateToBool = didUpdateToBool;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/parachains/info", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/parachains/util"], function (require, exports, x_rxjs_32, operators_39, util_137, util_138) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.info = void 0;
    function parseActive(id, active) {
        const found = active.find(([paraId]) => paraId === id);
        if (found && found[1].isSome) {
            const [collatorId, retriable] = found[1].unwrap();
            return {
                collatorId,
                ...(retriable.isWithRetries
                    ? {
                        isRetriable: true,
                        retries: retriable.asWithRetries.toNumber()
                    }
                    : {
                        isRetriable: false,
                        retries: 0
                    })
            };
        }
        return null;
    }
    function parseCollators(id, collatorQueue) {
        return collatorQueue.map((queue) => {
            const found = queue.find(([paraId]) => paraId === id);
            return found ? found[1] : null;
        });
    }
    function parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
        if (info.isNone) {
            return null;
        }
        return {
            active: parseActive(id, active),
            didUpdate: util_138.didUpdateToBool(didUpdate, id),
            heads,
            id,
            info: { id, ...info.unwrap() },
            pendingSwapId: pendingSwap.unwrapOr(null),
            relayDispatchQueue,
            retryCollators: parseCollators(id, retryQueue),
            selectedCollators: parseCollators(id, selectedThreads)
        };
    }
    function info(instanceId, api) {
        return util_137.memo(instanceId, (id) => api.query.registrar && api.query.parachains
            ? api.queryMulti([
                api.query.registrar.active,
                api.query.registrar.retryQueue,
                api.query.registrar.selectedThreads,
                api.query.parachains.didUpdate,
                [api.query.registrar.paras, id],
                [api.query.registrar.pendingSwap, id],
                [api.query.parachains.heads, id],
                [api.query.parachains.relayDispatchQueue, id]
            ])
                .pipe(operators_39.map((result) => parse(api.registry.createType('ParaId', id), result)))
            : x_rxjs_32.of(null));
    }
    exports.info = info;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/parachains/overview", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/parachains/util"], function (require, exports, x_rxjs_33, operators_40, util_139, util_140) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.overview = void 0;
    function parse([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
        return ids.map((id, index) => ({
            didUpdate: util_140.didUpdateToBool(didUpdate, id),
            id,
            info: { id, ...infos[index].unwrapOr(null) },
            pendingSwapId: pendingSwaps[index].unwrapOr(null),
            relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
        }));
    }
    function overview(instanceId, api) {
        return util_139.memo(instanceId, () => api.query.registrar?.parachains && api.query.parachains
            ? api.query.registrar.parachains().pipe(operators_40.switchMap((paraIds) => x_rxjs_33.combineLatest([
                x_rxjs_33.of(paraIds),
                api.query.parachains.didUpdate(),
                api.query.registrar.paras.multi(paraIds),
                api.query.registrar.pendingSwap.multi(paraIds),
                api.query.parachains.relayDispatchQueueSize.multi(paraIds)
            ])), operators_40.map(parse))
            : x_rxjs_33.of([]));
    }
    exports.overview = overview;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/parachains/index", ["require", "exports", "api-derive/src/parachains/info", "api-derive/src/parachains/overview"], function (require, exports, info_3, overview_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(info_3, exports);
    __exportStar(overview_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/eraLength", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_41, util_141) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.eraLength = void 0;
    function eraLength(instanceId, api) {
        return util_141.memo(instanceId, () => api.derive.session.info().pipe(operators_41.map((info) => info.eraLength)));
    }
    exports.eraLength = eraLength;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/eraProgress", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_42, util_142) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.eraProgress = void 0;
    function eraProgress(instanceId, api) {
        return util_142.memo(instanceId, () => api.derive.session.progress().pipe(operators_42.map((info) => info.eraProgress)));
    }
    exports.eraProgress = eraProgress;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/indexes", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_34, operators_43, util_143) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.indexes = void 0;
    // parse into Indexes
    function parse([activeEra, activeEraStart, currentEra, currentIndex, validatorCount]) {
        return {
            activeEra,
            activeEraStart,
            currentEra,
            currentIndex,
            validatorCount
        };
    }
    // query based on latest
    function query(api) {
        return api.queryMulti([
            api.query.staking.activeEra,
            api.query.staking.currentEra,
            api.query.session.currentIndex,
            api.query.staking.validatorCount
        ]).pipe(operators_43.map(([activeOpt, currentEra, currentIndex, validatorCount]) => {
            const { index, start } = activeOpt.unwrapOrDefault();
            return parse([
                index,
                start,
                currentEra.unwrapOrDefault(),
                currentIndex,
                validatorCount
            ]);
        }));
    }
    // empty set when none is available
    function empty(api) {
        return x_rxjs_34.of(parse([
            api.registry.createType('EraIndex'),
            api.registry.createType('Option<Moment>'),
            api.registry.createType('EraIndex'),
            api.registry.createType('SessionIndex', 1),
            api.registry.createType('u32')
        ]));
    }
    function indexes(instanceId, api) {
        return util_143.memo(instanceId, () => api.query.session && api.query.staking
            ? query(api)
            : empty(api));
    }
    exports.indexes = indexes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/info", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_44, util_144) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.info = void 0;
    function createDerive(api, [[hasBabe, epochDuration, sessionsPerEra], { activeEra, activeEraStart, currentEra, currentIndex, validatorCount }]) {
        return {
            activeEra,
            activeEraStart,
            currentEra,
            currentIndex,
            eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(epochDuration)),
            isEpoch: hasBabe,
            sessionLength: epochDuration,
            sessionsPerEra,
            validatorCount
        };
    }
    function queryAura(api) {
        return api.derive.session.indexes().pipe(operators_44.map((indexes) => createDerive(api, [
            [
                false,
                api.registry.createType('u64', 1),
                // we may have aura without staking (permissioned)
                api.consts.staking?.sessionsPerEra || api.registry.createType('SessionIndex', 1)
            ],
            indexes
        ])));
    }
    function queryBabe(api) {
        return api.derive.session.indexes().pipe(operators_44.map((indexes) => createDerive(api, [
            [
                true,
                api.consts.babe.epochDuration,
                // we may have babe without staking (permissioned)
                api.consts.staking?.sessionsPerEra || api.registry.createType('SessionIndex', 1)
            ],
            indexes
        ])));
    }
    /**
     * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
     */
    function info(instanceId, api) {
        return util_144.memo(instanceId, () => api.consts.babe
            ? queryBabe(api)
            : queryAura(api));
    }
    exports.info = info;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/progress", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_35, operators_45, util_145) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.progress = void 0;
    function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
        const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
        const sessionProgress = currentSlot.sub(epochStartSlot);
        const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
        return {
            ...info,
            eraProgress: api.registry.createType('BlockNumber', eraProgress),
            sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
        };
    }
    function queryAura(api) {
        return api.derive.session.info().pipe(operators_45.map((info) => ({
            ...info,
            eraProgress: api.registry.createType('BlockNumber'),
            sessionProgress: api.registry.createType('BlockNumber')
        })));
    }
    function queryBabe(api) {
        return api.derive.session.info().pipe(operators_45.switchMap((info) => x_rxjs_35.combineLatest([
            x_rxjs_35.of(info),
            // we may have no staking, but have babe (permissioned)
            api.query.staking
                ? api.queryMulti([
                    api.query.babe.currentSlot,
                    api.query.babe.epochIndex,
                    api.query.babe.genesisSlot,
                    [api.query.staking.erasStartSessionIndex, info.activeEra]
                ])
                : api.queryMulti([
                    api.query.babe.currentSlot,
                    api.query.babe.epochIndex,
                    api.query.babe.genesisSlot
                ])
        ])), operators_45.map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
            info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]
        ]));
    }
    /**
     * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
     */
    function progress(instanceId, api) {
        return util_145.memo(instanceId, () => api.consts.babe
            ? queryBabe(api).pipe(operators_45.map(([info, slots]) => createDerive(api, info, slots)))
            : queryAura(api));
    }
    exports.progress = progress;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/sessionProgress", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_46, util_146) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sessionProgress = void 0;
    function sessionProgress(instanceId, api) {
        return util_146.memo(instanceId, () => api.derive.session.progress().pipe(operators_46.map((info) => info.sessionProgress)));
    }
    exports.sessionProgress = sessionProgress;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/session/index", ["require", "exports", "api-derive/src/session/eraLength", "api-derive/src/session/eraProgress", "api-derive/src/session/indexes", "api-derive/src/session/info", "api-derive/src/session/progress", "api-derive/src/session/sessionProgress"], function (require, exports, eraLength_1, eraProgress_1, indexes_2, info_4, progress_1, sessionProgress_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(eraLength_1, exports);
    __exportStar(eraProgress_1, exports);
    __exportStar(indexes_2, exports);
    __exportStar(info_4, exports);
    __exportStar(progress_1, exports);
    __exportStar(sessionProgress_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/society/candidates", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_36, operators_47, util_147) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candidates = void 0;
    /**
     * @description Get the candidate info for a society
     */
    function candidates(instanceId, api) {
        return util_147.memo(instanceId, () => api.query.society.candidates().pipe(operators_47.switchMap((candidates) => x_rxjs_36.combineLatest([
            x_rxjs_36.of(candidates),
            api.query.society.suspendedCandidates.multi(candidates.map(({ who }) => who))
        ])), operators_47.map(([candidates, suspended]) => candidates.map(({ kind, value, who }, index) => ({
            accountId: who,
            isSuspended: suspended[index].isSome,
            kind,
            value
        })))));
    }
    exports.candidates = candidates;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/society/info", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_48, util_148) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.info = void 0;
    /**
     * @description Get the overall info for a society
     */
    function info(instanceId, api) {
        return util_148.memo(instanceId, () => api.queryMulti([
            api.query.society.bids,
            api.query.society.defender,
            api.query.society.founder,
            api.query.society.head,
            api.query.society.maxMembers,
            api.query.society.pot
        ]).pipe(operators_48.map(([bids, defender, founder, head, maxMembers, pot]) => ({
            bids,
            defender: defender.unwrapOr(undefined),
            founder: founder.unwrapOr(undefined),
            hasDefender: (defender.isSome && head.isSome && !head.eq(defender)) || false,
            head: head.unwrapOr(undefined),
            maxMembers,
            pot
        }))));
    }
    exports.info = info;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/society/member", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_49, util_149) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.member = void 0;
    /**
     * @description Get the member info for a society
     */
    function member(instanceId, api) {
        return util_149.memo(instanceId, (accountId) => api.queryMulti([
            [api.query.society.payouts, accountId],
            [api.query.society.strikes, accountId],
            [api.query.society.defenderVotes, accountId],
            [api.query.society.suspendedMembers, accountId],
            [api.query.society.vouching, accountId]
        ]).pipe(operators_49.map(([payouts, strikes, defenderVotes, suspended, vouching]) => ({
            accountId,
            isSuspended: suspended.isTrue,
            payouts,
            strikes,
            vote: defenderVotes.unwrapOr(undefined),
            vouching: vouching.unwrapOr(undefined)
        }))));
    }
    exports.member = member;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/society/members", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_37, operators_50, util_150) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.members = void 0;
    /**
     * @description Get the member info for a society
     */
    function members(instanceId, api) {
        return util_150.memo(instanceId, () => api.query.society.members().pipe(operators_50.switchMap((members) => x_rxjs_37.combineLatest(members.map((accountId) => api.derive.society.member(accountId))))));
    }
    exports.members = members;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/society/index", ["require", "exports", "api-derive/src/society/candidates", "api-derive/src/society/info", "api-derive/src/society/member", "api-derive/src/society/members"], function (require, exports, candidates_1, info_5, member_1, members_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(candidates_1, exports);
    __exportStar(info_5, exports);
    __exportStar(member_1, exports);
    __exportStar(members_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/account", ["require", "exports", "bn.js", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, bn_js_8, util_151, x_rxjs_38, operators_51, util_152) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.account = exports.accounts = void 0;
    bn_js_8 = __importDefault(bn_js_8);
    const QUERY_OPTS = {
        withDestination: true,
        withLedger: true,
        withNominations: true,
        withPrefs: true
    };
    function groupByEra(list) {
        return list.reduce((map, { era, value }) => {
            const key = era.toString();
            map[key] = (map[key] || util_151.BN_ZERO).add(value.unwrap());
            return map;
        }, {});
    }
    function calculateUnlocking(api, stakingLedger, sessionInfo) {
        const results = Object
            .entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra))))
            .map(([eraString, value]) => ({
            remainingEras: new bn_js_8.default(eraString).isub(sessionInfo.activeEra),
            value: api.registry.createType('Balance', value)
        }));
        return results.length
            ? results
            : undefined;
    }
    function redeemableSum(api, stakingLedger, sessionInfo) {
        return api.registry.createType('Balance', (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
            return sessionInfo.activeEra.gte(era.unwrap())
                ? total.iadd(value.unwrap())
                : total;
        }, new bn_js_8.default(0)));
    }
    function parseResult(api, sessionInfo, keys, query) {
        return {
            ...keys,
            ...query,
            redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
            unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
        };
    }
    /**
     * @description From a list of stashes, fill in all the relevant staking details
     */
    function accounts(instanceId, api) {
        return util_152.memo(instanceId, (accountIds) => api.derive.session.info().pipe(operators_51.switchMap((sessionInfo) => x_rxjs_38.combineLatest([
            api.derive.staking.keysMulti(accountIds),
            api.derive.staking.queryMulti(accountIds, QUERY_OPTS)
        ]).pipe(operators_51.map(([keys, queries]) => queries.map((query, index) => parseResult(api, sessionInfo, keys[index], query)))))));
    }
    exports.accounts = accounts;
    /**
     * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
     */
    function account(instanceId, api) {
        return util_152.memo(instanceId, (accountId) => api.derive.staking.accounts([accountId]).pipe(operators_51.map(([first]) => first)));
    }
    exports.account = account;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/currentPoints", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_52, util_153) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.currentPoints = void 0;
    /**
     * @description Retrieve the staking overview, including elected and points earned
     */
    function currentPoints(instanceId, api) {
        return util_153.memo(instanceId, () => api.derive.session.indexes().pipe(operators_52.switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
    }
    exports.currentPoints = currentPoints;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/erasExposure", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_39, operators_53, util_154) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erasExposure = exports._erasExposure = exports.eraExposure = exports._eraExposure = void 0;
    const CACHE_KEY = 'eraExposure';
    function mapStakers(era, stakers) {
        const nominators = {};
        const validators = {};
        stakers.forEach(([key, exposure]) => {
            const validatorId = key.args[1].toString();
            validators[validatorId] = exposure;
            exposure.others.forEach(({ who }, validatorIndex) => {
                const nominatorId = who.toString();
                nominators[nominatorId] = nominators[nominatorId] || [];
                nominators[nominatorId].push({ validatorId, validatorIndex });
            });
        });
        return { era, nominators, validators };
    }
    function _eraExposure(instanceId, api) {
        return util_154.memo(instanceId, (era, withActive) => {
            const cacheKey = `${CACHE_KEY}-${era.toString()}`;
            const cached = withActive
                ? undefined
                : util_154.deriveCache.get(cacheKey);
            return cached
                ? x_rxjs_39.of(cached)
                : api.query.staking.erasStakersClipped.entries(era).pipe(operators_53.map((stakers) => {
                    const value = mapStakers(era, stakers);
                    !withActive && util_154.deriveCache.set(cacheKey, value);
                    return value;
                }));
        });
    }
    exports._eraExposure = _eraExposure;
    function eraExposure(instanceId, api) {
        return util_154.memo(instanceId, (era) => api.derive.staking._eraExposure(era, true));
    }
    exports.eraExposure = eraExposure;
    function _erasExposure(instanceId, api) {
        return util_154.memo(instanceId, (eras, withActive) => eras.length
            ? x_rxjs_39.combineLatest(eras.map((era) => api.derive.staking._eraExposure(era, withActive)))
            : x_rxjs_39.of([]));
    }
    exports._erasExposure = _erasExposure;
    function erasExposure(instanceId, api) {
        return util_154.memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_53.switchMap((eras) => api.derive.staking._erasExposure(eras, withActive))));
    }
    exports.erasExposure = erasExposure;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/erasHistoric", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_54, util_155) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erasHistoric = void 0;
    function erasHistoric(instanceId, api) {
        return util_155.memo(instanceId, (withActive) => api.queryMulti([
            api.query.staking.activeEra,
            api.query.staking.historyDepth
        ]).pipe(operators_54.map(([activeEraOpt, historyDepth]) => {
            const result = [];
            const max = historyDepth.toNumber();
            const activeEra = activeEraOpt.unwrapOrDefault().index;
            let lastEra = activeEra;
            while (lastEra.gten(0) && (result.length < max)) {
                if ((lastEra !== activeEra) || (withActive === true)) {
                    result.push(api.registry.createType('EraIndex', lastEra));
                }
                lastEra = lastEra.subn(1);
            }
            // go from oldest to newest
            return result.reverse();
        })));
    }
    exports.erasHistoric = erasHistoric;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/util", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filterEras = void 0;
    function filterEras(eras, list) {
        return eras.filter((era) => !list.some((entry) => era.eq(entry.era)));
    }
    exports.filterEras = filterEras;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/erasPoints", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/staking/util"], function (require, exports, util_156, x_rxjs_40, operators_55, util_157, util_158) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erasPoints = exports._erasPoints = void 0;
    const CACHE_KEY = 'eraPoints';
    function mapValidators({ individual }) {
        return [...individual.entries()]
            .filter(([, points]) => points.gt(util_156.BN_ZERO))
            .reduce((result, [validatorId, points]) => {
            result[validatorId.toString()] = points;
            return result;
        }, {});
    }
    function mapPoints(eras, points) {
        return eras.map((era, index) => ({
            era,
            eraPoints: points[index].total,
            validators: mapValidators(points[index])
        }));
    }
    function _erasPoints(instanceId, api) {
        return util_157.memo(instanceId, (eras, withActive) => {
            if (!eras.length) {
                return x_rxjs_40.of([]);
            }
            const cached = withActive
                ? []
                : eras
                    .map((era) => util_157.deriveCache.get(`${CACHE_KEY}-${era.toString()}`))
                    .filter((value) => !!value);
            const remaining = util_158.filterEras(eras, cached);
            return !remaining.length
                ? x_rxjs_40.of(cached)
                : api.query.staking.erasRewardPoints.multi(remaining).pipe(operators_55.map((points) => {
                    const query = mapPoints(remaining, points);
                    !withActive && query.forEach((q) => util_157.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));
                    return eras.map((era) => cached.find((cached) => era.eq(cached.era)) ||
                        query.find((query) => era.eq(query.era)));
                }));
        });
    }
    exports._erasPoints = _erasPoints;
    function erasPoints(instanceId, api) {
        return util_157.memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_55.switchMap((eras) => api.derive.staking._erasPoints(eras, withActive))));
    }
    exports.erasPoints = erasPoints;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/erasPrefs", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_41, operators_56, util_159) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erasPrefs = exports._erasPrefs = exports.eraPrefs = exports._eraPrefs = void 0;
    const CACHE_KEY = 'eraPrefs';
    function mapPrefs(era, all) {
        const validators = {};
        all.forEach(([key, prefs]) => {
            validators[key.args[1].toString()] = prefs;
        });
        return { era, validators };
    }
    function _eraPrefs(instanceId, api) {
        return util_159.memo(instanceId, (era, withActive) => {
            const cacheKey = `${CACHE_KEY}-${era.toString()}`;
            const cached = withActive
                ? undefined
                : util_159.deriveCache.get(cacheKey);
            return cached
                ? x_rxjs_41.of(cached)
                : api.query.staking.erasValidatorPrefs.entries(era).pipe(operators_56.map((prefs) => {
                    const value = mapPrefs(era, prefs);
                    !withActive && util_159.deriveCache.set(cacheKey, value);
                    return value;
                }));
        });
    }
    exports._eraPrefs = _eraPrefs;
    function eraPrefs(instanceId, api) {
        return util_159.memo(instanceId, (era) => api.derive.staking._eraPrefs(era, true));
    }
    exports.eraPrefs = eraPrefs;
    function _erasPrefs(instanceId, api) {
        return util_159.memo(instanceId, (eras, withActive) => eras.length
            ? x_rxjs_41.combineLatest(eras.map((era) => api.derive.staking._eraPrefs(era, withActive)))
            : x_rxjs_41.of([]));
    }
    exports._erasPrefs = _erasPrefs;
    function erasPrefs(instanceId, api) {
        return util_159.memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_56.switchMap((eras) => api.derive.staking._erasPrefs(eras, withActive))));
    }
    exports.erasPrefs = erasPrefs;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/erasRewards", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index", "api-derive/src/staking/util"], function (require, exports, x_rxjs_42, operators_57, util_160, util_161) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erasRewards = exports._erasRewards = void 0;
    const CACHE_KEY = 'eraRewards';
    function mapRewards(eras, optRewards) {
        return eras.map((era, index) => ({
            era,
            eraReward: optRewards[index].unwrapOrDefault()
        }));
    }
    function _erasRewards(instanceId, api) {
        return util_160.memo(instanceId, (eras, withActive) => {
            if (!eras.length) {
                return x_rxjs_42.of([]);
            }
            const cached = withActive
                ? []
                : eras
                    .map((era) => util_160.deriveCache.get(`${CACHE_KEY}-${era.toString()}`))
                    .filter((value) => !!value);
            const remaining = util_161.filterEras(eras, cached);
            if (!remaining.length) {
                return x_rxjs_42.of(cached);
            }
            return api.query.staking.erasValidatorReward.multi(remaining).pipe(operators_57.map((optRewards) => {
                const query = mapRewards(remaining, optRewards);
                !withActive && query.forEach((q) => util_160.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));
                return eras.map((era) => cached.find((cached) => era.eq(cached.era)) ||
                    query.find((query) => era.eq(query.era)));
            }));
        });
    }
    exports._erasRewards = _erasRewards;
    function erasRewards(instanceId, api) {
        return util_160.memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_57.switchMap((eras) => api.derive.staking._erasRewards(eras, withActive))));
    }
    exports.erasRewards = erasRewards;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/erasSlashes", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_43, operators_58, util_162) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erasSlashes = exports._erasSlashes = exports.eraSlashes = exports._eraSlashes = void 0;
    const CACHE_KEY = 'eraSlashes';
    function mapSlashes(era, noms, vals) {
        const nominators = {};
        const validators = {};
        noms.forEach(([key, optBalance]) => {
            nominators[key.args[1].toString()] = optBalance.unwrap();
        });
        vals.forEach(([key, optRes]) => {
            validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
        });
        return { era, nominators, validators };
    }
    function _eraSlashes(instanceId, api) {
        return util_162.memo(instanceId, (era, withActive) => {
            const cacheKey = `${CACHE_KEY}-${era.toString()}`;
            const cached = withActive
                ? undefined
                : util_162.deriveCache.get(cacheKey);
            return cached
                ? x_rxjs_43.of(cached)
                : x_rxjs_43.combineLatest([
                    api.query.staking.nominatorSlashInEra.entries(era),
                    api.query.staking.validatorSlashInEra.entries(era)
                ]).pipe(operators_58.map(([noms, vals]) => {
                    const value = mapSlashes(era, noms, vals);
                    !withActive && util_162.deriveCache.set(cacheKey, value);
                    return value;
                }));
        });
    }
    exports._eraSlashes = _eraSlashes;
    function eraSlashes(instanceId, api) {
        return util_162.memo(instanceId, (era) => api.derive.staking._eraSlashes(era, true));
    }
    exports.eraSlashes = eraSlashes;
    function _erasSlashes(instanceId, api) {
        return util_162.memo(instanceId, (eras, withActive) => eras.length
            ? x_rxjs_43.combineLatest(eras.map((era) => api.derive.staking._eraSlashes(era, withActive)))
            : x_rxjs_43.of([]));
    }
    exports._erasSlashes = _erasSlashes;
    function erasSlashes(instanceId, api) {
        return util_162.memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_58.switchMap((eras) => api.derive.staking._erasSlashes(eras, withActive))));
    }
    exports.erasSlashes = erasSlashes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/electedInfo", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, util_163, operators_59, util_164) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.electedInfo = void 0;
    const DEFAULT_FLAGS = { withController: true, withExposure: true, withPrefs: true };
    function combineAccounts(nextElected, validators) {
        return util_163.arrayFlatten([nextElected, validators.filter((v) => !nextElected.find((n) => n.eq(v)))]);
    }
    function electedInfo(instanceId, api) {
        return util_164.memo(instanceId, (flags = DEFAULT_FLAGS) => api.derive.staking.validators().pipe(operators_59.switchMap(({ nextElected, validators }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(operators_59.map((info) => ({
            info,
            nextElected,
            validators
        }))))));
    }
    exports.electedInfo = electedInfo;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/keys", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_44, operators_60, util_165) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysMulti = exports.keys = void 0;
    function extractsIds(stashId, queuedKeys, nextKeys) {
        const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
        const nextSessionIds = nextKeys.unwrapOr([]);
        return {
            nextSessionIds,
            sessionIds
        };
    }
    function keys(instanceId, api) {
        return util_165.memo(instanceId, (stashId) => api.derive.staking.keysMulti([stashId]).pipe(operators_60.map(([first]) => first)));
    }
    exports.keys = keys;
    function keysMulti(instanceId, api) {
        return util_165.memo(instanceId, (stashIds) => stashIds.length
            ? api.query.session.queuedKeys().pipe(operators_60.switchMap((queuedKeys) => x_rxjs_44.combineLatest([
                x_rxjs_44.of(queuedKeys),
                api.consts.session?.dedupKeyPrefix
                    ? api.query.session.nextKeys.multi(stashIds.map((stashId) => [api.consts.session.dedupKeyPrefix, stashId]))
                    : api.query.session.nextKeys.multi(stashIds)
            ])), operators_60.map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index]))))
            : x_rxjs_44.of([]));
    }
    exports.keysMulti = keysMulti;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/overview", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_45, operators_61, util_166) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.overview = void 0;
    /**
     * @description Retrieve the staking overview, including elected and points earned
     */
    function overview(instanceId, api) {
        return util_166.memo(instanceId, () => x_rxjs_45.combineLatest([
            api.derive.session.indexes(),
            api.derive.staking.validators()
        ]).pipe(operators_61.map(([indexes, { nextElected, validators }]) => ({
            ...indexes,
            nextElected,
            validators
        }))));
    }
    exports.overview = overview;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/ownExposure", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_46, operators_62, util_167) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ownExposures = exports._ownExposures = exports.ownExposure = exports._ownExposure = void 0;
    const CACHE_KEY = 'ownExposure';
    function _ownExposure(instanceId, api) {
        return util_167.memo(instanceId, (accountId, era, withActive) => {
            const cacheKey = `${CACHE_KEY}-${era.toString()}-${accountId.toString()}`;
            const cached = withActive
                ? undefined
                : util_167.deriveCache.get(cacheKey);
            return cached
                ? x_rxjs_46.of(cached)
                : api.queryMulti([
                    [api.query.staking.erasStakersClipped, [era, accountId]],
                    [api.query.staking.erasStakers, [era, accountId]]
                ]).pipe(operators_62.map(([clipped, exposure]) => {
                    const value = { clipped, era, exposure };
                    !withActive && util_167.deriveCache.set(cacheKey, value);
                    return value;
                }));
        });
    }
    exports._ownExposure = _ownExposure;
    function ownExposure(instanceId, api) {
        return util_167.memo(instanceId, (accountId, era) => api.derive.staking._ownExposure(accountId, era, true));
    }
    exports.ownExposure = ownExposure;
    function _ownExposures(instanceId, api) {
        return util_167.memo(instanceId, (accountId, eras, withActive) => eras.length
            ? x_rxjs_46.combineLatest(eras.map((era) => api.derive.staking._ownExposure(accountId, era, withActive)))
            : x_rxjs_46.of([]));
    }
    exports._ownExposures = _ownExposures;
    function ownExposures(instanceId, api) {
        return util_167.memo(instanceId, (accountId, withActive = false) => {
            return api.derive.staking.erasHistoric(withActive).pipe(operators_62.switchMap((eras) => api.derive.staking._ownExposures(accountId, eras, withActive)));
        });
    }
    exports.ownExposures = ownExposures;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/ownSlashes", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_47, operators_63, util_168) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ownSlashes = exports._ownSlashes = exports.ownSlash = exports._ownSlash = void 0;
    const CACHE_KEY = 'ownSlash';
    function _ownSlash(instanceId, api) {
        return util_168.memo(instanceId, (accountId, era, withActive) => {
            const cacheKey = `${CACHE_KEY}-${era.toString()}-${accountId.toString()}`;
            const cached = withActive
                ? undefined
                : util_168.deriveCache.get(cacheKey);
            return cached
                ? x_rxjs_47.of(cached)
                : api.queryMulti([
                    [api.query.staking.nominatorSlashInEra, [era, accountId]],
                    [api.query.staking.validatorSlashInEra, [era, accountId]]
                ]).pipe(operators_63.map(([optNom, optVal]) => {
                    const value = {
                        era,
                        total: optVal.isSome
                            ? optVal.unwrap()[1]
                            : optNom.unwrapOrDefault()
                    };
                    !withActive && util_168.deriveCache.set(cacheKey, value);
                    return value;
                }));
        });
    }
    exports._ownSlash = _ownSlash;
    function ownSlash(instanceId, api) {
        return util_168.memo(instanceId, (accountId, era) => api.derive.staking._ownSlash(accountId, era, true));
    }
    exports.ownSlash = ownSlash;
    function _ownSlashes(instanceId, api) {
        return util_168.memo(instanceId, (accountId, eras, withActive) => eras.length
            ? x_rxjs_47.combineLatest(eras.map((era) => api.derive.staking._ownSlash(accountId, era, withActive)))
            : x_rxjs_47.of([]));
    }
    exports._ownSlashes = _ownSlashes;
    function ownSlashes(instanceId, api) {
        return util_168.memo(instanceId, (accountId, withActive = false) => {
            return api.derive.staking.erasHistoric(withActive).pipe(operators_63.switchMap((eras) => api.derive.staking._ownSlashes(accountId, eras, withActive)));
        });
    }
    exports.ownSlashes = ownSlashes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/query", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_48, operators_64, util_169) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.queryMulti = exports.query = void 0;
    function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
        return {
            accountId: stashId,
            controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
            exposure,
            nominators: nominatorsOpt.isSome
                ? nominatorsOpt.unwrap().targets
                : [],
            rewardDestination,
            stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
            stashId,
            validatorPrefs
        };
    }
    function getLedgers(api, optIds, { withLedger = false }) {
        const ids = optIds
            .filter((opt) => withLedger && !!opt && opt.isSome)
            .map((opt) => opt.unwrap());
        const emptyLed = api.registry.createType('Option<StakingLedger>');
        return (ids.length
            ? api.query.staking.ledger.multi(ids)
            : x_rxjs_48.of([])).pipe(operators_64.map((optLedgers) => {
            let offset = -1;
            return optIds.map((opt) => opt && opt.isSome
                ? optLedgers[++offset] || emptyLed
                : emptyLed);
        }));
    }
    function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
        const emptyNoms = api.registry.createType('Option<Nominations>');
        const emptyRewa = api.registry.createType('RewardDestination');
        const emptyExpo = api.registry.createType('Exposure');
        const emptyPrefs = api.registry.createType('ValidatorPrefs');
        return x_rxjs_48.combineLatest([
            withController || withLedger
                ? api.query.staking.bonded.multi(stashIds)
                : x_rxjs_48.of(stashIds.map(() => null)),
            withNominations
                ? api.query.staking.nominators.multi(stashIds)
                : x_rxjs_48.of(stashIds.map(() => emptyNoms)),
            withDestination
                ? api.query.staking.payee.multi(stashIds)
                : x_rxjs_48.of(stashIds.map(() => emptyRewa)),
            withPrefs
                ? api.query.staking.validators.multi(stashIds)
                : x_rxjs_48.of(stashIds.map(() => emptyPrefs)),
            withExposure
                ? api.query.staking.erasStakers.multi(stashIds.map((stashId) => [activeEra, stashId]))
                : x_rxjs_48.of(stashIds.map(() => emptyExpo))
        ]);
    }
    function getBatch(api, activeEra, stashIds, flags) {
        return getStashInfo(api, stashIds, activeEra, flags).pipe(operators_64.switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(operators_64.map((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
    }
    //
    /**
     * @description From a stash, retrieve the controllerId and all relevant details
     */
    function query(instanceId, api) {
        return util_169.memo(instanceId, (accountId, flags) => api.derive.staking.queryMulti([accountId], flags).pipe(operators_64.map(([first]) => first)));
    }
    exports.query = query;
    function queryMulti(instanceId, api) {
        return util_169.memo(instanceId, (accountIds, flags) => accountIds.length
            ? api.derive.session.indexes().pipe(operators_64.switchMap(({ activeEra }) => {
                const stashIds = accountIds.map((accountId) => api.registry.createType('AccountId', accountId));
                return getBatch(api, activeEra, stashIds, flags);
            }))
            : x_rxjs_48.of([]));
    }
    exports.queryMulti = queryMulti;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/stakerExposure", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_65, util_170) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stakerExposure = exports._stakerExposure = void 0;
    function _stakerExposure(instanceId, api) {
        return util_170.memo(instanceId, (accountId, eras, withActive) => {
            const stakerId = api.registry.createType('AccountId', accountId).toString();
            return api.derive.staking._erasExposure(eras, withActive).pipe(operators_65.map((exposures) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
                const isValidator = !!allValidators[stakerId];
                const validators = {};
                const nominating = allNominators[stakerId] || [];
                if (isValidator) {
                    validators[stakerId] = allValidators[stakerId];
                }
                else if (nominating) {
                    nominating.forEach(({ validatorId }) => {
                        validators[validatorId] = allValidators[validatorId];
                    });
                }
                return { era, isEmpty: !Object.keys(validators).length, isValidator, nominating, validators };
            })));
        });
    }
    exports._stakerExposure = _stakerExposure;
    function stakerExposure(instanceId, api) {
        return util_170.memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_65.switchMap((eras) => api.derive.staking._stakerExposure(accountId, eras, withActive))));
    }
    exports.stakerExposure = stakerExposure;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/stakerPoints", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_66, util_171) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stakerPoints = exports._stakerPoints = void 0;
    function _stakerPoints(instanceId, api) {
        return util_171.memo(instanceId, (accountId, eras, withActive) => {
            const stakerId = api.registry.createType('AccountId', accountId).toString();
            return api.derive.staking._erasPoints(eras, withActive).pipe(operators_66.map((points) => points.map(({ era, eraPoints, validators }) => ({
                era,
                eraPoints,
                points: validators[stakerId] || api.registry.createType('RewardPoint')
            }))));
        });
    }
    exports._stakerPoints = _stakerPoints;
    function stakerPoints(instanceId, api) {
        return util_171.memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_66.switchMap((eras) => api.derive.staking._stakerPoints(accountId, eras, withActive))));
    }
    exports.stakerPoints = stakerPoints;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/stakerPrefs", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_67, util_172) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stakerPrefs = exports._stakerPrefs = void 0;
    function _stakerPrefs(instanceId, api) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        return util_172.memo(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((era) => [era, accountId])).pipe(operators_67.map((all) => all.map((validatorPrefs, index) => ({
            era: eras[index],
            validatorPrefs
        })))));
    }
    exports._stakerPrefs = _stakerPrefs;
    function stakerPrefs(instanceId, api) {
        return util_172.memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_67.switchMap((eras) => api.derive.staking._stakerPrefs(accountId, eras, withActive))));
    }
    exports.stakerPrefs = stakerPrefs;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/stakerRewards", ["require", "exports", "bn.js", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, bn_js_9, util_173, x_rxjs_49, operators_68, util_174) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stakerRewardsMulti = exports.stakerRewardsMultiEras = exports.stakerRewards = exports._stakerRewards = exports._stakerRewardsEras = void 0;
    bn_js_9 = __importDefault(bn_js_9);
    const ZERO = new bn_js_9.default(0);
    const MIN_ONE = new bn_js_9.default(-1);
    const COMM_DIV = new bn_js_9.default(1000000000);
    function parseRewards(api, stashId, [, erasPoints, erasPrefs, erasRewards], exposures) {
        return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators }) => {
            const { eraPoints, validators: allValPoints } = erasPoints.find((p) => p.era.eq(era)) || { eraPoints: ZERO, validators: {} };
            const { eraReward } = erasRewards.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType('Balance') };
            const { validators: allValPrefs } = erasPrefs.find((p) => p.era.eq(era)) || { validators: {} };
            const validators = {};
            const stakerId = stashId.toString();
            Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
                const valPoints = allValPoints[validatorId] || ZERO;
                const valComm = allValPrefs[validatorId]?.commission.unwrap() || ZERO;
                const expTotal = exposure.total.unwrap();
                let avail = ZERO;
                let value;
                if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
                    avail = eraReward.mul(valPoints).div(eraPoints);
                    const valCut = valComm.mul(avail).div(COMM_DIV);
                    let staked;
                    if (validatorId === stakerId) {
                        staked = exposure.own.unwrap();
                    }
                    else {
                        const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
                        staked = stakerExp
                            ? stakerExp.value.unwrap()
                            : ZERO;
                    }
                    value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : ZERO);
                }
                validators[validatorId] = {
                    total: api.registry.createType('Balance', avail),
                    value: api.registry.createType('Balance', value)
                };
            });
            return {
                era,
                eraReward,
                isEmpty,
                isValidator,
                nominating,
                validators
            };
        });
    }
    function uniqValidators(rewards) {
        const uniq = [];
        rewards.forEach(({ validators }) => {
            Object.keys(validators).forEach((validatorId) => {
                if (!uniq.includes(validatorId)) {
                    uniq.push(validatorId);
                }
            });
        });
        return uniq;
    }
    function isOldLedger(ledger) {
        return !!ledger?.lastReward;
    }
    function filterEra(era, stakingLedger) {
        return isOldLedger(stakingLedger)
            ? era.gt(stakingLedger.lastReward.unwrapOr(MIN_ONE))
            : !stakingLedger.claimedRewards.some((e) => e.eq(era));
    }
    function filterEras(eras, stakingLedger) {
        return eras.filter((era) => filterEra(era, stakingLedger));
    }
    function removeClaimed(validators, queryValidators, reward) {
        const rm = [];
        Object.keys(reward.validators).forEach((validatorId) => {
            const index = validators.indexOf(validatorId);
            if (index !== -1) {
                const valLedger = queryValidators[index].stakingLedger;
                if (valLedger?.claimedRewards.some((era) => reward.era.eq(era))) {
                    rm.push(validatorId);
                }
            }
        });
        rm.forEach((validatorId) => {
            delete reward.validators[validatorId];
        });
    }
    function filterRewards(api, eras, { migrateEra, rewards, stakingLedger }) {
        const validators = uniqValidators(rewards);
        const filter = filterEras(eras, stakingLedger);
        return api.derive.staking.queryMulti(validators, { withLedger: true }).pipe(operators_68.map((queryValidators) => rewards
            .filter(({ isEmpty }) => !isEmpty)
            .filter((reward) => {
            if (!filter.some((filter) => reward.era.eq(filter))) {
                return false;
            }
            else if (reward.era.lt(migrateEra)) {
                // we filter again here, the actual ledger may have changed, e.g. something has been claimed
                return filterEra(reward.era, stakingLedger);
            }
            reward.isStakerPayout = true;
            removeClaimed(validators, queryValidators, reward);
            return true;
        })
            .filter(({ validators }) => Object.keys(validators).length !== 0)
            .map((reward) => ({
            ...reward,
            nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
        }))));
    }
    function _stakerRewardsEras(instanceId, api) {
        return util_174.memo(instanceId, (eras, withActive) => x_rxjs_49.combineLatest([
            util_173.isFunction(api.query.staking.migrateEra)
                ? api.query.staking.migrateEra()
                : x_rxjs_49.of(api.registry.createType('Option<EraIndex>')),
            api.derive.staking._erasPoints(eras, withActive),
            api.derive.staking._erasPrefs(eras, withActive),
            api.derive.staking._erasRewards(eras, withActive)
        ]));
    }
    exports._stakerRewardsEras = _stakerRewardsEras;
    function _stakerRewards(instanceId, api) {
        return util_174.memo(instanceId, (accountId, eras, withActive) => x_rxjs_49.combineLatest([
            api.derive.staking.query(accountId, { withLedger: true }),
            api.derive.staking._stakerExposure(accountId, eras, withActive),
            api.derive.staking._stakerRewardsEras(eras, withActive)
        ]).pipe(operators_68.switchMap(([{ stakingLedger, stashId }, exposures, erasResult]) => {
            if (!stashId || !stakingLedger) {
                return x_rxjs_49.of([]);
            }
            const rewards = parseRewards(api, stashId, erasResult, exposures);
            return withActive
                ? x_rxjs_49.of(rewards)
                : filterRewards(api, eras, { migrateEra: erasResult[0].unwrapOr(ZERO), rewards, stakingLedger });
        })));
    }
    exports._stakerRewards = _stakerRewards;
    function stakerRewards(instanceId, api) {
        return util_174.memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_68.switchMap((eras) => api.derive.staking._stakerRewards(accountId, eras, withActive))));
    }
    exports.stakerRewards = stakerRewards;
    function stakerRewardsMultiEras(instanceId, api) {
        return util_174.memo(instanceId, (accountIds, eras) => accountIds.length && eras.length
            ? x_rxjs_49.combineLatest(accountIds.map((acc) => api.derive.staking._stakerRewards(acc, eras, false)))
            : x_rxjs_49.of([]));
    }
    exports.stakerRewardsMultiEras = stakerRewardsMultiEras;
    function stakerRewardsMulti(instanceId, api) {
        return util_174.memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_68.switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
    }
    exports.stakerRewardsMulti = stakerRewardsMulti;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/stakerSlashes", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_69, util_175) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stakerSlashes = exports._stakerSlashes = void 0;
    function _stakerSlashes(instanceId, api) {
        return util_175.memo(instanceId, (accountId, eras, withActive) => {
            const stakerId = api.registry.createType('AccountId', accountId).toString();
            return api.derive.staking._erasSlashes(eras, withActive).pipe(operators_69.map((slashes) => slashes.map(({ era, nominators, validators }) => ({
                era,
                total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
            }))));
        });
    }
    exports._stakerSlashes = _stakerSlashes;
    function stakerSlashes(instanceId, api) {
        return util_175.memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(operators_69.switchMap((eras) => api.derive.staking._stakerSlashes(accountId, eras, withActive))));
    }
    exports.stakerSlashes = stakerSlashes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/stashes", ["require", "exports", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, operators_70, util_176) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stashes = void 0;
    /**
     * @description Retrieve the list of all validator stashes
     */
    function stashes(instanceId, api) {
        return util_176.memo(instanceId, () => api.query.staking.validators.keys().pipe(operators_70.map((keys) => keys.map((key) => key.args[0]).filter((a) => a))));
    }
    exports.stashes = stashes;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/validators", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_50, operators_71, util_177) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validators = exports.nextElected = void 0;
    function nextElected(instanceId, api) {
        return util_177.memo(instanceId, () => api.query.staking.erasStakers
            ? api.derive.session.indexes().pipe(
            // only populate for next era in the last session, so track both here - entries are not
            // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
            operators_71.switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)), operators_71.map((keys) => keys.map((key) => key.args[1])))
            : api.query.staking.currentElected());
    }
    exports.nextElected = nextElected;
    /**
     * @description Retrieve latest list of validators
     */
    function validators(instanceId, api) {
        return util_177.memo(instanceId, () => 
        // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
        // in all actual real-world deployed chains, it does create some confusion for limited template chains
        x_rxjs_50.combineLatest([
            api.query.session
                ? api.query.session.validators()
                : x_rxjs_50.of([]),
            api.query.staking
                ? api.derive.staking.nextElected()
                : x_rxjs_50.of([])
        ]).pipe(operators_71.map(([validators, nextElected]) => ({
            nextElected: nextElected.length
                ? nextElected
                : validators,
            validators
        }))));
    }
    exports.validators = validators;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/waitingInfo", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_51, operators_72, util_178) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitingInfo = void 0;
    const DEFAULT_FLAGS = { withController: true, withPrefs: true };
    function waitingInfo(instanceId, api) {
        return util_178.memo(instanceId, (flags = DEFAULT_FLAGS) => x_rxjs_51.combineLatest([
            api.derive.staking.validators(),
            api.derive.staking.stashes()
        ]).pipe(operators_72.switchMap(([{ nextElected }, stashes]) => {
            const elected = nextElected.map((a) => a.toString());
            const waiting = stashes.filter((v) => !elected.includes(v.toString()));
            return api.derive.staking.queryMulti(waiting, flags).pipe(operators_72.map((info) => ({
                info,
                waiting
            })));
        })));
    }
    exports.waitingInfo = waitingInfo;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/staking/index", ["require", "exports", "api-derive/src/staking/account", "api-derive/src/staking/currentPoints", "api-derive/src/staking/erasExposure", "api-derive/src/staking/erasHistoric", "api-derive/src/staking/erasPoints", "api-derive/src/staking/erasPrefs", "api-derive/src/staking/erasRewards", "api-derive/src/staking/erasSlashes", "api-derive/src/staking/electedInfo", "api-derive/src/staking/keys", "api-derive/src/staking/overview", "api-derive/src/staking/ownExposure", "api-derive/src/staking/ownSlashes", "api-derive/src/staking/query", "api-derive/src/staking/stakerExposure", "api-derive/src/staking/stakerPoints", "api-derive/src/staking/stakerPrefs", "api-derive/src/staking/stakerRewards", "api-derive/src/staking/stakerSlashes", "api-derive/src/staking/stashes", "api-derive/src/staking/validators", "api-derive/src/staking/waitingInfo"], function (require, exports, account_2, currentPoints_1, erasExposure_1, erasHistoric_1, erasPoints_1, erasPrefs_1, erasRewards_1, erasSlashes_1, electedInfo_1, keys_1, overview_2, ownExposure_1, ownSlashes_1, query_1, stakerExposure_1, stakerPoints_1, stakerPrefs_1, stakerRewards_1, stakerSlashes_1, stashes_1, validators_1, waitingInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(account_2, exports);
    __exportStar(currentPoints_1, exports);
    __exportStar(erasExposure_1, exports);
    __exportStar(erasHistoric_1, exports);
    __exportStar(erasPoints_1, exports);
    __exportStar(erasPrefs_1, exports);
    __exportStar(erasRewards_1, exports);
    __exportStar(erasSlashes_1, exports);
    __exportStar(electedInfo_1, exports);
    __exportStar(keys_1, exports);
    __exportStar(overview_2, exports);
    __exportStar(ownExposure_1, exports);
    __exportStar(ownSlashes_1, exports);
    __exportStar(query_1, exports);
    __exportStar(stakerExposure_1, exports);
    __exportStar(stakerPoints_1, exports);
    __exportStar(stakerPrefs_1, exports);
    __exportStar(stakerRewards_1, exports);
    __exportStar(stakerSlashes_1, exports);
    __exportStar(stashes_1, exports);
    __exportStar(validators_1, exports);
    __exportStar(waitingInfo_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/technicalCommittee/proposals", ["require", "exports", "api-derive/src/collective/index", "api-derive/src/util/index"], function (require, exports, collective_2, util_179) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proposals = void 0;
    function proposals(instanceId, api) {
        return util_179.memo(instanceId, collective_2.proposals(instanceId, api, 'technicalCommittee'));
    }
    exports.proposals = proposals;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/technicalCommittee/index", ["require", "exports", "api-derive/src/technicalCommittee/proposals"], function (require, exports, proposals_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(proposals_4, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/treasury/proposals", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_52, operators_73, util_180) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proposals = void 0;
    function parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount }) {
        const approvals = [];
        const proposals = [];
        const councilTreasury = councilProposals.filter(({ proposal }) => api.tx.treasury.approveProposal.is(proposal) ||
            api.tx.treasury.rejectProposal.is(proposal));
        allIds.forEach((id, index) => {
            if (allProposals[index].isSome) {
                const council = councilTreasury
                    .filter(({ proposal }) => id.eq(proposal.args[0]))
                    .sort((a, b) => a.proposal.method.localeCompare(b.proposal.method));
                const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
                const derived = { council, id, proposal: allProposals[index].unwrap() };
                if (isApproval) {
                    approvals.push(derived);
                }
                else {
                    proposals.push(derived);
                }
            }
        });
        return { approvals, proposalCount, proposals };
    }
    function retrieveProposals(api, proposalCount, approvalIds) {
        const proposalIds = [];
        const count = proposalCount.toNumber();
        for (let index = 0; index < count; index++) {
            if (!approvalIds.some((id) => id.eqn(index))) {
                proposalIds.push(api.registry.createType('ProposalIndex', index));
            }
        }
        const allIds = [...proposalIds, ...approvalIds];
        return x_rxjs_52.combineLatest([
            api.query.treasury.proposals.multi(allIds),
            api.derive.council.proposals()
        ]).pipe(operators_73.map(([allProposals, councilProposals]) => parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount })));
    }
    /**
     * @description Retrieve all active and approved treasury proposals, along with their info
     */
    function proposals(instanceId, api) {
        return util_180.memo(instanceId, () => api.query.treasury
            ? x_rxjs_52.combineLatest([
                api.query.treasury.proposalCount(),
                api.query.treasury.approvals()
            ]).pipe(operators_73.switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds)))
            : x_rxjs_52.of({
                approvals: [],
                proposalCount: api.registry.createType('ProposalIndex'),
                proposals: []
            }));
    }
    exports.proposals = proposals;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/treasury/index", ["require", "exports", "api-derive/src/treasury/proposals"], function (require, exports, proposals_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(proposals_5, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/tx/events", ["require", "exports", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/util/index"], function (require, exports, x_rxjs_53, operators_74, util_181) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.events = void 0;
    function events(instanceId, api) {
        return util_181.memo(instanceId, (at) => x_rxjs_53.combineLatest([
            api.query.system.events.at(at),
            api.rpc.chain.getBlock(at)
        ]).pipe(operators_74.map(([events, block]) => ({
            block,
            events
        }))));
    }
    exports.events = events;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/tx/constants", ["require", "exports", "bn.js"], function (require, exports, bn_js_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MORTAL_PERIOD = exports.MAX_FINALITY_LAG = exports.FALLBACK_PERIOD = exports.FALLBACK_MAX_HASH_COUNT = void 0;
    bn_js_10 = __importDefault(bn_js_10);
    exports.FALLBACK_MAX_HASH_COUNT = 250;
    // default here to 5 min eras, adjusted based on the actual blocktime
    exports.FALLBACK_PERIOD = new bn_js_10.default(6 * 1000);
    exports.MAX_FINALITY_LAG = new bn_js_10.default(5);
    exports.MORTAL_PERIOD = new bn_js_10.default(5 * 60 * 1000);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/tx/signingInfo", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api-derive/src/tx/constants"], function (require, exports, util_182, x_rxjs_54, operators_75, constants_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.signingInfo = void 0;
    function latestNonce(api, address) {
        return api.derive.balances.account(address).pipe(operators_75.map(({ accountNonce }) => accountNonce));
    }
    function nextNonce(api, address) {
        return api.rpc.system?.accountNextIndex
            ? api.rpc.system.accountNextIndex(address)
            : latestNonce(api, address);
    }
    function signingHeader(api) {
        return x_rxjs_54.combineLatest([
            api.rpc.chain.getHeader(),
            api.rpc.chain.getFinalizedHead().pipe(operators_75.switchMap((hash) => api.rpc.chain.getHeader(hash)))
        ]).pipe(operators_75.map(([current, finalized]) => 
        // determine the hash to use, current when lag > max, else finalized
        current.number.unwrap().sub(finalized.number.unwrap()).gt(constants_7.MAX_FINALITY_LAG)
            ? current
            : finalized));
    }
    function signingInfo(_instanceId, api) {
        // no memo, we want to do this fresh on each run
        return (address, nonce, era) => x_rxjs_54.combineLatest([
            // retrieve nonce if none was specified
            util_182.isUndefined(nonce)
                ? latestNonce(api, address)
                : nonce === -1
                    ? nextNonce(api, address)
                    : x_rxjs_54.of(api.registry.createType('Index', nonce)),
            // if no era (create) or era > 0 (mortal), do block retrieval
            (util_182.isUndefined(era) || (util_182.isNumber(era) && era > 0))
                ? signingHeader(api)
                : x_rxjs_54.of(null)
        ]).pipe(operators_75.map(([nonce, header]) => ({
            header,
            mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || constants_7.FALLBACK_MAX_HASH_COUNT, constants_7.MORTAL_PERIOD
                .div(api.consts.babe?.expectedBlockTime || api.consts.timestamp?.minimumPeriod.muln(2) || constants_7.FALLBACK_PERIOD)
                .iadd(constants_7.MAX_FINALITY_LAG)
                .toNumber()),
            nonce
        })));
    }
    exports.signingInfo = signingInfo;
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/tx/index", ["require", "exports", "api-derive/src/tx/events", "api-derive/src/tx/signingInfo"], function (require, exports, events_3, signingInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(events_3, exports);
    __exportStar(signingInfo_1, exports);
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/index", ["require", "exports", "api-derive/src/accounts/index", "api-derive/src/balances/index", "api-derive/src/bounties/index", "api-derive/src/chain/index", "api-derive/src/contracts/index", "api-derive/src/council/index", "api-derive/src/democracy/index", "api-derive/src/elections/index", "api-derive/src/imOnline/index", "api-derive/src/parachains/index", "api-derive/src/session/index", "api-derive/src/society/index", "api-derive/src/staking/index", "api-derive/src/technicalCommittee/index", "api-derive/src/treasury/index", "api-derive/src/tx/index", "api-derive/src/type/index"], function (require, exports, accounts, balances, bounties, chain, contracts, council, democracy, elections, imOnline, parachains, session, society, staking, technicalCommittee, treasury, tx, type_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDerive = exports.derive = void 0;
    accounts = __importStar(accounts);
    balances = __importStar(balances);
    bounties = __importStar(bounties);
    chain = __importStar(chain);
    contracts = __importStar(contracts);
    council = __importStar(council);
    democracy = __importStar(democracy);
    elections = __importStar(elections);
    imOnline = __importStar(imOnline);
    parachains = __importStar(parachains);
    session = __importStar(session);
    society = __importStar(society);
    staking = __importStar(staking);
    technicalCommittee = __importStar(technicalCommittee);
    treasury = __importStar(treasury);
    tx = __importStar(tx);
    __exportStar(type_5, exports);
    exports.derive = { accounts, balances, bounties, chain, contracts, council, democracy, elections, imOnline, parachains, session, society, staking, technicalCommittee, treasury, tx };
    // Enable derive only if some of these modules are available
    const deriveAvail = {
        contracts: ['contracts'],
        council: ['council'],
        democracy: ['democracy'],
        elections: ['electionsPhragmen', 'elections'],
        imOnline: ['imOnline'],
        parachains: ['parachains', 'registrar'],
        session: ['session'],
        society: ['society'],
        staking: ['staking'],
        technicalCommittee: ['technicalCommittee'],
        treasury: ['treasury']
    };
    /**
     * Returns an object that will inject `api` into all the functions inside
     * `allSections`, and keep the object architecture of `allSections`.
     */
    /** @internal */
    function injectFunctions(instanceId, api, allSections) {
        const queryKeys = Object.keys(api.query);
        return Object
            .keys(allSections)
            .filter((sectionName) => !deriveAvail[sectionName] || deriveAvail[sectionName].some((query) => queryKeys.includes(query)))
            .reduce((deriveAcc, sectionName) => {
            const section = allSections[sectionName];
            deriveAcc[sectionName] = Object
                .keys(section)
                .reduce((sectionAcc, _methodName) => {
                const methodName = _methodName;
                // Not sure what to do here, casting as any. Though the final types are good
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call
                const method = section[methodName](instanceId, api);
                // idem
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
                sectionAcc[methodName] = method;
                return sectionAcc;
            }, {});
            return deriveAcc;
        }, {});
    }
    // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
    // For now we just drop the custom derive typings
    /** @internal */
    function decorateDerive(instanceId, api, custom = {}) {
        return {
            ...injectFunctions(instanceId, api, exports.derive),
            ...injectFunctions(instanceId, api, custom)
        };
    }
    exports.decorateDerive = decorateDerive;
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/types.jsonrpc", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/types", ["require", "exports", "rpc-core/src/types.jsonrpc"], function (require, exports, types_jsonrpc_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_jsonrpc_1, exports);
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/detectPackage", ["require", "exports", "@polkadot/util", "./package-info.json"], function (require, exports, util_183, package_info_json_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.packageInfo = void 0;
    package_info_json_3 = __importDefault(package_info_json_3);
    exports.packageInfo = package_info_json_3.default;
    util_183.detectPackage(package_info_json_3.default, typeof __dirname !== 'undefined' && __dirname);
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/base/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/submittable/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/jsonrpc", ["require", "exports", "types/src/interfaces/definitions"], function (require, exports, definitions) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    definitions = __importStar(definitions);
    const jsonrpc = {};
    Object
        .keys(definitions)
        .filter((key) => Object.keys(definitions[key].rpc || {}).length !== 0)
        .forEach((_section) => {
        jsonrpc[_section] = {};
        Object
            .entries(definitions[_section].rpc)
            .forEach(([method, def]) => {
            const isSubscription = !!def.pubsub;
            const section = def.aliasSection || _section;
            // allow for section overrides
            if (!jsonrpc[section]) {
                jsonrpc[section] = {};
            }
            jsonrpc[section][method] = ({ ...def, isSubscription, jsonrpc: `${section}_${method}`, method, section });
        });
    });
    exports.default = jsonrpc;
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/index", ["require", "exports", "types/src/index", "types/src/create/index", "types/src/interfaces/jsonrpc", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "rpc-core/src/util/index"], function (require, exports, types_111, create_2, jsonrpc_1, util_184, x_rxjs_55, operators_76, util_185) {
    "use strict";
    var _instanceId, _registryDefault, _getBlockRegistry, _storageCache;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RpcCore = void 0;
    jsonrpc_1 = __importDefault(jsonrpc_1);
    const l = util_184.logger('rpc-core');
    const EMPTY_META = {
        fallback: undefined,
        modifier: { isOptional: true },
        type: {
            asMap: { linked: { isTrue: false } },
            isMap: false
        }
    };
    // utility method to create a nicely-formatted error
    /** @internal */
    function logErrorMessage(method, { params, type }, error) {
        const inputs = params.map(({ isOptional, name, type }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
        l.error(`${method}(${inputs}): ${type}:: ${error.message}`);
    }
    function isTreatAsHex(key) {
        // :code is problematic - it does not have the length attached, which is
        // unlike all other storage entries where it is indeed properly encoded
        return ['0x3a636f6465'].includes(key.toHex());
    }
    /**
     * @name Rpc
     * @summary The API may use a HTTP or WebSockets provider.
     * @description It allows for querying a Polkadot Client Node.
     * WebSockets provider is recommended since HTTP provider only supports basic querying.
     *
     * ```mermaid
     * graph LR;
     *   A[Api] --> |WebSockets| B[WsProvider];
     *   B --> |endpoint| C[ws://127.0.0.1:9944]
     * ```
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Rpc from '@polkadot/rpc-core';
     * import { WsProvider } from '@polkadot/rpc-provider/ws';
     *
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     * ```
     */
    class RpcCore {
        /**
         * @constructor
         * Default constructor for the Api Object
         * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
         */
        constructor(instanceId, registry, provider, userRpc = {}) {
            _instanceId.set(this, void 0);
            _registryDefault.set(this, void 0);
            _getBlockRegistry.set(this, void 0);
            _storageCache.set(this, new Map());
            this.mapping = new Map();
            this.sections = [];
            // eslint-disable-next-line @typescript-eslint/unbound-method
            util_184.assert(provider && util_184.isFunction(provider.send), 'Expected Provider to API create');
            __classPrivateFieldSet(this, _instanceId, instanceId);
            __classPrivateFieldSet(this, _registryDefault, registry);
            this.provider = provider;
            const sectionNames = Object.keys(jsonrpc_1.default);
            // these are the base keys (i.e. part of jsonrpc)
            this.sections.push(...sectionNames);
            this.addUserInterfaces(userRpc);
        }
        /**
         * @description Returns the connected status of a provider
         */
        get isConnected() {
            return this.provider.isConnected;
        }
        /**
         * @description Manually connect from the attached provider
         */
        connect() {
            return this.provider.connect();
        }
        /**
         * @description Manually disconnect from the attached provider
         */
        disconnect() {
            return this.provider.disconnect();
        }
        /**
         * @description Sets a registry swap (typically from Api)
         */
        setRegistrySwap(registrySwap) {
            __classPrivateFieldSet(this, _getBlockRegistry, registrySwap);
        }
        addUserInterfaces(userRpc) {
            // add any extra user-defined sections
            this.sections.push(...Object.keys(userRpc).filter((key) => !this.sections.includes(key)));
            // decorate the sections with base and user methods
            this.sections.forEach((sectionName) => {
                var _a, _b;
                (_a = this)[_b = sectionName] || (_a[_b] = {});
                const section = this[sectionName];
                Object
                    .entries({
                    ...this._createInterface(sectionName, jsonrpc_1.default[sectionName] || {}),
                    ...this._createInterface(sectionName, userRpc[sectionName] || {})
                })
                    .forEach(([key, value]) => {
                    section[key] || (section[key] = value);
                });
            });
        }
        _createInterface(section, methods) {
            return Object
                .entries(methods)
                .filter(([method, { endpoint }]) => !this.mapping.has(endpoint || `${section}_${method}`))
                .reduce((exposed, [method, { endpoint }]) => {
                const def = methods[method];
                const isSubscription = !!def.pubsub;
                const jsonrpc = endpoint || `${section}_${method}`;
                this.mapping.set(jsonrpc, { ...def, isSubscription, jsonrpc, method, section });
                // FIXME Remove any here
                // To do so, remove `RpcInterfaceMethod` from './types.ts', and refactor
                // every method inside this class to take:
                // `<S extends keyof RpcInterface, M extends keyof RpcInterface[S]>`
                // Not doing so, because it makes this class a little bit less readable,
                // and leaving it as-is doesn't harm much
                exposed[method] = isSubscription
                    ? this._createMethodSubscribe(section, method, def)
                    : this._createMethodSend(section, method, def);
                return exposed;
            }, {});
        }
        _memomize(creator) {
            const memoized = util_184.memoize(creator('scale'), {
                getInstanceId: () => __classPrivateFieldGet(this, _instanceId)
            });
            memoized.json = creator('json');
            memoized.raw = creator('raw');
            return memoized;
        }
        _createMethodSend(section, method, def) {
            const rpcName = def.endpoint || `${section}_${method}`;
            const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
            const cacheIndex = def.params.findIndex(({ isCached }) => isCached);
            let memoized = null;
            // execute the RPC call, doing a registry swap for historic as applicable
            const callWithRegistry = async (outputAs, values) => {
                const hash = hashIndex === -1
                    ? undefined
                    : values[hashIndex];
                const { registry } = hash && __classPrivateFieldGet(this, _getBlockRegistry)
                    ? await __classPrivateFieldGet(this, _getBlockRegistry).call(this, hash)
                    : { registry: __classPrivateFieldGet(this, _registryDefault) };
                const params = this._formatInputs(registry, def, values);
                const data = await this.provider.send(rpcName, params.map((param) => param.toJSON()));
                return outputAs === 'scale'
                    ? this._formatOutput(registry, method, def, params, data)
                    : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', data);
            };
            const creator = (outputAs) => (...values) => {
                const isDelayed = (hashIndex !== -1 && !!values[hashIndex]) || (cacheIndex !== -1 && !!values[cacheIndex]);
                return new x_rxjs_55.Observable((observer) => {
                    callWithRegistry(outputAs, values)
                        .then((value) => {
                        observer.next(value);
                        observer.complete();
                    })
                        .catch((error) => {
                        logErrorMessage(method, def, error);
                        observer.error(error);
                        observer.complete();
                    });
                    return () => {
                        // delete old results from cache
                        memoized?.unmemoize(...values);
                    };
                }).pipe(operators_76.publishReplay(1), // create a Replay(1)
                isDelayed
                    ? util_185.refCountDelay() // Unsubscribe after delay
                    : operators_76.refCount());
            };
            memoized = this._memomize(creator);
            return memoized;
        }
        // create a subscriptor, it subscribes once and resolves with the id as subscribe
        _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
            return new Promise((resolve, reject) => {
                this.provider
                    .subscribe(subType, subName, paramsJson, update)
                    .then(resolve)
                    .catch((error) => {
                    errorHandler(error);
                    reject(error);
                });
            });
        }
        _createMethodSubscribe(section, method, def) {
            const [updateType, subMethod, unsubMethod] = def.pubsub;
            const subName = `${section}_${subMethod}`;
            const unsubName = `${section}_${unsubMethod}`;
            const subType = `${section}_${updateType}`;
            let memoized = null;
            const creator = (outputAs) => (...values) => {
                return new x_rxjs_55.Observable((observer) => {
                    // Have at least an empty promise, as used in the unsubscribe
                    let subscriptionPromise = Promise.resolve(null);
                    const registry = __classPrivateFieldGet(this, _registryDefault);
                    const errorHandler = (error) => {
                        logErrorMessage(method, def, error);
                        observer.error(error);
                    };
                    try {
                        const params = this._formatInputs(registry, def, values);
                        const paramsJson = params.map((param) => param.toJSON());
                        const update = (error, result) => {
                            if (error) {
                                logErrorMessage(method, def, error);
                                return;
                            }
                            try {
                                observer.next(outputAs === 'scale'
                                    ? this._formatOutput(registry, method, def, params, result)
                                    : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', result));
                            }
                            catch (error) {
                                observer.error(error);
                            }
                        };
                        subscriptionPromise = this._createSubscriber({ paramsJson, subName, subType, update }, errorHandler);
                    }
                    catch (error) {
                        errorHandler(error);
                    }
                    // Teardown logic
                    return () => {
                        // Delete from cache, so old results don't hang around
                        memoized?.unmemoize(...values);
                        // Unsubscribe from provider
                        subscriptionPromise
                            .then((subscriptionId) => util_184.isNull(subscriptionId)
                            ? Promise.resolve(false)
                            : this.provider.unsubscribe(subType, unsubName, subscriptionId))
                            .catch((error) => logErrorMessage(method, def, error));
                    };
                }).pipe(util_185.drr());
            };
            memoized = this._memomize(creator);
            return memoized;
        }
        _formatInputs(registry, def, inputs) {
            const reqArgCount = def.params.filter(({ isOptional }) => !isOptional).length;
            const optText = reqArgCount === def.params.length
                ? ''
                : ` (${def.params.length - reqArgCount} optional)`;
            util_184.assert(inputs.length >= reqArgCount && inputs.length <= def.params.length, `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
            return inputs.map((input, index) => create_2.createTypeUnsafe(registry, def.params[index].type, [input]));
        }
        _formatOutput(registry, method, rpc, params, result) {
            if (rpc.type === 'StorageData') {
                const key = params[0];
                return this._formatStorageData(registry, key, result);
            }
            else if (rpc.type === 'StorageChangeSet') {
                const keys = params[0];
                return keys
                    ? this._formatStorageSet(registry, keys, result.changes)
                    : registry.createType('StorageChangeSet', result);
            }
            else if (rpc.type === 'Vec<StorageChangeSet>') {
                const mapped = result.map(({ block, changes }) => [
                    registry.createType('Hash', block),
                    this._formatStorageSet(registry, params[0], changes)
                ]);
                // we only query at a specific block, not a range - flatten
                return method === 'queryStorageAt'
                    ? mapped[0][1]
                    : mapped;
            }
            return create_2.createTypeUnsafe(registry, rpc.type, [result]);
        }
        _formatStorageData(registry, key, value) {
            const isEmpty = util_184.isNull(value);
            // we convert to Uint8Array since it maps to the raw encoding, all
            // data will be correctly encoded (incl. numbers, excl. :code)
            const input = isEmpty
                ? null
                : isTreatAsHex(key)
                    ? value
                    : util_184.u8aToU8a(value);
            return this._newType(registry, key, input, isEmpty);
        }
        _formatStorageSet(registry, keys, changes) {
            // For StorageChangeSet, the changes has the [key, value] mappings
            const withCache = keys.length !== 1;
            // multiple return values (via state.storage subscription), decode the values
            // one at a time, all based on the query types. Three values can be returned -
            //   - Codec - There is a valid value, non-empty
            //   - null - The storage key is empty
            return keys.reduce((results, key, index) => {
                results.push(this._formatStorageSetEntry(registry, key, changes, withCache, index));
                return results;
            }, []);
        }
        _formatStorageSetEntry(registry, key, changes, witCache, entryIndex) {
            const hexKey = key.toHex();
            const found = changes.find(([key]) => key === hexKey);
            // if we don't find the value, this is our fallback
            //   - in the case of an array of values, fill the hole from the cache
            //   - if a single result value, don't fill - it is not an update hole
            //   - fallback to an empty option in all cases
            const value = util_184.isUndefined(found)
                ? (witCache && __classPrivateFieldGet(this, _storageCache).get(hexKey)) || null
                : found[1];
            const isEmpty = util_184.isNull(value);
            const input = isEmpty || isTreatAsHex(key)
                ? value
                : util_184.u8aToU8a(value);
            // store the retrieved result - the only issue with this cache is that there is no
            // clearing of it, so very long running processes (not just a couple of hours, longer)
            // will increase memory beyond what is allowed.
            __classPrivateFieldGet(this, _storageCache).set(hexKey, value);
            return this._newType(registry, key, input, isEmpty, entryIndex);
        }
        _newType(registry, key, input, isEmpty, entryIndex = -1) {
            // single return value (via state.getStorage), decode the value based on the
            // outputType that we have specified. Fallback to Raw on nothing
            const type = key.outputType || 'Raw';
            const meta = key.meta || EMPTY_META;
            const entryNum = entryIndex === -1
                ? ''
                : ` entry ${entryIndex}:`;
            if (meta.modifier.isOptional) {
                let inner = null;
                if (!isEmpty) {
                    try {
                        inner = create_2.createTypeUnsafe(registry, type, [input], { isPedantic: true });
                    }
                    catch (error) {
                        l.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}`, error.message);
                    }
                }
                return new types_111.Option(registry, create_2.createClass(registry, type), inner);
            }
            try {
                return create_2.createTypeUnsafe(registry, type, [
                    isEmpty
                        ? meta.fallback
                            ? util_184.hexToU8a(meta.fallback.toHex())
                            : undefined
                        : input
                ], { isPedantic: true });
            }
            catch (error) {
                l.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}`, error.message);
                return registry.createType('Raw', input);
            }
        }
    }
    exports.RpcCore = RpcCore;
    _instanceId = new WeakMap(), _registryDefault = new WeakMap(), _getBlockRegistry = new WeakMap(), _storageCache = new WeakMap();
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/http/index", ["require", "exports", "@polkadot/util", "@polkadot/x-fetch", "rpc-provider/src/coder/index", "rpc-provider/src/defaults"], function (require, exports, util_186, x_fetch_1, coder_2, defaults_2) {
    "use strict";
    var _coder, _endpoint, _headers;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpProvider = void 0;
    defaults_2 = __importDefault(defaults_2);
    const ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';
    const l = util_186.logger('api-http');
    /**
     * # @polkadot/rpc-provider/https
     *
     * @name HttpProvider
     *
     * @description The HTTP Provider allows sending requests using HTTP to a HTTP RPC server TCP port. It does not support subscriptions so you won't be able to listen to events such as new blocks or balance changes. It is usually preferrable using the [[WsProvider]].
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     * import HttpProvider from '@polkadot/rpc-provider/http';
     *
     * const provider = new HttpProvider('http://127.0.0.1:9933');
     * const api = new Api(provider);
     * ```
     *
     * @see [[WsProvider]]
     */
    class HttpProvider {
        /**
         * @param {string} endpoint The endpoint url starting with http://
         */
        constructor(endpoint = defaults_2.default.HTTP_URL, headers = {}) {
            _coder.set(this, void 0);
            _endpoint.set(this, void 0);
            _headers.set(this, void 0);
            util_186.assert(/^(https|http):\/\//.test(endpoint), `Endpoint should start with 'http://', received '${endpoint}'`);
            __classPrivateFieldSet(this, _coder, new coder_2.RpcCoder());
            __classPrivateFieldSet(this, _endpoint, endpoint);
            __classPrivateFieldSet(this, _headers, headers);
        }
        /**
         * @summary `true` when this provider supports subscriptions
         */
        get hasSubscriptions() {
            return false;
        }
        /**
         * @description Returns a clone of the object
         */
        clone() {
            throw new Error('Unimplemented');
        }
        /**
         * @description Manually connect from the connection
         */
        async connect() {
            // noop
        }
        /**
         * @description Manually disconnect from the connection
         */
        async disconnect() {
            // noop
        }
        /**
         * @summary Whether the node is connected or not.
         * @return {boolean} true if connected
         */
        get isConnected() {
            return true;
        }
        /**
         * @summary Events are not supported with the HttpProvider, see [[WsProvider]].
         * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        on(type, sub) {
            l.error('HTTP Provider does not have \'on\' emitters, use WebSockets instead');
            return () => {
                // noop
            };
        }
        /**
         * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.
         */
        async send(method, params) {
            const body = __classPrivateFieldGet(this, _coder).encodeJson(method, params);
            const response = await x_fetch_1.fetch(__classPrivateFieldGet(this, _endpoint), {
                body,
                headers: {
                    Accept: 'application/json',
                    'Content-Length': `${body.length}`,
                    'Content-Type': 'application/json',
                    ...__classPrivateFieldGet(this, _headers)
                },
                method: 'POST'
            });
            util_186.assert(response.ok, `[${response.status}]: ${response.statusText}`);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const result = await response.json();
            return __classPrivateFieldGet(this, _coder).decodeResponse(result);
        }
        /**
         * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await
        async subscribe(types, method, params, cb) {
            l.error(ERROR_SUBSCRIBE);
            throw new Error(ERROR_SUBSCRIBE);
        }
        /**
         * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await
        async unsubscribe(type, method, id) {
            l.error(ERROR_SUBSCRIBE);
            throw new Error(ERROR_SUBSCRIBE);
        }
    }
    exports.HttpProvider = HttpProvider;
    _coder = new WeakMap(), _endpoint = new WeakMap(), _headers = new WeakMap();
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/index", ["require", "exports", "rpc-provider/src/http/index", "rpc-provider/src/ws/index"], function (require, exports, http_1, ws_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WsProvider = exports.HttpProvider = void 0;
    Object.defineProperty(exports, "HttpProvider", { enumerable: true, get: function () { return http_1.HttpProvider; } });
    Object.defineProperty(exports, "WsProvider", { enumerable: true, get: function () { return ws_1.WsProvider; } });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/decorate", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateSections = void 0;
    // A technically unsafe version of Object.keys(obj) that assumes that
    // obj only has known properties of T
    function keys(obj) {
        return Object.keys(obj);
    }
    /**
     * This is a methods decorator which keeps all type information.
     */
    function decorateMethods(section, decorateMethod) {
        return keys(section).reduce((acc, methodName) => {
            const method = section[methodName];
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            acc[methodName] = decorateMethod(method);
            return acc;
        }, {});
    }
    /**
     * This is a section decorator which keeps all type information.
     */
    function decorateSections(allSections, decorateMethod) {
        return keys(allSections).reduce((acc, sectionName) => {
            acc[sectionName] = decorateMethods(allSections[sectionName], decorateMethod);
            return acc;
        }, {});
    }
    exports.decorateSections = decorateSections;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/logging", ["require", "exports", "@polkadot/util"], function (require, exports, util_187) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.l = void 0;
    exports.l = util_187.logger('api/util');
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/filterEvents", ["require", "exports", "api/src/util/logging"], function (require, exports, logging_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filterEvents = void 0;
    function filterEvents(extHash, { block: { extrinsics, header } }, allEvents, status) {
        // extrinsics to hashes
        const myHash = extHash.toHex();
        const allHashes = extrinsics.map((ext) => ext.hash.toHex());
        // find the index of our extrinsic in the block
        const index = allHashes.indexOf(myHash);
        // if we do get the block after finalized, it _should_ be there
        if (index === -1) {
            // only warn on filtering with isInBlock (finalization finalizes after)
            if (status.isInBlock) {
                logging_1.l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);
            }
            return;
        }
        return allEvents.filter(({ phase }) => 
        // only ApplyExtrinsic has the extrinsic index
        phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));
    }
    exports.filterEvents = filterEvents;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/isKeyringPair", ["require", "exports", "@polkadot/util"], function (require, exports, util_188) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isKeyringPair = void 0;
    function isKeyringPair(account) {
        return util_188.isFunction(account.sign);
    }
    exports.isKeyringPair = isKeyringPair;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/index", ["require", "exports", "api/src/util/decorate", "api/src/util/filterEvents", "api/src/util/isKeyringPair", "api/src/util/logging"], function (require, exports, decorate_3, filterEvents_1, isKeyringPair_1, logging_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.l = exports.isKeyringPair = exports.filterEvents = void 0;
    __exportStar(decorate_3, exports);
    Object.defineProperty(exports, "filterEvents", { enumerable: true, get: function () { return filterEvents_1.filterEvents; } });
    Object.defineProperty(exports, "isKeyringPair", { enumerable: true, get: function () { return isKeyringPair_1.isKeyringPair; } });
    Object.defineProperty(exports, "l", { enumerable: true, get: function () { return logging_2.l; } });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/submittable/Result", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubmittableResult = void 0;
    const recordIdentity = (record) => record;
    function filterAndApply(events, section, methods, onFound) {
        return events
            .filter(({ event }) => section === event.section && methods.includes(event.method))
            .map((record) => onFound(record));
    }
    function extractError(events = []) {
        return filterAndApply(events, 'system', ['ExtrinsicFailed'], ({ event: { data } }) => data[0])[0];
    }
    function extractInfo(events = []) {
        return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], ({ event: { data, method } }) => method === 'ExtrinsicSuccess'
            ? data[0]
            : data[1])[0];
    }
    class SubmittableResult {
        constructor({ dispatchError, dispatchInfo, events, status }) {
            this.dispatchError = dispatchError || extractError(events);
            this.dispatchInfo = dispatchInfo || extractInfo(events);
            this.events = events || [];
            this.status = status;
        }
        get isCompleted() {
            return this.isError || this.status.isInBlock || this.status.isFinalized;
        }
        get isError() {
            return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
        }
        get isFinalized() {
            return this.status.isFinalized;
        }
        get isInBlock() {
            return this.status.isInBlock;
        }
        get isWarning() {
            return this.status.isRetracted;
        }
        /**
         * @description Filters EventRecords for the specified method & section (there could be multiple)
         */
        filterRecords(section, method) {
            return filterAndApply(this.events, section, [method], recordIdentity);
        }
        /**
         * @description Finds an EventRecord for the specified method & section
         */
        findRecord(section, method) {
            return this.filterRecords(section, method)[0];
        }
        /**
         * @description Creates a human representation of the output
         */
        toHuman(isExtended) {
            return {
                dispatchError: this.dispatchError?.toHuman(),
                dispatchInfo: this.dispatchInfo?.toHuman(),
                events: this.events.map((event) => event.toHuman(isExtended)),
                status: this.status.toHuman(isExtended)
            };
        }
    }
    exports.SubmittableResult = SubmittableResult;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/submittable/createClass", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api/src/util/index", "api/src/submittable/Result"], function (require, exports, util_189, x_rxjs_56, operators_77, util_190, Result_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createClass = void 0;
    const identity = (input) => input;
    function createClass({ api, apiType, decorateMethod }) {
        var _ignoreStatusCb, _transformResult, _makeEraOptions, _makeSignOptions, _makeSignAndSendOptions, _observeSign, _observeStatus, _observeSend, _observeSubscribe, _optionsOrNonce, _signViaSigner, _updateSigner;
        // an instance of the base extrinsic for us to extend
        const ExtrinsicBase = api.registry.createClass('Extrinsic');
        class Submittable extends ExtrinsicBase {
            constructor(registry, extrinsic) {
                super(registry, extrinsic, { version: api.extrinsicType });
                _ignoreStatusCb.set(this, void 0);
                _transformResult.set(this, identity);
                _makeEraOptions.set(this, (options, { header, mortalLength, nonce }) => {
                    if (!header) {
                        if (util_189.isNumber(options.era)) {
                            // since we have no header, it is immortal, remove any option overrides
                            // so we only supply the genesisHash and no era to the construction
                            delete options.era;
                            delete options.blockHash;
                        }
                        return __classPrivateFieldGet(this, _makeSignOptions).call(this, options, { nonce });
                    }
                    return __classPrivateFieldGet(this, _makeSignOptions).call(this, options, {
                        blockHash: header.hash,
                        era: this.registry.createType('ExtrinsicEra', {
                            current: header.number,
                            period: options.era || mortalLength
                        }),
                        nonce
                    });
                });
                _makeSignOptions.set(this, (options, extras) => {
                    return {
                        blockHash: api.genesisHash,
                        genesisHash: api.genesisHash,
                        ...options,
                        ...extras,
                        runtimeVersion: api.runtimeVersion,
                        signedExtensions: api.registry.signedExtensions,
                        version: api.extrinsicType
                    };
                });
                _makeSignAndSendOptions.set(this, (optionsOrStatus, statusCb) => {
                    let options = {};
                    if (util_189.isFunction(optionsOrStatus)) {
                        statusCb = optionsOrStatus;
                    }
                    else {
                        options = { ...optionsOrStatus };
                    }
                    return [options, statusCb];
                });
                _observeSign.set(this, (account, optionsOrNonce) => {
                    const address = util_190.isKeyringPair(account) ? account.address : account.toString();
                    const options = __classPrivateFieldGet(this, _optionsOrNonce).call(this, optionsOrNonce);
                    let updateId;
                    return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(operators_77.first(), operators_77.mergeMap(async (signingInfo) => {
                        const eraOptions = __classPrivateFieldGet(this, _makeEraOptions).call(this, options, signingInfo);
                        if (util_190.isKeyringPair(account)) {
                            this.sign(account, eraOptions);
                        }
                        else {
                            updateId = await __classPrivateFieldGet(this, _signViaSigner).call(this, address, eraOptions, signingInfo.header);
                        }
                    }), operators_77.mapTo(updateId));
                });
                _observeStatus.set(this, (hash, status) => {
                    if (!status.isFinalized && !status.isInBlock) {
                        return x_rxjs_56.of(__classPrivateFieldGet(this, _transformResult).call(this, new Result_2.SubmittableResult({ status })));
                    }
                    const blockHash = status.isInBlock
                        ? status.asInBlock
                        : status.asFinalized;
                    return api.derive.tx.events(blockHash).pipe(operators_77.map(({ block, events }) => __classPrivateFieldGet(this, _transformResult).call(this, new Result_2.SubmittableResult({
                        events: util_190.filterEvents(hash, block, events, status),
                        status
                    }))));
                });
                _observeSend.set(this, (updateId = -1) => {
                    return api.rpc.author.submitExtrinsic(this).pipe(operators_77.tap((hash) => {
                        __classPrivateFieldGet(this, _updateSigner).call(this, updateId, hash);
                    }));
                });
                _observeSubscribe.set(this, (updateId = -1) => {
                    const hash = this.hash;
                    return api.rpc.author.submitAndWatchExtrinsic(this).pipe(operators_77.switchMap((status) => __classPrivateFieldGet(this, _observeStatus).call(this, hash, status)), operators_77.tap((status) => {
                        __classPrivateFieldGet(this, _updateSigner).call(this, updateId, status);
                    }));
                }
                // NOTE here we actually override nonce if it was specified (backwards compat for
                // the previous signature - don't let user space break, but allow then time to upgrade)
                );
                // NOTE here we actually override nonce if it was specified (backwards compat for
                // the previous signature - don't let user space break, but allow then time to upgrade)
                _optionsOrNonce.set(this, (optionsOrNonce = {}) => {
                    return util_189.isBn(optionsOrNonce) || util_189.isNumber(optionsOrNonce)
                        ? { nonce: optionsOrNonce }
                        : optionsOrNonce;
                });
                _signViaSigner.set(this, async (address, options, header) => {
                    const signer = options.signer || api.signer;
                    util_189.assert(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
                    const payload = this.registry.createType('SignerPayload', {
                        ...options,
                        address,
                        blockNumber: header ? header.number : 0,
                        method: this.method
                    });
                    let result;
                    if (signer.signPayload) {
                        result = await signer.signPayload(payload.toPayload());
                    }
                    else if (signer.signRaw) {
                        result = await signer.signRaw(payload.toRaw());
                    }
                    else {
                        throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
                    }
                    // Here we explicitly call `toPayload()` again instead of working with an object
                    // (reference) as passed to the signer. This means that we are sure that the
                    // payload data is not modified from our inputs, but the signer
                    super.addSignature(address, result.signature, payload.toPayload());
                    return result.id;
                });
                _updateSigner.set(this, (updateId, status) => {
                    if ((updateId !== -1) && api.signer && api.signer.update) {
                        api.signer.update(updateId, status);
                    }
                });
                __classPrivateFieldSet(this, _ignoreStatusCb, apiType === 'rxjs');
            }
            // dry run an extrinsic
            dryRun(account, optionsOrHash) {
                if (util_189.isString(optionsOrHash) || util_189.isU8a(optionsOrHash)) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), optionsOrHash));
                }
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => __classPrivateFieldGet(this, _observeSign).call(this, account, optionsOrHash).pipe(operators_77.switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
            }
            // calculate the payment info for this transaction (if signed and submitted)
            paymentInfo(account, optionsOrHash) {
                if (util_189.isString(optionsOrHash) || util_189.isU8a(optionsOrHash)) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), optionsOrHash));
                }
                const [allOptions] = __classPrivateFieldGet(this, _makeSignAndSendOptions).call(this, optionsOrHash);
                const address = util_190.isKeyringPair(account) ? account.address : account.toString();
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(operators_77.first(), operators_77.switchMap((signingInfo) => {
                    // setup our options (same way as in signAndSend)
                    const eraOptions = __classPrivateFieldGet(this, _makeEraOptions).call(this, allOptions, signingInfo);
                    const signOptions = __classPrivateFieldGet(this, _makeSignOptions).call(this, eraOptions, {});
                    this.signFake(address, signOptions);
                    return api.rpc.payment.queryInfo(this.toHex());
                })))();
            }
            // send implementation for both immediate Hash and statusCb variants
            send(statusCb) {
                const isSubscription = api.hasSubscriptions && (__classPrivateFieldGet(this, _ignoreStatusCb) || !!statusCb);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(isSubscription
                    ? __classPrivateFieldGet(this, _observeSubscribe) : __classPrivateFieldGet(this, _observeSend))(statusCb);
            }
            /**
             * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)
             * @deprecated
             */
            sign(account, optionsOrNonce) {
                super.sign(account, __classPrivateFieldGet(this, _makeSignOptions).call(this, __classPrivateFieldGet(this, _optionsOrNonce).call(this, optionsOrNonce), {}));
                return this;
            }
            /**
             * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
             */
            signAsync(account, optionsOrNonce) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => __classPrivateFieldGet(this, _observeSign).call(this, account, optionsOrNonce).pipe(operators_77.mapTo(this)))();
            }
            // signAndSend implementation for all 3 cases above
            signAndSend(account, optionsOrStatus, optionalStatusCb) {
                const [options, statusCb] = __classPrivateFieldGet(this, _makeSignAndSendOptions).call(this, optionsOrStatus, optionalStatusCb);
                const isSubscription = api.hasSubscriptions && (__classPrivateFieldGet(this, _ignoreStatusCb) || !!statusCb);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => __classPrivateFieldGet(this, _observeSign).call(this, account, options).pipe(operators_77.switchMap((updateId) => isSubscription
                    ? __classPrivateFieldGet(this, _observeSubscribe).call(this, updateId)
                    : __classPrivateFieldGet(this, _observeSend).call(this, updateId))) // FIXME This is wrong, SubmittableResult is _not_ a codec
                )(statusCb);
            }
            // adds a transform to the result, applied before result is returned
            withResultTransform(transform) {
                __classPrivateFieldSet(this, _transformResult, transform);
                return this;
            }
        }
        _ignoreStatusCb = new WeakMap(), _transformResult = new WeakMap(), _makeEraOptions = new WeakMap(), _makeSignOptions = new WeakMap(), _makeSignAndSendOptions = new WeakMap(), _observeSign = new WeakMap(), _observeStatus = new WeakMap(), _observeSend = new WeakMap(), _observeSubscribe = new WeakMap(), _optionsOrNonce = new WeakMap(), _signViaSigner = new WeakMap(), _updateSigner = new WeakMap();
        return Submittable;
    }
    exports.createClass = createClass;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/submittable/createSubmittable", ["require", "exports", "api/src/submittable/createClass"], function (require, exports, createClass_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSubmittable = void 0;
    function createSubmittable(apiType, api, decorateMethod) {
        const Submittable = createClass_5.createClass({ api, apiType, decorateMethod });
        return (extrinsic) => new Submittable(api.registry, extrinsic);
    }
    exports.createSubmittable = createSubmittable;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/submittable/index", ["require", "exports", "api/src/submittable/createSubmittable", "api/src/submittable/Result"], function (require, exports, createSubmittable_1, Result_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubmittableResult = exports.createSubmittable = void 0;
    Object.defineProperty(exports, "createSubmittable", { enumerable: true, get: function () { return createSubmittable_1.createSubmittable; } });
    Object.defineProperty(exports, "SubmittableResult", { enumerable: true, get: function () { return Result_3.SubmittableResult; } });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/augmentObject", ["require", "exports", "@polkadot/util"], function (require, exports, util_191) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.augmentObject = void 0;
    const l = util_191.logger('api/augment');
    function logLength(type, values, and = []) {
        return values.length
            ? ` ${values.length} ${type}${and.length ? ' and' : ''}`
            : '';
    }
    function logValues(type, values) {
        return values.length
            ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}`
            : '';
    }
    // log details to console
    function warn(prefix, type, [added, removed]) {
        if (added.length || removed.length) {
            l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
        }
    }
    function extractKeys(src, dst) {
        return [Object.keys(src), Object.keys(dst)];
    }
    function findSectionExcludes(a, b) {
        return a.filter((section) => !b.includes(section));
    }
    function extractSections(src, dst) {
        const [srcSections, dstSections] = extractKeys(src, dst);
        return [
            findSectionExcludes(srcSections, dstSections),
            findSectionExcludes(dstSections, srcSections)
        ];
    }
    function findMethodExcludes(src, dst) {
        const srcSections = Object.keys(src);
        const dstSections = Object.keys(dst);
        return dstSections
            .filter((section) => srcSections.includes(section))
            .reduce((rmMethods, section) => {
            const srcMethods = Object.keys(src[section]);
            return rmMethods.concat(...Object
                .keys(dst[section])
                .filter((method) => !srcMethods.includes(method))
                .map((method) => `${section}.${method}`));
        }, []);
    }
    function extractMethods(src, dst) {
        return [
            findMethodExcludes(dst, src),
            findMethodExcludes(src, dst)
        ];
    }
    /**
     * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
     * already available, but rather just adds new missing ites into the result object.
     * @internal
     */
    function augmentObject(prefix, src, dst, fromEmpty = false) {
        if (fromEmpty) {
            Object.keys(dst).forEach((key) => {
                delete dst[key];
            });
        }
        if (prefix && Object.keys(dst).length) {
            warn(prefix, 'modules', extractSections(src, dst));
            warn(prefix, 'calls', extractMethods(src, dst));
        }
        return Object
            .keys(src)
            .reduce((newSection, sectionName) => {
            const section = src[sectionName];
            newSection[sectionName] = Object
                .keys(section)
                .reduce((result, methodName) => {
                // TODO When it does match, check the actual details and warn when there are differences
                if (!result[methodName]) {
                    result[methodName] = section[methodName];
                }
                return result;
            }, dst[sectionName] || {});
            return newSection;
        }, dst);
    }
    exports.augmentObject = augmentObject;
});
// Copyright 2017-2019 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/validate", ["require", "exports", "@polkadot/util"], function (require, exports, util_192) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractStorageArgs = void 0;
    function sig({ method, section }, ...args) {
        return `${section}.${method}(${args.join(', ')})`;
    }
    function doDoubleMap(creator, args) {
        const { key1, key2 } = creator.meta.type.asDoubleMap;
        util_192.assert(args.length === 2, `${sig(creator, key1, key2)} is a doublemap, requiring 2 arguments, ${args.length} found`);
        // pass as tuple
        return [creator, args];
    }
    function doMap(creator, args) {
        const { key } = creator.meta.type.asMap;
        util_192.assert(args.length === 1, `${sig(creator, key)} is a map, requiring 1 argument, ${args.length} found`);
        // expand
        return args.length
            ? [creator, args[0]]
            : [creator];
    }
    // sets up the arguments in the form of [creator, args] ready to be used in a storage
    // call. Additionally, it verifies that the correct number of arguments have been passed
    function extractStorageArgs(creator, _args) {
        const args = _args.filter((arg) => !util_192.isUndefined(arg));
        if (creator.meta.type.isDoubleMap) {
            return doDoubleMap(creator, args);
        }
        else if (creator.meta.type.isMap) {
            return doMap(creator, args);
        }
        util_192.assert(args.length === 0, `${sig(creator)} does not take any arguments, ${args.length} found`);
        // no args
        return [creator];
    }
    exports.extractStorageArgs = extractStorageArgs;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/base/Events", ["require", "exports", "eventemitter3"], function (require, exports, eventemitter3_2) {
    "use strict";
    var _eventemitter;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Events = void 0;
    eventemitter3_2 = __importDefault(eventemitter3_2);
    class Events {
        constructor() {
            _eventemitter.set(this, new eventemitter3_2.default());
        }
        emit(type, ...args) {
            return __classPrivateFieldGet(this, _eventemitter).emit(type, ...args);
        }
        /**
         * @description Attach an eventemitter handler to listen to a specific event
         *
         * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
         * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.on('connected', (): void => {
         *   console.log('API has been connected to the endpoint');
         * });
         *
         * api.on('disconnected', (): void => {
         *   console.log('API has been disconnected from the endpoint');
         * });
         * ```
         */
        on(type, handler) {
            __classPrivateFieldGet(this, _eventemitter).on(type, handler);
            return this;
        }
        /**
         * @description Remove the given eventemitter handler
         *
         * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
         * @param handler The callback to unregister.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * const handler = (): void => {
         *  console.log('Connected !);
         * };
         *
         * // Start listening
         * api.on('connected', handler);
         *
         * // Stop listening
         * api.off('connected', handler);
         * ```
         */
        off(type, handler) {
            __classPrivateFieldGet(this, _eventemitter).removeListener(type, handler);
            return this;
        }
        /**
         * @description Attach an one-time eventemitter handler to listen to a specific event
         *
         * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
         * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.once('connected', (): void => {
         *   console.log('API has been connected to the endpoint');
         * });
         *
         * api.once('disconnected', (): void => {
         *   console.log('API has been disconnected from the endpoint');
         * });
         * ```
         */
        once(type, handler) {
            __classPrivateFieldGet(this, _eventemitter).once(type, handler);
            return this;
        }
    }
    exports.Events = Events;
    _eventemitter = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/base/Decorate", ["require", "exports", "bn.js", "api-derive/src/index", "api-derive/src/util/index", "metadata/src/index", "rpc-core/src/index", "rpc-provider/src/index", "types/src/create/index", "types/src/extrinsic/constants", "types/src/primitive/StorageKey", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api/src/submittable/index", "api/src/util/augmentObject", "api/src/util/decorate", "api/src/util/validate", "api/src/base/Events"], function (require, exports, bn_js_11, api_derive_1, util_193, metadata_1, rpc_core_1, rpc_provider_1, create_3, constants_8, StorageKey_2, util_194, x_rxjs_57, operators_78, submittable_1, augmentObject_1, decorate_4, validate_1, Events_1) {
    "use strict";
    var _instanceId, _registry;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Decorate = void 0;
    bn_js_11 = __importDefault(bn_js_11);
    // the max amount of keys/values that we will retrieve at once
    const PAGE_SIZE = 384;
    const l = util_194.logger('api/init');
    let instanceCounter = 0;
    class Decorate extends Events_1.Events {
        /**
         * @description Create an instance of the class
         *
         * @param options Options object to create API instance or a Provider instance
         *
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * const api = new Api().isReady();
         *
         * api.rpc.subscribeNewHeads((header) => {
         *   console.log(`new block #${header.number.toNumber()}`);
         * });
         * ```
         */
        constructor(options, type, decorateMethod) {
            super();
            _instanceId.set(this, void 0);
            _registry.set(this, void 0);
            // HACK Use BN import so decorateDerive works... yes, wtf.
            this.__phantom = new bn_js_11.default(0);
            this._consts = {};
            this._errors = {};
            this._events = {};
            this._extrinsicType = constants_8.DEFAULT_VERSION;
            this._isReady = false;
            this._query = {};
            this._rx = {
                consts: {},
                query: {},
                tx: {}
            };
            /**
             * Put the `this.onCall` function of ApiRx here, because it is needed by
             * `api._rx`.
             */
            this._rxDecorateMethod = (method) => {
                return method;
            };
            __classPrivateFieldSet(this, _instanceId, `${++instanceCounter}`);
            __classPrivateFieldSet(this, _registry, options.source?.registry || options.registry || new create_3.TypeRegistry());
            const thisProvider = options.source
                ? options.source._rpcCore.provider.clone()
                : (options.provider || new rpc_provider_1.WsProvider());
            this._decorateMethod = decorateMethod;
            this._options = options;
            this._type = type;
            this._rpcCore = new rpc_core_1.RpcCore(__classPrivateFieldGet(this, _instanceId), __classPrivateFieldGet(this, _registry), thisProvider, this._options.rpc);
            this._isConnected = new x_rxjs_57.BehaviorSubject(this._rpcCore.provider.isConnected);
            this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
            this._rx.registry = __classPrivateFieldGet(this, _registry);
        }
        /**
         * @description Return the current used registry
         */
        get registry() {
            return __classPrivateFieldGet(this, _registry);
        }
        /**
         * @description Creates an instance of a type as registered
         */
        createType(type, ...params) {
            return __classPrivateFieldGet(this, _registry).createType(type, ...params);
        }
        /**
         * @description Register additional user-defined of chain-specific types in the type registry
         */
        registerTypes(types) {
            types && __classPrivateFieldGet(this, _registry).register(types);
        }
        /**
         * @returns `true` if the API operates with subscriptions
         */
        get hasSubscriptions() {
            return this._rpcCore.provider.hasSubscriptions;
        }
        /**
         * @returns `true` if the API decorate multi-key queries
         */
        get supportMulti() {
            return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
        }
        injectMetadata(metadata, fromEmpty, registry) {
            const decoratedMeta = metadata_1.expandMetadata(registry || __classPrivateFieldGet(this, _registry), metadata);
            if (fromEmpty || !this._extrinsics) {
                this._extrinsics = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
                this._rx.tx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
            }
            else {
                augmentObject_1.augmentObject('tx', this._decorateExtrinsics(decoratedMeta, this._decorateMethod), this._extrinsics, false);
                augmentObject_1.augmentObject(null, this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod), this._rx.tx, false);
            }
            // this API
            augmentObject_1.augmentObject('query', this._decorateStorage(decoratedMeta, this._decorateMethod), this._query, fromEmpty);
            augmentObject_1.augmentObject('consts', decoratedMeta.consts, this._consts, fromEmpty);
            augmentObject_1.augmentObject('errors', decoratedMeta.errors, this._errors, fromEmpty);
            augmentObject_1.augmentObject('events', decoratedMeta.events, this._events, fromEmpty);
            // rx
            augmentObject_1.augmentObject(null, this._decorateStorage(decoratedMeta, this._rxDecorateMethod), this._rx.query, fromEmpty);
            augmentObject_1.augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
        }
        _decorateFunctionMeta(input, output) {
            output.meta = input.meta;
            output.method = input.method;
            output.section = input.section;
            output.toJSON = input.toJSON;
            if (input.callIndex) {
                output.callIndex = input.callIndex;
            }
            return output;
        }
        // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
        // manner to cater for both old and new:
        //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
        //   - when non-zero, remove anything that is not in the array (we don't do this)
        _filterRpc(rpcMethods, additional) {
            const methods = rpcMethods.methods.map((t) => t.toString());
            // add any specific user-base RPCs
            if (Object.keys(additional).length !== 0) {
                this._rpcCore.addUserInterfaces(additional);
                // re-decorate, only adding any new additional interfaces
                this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
                this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
            }
            this._filterRpcMethods(methods);
        }
        _filterRpcMethods(exposed) {
            const hasResults = exposed.length !== 0;
            const allKnown = [...this._rpcCore.mapping.entries()];
            const allKeys = allKnown.reduce((allKeys, [, { alias, endpoint, method, pubsub, section }]) => {
                allKeys.push(`${section}_${method}`);
                if (pubsub) {
                    allKeys.push(`${section}_${pubsub[1]}`);
                    allKeys.push(`${section}_${pubsub[2]}`);
                }
                if (alias) {
                    allKeys.push(...alias);
                }
                if (endpoint) {
                    allKeys.push(endpoint);
                }
                return allKeys;
            }, []);
            const unknown = exposed.filter((key) => !allKeys.includes(key));
            if (unknown.length) {
                l.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
            }
            // loop through all entries we have (populated in decorate) and filter as required
            // only remove when we have results and method missing, or with no results if optional
            allKnown
                .filter(([key]) => hasResults
                ? !exposed.includes(key) && key !== 'rpc_methods' // rpc_methods doesn't appear, v1
                : key === 'rpc_methods' // we didn't find this one, remove
            )
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                .forEach(([_, { method, section }]) => {
                delete this._rpc[section][method];
                delete this._rpcCore[section][method];
                delete this._rx.rpc[section][method];
            });
        }
        _decorateRpc(rpc, decorateMethod, input = {}) {
            return rpc.sections.reduce((out, _sectionName) => {
                const sectionName = _sectionName;
                if (!out[sectionName]) {
                    // out and section here are horrors to get right from a typing perspective :(
                    out[sectionName] = Object.entries(rpc[sectionName]).reduce((section, [methodName, method]) => {
                        //  skip subscriptions where we have a non-subscribe interface
                        if (this.hasSubscriptions || !(methodName.startsWith('subscribe') || methodName.startsWith('unsubscribe'))) {
                            section[methodName] = decorateMethod(method, { methodName });
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                            section[methodName].json = decorateMethod(method.json, { methodName });
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                            section[methodName].raw = decorateMethod(method.raw, { methodName });
                        }
                        return section;
                    }, {});
                }
                return out;
            }, input);
        }
        // only be called if supportMulti is true
        _decorateMulti(decorateMethod) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorateMethod((calls) => (this.hasSubscriptions
                ? this._rpcCore.state.subscribeStorage
                : this._rpcCore.state.queryStorageAt)(calls.map((arg) => Array.isArray(arg)
                ? [arg[0].creator, ...arg.slice(1)]
                : [arg.creator])));
        }
        _decorateExtrinsics({ tx }, decorateMethod) {
            const creator = submittable_1.createSubmittable(this._type, this._rx, decorateMethod);
            return Object.entries(tx).reduce((out, [name, section]) => {
                out[name] = Object.entries(section).reduce((out, [name, method]) => {
                    out[name] = this._decorateExtrinsicEntry(method, creator);
                    return out;
                }, {});
                return out;
            }, creator);
        }
        _decorateExtrinsicEntry(method, creator) {
            const decorated = (...params) => creator(method(...params));
            // pass through the `.is`
            decorated.is = (other) => method.is(other);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return this._decorateFunctionMeta(method, decorated);
        }
        _decorateStorage({ query }, decorateMethod) {
            return Object.entries(query).reduce((out, [name, section]) => {
                out[name] = Object.entries(section).reduce((out, [name, method]) => {
                    out[name] = this._decorateStorageEntry(method, decorateMethod);
                    return out;
                }, {});
                return out;
            }, {});
        }
        _decorateStorageEntry(creator, decorateMethod) {
            // get the storage arguments, with DoubleMap as an array entry, otherwise spread
            const getArgs = (...args) => validate_1.extractStorageArgs(creator, args);
            // Disable this where it occurs for each field we are decorating
            /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
            const decorated = this._decorateStorageCall(creator, decorateMethod);
            decorated.creator = creator;
            decorated.at = decorateMethod((hash, arg1, arg2) => this._rpcCore.state.getStorage(getArgs(arg1, arg2), hash));
            decorated.hash = decorateMethod((arg1, arg2) => this._rpcCore.state.getStorageHash(getArgs(arg1, arg2)));
            decorated.is = (key) => key.section === creator.section && key.method === creator.method;
            decorated.key = (arg1, arg2) => util_194.u8aToHex(util_194.compactStripLength(creator(creator.meta.type.isDoubleMap ? [arg1, arg2] : arg1))[1]);
            decorated.keyPrefix = (key1) => util_194.u8aToHex(creator.keyPrefix(key1));
            decorated.range = decorateMethod((range, arg1, arg2) => this._decorateStorageRange(decorated, [arg1, arg2], range));
            decorated.size = decorateMethod((arg1, arg2) => this._rpcCore.state.getStorageSize(getArgs(arg1, arg2)));
            decorated.sizeAt = decorateMethod((hash, arg1, arg2) => this._rpcCore.state.getStorageSize(getArgs(arg1, arg2), hash));
            // .keys() & .entries() only available on map types
            if (creator.iterKey && (creator.meta.type.isMap || creator.meta.type.isDoubleMap)) {
                decorated.entries = decorateMethod(util_193.memo(__classPrivateFieldGet(this, _instanceId), (doubleMapArg) => this._retrieveMapEntries(creator, null, doubleMapArg)));
                decorated.entriesAt = decorateMethod(util_193.memo(__classPrivateFieldGet(this, _instanceId), (hash, doubleMapArg) => this._retrieveMapEntries(creator, hash, doubleMapArg)));
                decorated.entriesPaged = decorateMethod(util_193.memo(__classPrivateFieldGet(this, _instanceId), (opts) => this._retrieveMapEntriesPaged(creator, opts)));
                decorated.keys = decorateMethod(util_193.memo(__classPrivateFieldGet(this, _instanceId), (doubleMapArg) => this._retrieveMapKeys(creator, null, doubleMapArg)));
                decorated.keysAt = decorateMethod(util_193.memo(__classPrivateFieldGet(this, _instanceId), (hash, doubleMapArg) => this._retrieveMapKeys(creator, hash, doubleMapArg)));
                decorated.keysPaged = decorateMethod(util_193.memo(__classPrivateFieldGet(this, _instanceId), (opts) => this._retrieveMapKeysPaged(creator, opts)));
            }
            if (this.supportMulti) {
                // When using double map storage function, user need to pass double map key as an array
                decorated.multi = decorateMethod((args) => this._retrieveMulti(args.map((arg) => [creator, arg])));
            }
            /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
            return this._decorateFunctionMeta(creator, decorated);
        }
        // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
        // we make a subscription, alternatively we push this through a single-shot query
        _decorateStorageCall(creator, decorateMethod) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorateMethod((...args) => {
                return this.hasSubscriptions
                    ? this._rpcCore.state.subscribeStorage([validate_1.extractStorageArgs(creator, args)]).pipe(operators_78.map(([data]) => data) // extract first/only result from list
                    )
                    : this._rpcCore.state.getStorage(validate_1.extractStorageArgs(creator, args));
            }, {
                methodName: creator.method,
                overrideNoSub: (...args) => this._rpcCore.state.getStorage(validate_1.extractStorageArgs(creator, args))
            });
        }
        _decorateStorageRange(decorated, args, range) {
            const outputType = StorageKey_2.unwrapStorageType(decorated.creator.meta.type, decorated.creator.meta.modifier.isOptional);
            return this._rpcCore.state
                .queryStorage([decorated.key(...args)], ...range)
                .pipe(operators_78.map((result) => result.map(([blockHash, [value]]) => [
                blockHash,
                this.createType(outputType, value.isSome ? value.unwrap().toHex() : undefined)
            ])));
        }
        // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
        _retrieveMulti(keys) {
            if (!keys.length) {
                return x_rxjs_57.of([]);
            }
            return x_rxjs_57.combineLatest(util_194.arrayChunk(keys, PAGE_SIZE).map((keys) => (this.hasSubscriptions
                ? this._rpcCore.state.subscribeStorage
                : this._rpcCore.state.queryStorageAt)(keys))).pipe(operators_78.map((valsArr) => util_194.arrayFlatten(valsArr)));
        }
        _retrieveMapKeys({ iterKey, meta, method, section }, at, arg) {
            util_194.assert(iterKey && (meta.type.isMap || meta.type.isDoubleMap), 'keys can only be retrieved on maps, linked maps and double maps');
            const headKey = iterKey(arg).toHex();
            const startSubject = new x_rxjs_57.BehaviorSubject(headKey);
            const query = at
                ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE, startKey, at)
                : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE, startKey);
            return startSubject.pipe(operators_78.switchMap((startKey) => query(startKey).pipe(operators_78.map((keys) => keys.map((key) => key.setMeta(meta, section, method))))), operators_78.tap((keys) => {
                keys.length === PAGE_SIZE
                    ? startSubject.next(keys[PAGE_SIZE - 1].toHex())
                    : startSubject.complete();
            }), operators_78.toArray(), // toArray since we want to startSubject to be completed
            operators_78.map((keysArr) => util_194.arrayFlatten(keysArr)));
        }
        _retrieveMapKeysPaged({ iterKey, meta, method, section }, opts) {
            util_194.assert(iterKey && (meta.type.isMap || meta.type.isDoubleMap), 'keys can only be retrieved on maps, linked maps and double maps');
            const headKey = iterKey(opts.arg).toHex();
            return this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey).pipe(operators_78.map((keys) => keys.map((key) => key.setMeta(meta, section, method))));
        }
        _retrieveMapEntries(entry, at, arg) {
            const query = at
                ? (keyset) => this._rpcCore.state.queryStorageAt(keyset, at)
                : (keyset) => this._rpcCore.state.queryStorageAt(keyset);
            return this._retrieveMapKeys(entry, at, arg).pipe(operators_78.switchMap((keys) => keys.length
                ? x_rxjs_57.combineLatest(util_194.arrayChunk(keys, PAGE_SIZE).map(query)).pipe(operators_78.map((valsArr) => util_194.arrayFlatten(valsArr).map((value, index) => [keys[index], value])))
                : x_rxjs_57.of([])));
        }
        _retrieveMapEntriesPaged(entry, opts) {
            return this._retrieveMapKeysPaged(entry, opts).pipe(operators_78.switchMap((keys) => keys.length
                ? this._rpcCore.state.queryStorageAt(keys).pipe(operators_78.map((valsArr) => valsArr.map((value, index) => [keys[index], value])))
                : x_rxjs_57.of([])));
        }
        _decorateDeriveRx(decorateMethod) {
            const specName = this._runtimeVersion?.specName.toString();
            const derives = {
                ...this._options.derives,
                ...(this._options.typesBundle?.spec?.[specName ?? '']?.derives || {})
            };
            // Pull in derive from api-derive
            const derive = api_derive_1.decorateDerive(__classPrivateFieldGet(this, _instanceId), this._rx, derives);
            return decorate_4.decorateSections(derive, decorateMethod);
        }
        _decorateDerive(decorateMethod) {
            return decorate_4.decorateSections(this._rx.derive, decorateMethod);
        }
    }
    exports.Decorate = Decorate;
    _instanceId = new WeakMap(), _registry = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/base/Init", ["require", "exports", "metadata/src/index", "types/src/create/index", "types/src/extrinsic/Extrinsic", "types-known/src/index", "@polkadot/util", "@polkadot/util-crypto", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api/src/base/Decorate"], function (require, exports, metadata_2, create_4, Extrinsic_4, types_known_2, util_195, util_crypto_12, x_rxjs_58, operators_79, Decorate_1) {
    "use strict";
    var _healthTimer, _registries, _updateSub, _onProviderConnect, _onProviderDisconnect, _onProviderError;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Init = void 0;
    const KEEPALIVE_INTERVAL = 15000;
    const DEFAULT_BLOCKNUMBER = { unwrap: () => util_195.BN_ZERO };
    const l = util_195.logger('api/init');
    class Init extends Decorate_1.Decorate {
        constructor(options, type, decorateMethod) {
            super(options, type, decorateMethod);
            _healthTimer.set(this, null);
            _registries.set(this, []);
            _updateSub.set(this, void 0);
            _onProviderConnect.set(this, async () => {
                this.emit('connected');
                this._isConnected.next(true);
                try {
                    const [hasMeta, cryptoReady] = await Promise.all([
                        this._loadMeta(),
                        this._options.initWasm === false
                            ? Promise.resolve(true)
                            : util_crypto_12.cryptoWaitReady()
                    ]);
                    if (hasMeta && !this._isReady && cryptoReady) {
                        this._isReady = true;
                        this.emit('ready', this);
                    }
                    __classPrivateFieldSet(this, _healthTimer, setInterval(() => {
                        this._rpcCore.system.health().toPromise().catch(() => null);
                    }, KEEPALIVE_INTERVAL));
                }
                catch (_error) {
                    const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
                    l.error(error);
                    l.error(_error);
                    this.emit('error', error);
                }
            });
            _onProviderDisconnect.set(this, () => {
                this.emit('disconnected');
                this._isConnected.next(false);
                if (__classPrivateFieldGet(this, _healthTimer)) {
                    clearInterval(__classPrivateFieldGet(this, _healthTimer));
                    __classPrivateFieldSet(this, _healthTimer, null);
                }
            });
            _onProviderError.set(this, (error) => {
                this.emit('error', error);
            });
            if (!this.hasSubscriptions) {
                l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
            }
            // all injected types added to the registry for overrides
            this.registry.setKnownTypes(options);
            // We only register the types (global) if this is not a cloned instance.
            // Do right up-front, so we get in the user types before we are actually
            // doing anything on-chain, this ensures we have the overrides in-place
            if (!options.source) {
                this.registerTypes(options.types);
            }
            else {
                __classPrivateFieldSet(this, _registries, __classPrivateFieldGet(options.source, _registries));
            }
            this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
            this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
            if (this.supportMulti) {
                this._queryMulti = this._decorateMulti(this._decorateMethod);
                this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
            }
            this._rx.signer = options.signer;
            this._rpcCore.setRegistrySwap((hash) => this.getBlockRegistry(hash));
            this._rpcCore.provider.on('disconnected', __classPrivateFieldGet(this, _onProviderDisconnect));
            this._rpcCore.provider.on('error', __classPrivateFieldGet(this, _onProviderError));
            this._rpcCore.provider.on('connected', __classPrivateFieldGet(this, _onProviderConnect));
            // If the provider was instantiated earlier, and has already emitted a
            // 'connected' event, then the `on('connected')` won't fire anymore. To
            // cater for this case, we call manually `this._onProviderConnect`.
            if (this._rpcCore.provider.isConnected) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                __classPrivateFieldGet(this, _onProviderConnect).call(this);
            }
        }
        /**
         * @description Decorates a registry based on the runtime version
         */
        _initRegistry(registry, chain, version, metadata, chainProps) {
            registry.setChainProperties(chainProps || this.registry.getChainProperties());
            registry.setKnownTypes(this._options);
            registry.register(types_known_2.getSpecTypes(registry, chain, version.specName, version.specVersion));
            // for bundled types, pull through the aliases defined
            if (registry.knownTypes.typesBundle) {
                registry.knownTypes.typesAlias = types_known_2.getSpecAlias(registry, chain, version.specName);
            }
            registry.setMetadata(metadata, undefined, this._options.signedExtensions);
            return registry;
        }
        /**
         * @description Sets up a registry based on the block hash defined
         */
        async getBlockRegistry(blockHash) {
            // shortcut in the case where we have an immediate-same request
            const lastBlockHash = util_195.u8aToU8a(blockHash);
            const existingViaHash = __classPrivateFieldGet(this, _registries).find((r) => r.lastBlockHash && util_195.u8aEq(lastBlockHash, r.lastBlockHash));
            if (existingViaHash) {
                return existingViaHash;
            }
            // ensure we have everything required
            util_195.assert(this._genesisHash && this._runtimeVersion, 'Cannot retrieve data on an uninitialized chain');
            // We have to assume that on the RPC layer the calls used here does not call back into
            // the registry swap, so getHeader & getRuntimeVersion should not be historic
            const header = this._genesisHash.eq(blockHash)
                ? { number: DEFAULT_BLOCKNUMBER, parentHash: this._genesisHash }
                : await this._rpcCore.chain.getHeader(blockHash).toPromise();
            util_195.assert(header?.parentHash && !header.parentHash.isEmpty, 'Unable to retrieve header and parent from supplied hash');
            // get the runtime version, either on-chain or via an known upgrade history
            const [firstVersion, lastVersion] = types_known_2.getUpgradeVersion(this._genesisHash, header.number.unwrap());
            const version = (firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)))
                ? { specName: this._runtimeVersion.specName, specVersion: firstVersion.specVersion }
                : await this._rpcCore.state.getRuntimeVersion(header.parentHash).toPromise();
            // check for pre-existing registries
            const existingViaVersion = __classPrivateFieldGet(this, _registries).find((r) => r.specVersion.eq(version.specVersion));
            if (existingViaVersion) {
                existingViaVersion.lastBlockHash = lastBlockHash;
                return existingViaVersion;
            }
            // nothing has been found, construct new
            const metadata = await this._rpcCore.state.getMetadata(header.parentHash).toPromise();
            const registry = this._initRegistry(new create_4.TypeRegistry(), this._runtimeChain, version, metadata);
            const result = { isDefault: false, lastBlockHash, metadata, metadataConsts: null, registry, specVersion: version.specVersion };
            __classPrivateFieldGet(this, _registries).push(result);
            return result;
        }
        async _loadMeta() {
            // on re-connection to the same chain, we don't want to re-do everything from chain again
            if (this._isReady) {
                return true;
            }
            else if (__classPrivateFieldGet(this, _updateSub)) {
                __classPrivateFieldGet(this, _updateSub).unsubscribe();
            }
            // only load from on-chain if we are not a clone (default path), alternatively
            // just use the values from the source instance provided
            [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady
                ? await this._metaFromSource(this._options.source)
                : await this._metaFromChain(this._options.metadata);
            return this._initFromMeta(this._runtimeMetadata);
        }
        // eslint-disable-next-line @typescript-eslint/require-await
        async _metaFromSource(source) {
            this._extrinsicType = source.extrinsicVersion;
            this._runtimeChain = source.runtimeChain;
            this._runtimeVersion = source.runtimeVersion;
            const methods = [];
            // manually build a list of all available methods in this RPC, we are
            // going to filter on it to align the cloned RPC without making a call
            Object.keys(source.rpc).forEach((section) => {
                Object.keys(source.rpc[section]).forEach((method) => {
                    methods.push(`${section}_${method}`);
                });
            });
            this._filterRpcMethods(methods);
            return [source.genesisHash, source.runtimeMetadata];
        }
        // subscribe to metadata updates, inject the types on changes
        _subscribeUpdates() {
            if (__classPrivateFieldGet(this, _updateSub) || !this.hasSubscriptions) {
                return;
            }
            __classPrivateFieldSet(this, _updateSub, this._rpcCore.state.subscribeRuntimeVersion().pipe(operators_79.switchMap((version) => 
            // only retrieve the metadata when the on-chain version has been changed
            this._runtimeVersion?.specVersion.eq(version.specVersion)
                ? x_rxjs_58.of(false)
                : this._rpcCore.state.getMetadata().pipe(operators_79.map((metadata) => {
                    l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
                    this._runtimeMetadata = metadata;
                    this._runtimeVersion = version;
                    this._rx.runtimeVersion = version;
                    // update the default registry version
                    const thisRegistry = __classPrivateFieldGet(this, _registries).find(({ isDefault }) => isDefault);
                    util_195.assert(thisRegistry, 'Initialization error, cannot find the default registry');
                    // setup the data as per the current versions
                    thisRegistry.metadata = metadata;
                    thisRegistry.metadataConsts = null;
                    thisRegistry.specVersion = version.specVersion;
                    // clear the registry types to ensure that we override correctly
                    this._initRegistry(thisRegistry.registry.init(), this._runtimeChain, version, metadata);
                    this.injectMetadata(metadata, false, thisRegistry.registry);
                    return true;
                })))).subscribe());
        }
        async _metaFromChain(optMetadata) {
            const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([
                this._rpcCore.chain.getBlockHash(0).toPromise(),
                this._rpcCore.state.getRuntimeVersion().toPromise(),
                this._rpcCore.system.chain().toPromise(),
                this._rpcCore.system.properties().toPromise(),
                this._rpcCore.rpc.methods().toPromise(),
                optMetadata
                    ? Promise.resolve(null)
                    : this._rpcCore.state.getMetadata().toPromise()
            ]);
            // set our chain version & genesisHash as returned
            this._runtimeChain = chain;
            this._runtimeVersion = runtimeVersion;
            this._rx.runtimeVersion = runtimeVersion;
            // retrieve metadata, either from chain  or as pass-in via options
            const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
            const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey]
                ? new metadata_2.Metadata(this.registry, optMetadata[metadataKey])
                : await this._rpcCore.state.getMetadata().toPromise());
            // initializes the registry & RPC
            this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
            this._filterRpc(rpcMethods, types_known_2.getSpecRpc(this.registry, chain, runtimeVersion.specName));
            this._subscribeUpdates();
            // setup the initial registry, when we have none
            if (!__classPrivateFieldGet(this, _registries).length) {
                __classPrivateFieldGet(this, _registries).push({ isDefault: true, lastBlockHash: null, metadata, metadataConsts: null, registry: this.registry, specVersion: runtimeVersion.specVersion });
            }
            // get unique types & validate
            metadata.getUniqTypes(false);
            return [genesisHash, metadata];
        }
        async _initFromMeta(metadata) {
            const metaExtrinsic = metadata.asLatest.extrinsic;
            // only inject if we are not a clone (global init)
            if (metaExtrinsic.version.gt(util_195.BN_ZERO)) {
                this._extrinsicType = metaExtrinsic.version.toNumber();
            }
            else if (!this._options.source) {
                // detect the extrinsic version in-use based on the last block
                const { block: { extrinsics: [firstTx] } } = await this._rpcCore.chain.getBlock().toPromise();
                // If we haven't sync-ed to 1 yes, this won't have any values
                this._extrinsicType = firstTx ? firstTx.type : Extrinsic_4.LATEST_EXTRINSIC_VERSION;
            }
            this._rx.extrinsicType = this._extrinsicType;
            this._rx.genesisHash = this._genesisHash;
            this._rx.runtimeVersion = this._runtimeVersion;
            this.injectMetadata(metadata, true);
            // derive is last, since it uses the decorated rx
            this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
            this._derive = this._decorateDerive(this._decorateMethod);
            return true;
        }
    }
    exports.Init = Init;
    _healthTimer = new WeakMap(), _registries = new WeakMap(), _updateSub = new WeakMap(), _onProviderConnect = new WeakMap(), _onProviderDisconnect = new WeakMap(), _onProviderError = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/base/Getters", ["require", "exports", "@polkadot/util", "api/src/detectPackage", "api/src/base/Init"], function (require, exports, util_196, detectPackage_1, Init_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Getters = void 0;
    function assertResult(value) {
        return util_196.assertReturn(value, 'Api needs to be initialized before using, listen on \'ready\'');
    }
    class Getters extends Init_1.Init {
        /**
         * @description Contains the parameter types (constants) of all modules.
         *
         * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
         *
         * @example
         * <BR>
         *
         * ```javascript
         * console.log(api.consts.democracy.enactmentPeriod.toString())
         * ```
         */
        get consts() {
            return assertResult(this._consts);
        }
        /**
         * @description Derived results that are injected into the API, allowing for combinations of various query results.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.derive.chain.bestNumber((number) => {
         *   console.log('best number', number);
         * });
         * ```
         */
        get derive() {
            return assertResult(this._derive);
        }
        /**
         * @description Errors from metadata
         */
        get errors() {
            return assertResult(this._errors);
        }
        /**
         * @description Events from metadata
         */
        get events() {
            return assertResult(this._events);
        }
        /**
         * @description  Returns the version of extrinsics in-use on this chain
         */
        get extrinsicVersion() {
            return this._extrinsicType;
        }
        /**
         * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
         */
        get genesisHash() {
            return assertResult(this._genesisHash);
        }
        /**
         * @description `true` when subscriptions are supported
         */
        get hasSubscriptions() {
            return this._rpcCore.provider.hasSubscriptions;
        }
        /**
         * @description true is the underlying provider is connected
         */
        get isConnected() {
            return this._isConnected.getValue();
        }
        /**
         * @description The library information name & version (from package.json)
         */
        get libraryInfo() {
            return `${detectPackage_1.packageInfo.name} v${detectPackage_1.packageInfo.version}`;
        }
        /**
         * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
         *
         * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.query.system.account(<accountId>, ([nonce, balance]) => {
         *   console.log('new free balance', balance.free, 'new nonce', nonce);
         * });
         * ```
         */
        get query() {
            return assertResult(this._query);
        }
        /**
         * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * const unsub = await api.queryMulti(
         *   [
         *     // you can include the storage without any parameters
         *     api.query.balances.totalIssuance,
         *     // or you can pass parameters to the storage query
         *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
         *   ],
         *   ([existential, [, { free }]]) => {
         *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
         *
         *     unsub();
         *   }
         * );
         * ```
         */
        get queryMulti() {
            return assertResult(this._queryMulti);
        }
        /**
         * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
         *
         * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.rpc.chain.subscribeNewHeads((header) => {
         *   console.log('new header', header);
         * });
         * ```
         */
        get rpc() {
            return assertResult(this._rpc);
        }
        /**
         * @description Contains the chain information for the current node.
         */
        get runtimeChain() {
            return assertResult(this._runtimeChain);
        }
        /**
         * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
         */
        get runtimeMetadata() {
            return assertResult(this._runtimeMetadata);
        }
        /**
         * @description Contains the version information for the current runtime.
         */
        get runtimeVersion() {
            return assertResult(this._runtimeVersion);
        }
        /**
         * @description The underlying Rx API interface
         */
        get rx() {
            return assertResult(this._rx);
        }
        /**
         * @description The type of this API instance, either 'rxjs' or 'promise'
         */
        get type() {
            return this._type;
        }
        /**
         * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.tx.balances
         *   .transfer(<recipientId>, <balance>)
         *   .signAndSend(<keyPair>, ({status}) => {
         *     console.log('tx status', status.asFinalized.toHex());
         *   });
         * ```
         */
        get tx() {
            return assertResult(this._extrinsics);
        }
    }
    exports.Getters = Getters;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/base/index", ["require", "exports", "@polkadot/util", "api/src/base/Getters"], function (require, exports, util_197, Getters_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApiBase = void 0;
    class ApiBase extends Getters_1.Getters {
        /**
         * @description Create an instance of the class
         *
         * @param options Options object to create API instance or a Provider instance
         *
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * const api = new Api().isReady();
         *
         * api.rpc.subscribeNewHeads((header) => {
         *   console.log(`new block #${header.number.toNumber()}`);
         * });
         * ```
         */
        constructor(options = {}, type, decorateMethod) {
            super(options, type, decorateMethod);
        }
        /**
         * @description Connect from the underlying provider, halting all network traffic
         */
        connect() {
            return this._rpcCore.connect();
        }
        /**
         * @description Disconnect from the underlying provider, halting all network traffic
         */
        disconnect() {
            return this._rpcCore.disconnect();
        }
        /**
         * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
         */
        findCall(callIndex) {
            return this.registry.findMetaCall(util_197.u8aToU8a(callIndex));
        }
        /**
         * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
         */
        findError(errorIndex) {
            return this.registry.findMetaError(util_197.u8aToU8a(errorIndex));
        }
        /**
         * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
         */
        setSigner(signer) {
            this._rx.signer = signer;
        }
        /**
         * @description Signs a raw signer payload, string or Uint8Array
         */
        async sign(address, data, { signer } = {}) {
            if (util_197.isString(address)) {
                const _signer = signer || this._rx.signer;
                util_197.assert(_signer?.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
                return (await _signer.signRaw({
                    type: 'bytes',
                    ...data,
                    address
                })).signature;
            }
            return util_197.u8aToHex(address.sign(util_197.u8aToU8a(data.data)));
        }
    }
    exports.ApiBase = ApiBase;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/base", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/consts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/rpc", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/storage", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/submittable", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/errors", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/events", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/types/index", ["require", "exports", "api/src/base/index", "api/src/submittable/types", "api/src/types/base", "api/src/types/consts", "api/src/types/errors", "api/src/types/events", "api/src/types/rpc", "api/src/types/storage", "api/src/types/submittable", "api/src/augment/index"], function (require, exports, base_1, types_112, base_2, consts_1, errors_3, events_4, rpc_2, storage_2, submittable_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApiBase = void 0;
    Object.defineProperty(exports, "ApiBase", { enumerable: true, get: function () { return base_1.ApiBase; } });
    __exportStar(types_112, exports);
    __exportStar(base_2, exports);
    __exportStar(consts_1, exports);
    __exportStar(errors_3, exports);
    __exportStar(events_4, exports);
    __exportStar(rpc_2, exports);
    __exportStar(storage_2, exports);
    __exportStar(submittable_2, exports);
});
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
define("api/src/augment/consts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
define("api/src/augment/errors", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
define("api/src/augment/events", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
define("api/src/augment/query", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
define("api/src/augment/rpc", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */
define("api/src/augment/tx", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/augment/index", ["require", "exports", "api/src/augment/consts", "api/src/augment/errors", "api/src/augment/events", "api/src/augment/query", "api/src/augment/rpc", "api/src/augment/tx"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/promise/Combinator", ["require", "exports", "@polkadot/util"], function (require, exports, util_198) {
    "use strict";
    var _allHasFired_1, _callback, _fired, _fns, _isActive, _results, _subscriptions;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Combinator = void 0;
    class Combinator {
        constructor(fns, callback) {
            _allHasFired_1.set(this, false);
            _callback.set(this, void 0);
            _fired.set(this, []);
            _fns.set(this, []);
            _isActive.set(this, true);
            _results.set(this, []);
            _subscriptions.set(this, []);
            __classPrivateFieldSet(this, _callback, callback);
            // eslint-disable-next-line @typescript-eslint/require-await
            __classPrivateFieldSet(this, _subscriptions, fns.map(async (input, index) => {
                const [fn, ...args] = Array.isArray(input)
                    ? input
                    : [input];
                __classPrivateFieldGet(this, _fired).push(false);
                __classPrivateFieldGet(this, _fns).push(fn);
                // Not quite 100% how to have a variable number at the front here
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types
                return fn(...args, this._createCallback(index));
            }));
        }
        _allHasFired() {
            __classPrivateFieldSet(this, _allHasFired_1, __classPrivateFieldGet(this, _allHasFired_1) || __classPrivateFieldGet(this, _fired).filter((hasFired) => !hasFired).length === 0);
            return __classPrivateFieldGet(this, _allHasFired_1);
        }
        _createCallback(index) {
            return (value) => {
                __classPrivateFieldGet(this, _fired)[index] = true;
                __classPrivateFieldGet(this, _results)[index] = value;
                this._triggerUpdate();
            };
        }
        _triggerUpdate() {
            if (!__classPrivateFieldGet(this, _isActive) || !util_198.isFunction(__classPrivateFieldGet(this, _callback)) || !this._allHasFired()) {
                return;
            }
            try {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                __classPrivateFieldGet(this, _callback).call(this, __classPrivateFieldGet(this, _results));
            }
            catch (error) {
                // swallow, we don't want the handler to trip us up
            }
        }
        unsubscribe() {
            if (!__classPrivateFieldGet(this, _isActive)) {
                return;
            }
            __classPrivateFieldSet(this, _isActive, false);
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            __classPrivateFieldGet(this, _subscriptions).forEach(async (subscription) => {
                try {
                    const unsubscribe = await subscription;
                    if (util_198.isFunction(unsubscribe)) {
                        unsubscribe();
                    }
                }
                catch (error) {
                    // ignore
                }
            });
        }
    }
    exports.Combinator = Combinator;
    _allHasFired_1 = new WeakMap(), _callback = new WeakMap(), _fired = new WeakMap(), _fns = new WeakMap(), _isActive = new WeakMap(), _results = new WeakMap(), _subscriptions = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/promise/index", ["require", "exports", "@polkadot/util", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators", "api/src/base/index", "api/src/promise/Combinator"], function (require, exports, util_199, x_rxjs_59, operators_80, base_3, Combinator_1) {
    "use strict";
    var _isReadyPromise, _isReadyOrErrorPromise;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApiPromise = exports.decorateMethod = void 0;
    // extract the arguments and callback params from a value array possibly containing a callback
    function extractArgs(args, needsCallback) {
        let callback;
        const actualArgs = args.slice();
        // If the last arg is a function, we pop it, put it into callback.
        // actualArgs will then hold the actual arguments to be passed to `method`
        if (args.length && util_199.isFunction(args[args.length - 1])) {
            callback = actualArgs.pop();
        }
        // When we need a subscription, ensure that a valid callback is actually passed
        util_199.assert(!needsCallback || util_199.isFunction(callback), 'Expected a callback to be passed with subscriptions');
        return [actualArgs, callback];
    }
    // a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once
    function promiseTracker(resolve, reject) {
        let isCompleted = false;
        return {
            reject: (error) => {
                if (!isCompleted) {
                    isCompleted = true;
                    reject(error);
                }
                return x_rxjs_59.EMPTY;
            },
            resolve: (value) => {
                if (!isCompleted) {
                    isCompleted = true;
                    resolve(value);
                }
            }
        };
    }
    // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe
    function decorateCall(method, actualArgs) {
        return new Promise((resolve, reject) => {
            // single result tracker - either reject with Error or resolve with Codec result
            const tracker = promiseTracker(resolve, reject);
            // encoding errors reject immediately, any result unsubscribes and resolves
            const subscription = method(...actualArgs).pipe(operators_80.catchError((error) => tracker.reject(error))).subscribe((result) => {
                tracker.resolve(result);
                setTimeout(() => subscription.unsubscribe(), 0);
            });
        });
    }
    // Decorate a subscription where we have a result callback specified
    function decorateSubscribe(method, actualArgs, resultCb) {
        return new Promise((resolve, reject) => {
            // either reject with error or resolve with unsubscribe callback
            const tracker = promiseTracker(resolve, reject);
            // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback
            const subscription = method(...actualArgs).pipe(operators_80.catchError((error) => tracker.reject(error)), operators_80.tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
                // queue result (back of queue to clear current)
                setTimeout(() => resultCb(result), 0);
            });
        });
    }
    /**
     * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
     */
    function decorateMethod(method, options) {
        const needsCallback = options && options.methodName && options.methodName.includes('subscribe');
        return function (...args) {
            const [actualArgs, resultCb] = extractArgs(args, !!needsCallback);
            return resultCb
                ? decorateSubscribe(method, actualArgs, resultCb)
                : decorateCall(options?.overrideNoSub || method, actualArgs);
        };
    }
    exports.decorateMethod = decorateMethod;
    /**
     * # @polkadot/api/promise
     *
     * ## Overview
     *
     * @name ApiPromise
     * @description
     * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
     *
     * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
     *
     * @see [[ApiRx]]
     *
     * ## Usage
     *
     * Making rpc calls -
     * <BR>
     *
     * ```javascript
     * import ApiPromise from '@polkadot/api/promise';
     *
     * // initialise via static create
     * const api = await ApiPromise.create();
     *
     * // make a subscription to the network head
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log(`Chain is at #${header.number}`);
     * });
     * ```
     * <BR>
     *
     * Subscribing to chain state -
     * <BR>
     *
     * ```javascript
     * import { ApiPromise, WsProvider } from '@polkadot/api';
     *
     * // initialise a provider with a specific endpoint
     * const provider = new WsProvider('wss://example.com:9944')
     *
     * // initialise via isReady & new with specific provider
     * const api = await new ApiPromise({ provider }).isReady;
     *
     * // retrieve the block target time
     * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
     * let last = 0;
     *
     * // subscribe to the current block timestamp, updates automatically (callback provided)
     * api.query.timestamp.now((timestamp) => {
     *   const elapsed = last
     *     ? `, ${timestamp.toNumber() - last}s since last`
     *     : '';
     *
     *   last = timestamp.toNumber();
     *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
     * });
     * ```
     * <BR>
     *
     * Submitting a transaction -
     * <BR>
     *
     * ```javascript
     * import ApiPromise from '@polkadot/api/promise';
     *
     * ApiPromise.create().then((api) => {
     *   const [nonce] = await api.query.system.account(keyring.alice.address);
     *
     *   api.tx.balances
     *     // create transfer
     *     transfer(keyring.bob.address, 12345)
     *     // sign the transcation
     *     .sign(keyring.alice, { nonce })
     *     // send the transaction (optional status callback)
     *     .send((status) => {
     *       console.log(`current status ${status.type}`);
     *     })
     *     // retrieve the submitted extrinsic hash
     *     .then((hash) => {
     *       console.log(`submitted with hash ${hash}`);
     *     });
     * });
     * ```
     */
    class ApiPromise extends base_3.ApiBase {
        /**
         * @description Creates an instance of the ApiPromise class
         * @param options Options to create an instance. This can be either [[ApiOptions]] or
         * an [[WsProvider]].
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * new Api().isReady.then((api) => {
         *   api.rpc.subscribeNewHeads((header) => {
         *     console.log(`new block #${header.number.toNumber()}`);
         *   });
         * });
         * ```
         */
        constructor(options) {
            super(options, 'promise', decorateMethod);
            _isReadyPromise.set(this, void 0);
            _isReadyOrErrorPromise.set(this, void 0);
            __classPrivateFieldSet(this, _isReadyPromise, new Promise((resolve) => {
                super.once('ready', () => {
                    resolve(this);
                });
            }));
            __classPrivateFieldSet(this, _isReadyOrErrorPromise, new Promise((resolve, reject) => {
                super.once('ready', () => {
                    resolve(this);
                });
                super.once('error', (e) => {
                    reject(e);
                });
            }));
        }
        /**
         * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
         * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
         * provider (see the constructor arguments)
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * Api.create().then(async (api) => {
         *   const timestamp = await api.query.timestamp.now();
         *
         *   console.log(`lastest block timestamp ${timestamp}`);
         * });
         * ```
         */
        static create(options) {
            return new ApiPromise(options).isReady;
        }
        /**
         * @description Promise that resolves the first time we are connected and loaded
         */
        get isReady() {
            return __classPrivateFieldGet(this, _isReadyPromise);
        }
        /**
         * @description Promise that resolves if we can connect, or reject if there is an error
         */
        get isReadyOrError() {
            return __classPrivateFieldGet(this, _isReadyOrErrorPromise);
        }
        /**
         * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
         */
        clone() {
            return new ApiPromise({
                ...this._options,
                source: this
            });
        }
        /**
         * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
         * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
         * @param callback A callback that will return an Array of all the values this combinator has been applied to
         * @example
         * <BR>
         *
         * ```javascript
         * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
         *
         * // combines values from balance & nonce as it updates
         * api.combineLatest([
         *   api.rpc.chain.subscribeNewHeads,
         *   (cb) => api.query.system.account(address, cb)
         * ], ([head, [balance, nonce]]) => {
         *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
         * });
         * ```
         */
        // eslint-disable-next-line @typescript-eslint/require-await
        async combineLatest(fns, callback) {
            const combinator = new Combinator_1.Combinator(fns, callback);
            return () => {
                combinator.unsubscribe();
            };
        }
    }
    exports.ApiPromise = ApiPromise;
    _isReadyPromise = new WeakMap(), _isReadyOrErrorPromise = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/rx/index", ["require", "exports", "@polkadot/x-rxjs", "api/src/base/index"], function (require, exports, x_rxjs_60, base_4) {
    "use strict";
    var _isReadyRx;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApiRx = exports.decorateMethod = void 0;
    function decorateMethod(method) {
        return method;
    }
    exports.decorateMethod = decorateMethod;
    /**
     * # @polkadot/api/rx
     *
     *  ## Overview
     *
     * @name ApiRx
     *
     * @description
     * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.
     *
     * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.
     *
     * @see [[ApiPromise]]
     *
     * ## Usage
     *
     * Making rpc calls -
     * <BR>
     *
     * ```javascript
     * import ApiRx from '@polkadot/api/rx';
     *
     * // initialize via Promise & static create
     * const api = await ApiRx.create().toPromise();
     *
     * // make a call to retrieve the current network head
     * api.rpc.chain.subscribeNewHeads().subscribe((header) => {
     *   console.log(`Chain is at #${header.number}`);
     * });
     * ```
     * <BR>
     *
     * Subscribing to chain state -
     * <BR>
     *
     * ```javascript
     * import { combineLatest } from '@polkadot/x-rxjs';
     * import { pairwise, switchMap } from '@polkadot/x-rxjs/operators';
     * import { ApiRx, WsProvider } from '@polkadot/api';
     *
     *
     * // initialize a provider with a specific endpoint
     * const provider = new WsProvider('wss://example.com:9944')
     *
     * // initialize via isReady & new with specific provider
     * new ApiRx({ provider })
     *   .isReady
     *   .pipe(
     *     switchMap((api) =>
     *       combineLatest([
     *         api.query.timestamp.blockPeriod(),
     *         api.query.timestamp.now().pipe(pairwise())
     *       ])
     *     )
     *   )
     *   .subscribe(([blockPeriod, timestamp]) => {
     *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();
     *      console.log(`timestamp ${timestamp[1]} \nelapsed ${elapsed} \n(${blockPeriod}s target)`);
     *   });
     * ```
     * <BR>
     *
     * Submitting a transaction -
     * <BR>
     *
     * ```javascript
     * import { first, switchMap } from '@polkadot/x-rxjs/operators';
     * import ApiRx from '@polkadot/api/rx';
     *
     * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)
     * import testingPairs from '@polkadot/keyring/testingPairs';
     * const keyring = testingPairs();
     *
     * // get api via Promise
     * const api = await ApiRx.create().toPromise();
     *
     * // retrieve nonce for the account
     * api.query.system
     *   .account(keyring.alice.address)
     *   .pipe(
     *      first(),
     *      // pipe nonce into transfer
     *      switchMap(([nonce]) =>
     *        api.tx.balances
     *          // create transfer
     *          .transfer(keyring.bob.address, 12345)
     *          // sign the transaction
     *          .sign(keyring.alice, { nonce })
     *          // send the transaction
     *          .send()
     *      )
     *   )
     *   // subscribe to overall result
     *   .subscribe(({ status }) => {
     *     if (status.isInBlock) {
     *       console.log('Completed at block hash', status.asFinalized.toHex());
     *     }
     *   });
     * ```
     */
    class ApiRx extends base_4.ApiBase {
        /**
         * @description Create an instance of the ApiRx class
         * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]
         * @example
         * <BR>
         *
         * ```javascript
         * import { switchMap } from '@polkadot/x-rxjs/operators';
         * import Api from '@polkadot/api/rx';
         *
         * new Api().isReady
         *   .pipe(
         *     switchMap((api) =>
         *       api.rpc.chain.subscribeNewHeads()
         *   ))
         *   .subscribe((header) => {
         *     console.log(`new block #${header.number.toNumber()}`);
         *   });
         * ```
         */
        constructor(options) {
            super(options, 'rxjs', decorateMethod);
            _isReadyRx.set(this, void 0);
            __classPrivateFieldSet(this, _isReadyRx, x_rxjs_60.from(
            // You can create an observable from an event, however my mind groks this form better
            new Promise((resolve) => {
                super.on('ready', () => {
                    resolve(this);
                });
            })));
        }
        /**
         * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.
         * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]
         * @example
         * <BR>
         *
         * ```javascript
         * import { switchMap } from '@polkadot/x-rxjs/operators';
         * import Api from '@polkadot/api/rx';
         *
         * Api.create()
         *   .pipe(
         *     switchMap((api) =>
         *       api.rpc.chain.subscribeNewHeads()
         *   ))
         *   .subscribe((header) => {
         *     console.log(`new block #${header.number.toNumber()}`);
         *   });
         * ```
         */
        static create(options) {
            return new ApiRx(options).isReady;
        }
        /**
         * @description Observable that returns the first time we are connected and loaded
         */
        get isReady() {
            return __classPrivateFieldGet(this, _isReadyRx);
        }
        /**
         * @description Returns a clone of this ApiRx instance (new underlying provider connection)
         */
        clone() {
            return new ApiRx({
                ...this._options,
                source: this
            });
        }
    }
    exports.ApiRx = ApiRx;
    _isReadyRx = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/index", ["require", "exports", "@polkadot/keyring", "rpc-provider/src/ws/index", "api/src/promise/index", "api/src/rx/index", "api/src/submittable/index", "api/src/detectPackage"], function (require, exports, keyring_1, ws_2, promise_1, rx_1, submittable_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubmittableResult = exports.ApiRx = exports.ApiPromise = exports.WsProvider = exports.Keyring = void 0;
    Object.defineProperty(exports, "Keyring", { enumerable: true, get: function () { return keyring_1.Keyring; } });
    Object.defineProperty(exports, "WsProvider", { enumerable: true, get: function () { return ws_2.WsProvider; } });
    Object.defineProperty(exports, "ApiPromise", { enumerable: true, get: function () { return promise_1.ApiPromise; } });
    Object.defineProperty(exports, "ApiRx", { enumerable: true, get: function () { return rx_1.ApiRx; } });
    Object.defineProperty(exports, "SubmittableResult", { enumerable: true, get: function () { return submittable_3.SubmittableResult; } });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/checkTypes.manual", ["require", "exports", "api/src/index", "@polkadot/keyring/testingPairs", "types/src/create/index"], function (require, exports, api_1, testingPairs_1, create_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_5.TypeRegistry();
    function consts(api) {
        // constants has actual value & metadata
        console.log(api.consts.foo.bar, api.consts.balances.existentialDeposit.toNumber(), api.consts.balances.existentialDeposit.meta.documentation.map((s) => s.toString()).join(''));
    }
    async function derive(api) {
        await api.derive.chain.subscribeNewHeads((header) => {
            console.log('current author:', header.author);
        });
        const fees = await api.derive.balances.fees();
        console.log('fees', fees);
    }
    function errors(api) {
        const someError = {};
        // existing
        console.log(api.errors.vesting.AmountLow.is(someError));
        // non-existing error, existing module
        console.log(api.errors.vesting.Something.is(someError));
        // something random
        console.log(api.errors.something.Random.is(someError));
    }
    function events(api) {
        const event = {};
        // existing
        if (api.events.balances.Transfer.is(event)) {
            // the types are correctly expanded
            const [from, to, amount] = event.data;
            console.log(from.toHuman(), to.toHuman(), amount.toBn());
        }
        // something random
        if (api.events.something.Random.is(event)) {
            // the types are just codec
            const [a, b] = event.data;
            console.log(a.toHuman(), b.toHuman());
        }
    }
    async function query(api, pairs) {
        const intentions = await api.query.staking.bonded();
        console.log('intentions:', intentions);
        // api.query.*.* is well-typed
        const bar = await api.query.foo.bar(); // bar is Codec (unknown module)
        const bal = await api.query.balances.totalIssuance(); // bal is Balance
        const bal2 = await api.query.balances.totalIssuance('WRONG_ARG'); // bal2 is Codec (wrong args)
        const override = await api.query.balances.totalIssuance(); // override is still available
        const oldBal = await api.query.balances.totalIssuance.at('abcd');
        // It's hard to correctly type .multi. Expected: `Balance[]`, actual: Codec[].
        // In the meantime, we can case with `<Balance>` (this is not available on recent chains)
        const multi = await api.query.balances.freeBalance.multi([pairs.alice.address, pairs.bob.address]);
        console.log('query types:', bar, bal, bal2, override, oldBal, multi);
        // check multi for unsub
        const multiUnsub = await api.queryMulti([
            [api.query.staking.validators],
            [api.query.system.events]
        ], (values) => {
            console.log('values', values);
            multiUnsub();
        });
        // check multi , Promise result
        const multiRes = await api.queryMulti([
            [api.query.system.account, pairs.eve.address],
            // older chains only
            [api.query.system.accountNonce, pairs.eve.address]
        ]);
        console.log(multiRes);
    }
    async function queryExtra(api, pairs) {
        // events destructing
        await api.query.system.events((records) => {
            records.forEach(({ event, phase }) => {
                if (phase.isApplyExtrinsic) {
                    // Dunno... this should work
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    const [accountId, value] = event.data;
                    console.log(`${accountId.toString()} has ${value.toHuman()}`);
                }
            });
        });
        // at queries
        const events = await api.query.system.events.at('0x12345');
        console.log(`Received ${events.length} events:`);
        // check entries()
        await api.query.system.account.entries(); // should not take a param
        await api.query.staking.nominatorSlashInEra.entries(123); // should take a param
        // check range
        await api.query.balances.freeBalance.range(['0x1234'], pairs.bob.address);
        // check range types
        const entries = await api.query.system.events.range(['0x12345', '0x7890']);
        console.log(`Received ${entries.length} entries, ${entries.map(([hash, events]) => `${hash.toHex()}: ${events.length} events`).join(', ')}`);
        // is
        const key = {};
        if (api.query.balances.account.is(key)) {
            const [accountId] = key.args;
            // should be AccountId type
            console.log(accountId.toHuman());
        }
    }
    async function rpc(api) {
        // defaults
        await api.rpc.chain.subscribeNewHeads((header) => {
            console.log('current header #', header.number.toNumber());
        });
        // with generic params
        await api.rpc.state.subscribeStorage(['my_balance_key'], ([balance]) => {
            console.log('current balance:', balance.toString());
        });
        // using json & raw
        await api.rpc.chain.getBlock.json('0x123456');
        await api.rpc.chain.getBlock.raw('0x123456');
        // using raw subs
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        api.rpc.chain.subscribeNewHeads.raw((result) => {
            console.log(result);
        });
    }
    function types(api) {
        // check correct types with `createType`
        const balance = registry.createType('Balance', 2);
        const gas = registry.createType('Gas', 2);
        const compact = registry.createType('Compact<u32>', 2);
        // const random = registry.createType('RandomType', 2); // This one should deliberately show a TS error
        const gasUnsafe = create_5.createTypeUnsafe(registry, 'Gas', [2]);
        const overriddenUnsafe = create_5.createTypeUnsafe(registry, 'Gas', [2]);
        console.log(balance, gas, compact, gasUnsafe, overriddenUnsafe, api.createType('AccountData'));
    }
    async function tx(api, pairs) {
        // transfer, also allows for BigInt inputs here
        const transfer = api.tx.balances.transfer(pairs.bob.address, 123456789n);
        console.log('transfer casted', transfer, transfer);
        // simple "return the hash" variant
        console.log('hash:', (await transfer.signAndSend(pairs.alice)).toHex());
        // passing options, but waiting for hash
        const nonce = await api.query.system.accountNonce(pairs.alice.address);
        (await api.tx.balances
            .transfer(pairs.bob.address, 12345)
            .signAndSend(pairs.alice, { nonce })).toHex();
        // just with the callback
        await api.tx.balances
            .transfer(pairs.bob.address, 12345)
            .signAndSend(pairs.alice, ({ status }) => console.log(status.type));
        // with options and the callback
        const nonce2 = await api.query.system.accountNonce(pairs.alice.address);
        const unsub2 = await api.tx.balances
            .transfer(pairs.bob.address, 12345)
            .signAndSend(pairs.alice, { nonce: nonce2 }, ({ status }) => {
            console.log('transfer status:', status.type);
            unsub2();
        });
        // it allows for query & then using the submittable
        const second = api.tx.democracy.second(123, 5);
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        await second.signAndSend('123', (result) => console.log(result));
        // it handles enum inputs correctly
        await api.tx.democracy.proxyVote(123, { Split: { nay: 456, yay: 123 } }).signAndSend(pairs.alice);
        // is
        if (api.tx.balances.transfer.is(second)) {
            const [recipientId, balance] = second.args;
            // should be LookupSource & Balance types
            console.log(recipientId.toHuman(), balance.toNumber());
        }
    }
    async function main() {
        const api = await api_1.ApiPromise.create();
        const pairs = testingPairs_1.createTestPairs();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.all([
            consts(api),
            derive(api),
            errors(api),
            events(api),
            query(api, pairs),
            queryExtra(api, pairs),
            rpc(api),
            types(api),
            tx(api, pairs)
        ]);
    }
    // eslint-disable-next-line @typescript-eslint/unbound-method
    main().catch(console.error);
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/promise/Combinators.spec", ["require", "exports", "api/src/promise/Combinator"], function (require, exports, Combinator_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Combinator', () => {
        let fns = [];
        // eslint-disable-next-line @typescript-eslint/require-await
        const storeFn = async (cb) => {
            fns.push(cb);
            return () => undefined;
        };
        beforeEach(() => {
            fns = [];
        });
        it('it triggers on all values', (done) => {
            let count = 0;
            const combinator = new Combinator_2.Combinator([storeFn], (value) => {
                expect(value[0]).toEqual(`test${count}`);
                count++;
                if (count === 3) {
                    done();
                }
            });
            fns[0]('test0');
            fns[0]('test1');
            fns[0]('test2');
            expect(combinator).toBeDefined();
        });
        it('combines values from 2 sources, firing when it has all results', (done) => {
            const combinator = new Combinator_2.Combinator([storeFn, storeFn], (value) => {
                expect(value).toEqual(['test0', 'test1']);
                done();
            });
            fns[0]('test0');
            fns[1]('test1');
            expect(combinator).toBeDefined();
        });
        it('combines values from 2 sources, allowing multiple updates', (done) => {
            let count = 0;
            const combinator = new Combinator_2.Combinator([storeFn, storeFn], (value) => {
                expect(value).toEqual(count === 0
                    ? ['test0', 'test1']
                    : ['test2', 'test1']);
                count++;
                if (count === 2) {
                    done();
                }
            });
            fns[0]('test0');
            fns[1]('test1');
            fns[0]('test2');
            expect(combinator).toBeDefined();
        });
        it('unsubscribes as required', (done) => {
            // eslint-disable-next-line @typescript-eslint/require-await
            const mocker = async () => done;
            const combinator = new Combinator_2.Combinator([
                mocker,
                // eslint-disable-next-line @typescript-eslint/require-await
                async () => () => undefined
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
            ], (value) => {
                // ignore
            });
            combinator.unsubscribe();
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/mock/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v12/static", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = '';
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/static", ["require", "exports", "metadata/src/v12/static"], function (require, exports, static_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_1 = __importDefault(static_1);
    exports.default = static_1.default;
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/mock/index", ["require", "exports", "bn.js", "eventemitter3", "@polkadot/keyring/testing", "metadata/src/index", "metadata/src/static", "types/src/interfaces/jsonrpc", "@polkadot/types/json/Header.004.json", "@polkadot/types/json/SignedBlock.004.immortal.json", "@polkadot/util", "@polkadot/util-crypto"], function (require, exports, bn_js_12, eventemitter3_3, testing_1, metadata_3, static_2, jsonrpc_2, Header_004_json_1, SignedBlock_004_immortal_json_1, util_200, util_crypto_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockProvider = void 0;
    bn_js_12 = __importDefault(bn_js_12);
    eventemitter3_3 = __importDefault(eventemitter3_3);
    static_2 = __importDefault(static_2);
    jsonrpc_2 = __importDefault(jsonrpc_2);
    Header_004_json_1 = __importDefault(Header_004_json_1);
    SignedBlock_004_immortal_json_1 = __importDefault(SignedBlock_004_immortal_json_1);
    const INTERVAL = 1000;
    const SUBSCRIPTIONS = Array.prototype.concat.apply([], Object.values(jsonrpc_2.default).map((section) => Object
        .values(section)
        .filter(({ isSubscription }) => isSubscription)
        .map(({ jsonrpc }) => jsonrpc)
        .concat('chain_subscribeNewHead')));
    const keyring = testing_1.createTestKeyring({ type: 'ed25519' });
    const l = util_200.logger('api-mock');
    /**
     * A mock provider mainly used for testing.
     * @return {ProviderInterface} The mock provider
     * @internal
     */
    class MockProvider {
        constructor(registry) {
            this.db = {};
            this.emitter = new eventemitter3_3.default();
            this.isUpdating = true;
            this.prevNumber = new bn_js_12.default(-1);
            this.requests = {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/no-unsafe-member-access
                chain_getBlock: (hash) => this.registry.createType('SignedBlock', SignedBlock_004_immortal_json_1.default.result).toJSON(),
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                chain_getBlockHash: (blockNumber) => '0x1234',
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                chain_getFinalizedHead: () => this.registry.createType('Header', Header_004_json_1.default.result).hash,
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                chain_getHeader: () => this.registry.createType('Header', Header_004_json_1.default.result).toJSON(),
                rpc_methods: () => [],
                state_getKeys: () => [],
                state_getKeysPaged: () => [],
                state_getMetadata: () => static_2.default,
                state_getRuntimeVersion: () => this.registry.createType('RuntimeVersion').toHex(),
                state_getStorage: (storage, params) => util_200.u8aToHex(storage[params[0]]),
                system_chain: () => 'mockChain',
                system_name: () => 'mockClient',
                system_properties: () => ({ ss58Format: 42 }),
                system_version: () => '9.8.7'
            };
            this.subscriptions = SUBSCRIPTIONS.reduce((subs, name) => {
                subs[name] = {
                    callbacks: {},
                    lastValue: null
                };
                return subs;
            }, {});
            this.subscriptionId = 0;
            this.subscriptionMap = {};
            this.registry = registry;
            this.init();
        }
        get hasSubscriptions() {
            return true;
        }
        clone() {
            throw new Error('Unimplemented');
        }
        async connect() {
            // noop
        }
        async disconnect() {
            // noop
        }
        get isConnected() {
            return true;
        }
        on(type, sub) {
            this.emitter.on(type, sub);
            return () => {
                this.emitter.removeListener(type, sub);
            };
        }
        // eslint-disable-next-line @typescript-eslint/require-await
        async send(method, params) {
            util_200.assert(this.requests[method], `provider.send: Invalid method '${method}'`);
            return this.requests[method](this.db, params);
        }
        // eslint-disable-next-line @typescript-eslint/require-await
        async subscribe(type, method, ...params) {
            l.debug(() => ['subscribe', method, params]);
            util_200.assert(this.subscriptions[method], `provider.subscribe: Invalid method '${method}'`);
            const callback = params.pop();
            const id = ++this.subscriptionId;
            this.subscriptions[method].callbacks[id] = callback;
            this.subscriptionMap[id] = method;
            if (this.subscriptions[method].lastValue !== null) {
                callback(null, this.subscriptions[method].lastValue);
            }
            return id;
        }
        // eslint-disable-next-line @typescript-eslint/require-await
        async unsubscribe(type, method, id) {
            const sub = this.subscriptionMap[id];
            l.debug(() => ['unsubscribe', id, sub]);
            util_200.assert(sub, `Unable to find subscription for ${id}`);
            delete this.subscriptionMap[id];
            delete this.subscriptions[sub].callbacks[id];
            return true;
        }
        init() {
            const emitEvents = ['connected', 'disconnected'];
            let emitIndex = 0;
            let newHead = this.makeBlockHeader();
            let counter = -1;
            const metadata = new metadata_3.Metadata(this.registry, static_2.default);
            this.registry.setMetadata(metadata);
            const query = metadata_3.decorateStorage(this.registry, metadata.asLatest, metadata.version);
            // Do something every 1 seconds
            setInterval(() => {
                if (!this.isUpdating) {
                    return;
                }
                // create a new header (next block)
                newHead = this.makeBlockHeader();
                // increment the balances and nonce for each account
                keyring.getPairs().forEach(({ publicKey }, index) => {
                    this.setStateBn(query.system.account(publicKey), newHead.number.toBn().addn(index));
                });
                // set the timestamp for the current block
                this.setStateBn(query.timestamp.now(), Math.floor(Date.now() / 1000));
                this.updateSubs('chain_subscribeNewHead', newHead);
                // We emit connected/disconnected at intervals
                if (++counter % 2 === 1) {
                    if (++emitIndex === emitEvents.length) {
                        emitIndex = 0;
                    }
                    this.emitter.emit(emitEvents[emitIndex]);
                }
            }, INTERVAL);
        }
        makeBlockHeader() {
            const blockNumber = this.prevNumber.addn(1);
            const header = this.registry.createType('Header', {
                digest: {
                    logs: []
                },
                extrinsicsRoot: util_crypto_13.randomAsU8a(),
                number: blockNumber,
                parentHash: blockNumber.isZero()
                    ? new Uint8Array(32)
                    : util_200.bnToU8a(this.prevNumber, 256, false),
                stateRoot: util_200.bnToU8a(blockNumber, 256, false)
            });
            this.prevNumber = blockNumber;
            return header;
        }
        setStateBn(key, value) {
            this.db[util_200.u8aToHex(key)] = util_200.bnToU8a(value, 64, true);
        }
        updateSubs(method, value) {
            this.subscriptions[method].lastValue = value;
            Object
                .values(this.subscriptions[method].callbacks)
                .forEach((cb) => {
                try {
                    cb(null, value.toJSON());
                }
                catch (error) {
                    l.error(`Error on '${method}' subscription`, error);
                }
            });
        }
    }
    exports.MockProvider = MockProvider;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/test/util/logEvents", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logEvents = void 0;
    // log all events for the transfers, calling done() when finalized
    exports.logEvents = (done) => ({ events, status }) => {
        console.log('Transaction status:', status.type);
        if (status.isInBlock) {
            console.log('Completed at block hash', status.value.toHex());
            console.log('Events:');
            events.forEach(({ event: { data, method, section }, phase }) => {
                console.log('\t', phase.toString(), `: ${section}.${method}`, data.toString());
            });
            if (events.length) {
                done();
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/test/util/SingleAccountSigner", ["require", "exports", "@polkadot/util"], function (require, exports, util_201) {
    "use strict";
    var _keyringPair, _registry, _signDelay;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SingleAccountSigner = void 0;
    let id = 0;
    class SingleAccountSigner {
        constructor(registry, keyringPair, signDelay = 0) {
            _keyringPair.set(this, void 0);
            _registry.set(this, void 0);
            _signDelay.set(this, void 0);
            __classPrivateFieldSet(this, _keyringPair, keyringPair);
            __classPrivateFieldSet(this, _registry, registry);
            __classPrivateFieldSet(this, _signDelay, signDelay);
        }
        async signPayload(payload) {
            util_201.assert(payload.address === __classPrivateFieldGet(this, _keyringPair).address, 'Signer does not have the keyringPair');
            return new Promise((resolve) => {
                setTimeout(() => {
                    const signed = __classPrivateFieldGet(this, _registry).createType('ExtrinsicPayload', payload, { version: payload.version }).sign(__classPrivateFieldGet(this, _keyringPair));
                    resolve({
                        id: ++id,
                        ...signed
                    });
                }, __classPrivateFieldGet(this, _signDelay));
            });
        }
        async signRaw({ address, data }) {
            util_201.assert(address === __classPrivateFieldGet(this, _keyringPair).address, 'Signer does not have the keyringPair');
            return new Promise((resolve) => {
                setTimeout(() => {
                    const signature = util_201.u8aToHex(__classPrivateFieldGet(this, _keyringPair).sign(util_201.hexToU8a(data)));
                    resolve({
                        id: ++id,
                        signature
                    });
                }, __classPrivateFieldGet(this, _signDelay));
            });
        }
    }
    exports.SingleAccountSigner = SingleAccountSigner;
    _keyringPair = new WeakMap(), _registry = new WeakMap(), _signDelay = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/test/util/index", ["require", "exports", "api/test/util/logEvents", "api/test/util/SingleAccountSigner"], function (require, exports, logEvents_1, SingleAccountSigner_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(logEvents_1, exports);
    __exportStar(SingleAccountSigner_1, exports);
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/promise/index.spec", ["require", "exports", "@polkadot/keyring/pair", "@polkadot/keyring/testing", "rpc-provider/src/mock/index", "types/src/create/index", "@polkadot/util", "api/test/util/index", "api/src/promise/index"], function (require, exports, pair_1, testing_2, mock_1, create_6, util_202, util_203, _1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const TRANSFER_SIG = '0x7a10e5ed9a14284eca7bea53f81631981dddda5a3d2dee973b136475947264801465726e4829ae3994d9058df638d959d4e043c7f1924299546790dda1dea20a';
    describe('ApiPromise', () => {
        const registry = new create_6.TypeRegistry();
        const keyring = testing_2.createTestKeyring({ type: 'ed25519' });
        const aliceEd = keyring.addPair(
        // eslint-disable-next-line @typescript-eslint/unbound-method
        pair_1.createPair({ toSS58: keyring.encodeAddress, type: 'ed25519' }, {
            publicKey: util_202.hexToU8a('0x88dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee'),
            secretKey: util_202.hexToU8a('0xabf8e5bdbe30c65656c0a3cbd181ff8a56294a69dfedd27982aace4a7690911588dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee')
        }));
        let provider;
        async function createTransfer() {
            provider.subscriptions.state_subscribeStorage.lastValue = {
                changes: [
                    [
                        '0x26aa394eea5630e07c48ae0c9558cef79c2f82b23e5fd031fb54c292794b4cc4d560eb8d00e57357cf76492334e43bb2ecaa9f28df6a8c4426d7b6090f7ad3c9',
                        '0x00'
                    ]
                ]
            };
            const signer = new util_203.SingleAccountSigner(registry, aliceEd);
            const api = await _1.ApiPromise.create({ provider, registry, signer });
            const transfer = api.tx.balances.transfer(keyring.getPair('0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e').address, 321564789876512345n);
            return { api, transfer: await transfer.signAsync(aliceEd.address, {}) };
        }
        beforeEach(() => {
            jest.setTimeout(3000000);
            provider = new mock_1.MockProvider(registry);
        });
        describe('initialization', () => {
            it('Create API instance with metadata map and makes the runtime, rpc, state & extrinsics available', async () => {
                const rpcData = await provider.send('state_getMetadata', []);
                const genesisHash = registry.createType('Hash', await provider.send('chain_getBlockHash', [])).toHex();
                const specVersion = 0;
                const metadata = {};
                const key = `${genesisHash}-${specVersion}`;
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                metadata[key] = rpcData;
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const api = await _1.ApiPromise.create({ metadata, provider, registry });
                expect(api.genesisHash).toBeDefined();
                expect(api.runtimeMetadata).toBeDefined();
                expect(api.runtimeVersion).toBeDefined();
                expect(api.rpc).toBeDefined();
                expect(api.query).toBeDefined();
                expect(api.tx).toBeDefined();
                expect(api.derive).toBeDefined();
            });
            it('Create API instance without metadata and makes the runtime, rpc, state & extrinsics available', async () => {
                const metadata = {};
                const api = await _1.ApiPromise.create({ metadata, provider, registry });
                expect(api.genesisHash).toBeDefined();
                expect(api.runtimeMetadata).toBeDefined();
                expect(api.runtimeVersion).toBeDefined();
                expect(api.rpc).toBeDefined();
                expect(api.query).toBeDefined();
                expect(api.tx).toBeDefined();
                expect(api.derive).toBeDefined();
            });
            it('Create API instance will error on failure to await ready', async () => {
                class ErrorApiPromise extends _1.ApiPromise {
                    constructor() {
                        super({ provider });
                    }
                    _loadMeta() {
                        throw new Error('Simulate failure to load meta');
                    }
                }
                try {
                    await new ErrorApiPromise().isReadyOrError;
                    fail('Expected an error but none occurred.');
                }
                catch {
                    // Pass
                }
            });
        });
        describe('api.sign', () => {
            const ADDR = '5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu';
            const TEST = { data: '0x0102030405060708090a0b0c0d0e0f112233445566778899aabbccddeeff' };
            const SIG = '0x659effefbbe5ab4d7136ebb5084b959eb424e32b862307371be4721ac2c46334245af4f1476c36c5e5aff04396c2fdd2ce561ec90382821d4aa071b559b1db0f';
            it('signs data using a specified keyring', async () => {
                const api = new _1.ApiPromise({ provider, registry });
                expect(await api.sign(aliceEd, TEST)).toEqual(SIG);
            });
            it('signs data using an external signer', async () => {
                const api = new _1.ApiPromise({
                    provider,
                    registry,
                    signer: new util_203.SingleAccountSigner(registry, aliceEd)
                });
                expect(await api.sign(ADDR, TEST)).toEqual(SIG);
            });
        });
        describe('decorator.signAsync', () => {
            it('signs a transfer using an external signer', async () => {
                const { transfer } = await createTransfer();
                expect(transfer.signature.toHex()).toEqual(TRANSFER_SIG);
            });
        });
        describe('api.tx(...)', () => {
            it('allows construction from existing extrinsic', async () => {
                const { api, transfer } = await createTransfer();
                expect(api.tx(transfer.toHex()).signature.toHex()).toEqual(TRANSFER_SIG);
                expect(api.tx(transfer).signature.toHex()).toEqual(TRANSFER_SIG);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/promise/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/rx/index.spec", ["require", "exports", "@polkadot/keyring/testingPairs", "rpc-provider/src/mock/index", "types/src/create/index", "@polkadot/x-rxjs/operators", "api/test/util/index", "api/src/rx/index"], function (require, exports, testingPairs_2, mock_2, create_7, operators_81, util_204, _2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ApiRx', () => {
        const registry = new create_7.TypeRegistry();
        const keyring = testingPairs_2.createTestPairs({ type: 'ed25519' });
        let provider;
        beforeEach(() => {
            jest.setTimeout(3000000);
            provider = new mock_2.MockProvider(registry);
        });
        describe('decorator.signAsync', () => {
            it('signs a transfer using an external signer', () => {
                const signer = new util_204.SingleAccountSigner(registry, keyring.alice_session);
                _2.ApiRx.create({ provider, registry, signer }).pipe(operators_81.switchMap((api) => api.tx.balances
                    .transfer(keyring.eve.address, 12345)
                    .signAsync(keyring.alice_session, {})), operators_81.map((tx) => {
                    expect(tx.signature.toHex()).toEqual('0x97f3cfe5088fcd575313e983f45d02b0f630e7b94ff9a3ac50e20cd096a8f554fda73d42ead891b5a1d3ce5607d83f20b0c6570b555e949cfb5763d0abcd590b');
                }));
            });
            it('allows the second argument to signAsync to be omitted', () => {
                const signer = new util_204.SingleAccountSigner(registry, keyring.alice_session);
                _2.ApiRx.create({ provider, registry, signer }).pipe(operators_81.switchMap((api) => api.tx.balances
                    .transfer(keyring.eve.address, 12345)
                    .signAsync(keyring.alice_session)), operators_81.map((tx) => {
                    expect(tx.signature.toHex()).toEqual('0x97f3cfe5088fcd575313e983f45d02b0f630e7b94ff9a3ac50e20cd096a8f554fda73d42ead891b5a1d3ce5607d83f20b0c6570b555e949cfb5763d0abcd590b');
                }));
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/augmentObject.spec", ["require", "exports", "api/src/util/augmentObject"], function (require, exports, augmentObject_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('augmentObject', () => {
        let spy;
        beforeEach(() => {
            spy = jest.spyOn(console, 'warn');
        });
        afterEach(() => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            spy.mockClear();
        });
        it('logs added/removed sections and methods', () => {
            augmentObject_2.augmentObject('test', { bar: { b: 1 }, foo: { d: 1, f: 1 }, new: { z: 1 } }, { bar: { a: 1, c: 1 }, baz: { a: 1 }, foo: { c: 1, f: 1 } });
            expect(spy).toHaveBeenCalledWith(expect.anything(), expect.stringContaining('API/AUGMENT'), 'api.test: Found 1 added and 1 removed modules:\n\t  added: new\n\tremoved: baz');
            expect(spy).toHaveBeenCalledWith(expect.anything(), expect.stringContaining('API/AUGMENT'), 'api.test: Found 2 added and 3 removed calls:\n\t  added: bar.b, foo.d\n\tremoved: bar.a, bar.c, foo.c');
        });
        it('copies sections to the dest', () => {
            const src = { bar: { b: 1 }, foo: { a: 1 } };
            expect(augmentObject_2.augmentObject('test', src, {})).toEqual(src);
        });
        it('adds fields to existing sections', () => {
            const src = { bar: { b: 1 }, foo: { a: 1 } };
            const dst = { baz: { c: 1 }, foo: { b: 2 } };
            expect(augmentObject_2.augmentObject('test', src, dst)).toEqual({
                bar: { b: 1 },
                baz: { c: 1 },
                foo: { a: 1, b: 2 }
            });
        });
    });
});
// Copyright 2017-2019 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/src/util/validate.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "api/src/util/validate"], function (require, exports, metadata_4, static_3, create_8, validate_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_3 = __importDefault(static_3);
    describe('extractStorageArgs', () => {
        const registry = new create_8.TypeRegistry();
        let storage;
        beforeEach(() => {
            const metadata = new metadata_4.Metadata(registry, static_3.default);
            storage = metadata_4.decorateStorage(registry, metadata.asLatest, metadata.version);
        });
        it('validates no-arg plain', () => {
            expect(validate_2.extractStorageArgs(storage.timestamp.now, [])).toEqual([storage.timestamp.now]);
        });
        it('validates no-arg plain (with undefined, undefined)', () => {
            expect(validate_2.extractStorageArgs(storage.timestamp.now, [undefined, undefined])).toEqual([storage.timestamp.now]);
        });
        it('validates no-arg plain (failing when there are args)', () => {
            expect(() => validate_2.extractStorageArgs(storage.timestamp.now, [123, 456])).toThrow('timestamp.now() does not take any arguments, 2 found');
        });
        it('validates map, 1 arg', () => {
            expect(validate_2.extractStorageArgs(storage.staking.payee, ['abc'])).toEqual([storage.staking.payee, 'abc']);
        });
        it('validates map, 1 arg (failing with no args)', () => {
            expect(() => validate_2.extractStorageArgs(storage.staking.payee, [])).toThrow('staking.payee(AccountId) is a map, requiring 1 argument, 0 found');
        });
        it('validates map, 1 arg (failing with no args)', () => {
            expect(() => validate_2.extractStorageArgs(storage.staking.payee, ['abc', 'def'])).toThrow('staking.payee(AccountId) is a map, requiring 1 argument, 2 found');
        });
        it('validates doublemap, 2 args', () => {
            expect(validate_2.extractStorageArgs(storage.staking.erasStakers, [1, '0x1234'])).toEqual([storage.staking.erasStakers, [1, '0x1234']]);
        });
        it('validates doublemap, 2 args (failing with no args)', () => {
            expect(() => validate_2.extractStorageArgs(storage.staking.erasStakers, [])).toThrow('staking.erasStakers(EraIndex, AccountId) is a doublemap, requiring 2 arguments, 0 found');
        });
        it('validates doublemap, 2 args (failing with 1 arg)', () => {
            expect(() => validate_2.extractStorageArgs(storage.staking.erasStakers, [123])).toThrow('staking.erasStakers(EraIndex, AccountId) is a doublemap, requiring 2 arguments, 1 found');
        });
        // Linked maps have been removed
        it.skip('validates linked map, no args', () => {
            expect(validate_2.extractStorageArgs(storage.staking.validators, [])).toEqual([storage.staking.validators]);
        });
        it.skip('validates linked map, single arg', () => {
            expect(validate_2.extractStorageArgs(storage.staking.validators, [123])).toEqual([storage.staking.validators, 123]);
        });
        it.skip('validates linked map (failing with extra args)', () => {
            expect(() => validate_2.extractStorageArgs(storage.staking.validators, [123, 456])).toThrow('staking.validators(AccountId) is a linked map, requiring either 0 arguments (retrieving all) or 1 argument, 2 found');
        });
    });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/test/api.spec", ["require", "exports", "api/src/index"], function (require, exports, api_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createApi() {
        jest.setTimeout(30000);
        process.env.NODE_ENV = 'test';
        const provider = new api_2.WsProvider('wss://kusama-rpc.polkadot.io');
        // const provider = new WsProvider('wss://westend-rpc.polkadot.io/');
        // const provider = new WsProvider('ws://127.0.0.1:9944/');
        return new api_2.ApiPromise({ provider }).isReady;
    }
    describe.skip('misc quick tests', () => {
        it.skip('retrieves balances correctly', async () => {
            const api = await createApi();
            console.error(JSON.stringify(await api.query.system.account('FPzukZw2mphWsXDqdkNzLaxnanjZEWH9i2vqwobTdtde5me')));
            console.error(JSON.stringify(await api.query.system.account('HUewJvzVuEeyaxH2vx9XiyAPKrpu1Zj5r5Pi9VrGiBVty7q')));
        });
        it.skip('handles map keys', async () => {
            const api = await createApi();
            console.time('map.keys');
            const keys = await api.query.system.account.keys();
            console.error('# keys', keys.length);
            console.timeEnd('map.keys');
        });
        it.skip('handles map entries', async () => {
            const api = await createApi();
            console.time('map.entries');
            const entries = await api.query.system.account.entries(); // api.query.indices.accounts.entries();
            console.error('# entries', entries.length);
            console.timeEnd('map.entries');
        });
        it.skip('handles doublemap entries', async () => {
            const api = await createApi();
            const activeEra = await api.query.staking.activeEra();
            console.error(JSON.stringify(await api.query.staking.erasStakers.entries(activeEra.unwrapOrDefault().index)));
        });
        it.skip('does something in society', async () => {
            const api = await createApi();
            console.error(JSON.stringify(await api.query.society.defenderVotes('Dab4bfYTZRUDMWjYAUQuFbDreQ9mt7nULWu3Dw7jodbzVe9')));
        });
        it.skip('allows for range queries', async () => {
            const api = await createApi();
            const header = await api.rpc.chain.getHeader();
            console.error(JSON.stringify((await api.query.staking.activeEra.range([header.parentHash, header.hash], 'Dab4bfYTZRUDMWjYAUQuFbDreQ9mt7nULWu3Dw7jodbzVe9'))
                .map(([block, value]) => [block, value.toRawType(), value.toHuman()])));
        });
    });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api/test/typesBundleDerive.spec", ["require", "exports", "api/src/index", "api-derive/src/util/memo", "@polkadot/x-rxjs", "@polkadot/x-rxjs/operators"], function (require, exports, api_3, memo_2, x_rxjs_61, operators_82) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const typesBundle = {
        spec: {
            Equilibrium: {
                derives: {
                    balances: {
                        all: (instanceId, api) => memo_2.memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(operators_82.switchMap((accountId) => accountId
                            ? x_rxjs_61.combineLatest([
                                x_rxjs_61.of(accountId),
                                api
                                    .queryMulti([
                                    [api.query.balances.account, [accountId, 'EQ']],
                                    [api.query.eqVesting.vested, accountId],
                                    [api.query.eqVesting.vesting, accountId],
                                    [api.query.system.account, accountId]
                                ])
                                    .pipe(operators_82.map((raw) => {
                                    if (raw.length < 4) {
                                        throw new Error('4 members expected');
                                    }
                                    const res = raw;
                                    const freeBalance = res[0].asPositive;
                                    let reservedBalance = api.registry.createType('Balance');
                                    let vestingLocked = api.registry.createType('Balance');
                                    if (res[1].isSome && res[2].isSome) {
                                        const vested = res[1].unwrap();
                                        const info = res[2].unwrap();
                                        vestingLocked = info.locked;
                                        reservedBalance = api.registry.createType('Balance', vestingLocked.sub(vested));
                                    }
                                    return [
                                        freeBalance,
                                        reservedBalance,
                                        vestingLocked,
                                        res[3].nonce
                                    ];
                                }))
                            ])
                            : x_rxjs_61.of([
                                api.registry.createType('AccountId'),
                                [
                                    api.registry.createType('Balance'),
                                    api.registry.createType('Balance'),
                                    api.registry.createType('Balance'),
                                    api.registry.createType('Index')
                                ]
                            ])), operators_82.map(([accountId, [freeBalance, reservedBalance, vestingLocked, accountNonce]]) => ({
                            accountId,
                            accountNonce,
                            freeBalance,
                            lockedBalance: vestingLocked,
                            lockedBreakdown: [],
                            reservedBalance,
                            vestingLocked
                        }))))
                    }
                },
                types: [
                    {
                        minmax: [0, undefined],
                        types: {
                            Balance: 'u64',
                            BalanceOf: 'Balance',
                            BalancesAggregate: {
                                total_debt: 'Balance',
                                total_issuance: 'Balance'
                            },
                            BlockNumber: 'u64',
                            Currency: {
                                _enum: ['Unknown', 'Usd', 'EQ', 'Eth', 'Btc', 'Eos', 'Dot']
                            },
                            DataPoint: {
                                account_id: 'AccountId',
                                block_number: 'BlockNumber',
                                price: 'u64',
                                timestamp: 'u64'
                            },
                            FixedI64: 'i64',
                            Keys: 'SessionKeys3',
                            LookupSource: 'AccountId',
                            PricePeriod: {
                                _enum: ['Min', 'TenMin', 'Hour', 'FourHour', 'Day']
                            },
                            PricePoint: {
                                block_number: 'BlockNumber',
                                data_points: 'Vec<DataPoint>',
                                price: 'u64',
                                timestamp: 'u64'
                            },
                            ReinitRequest: {
                                account: 'AccountId',
                                authority_index: 'AuthIndex',
                                block_num: 'BlockNumber',
                                validators_len: 'u32'
                            },
                            SignedBalance: {
                                _enum: {
                                    Negative: 'Balance',
                                    Positive: 'Balance'
                                }
                            },
                            TotalAggregates: {
                                collateral: 'Balance',
                                debt: 'Balance'
                            },
                            TransferReason: {
                                _enum: [
                                    'Common',
                                    'InterestFee',
                                    'MarginCall',
                                    'BailsmenRedistribution',
                                    'TreasuryEqBuyout',
                                    'TreasuryBuyEq'
                                ]
                            },
                            UserGroup: {
                                _enum: ['Unknown', 'Balances', 'Bailsman']
                            },
                            VestingInfo: {
                                locked: 'Balance',
                                perBlock: 'Balance',
                                startingBlock: 'BlockNumber'
                            }
                        }
                    }
                ]
            }
        }
    };
    function createApi() {
        jest.setTimeout(30000);
        const provider = new api_3.WsProvider('wss://tge.equilibrium.io');
        return new api_3.ApiPromise({ provider, typesBundle }).isReady;
    }
    describe.skip('equilibrium api', () => {
        it.skip('does not fail on derive.balances.all', async () => {
            const api = await createApi();
            await api.derive.balances.all('5DnoYz3koaRcMZ9Hj4FmQ2nNRKQfS73yBmEzzM9SsPn9cLtb');
        });
    });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/test/contracts/ink/index", ["require", "exports", "./delegator.json", "./dns.json", "./erc20.json", "./erc721.json", "./flipper.json", "./incrementer.json", "./multisig_plain.json"], function (require, exports, delegator_json_1, dns_json_1, erc20_json_1, erc721_json_1, flipper_json_1, incrementer_json_1, multisig_plain_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multisigPlain = exports.incrementer = exports.flipper = exports.erc721 = exports.erc20 = exports.dns = exports.delegator = void 0;
    Object.defineProperty(exports, "delegator", { enumerable: true, get: function () { return __importDefault(delegator_json_1).default; } });
    Object.defineProperty(exports, "dns", { enumerable: true, get: function () { return __importDefault(dns_json_1).default; } });
    Object.defineProperty(exports, "erc20", { enumerable: true, get: function () { return __importDefault(erc20_json_1).default; } });
    Object.defineProperty(exports, "erc721", { enumerable: true, get: function () { return __importDefault(erc721_json_1).default; } });
    Object.defineProperty(exports, "flipper", { enumerable: true, get: function () { return __importDefault(flipper_json_1).default; } });
    Object.defineProperty(exports, "incrementer", { enumerable: true, get: function () { return __importDefault(incrementer_json_1).default; } });
    Object.defineProperty(exports, "multisigPlain", { enumerable: true, get: function () { return __importDefault(multisig_plain_json_1).default; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/test/contracts/solang/index", ["require", "exports", "./ints256.json"], function (require, exports, ints256_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ints256 = void 0;
    Object.defineProperty(exports, "ints256", { enumerable: true, get: function () { return __importDefault(ints256_json_1).default; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/test/contracts/user/index", ["require", "exports", "./assetTransfer.json", "./enumExample.json", "./withString.json"], function (require, exports, assetTransfer_json_1, enumExample_json_1, withString_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withString = exports.enumExample = exports.assetTransfer = void 0;
    Object.defineProperty(exports, "assetTransfer", { enumerable: true, get: function () { return __importDefault(assetTransfer_json_1).default; } });
    Object.defineProperty(exports, "enumExample", { enumerable: true, get: function () { return __importDefault(enumExample_json_1).default; } });
    Object.defineProperty(exports, "withString", { enumerable: true, get: function () { return __importDefault(withString_json_1).default; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/test/contracts/index", ["require", "exports", "api-contract/test/contracts/ink/index", "api-contract/test/contracts/solang/index", "api-contract/test/contracts/user/index"], function (require, exports, ink, solang, user) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ink = __importStar(ink);
    solang = __importStar(solang);
    user = __importStar(user);
    const all = {};
    function addExport(type, abis) {
        Object.keys(abis).forEach((key) => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            all[`${type}_${key}`] = abis[key];
        });
    }
    addExport('ink', ink);
    addExport('solang', solang);
    addExport('user', user);
    exports.default = all;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/MetaRegistry", ["require", "exports", "types/src/create/index", "types/src/types/index", "@polkadot/util"], function (require, exports, create_9, types_113, util_205) {
    "use strict";
    var _siTypes, _getMetaType, _extract, _extractArray, _extractFields, _extractPrimitive, _extractPrimitivePath, _extractSequence, _extractTuple, _extractVariant, _extractVariantSub;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetaRegistry = exports.getRegistryOffset = void 0;
    // convert the offset into project-specific, index-1
    function getRegistryOffset(id) {
        return id.toNumber() - 1;
    }
    exports.getRegistryOffset = getRegistryOffset;
    const PRIMITIVE_ALIAS = {
        Char: 'u32',
        Str: 'Text'
    };
    const PRIMITIVE_ALWAYS = ['AccountId', 'AccountIndex', 'Address', 'Balance'];
    class MetaRegistry extends create_9.TypeRegistry {
        constructor(chainProperties) {
            super();
            this.metaTypeDefs = [];
            _siTypes.set(this, []);
            _getMetaType.set(this, (id) => {
                const type = __classPrivateFieldGet(this, _siTypes)[getRegistryOffset(id)];
                util_205.assert(!util_205.isUndefined(type), `getMetaType:: Unable to find ${id.toNumber()} in type values`);
                return this.createType('SiType', type);
            });
            _extract.set(this, (type, id) => {
                const path = [...type.path];
                const pathFinal = path.length ? path[path.length - 1].toString() : '';
                let typeDef;
                if (type.path.join('::').startsWith('ink_env::types::') || PRIMITIVE_ALWAYS.includes(pathFinal)) {
                    typeDef = __classPrivateFieldGet(this, _extractPrimitivePath).call(this, type);
                }
                else if (type.def.isPrimitive) {
                    typeDef = __classPrivateFieldGet(this, _extractPrimitive).call(this, type);
                }
                else if (type.def.isComposite) {
                    typeDef = __classPrivateFieldGet(this, _extractFields).call(this, type.def.asComposite.fields);
                }
                else if (type.def.isVariant) {
                    typeDef = __classPrivateFieldGet(this, _extractVariant).call(this, type.def.asVariant, id);
                }
                else if (type.def.isArray) {
                    typeDef = __classPrivateFieldGet(this, _extractArray).call(this, type.def.asArray);
                }
                else if (type.def.isSequence) {
                    typeDef = __classPrivateFieldGet(this, _extractSequence).call(this, type.def.asSequence, id);
                }
                else if (type.def.isTuple) {
                    typeDef = __classPrivateFieldGet(this, _extractTuple).call(this, type.def.asTuple);
                }
                else {
                    throw new Error(`Invalid ink! type at index ${id.toString()}`);
                }
                const displayName = path.pop()?.toString();
                return create_9.withTypeString({
                    ...(displayName
                        ? { displayName }
                        : {}),
                    ...(path.length > 1
                        ? { namespace: path.map((segment) => segment.toString()).join('::') }
                        : {}),
                    ...(type.params.length > 0
                        ? { sub: type.params.map((type) => this.getMetaTypeDef({ type })) }
                        : {}),
                    ...typeDef
                });
            });
            _extractArray.set(this, ({ len: length, type }) => {
                util_205.assert(!length || length.toNumber() <= 256, 'MetaRegistry: Only support for [Type; <length>], where length > 256');
                return {
                    info: types_113.TypeDefInfo.VecFixed,
                    length: length.toNumber(),
                    sub: this.getMetaTypeDef({ type })
                };
            });
            _extractFields.set(this, (fields) => {
                const [isStruct, isTuple] = fields.reduce(([isAllNamed, isAllUnnamed], { name }) => ([
                    isAllNamed && name.isSome,
                    isAllUnnamed && name.isNone
                ]), [true, true]);
                let info;
                // check for tuple first (no fields may be available)
                if (isTuple) {
                    info = types_113.TypeDefInfo.Tuple;
                }
                else if (isStruct) {
                    info = types_113.TypeDefInfo.Struct;
                }
                else {
                    throw new Error('Invalid fields type detected, expected either Tuple or Struct');
                }
                const sub = fields.map(({ name, type }) => {
                    return {
                        ...this.getMetaTypeDef({ type }),
                        ...(name.isSome ? { name: name.unwrap().toString() } : {})
                    };
                });
                return isTuple && sub.length === 1
                    ? sub[0]
                    : { info, sub };
            });
            _extractPrimitive.set(this, (type) => {
                const typeStr = type.def.asPrimitive.type.toString();
                return {
                    info: types_113.TypeDefInfo.Plain,
                    type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
                };
            });
            _extractPrimitivePath.set(this, (type) => {
                return {
                    info: types_113.TypeDefInfo.Plain,
                    type: type.path[type.path.length - 1].toString()
                };
            });
            _extractSequence.set(this, ({ type }, id) => {
                util_205.assert(!!type, `ContractRegistry: Invalid sequence type found at id ${id.toString()}`);
                return {
                    info: types_113.TypeDefInfo.Vec,
                    sub: this.getMetaTypeDef({ type })
                };
            });
            _extractTuple.set(this, (ids) => {
                return ids.length === 1
                    ? this.getMetaTypeDef({ type: ids[0] })
                    : {
                        info: types_113.TypeDefInfo.Tuple,
                        sub: ids.map((type) => this.getMetaTypeDef({ type }))
                    };
            });
            _extractVariant.set(this, ({ variants }, id) => {
                const { params, path } = __classPrivateFieldGet(this, _getMetaType).call(this, id);
                const specialVariant = path[0].toString();
                if (specialVariant === 'Option') {
                    return {
                        info: types_113.TypeDefInfo.Option,
                        sub: this.getMetaTypeDef({ type: params[0] })
                    };
                }
                else if (specialVariant === 'Result') {
                    return {
                        info: types_113.TypeDefInfo.Result,
                        sub: params.map((type, index) => ({
                            name: ['Ok', 'Error'][index],
                            ...this.getMetaTypeDef({ type })
                        }))
                    };
                }
                return {
                    info: types_113.TypeDefInfo.Enum,
                    sub: __classPrivateFieldGet(this, _extractVariantSub).call(this, variants)
                };
            });
            _extractVariantSub.set(this, (variants) => {
                const isAllUnitVariants = variants.every(({ fields }) => fields.length === 0);
                if (isAllUnitVariants) {
                    return variants.map(({ discriminant, name }) => ({
                        ...(discriminant.isSome
                            ? { ext: { discriminant: discriminant.unwrap().toNumber() } }
                            : {}),
                        info: types_113.TypeDefInfo.Plain,
                        name: name.toString(),
                        type: 'Null'
                    }));
                }
                return variants.map(({ fields, name }) => create_9.withTypeString({
                    ...__classPrivateFieldGet(this, _extractFields).call(this, fields),
                    name: name.toString()
                }));
            });
            if (chainProperties) {
                this.setChainProperties(chainProperties);
            }
        }
        setMetaTypes(metaTypes) {
            __classPrivateFieldSet(this, _siTypes, metaTypes);
        }
        getMetaTypeDef(typeSpec) {
            const offset = getRegistryOffset(typeSpec.type);
            let typeDef = this.metaTypeDefs[offset];
            if (!typeDef) {
                typeDef = __classPrivateFieldGet(this, _extract).call(this, __classPrivateFieldGet(this, _getMetaType).call(this, typeSpec.type), typeSpec.type);
                this.metaTypeDefs[offset] = typeDef;
            }
            if (typeSpec.displayName && typeSpec.displayName.length) {
                const displayName = typeSpec.displayName[typeSpec.displayName.length - 1].toString();
                if (!typeDef.type.startsWith(displayName)) {
                    typeDef = {
                        ...typeDef,
                        displayName,
                        type: PRIMITIVE_ALWAYS.includes(displayName)
                            ? displayName
                            : typeDef.type
                    };
                }
            }
            // Here we protect against the following cases
            //   - No displayName present, these are generally known primitives
            //   - displayName === type, these generate circular references
            //   - displayName Option & type Option<...something...>
            if (typeDef.displayName && !this.hasType(typeDef.displayName) && !(typeDef.type === typeDef.displayName || typeDef.type.startsWith(`${typeDef.displayName}<`))) {
                this.register({ [typeDef.displayName]: typeDef.type });
            }
            return typeDef;
        }
    }
    exports.MetaRegistry = MetaRegistry;
    _siTypes = new WeakMap(), _getMetaType = new WeakMap(), _extract = new WeakMap(), _extractArray = new WeakMap(), _extractFields = new WeakMap(), _extractPrimitive = new WeakMap(), _extractPrimitivePath = new WeakMap(), _extractSequence = new WeakMap(), _extractTuple = new WeakMap(), _extractVariant = new WeakMap(), _extractVariantSub = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/Abi", ["require", "exports", "@polkadot/util", "api-contract/src/MetaRegistry"], function (require, exports, util_206, MetaRegistry_1) {
    "use strict";
    var _events, _createArgs, _createEvent, _createMessage, _decodeArgs, _decodeMessage, _encodeArgs;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Abi = void 0;
    const EMPTY_U8A = new Uint8Array();
    const l = util_206.logger('Abi');
    function findMessage(list, messageOrId) {
        const message = util_206.isNumber(messageOrId)
            ? list[messageOrId]
            : util_206.isString(messageOrId)
                ? list.find(({ identifier }) => [identifier, util_206.stringCamelCase(identifier)].includes(messageOrId.toString()))
                : messageOrId;
        return util_206.assertReturn(message, `Attempted to call an invalid contract interface, ${JSON.stringify(messageOrId)}`);
    }
    class Abi {
        constructor(abiJson, chainProperties) {
            _events.set(this, void 0);
            _createArgs.set(this, (args, spec) => {
                return args.map((arg, index) => {
                    try {
                        util_206.assert(util_206.isObject(arg.type), 'Invalid type definition found');
                        return {
                            name: util_206.stringCamelCase(arg.name),
                            type: this.registry.getMetaTypeDef(arg.type)
                        };
                    }
                    catch (error) {
                        l.error(`Error expanding argument ${index} in ${JSON.stringify(spec)}`);
                        throw error;
                    }
                });
            });
            _createEvent.set(this, (spec, index) => {
                const args = __classPrivateFieldGet(this, _createArgs).call(this, spec.args, spec);
                const event = {
                    args,
                    docs: spec.docs.map((doc) => doc.toString()),
                    fromU8a: (data) => ({
                        args: __classPrivateFieldGet(this, _decodeArgs).call(this, args, data),
                        event
                    }),
                    identifier: spec.name.toString(),
                    index
                };
                return event;
            });
            _createMessage.set(this, (spec, index, add = {}) => {
                const args = __classPrivateFieldGet(this, _createArgs).call(this, spec.args, spec);
                const message = {
                    ...add,
                    args,
                    docs: spec.docs.map((doc) => doc.toString()),
                    fromU8a: (data) => ({
                        args: __classPrivateFieldGet(this, _decodeArgs).call(this, args, data),
                        message
                    }),
                    identifier: spec.name.toString(),
                    index,
                    selector: spec.selector,
                    toU8a: (params, additional) => __classPrivateFieldGet(this, _encodeArgs).call(this, spec, args, params, additional)
                };
                return message;
            });
            _decodeArgs.set(this, (args, data) => {
                // for decoding we expect the input to be just the arg data, no selectors
                // no length added (this allows use with events as well)
                let offset = 0;
                return args.map(({ type }) => {
                    const value = this.registry.createType(type.type, data.subarray(offset));
                    offset += value.encodedLength;
                    return value;
                });
            });
            _decodeMessage.set(this, (type, list, data) => {
                const [, trimmed] = util_206.compactStripLength(data);
                const selector = trimmed.subarray(0, 4);
                const message = list.find((m) => m.selector.eq(selector));
                util_206.assert(message, `Unable to find ${type} with selector ${util_206.u8aToHex(selector)}`);
                return message.fromU8a(trimmed.subarray(4));
            });
            _encodeArgs.set(this, ({ name, selector }, args, data, additional = EMPTY_U8A) => {
                util_206.assert(data.length === args.length, `Expected ${args.length} arguments to contract message '${name.toString()}', found ${data.length}`);
                return util_206.compactAddLength(util_206.u8aConcat(this.registry.createType('ContractSelector', selector).toU8a(), ...args.map(({ type }, index) => this.registry.createType(type.type, data[index]).toU8a()), additional));
            });
            const json = util_206.isString(abiJson)
                ? JSON.parse(abiJson)
                : abiJson;
            util_206.assert(util_206.isObject(json) && !Array.isArray(json) && json.metadataVersion && util_206.isObject(json.spec) && !Array.isArray(json.spec) && Array.isArray(json.spec.constructors) && Array.isArray(json.spec.messages), 'Invalid JSON ABI structure supplied, expected a recent metadata version');
            this.json = json;
            this.registry = new MetaRegistry_1.MetaRegistry(chainProperties);
            this.project = this.registry.createType('ContractProject', json);
            this.registry.setMetaTypes(this.project.types);
            this.project.types.forEach((_, index) => this.registry.getMetaTypeDef({ type: this.registry.createType('SiLookupTypeId', index + 1) }));
            this.constructors = this.project.spec.constructors.map((spec, index) => __classPrivateFieldGet(this, _createMessage).call(this, spec, index, {
                isConstructor: true
            }));
            __classPrivateFieldSet(this, _events, this.project.spec.events.map((spec, index) => __classPrivateFieldGet(this, _createEvent).call(this, spec, index)));
            this.messages = this.project.spec.messages.map((spec, index) => {
                const typeSpec = spec.returnType.unwrapOr(null);
                return __classPrivateFieldGet(this, _createMessage).call(this, spec, index, {
                    isMutating: spec.mutates.isTrue,
                    isPayable: spec.payable.isTrue,
                    returnType: typeSpec
                        ? this.registry.getMetaTypeDef(typeSpec)
                        : null
                });
            });
        }
        /**
         * Warning: Unstable API, bound to change
         */
        decodeEvent(data) {
            const index = data[0];
            const event = __classPrivateFieldGet(this, _events)[index];
            util_206.assert(event, `Unable to find event with index ${index}`);
            return event.fromU8a(data.subarray(1));
        }
        /**
         * Warning: Unstable API, bound to change
         */
        decodeConstructor(data) {
            return __classPrivateFieldGet(this, _decodeMessage).call(this, 'message', this.constructors, data);
        }
        /**
         * Warning: Unstable API, bound to change
         */
        decodeMessage(data) {
            return __classPrivateFieldGet(this, _decodeMessage).call(this, 'message', this.messages, data);
        }
        findConstructor(constructorOrId) {
            return findMessage(this.constructors, constructorOrId);
        }
        findMessage(messageOrId) {
            return findMessage(this.messages, messageOrId);
        }
    }
    exports.Abi = Abi;
    _events = new WeakMap(), _createArgs = new WeakMap(), _createEvent = new WeakMap(), _createMessage = new WeakMap(), _decodeArgs = new WeakMap(), _decodeMessage = new WeakMap(), _encodeArgs = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/rpc-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/util", ["require", "exports", "types/src/create/index", "@polkadot/util"], function (require, exports, create_10, util_207) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractOptions = exports.isOptions = exports.applyOnEvent = exports.formatData = void 0;
    function formatData(registry, data, { type }) {
        return create_10.createTypeUnsafe(registry, type, [data], { isPedantic: true });
    }
    exports.formatData = formatData;
    function applyOnEvent(result, type, fn) {
        if (result.isInBlock || result.isFinalized) {
            const records = result.filterRecords('contracts', type);
            if (records.length) {
                return fn(records);
            }
        }
        return undefined;
    }
    exports.applyOnEvent = applyOnEvent;
    function isOptions(options) {
        return !(util_207.isBn(options) || util_207.isBigInt(options) || util_207.isNumber(options) || util_207.isString(options));
    }
    exports.isOptions = isOptions;
    function extractOptions(value, params) {
        const gasLimit = params.shift();
        return [{ gasLimit, value }, params];
    }
    exports.extractOptions = extractOptions;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/Base", ["require", "exports", "@polkadot/util", "api-contract/src/Abi"], function (require, exports, util_208, Abi_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base = void 0;
    class Base {
        constructor(api, abi, decorateMethod) {
            this.abi = abi instanceof Abi_1.Abi
                ? abi
                : new Abi_1.Abi(abi, api.registry.getChainProperties());
            this.api = api;
            this.registry = this.abi.registry;
            this._decorateMethod = decorateMethod;
            util_208.assert(this.api.rx.tx.contracts && this.api.rx.tx.contracts.putCode, 'You need to connect to a node with the contracts module, the metadata does not enable api.tx.contracts on this instance');
        }
    }
    exports.Base = Base;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/Contract", ["require", "exports", "bn.js", "api/src/index", "@polkadot/util", "@polkadot/x-rxjs/operators", "api-contract/src/util", "api-contract/src/base/Base"], function (require, exports, bn_js_13, api_4, util_209, operators_83, util_210, Base_5) {
    "use strict";
    var _query, _tx, _getGas, _exec, _read;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.ContractSubmittableResult = void 0;
    bn_js_13 = __importDefault(bn_js_13);
    // As per Rust, 5 * GAS_PER_SEC
    const MAX_CALL_GAS = new bn_js_13.default(5000000000000).subn(1);
    const ERROR_NO_CALL = 'Your node does not expose the contracts.call RPC. This is most probably due to a runtime configuration.';
    const l = util_209.logger('Contract');
    function createQuery(fn) {
        return (origin, options, ...params) => util_210.isOptions(options)
            ? fn(origin, options, params)
            : fn(origin, ...util_210.extractOptions(options, params));
    }
    function createTx(fn) {
        return (options, ...params) => util_210.isOptions(options)
            ? fn(options, params)
            : fn(...util_210.extractOptions(options, params));
    }
    function createWithId(fn) {
        return (messageOrId, options, ...params) => util_210.isOptions(options)
            ? fn(messageOrId, options, params)
            : fn(messageOrId, ...util_210.extractOptions(options, params));
    }
    class ContractSubmittableResult extends api_4.SubmittableResult {
        constructor(result, contractEvents) {
            super(result);
            this.contractEvents = contractEvents;
        }
    }
    exports.ContractSubmittableResult = ContractSubmittableResult;
    // map from a JSON result to current-style ContractExecResult
    function mapExecResult(registry, json) {
        if (!Object.keys(json).some((key) => ['error', 'success'].includes(key))) {
            return registry.createType('ContractExecResult', json);
        }
        const from = registry.createType('ContractExecResultTo260', json);
        if (from.isSuccess) {
            const s = from.asSuccess;
            return registry.createType('ContractExecResult', {
                gasConsumed: s.gasConsumed,
                result: {
                    ok: {
                        data: s.data,
                        flags: s.flags
                    }
                }
            });
        }
        // in the old format error has no additional information,
        // map it as-is with an "unknown" error
        return registry.createType('ContractExecResult', { result: { err: { other: 'unknown' } } });
    }
    class Contract extends Base_5.Base {
        constructor(api, abi, address, decorateMethod) {
            super(api, abi, decorateMethod);
            _query.set(this, {});
            _tx.set(this, {});
            _getGas.set(this, (_gasLimit, isCall = false) => {
                const gasLimit = util_209.bnToBn(_gasLimit);
                return gasLimit.lten(0)
                    ? isCall
                        ? MAX_CALL_GAS
                        : (this.api.consts.system.blockWeights
                            ? this.api.consts.system.blockWeights.maxBlock
                            : this.api.consts.system.maximumBlockWeight).muln(64).divn(100)
                    : gasLimit;
            });
            _exec.set(this, (messageOrId, { gasLimit = 0, value = 0 }, params) => {
                return this.api.tx.contracts
                    .call(this.address, value, __classPrivateFieldGet(this, _getGas).call(this, gasLimit), this.abi.findMessage(messageOrId).toU8a(params))
                    .withResultTransform((result) => new ContractSubmittableResult(result, util_210.applyOnEvent(result, 'ContractExecution', (records) => records
                    .map(({ event: { data: [, data] } }) => {
                    try {
                        return this.abi.decodeEvent(data);
                    }
                    catch (error) {
                        l.error(`Unable to decode contract event: ${error.message}`);
                        return null;
                    }
                })
                    .filter((decoded) => !!decoded))));
            });
            _read.set(this, (messageOrId, { gasLimit = 0, value = 0 }, params) => {
                util_209.assert(this.hasRpcContractsCall, ERROR_NO_CALL);
                const message = this.abi.findMessage(messageOrId);
                return {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    send: this._decorateMethod((origin) => this.api.rx.rpc.contracts.call.json({
                        dest: this.address,
                        gasLimit: __classPrivateFieldGet(this, _getGas).call(this, gasLimit, true),
                        inputData: message.toU8a(params),
                        origin,
                        value
                    }).pipe(operators_83.map((json) => {
                        const { debugMessage, gasConsumed, result } = mapExecResult(this.registry, json.toJSON());
                        return {
                            debugMessage,
                            gasConsumed,
                            output: result.isOk && message.returnType
                                ? util_210.formatData(this.registry, result.asOk.data, message.returnType)
                                : null,
                            result
                        };
                    })))
                };
            });
            this.address = this.registry.createType('AccountId', address);
            this.exec = createWithId(__classPrivateFieldGet(this, _exec));
            this.read = createWithId(__classPrivateFieldGet(this, _read));
            this.abi.messages.forEach((m) => {
                const messageName = util_209.stringCamelCase(m.identifier);
                if (util_209.isUndefined(__classPrivateFieldGet(this, _tx)[messageName])) {
                    __classPrivateFieldGet(this, _tx)[messageName] = createTx((o, p) => __classPrivateFieldGet(this, _exec).call(this, m, o, p));
                }
                if (util_209.isUndefined(__classPrivateFieldGet(this, _query)[messageName])) {
                    __classPrivateFieldGet(this, _query)[messageName] = createQuery((f, o, p) => __classPrivateFieldGet(this, _read).call(this, m, o, p).send(f));
                }
            });
        }
        get hasRpcContractsCall() {
            return util_209.isFunction(this.api.rx.rpc.contracts?.call);
        }
        get query() {
            util_209.assert(this.hasRpcContractsCall, ERROR_NO_CALL);
            return __classPrivateFieldGet(this, _query);
        }
        get tx() {
            return __classPrivateFieldGet(this, _tx);
        }
    }
    exports.Contract = Contract;
    _query = new WeakMap(), _tx = new WeakMap(), _getGas = new WeakMap(), _exec = new WeakMap(), _read = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/Blueprint", ["require", "exports", "api/src/index", "types/src/index", "@polkadot/util", "@polkadot/util-crypto", "api-contract/src/util", "api-contract/src/base/Base", "api-contract/src/base/Contract"], function (require, exports, api_5, types_114, util_211, util_crypto_14, util_212, Base_6, Contract_1) {
    "use strict";
    var _tx, _deploy;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Blueprint = exports.BlueprintSubmittableResult = void 0;
    const EMPTY_SALT = new Uint8Array();
    function createTx(fn) {
        return (options, ...params) => util_212.isOptions(options)
            ? fn(options, params)
            : fn(...util_212.extractOptions(options, params));
    }
    function createWithId(fn) {
        return (constructorOrId, options, ...params) => util_212.isOptions(options)
            ? fn(constructorOrId, options, params)
            : fn(constructorOrId, ...util_212.extractOptions(options, params));
    }
    function encodeSalt(salt = util_crypto_14.randomAsU8a()) {
        return salt instanceof types_114.Bytes
            ? salt
            : salt && salt.length
                ? util_211.compactAddLength(util_211.u8aToU8a(salt))
                : EMPTY_SALT;
    }
    class BlueprintSubmittableResult extends api_5.SubmittableResult {
        constructor(result, contract) {
            super(result);
            this.contract = contract;
        }
    }
    exports.BlueprintSubmittableResult = BlueprintSubmittableResult;
    class Blueprint extends Base_6.Base {
        constructor(api, abi, codeHash, decorateMethod) {
            super(api, abi, decorateMethod);
            _tx.set(this, {});
            _deploy.set(this, (constructorOrId, { gasLimit = 0, salt, value = 0 }, params) => {
                const encodedSalt = encodeSalt(salt);
                const withSalt = this.api.tx.contracts.instantiate.meta.args.length === 5;
                const encoded = this.abi.findConstructor(constructorOrId).toU8a(params, withSalt ? EMPTY_SALT : encodedSalt);
                const tx = withSalt
                    ? this.api.tx.contracts.instantiate(value, gasLimit, this.codeHash, encoded, encodedSalt)
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore old style with salt included
                    : this.api.tx.contracts.instantiate(value, gasLimit, this.codeHash, encoded);
                return tx.withResultTransform((result) => new BlueprintSubmittableResult(result, util_212.applyOnEvent(result, 'Instantiated', ([record]) => new Contract_1.Contract(this.api, this.abi, record.event.data[1], this._decorateMethod))));
            });
            this.codeHash = this.registry.createType('Hash', codeHash);
            this.createContract = createWithId(__classPrivateFieldGet(this, _deploy));
            this.abi.constructors.forEach((c) => {
                const messageName = util_211.stringCamelCase(c.identifier);
                if (util_211.isUndefined(__classPrivateFieldGet(this, _tx)[messageName])) {
                    __classPrivateFieldGet(this, _tx)[messageName] = createTx((o, p) => __classPrivateFieldGet(this, _deploy).call(this, c, o, p));
                }
            });
        }
        get tx() {
            return __classPrivateFieldGet(this, _tx);
        }
    }
    exports.Blueprint = Blueprint;
    _tx = new WeakMap(), _deploy = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/Code", ["require", "exports", "api/src/index", "@polkadot/util", "api-contract/src/util", "api-contract/src/base/Base", "api-contract/src/base/Blueprint"], function (require, exports, api_6, util_213, util_214, Base_7, Blueprint_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Code = exports.CodeSubmittableResult = void 0;
    class CodeSubmittableResult extends api_6.SubmittableResult {
        constructor(result, blueprint) {
            super(result);
            this.blueprint = blueprint;
        }
    }
    exports.CodeSubmittableResult = CodeSubmittableResult;
    class Code extends Base_7.Base {
        constructor(api, abi, wasm, decorateMethod) {
            super(api, abi, decorateMethod);
            this.code = util_213.isWasm(this.abi.project.source.wasm)
                ? this.abi.project.source.wasm
                : util_213.u8aToU8a(wasm);
            util_213.assert(util_213.isWasm(this.code), 'No WASM code provided');
        }
        /**
         * @description Deploy the code bundle, creating a Blueprint.
         */
        createBlueprint() {
            return this.api.tx.contracts
                .putCode(util_213.compactAddLength(this.code))
                .withResultTransform((result) => new CodeSubmittableResult(result, util_214.applyOnEvent(result, 'CodeStored', ([record]) => new Blueprint_1.Blueprint(this.api, this.abi, record.event.data[0], this._decorateMethod))));
        }
    }
    exports.Code = Code;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/index", ["require", "exports", "api-contract/src/base/Blueprint", "api-contract/src/base/Code", "api-contract/src/base/Contract"], function (require, exports, Blueprint_2, Code_1, Contract_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.CodeSubmittableResult = exports.Code = exports.BlueprintSubmittableResult = exports.Blueprint = void 0;
    Object.defineProperty(exports, "Blueprint", { enumerable: true, get: function () { return Blueprint_2.Blueprint; } });
    Object.defineProperty(exports, "BlueprintSubmittableResult", { enumerable: true, get: function () { return Blueprint_2.BlueprintSubmittableResult; } });
    Object.defineProperty(exports, "Code", { enumerable: true, get: function () { return Code_1.Code; } });
    Object.defineProperty(exports, "CodeSubmittableResult", { enumerable: true, get: function () { return Code_1.CodeSubmittableResult; } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return Contract_2.Contract; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/rx/Blueprint", ["require", "exports", "api/src/rx/index", "api-contract/src/base/index"], function (require, exports, rx_2, base_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Blueprint = void 0;
    class Blueprint extends base_5.Blueprint {
        constructor(api, abi, codeHash) {
            super(api, abi, codeHash, rx_2.decorateMethod);
        }
    }
    exports.Blueprint = Blueprint;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/rx/Code", ["require", "exports", "api/src/rx/index", "api-contract/src/base/index"], function (require, exports, rx_3, base_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Code = void 0;
    class Code extends base_6.Code {
        constructor(api, abi, wasm) {
            super(api, abi, wasm, rx_3.decorateMethod);
        }
    }
    exports.Code = Code;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/rx/Contract", ["require", "exports", "api/src/rx/index", "api-contract/src/base/index"], function (require, exports, rx_4, base_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = void 0;
    class Contract extends base_7.Contract {
        constructor(api, abi, address) {
            super(api, abi, address, rx_4.decorateMethod);
        }
    }
    exports.Contract = Contract;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/rx/index", ["require", "exports", "api-contract/src/rx/Blueprint", "api-contract/src/rx/Code", "api-contract/src/rx/Contract"], function (require, exports, Blueprint_3, Code_2, Contract_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.Code = exports.Blueprint = void 0;
    Object.defineProperty(exports, "Blueprint", { enumerable: true, get: function () { return Blueprint_3.Blueprint; } });
    Object.defineProperty(exports, "Code", { enumerable: true, get: function () { return Code_2.Code; } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return Contract_3.Contract; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/promise/Blueprint", ["require", "exports", "api/src/promise/index", "api-contract/src/base/index"], function (require, exports, promise_2, base_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Blueprint = void 0;
    class Blueprint extends base_8.Blueprint {
        constructor(api, abi, codeHash) {
            super(api, abi, codeHash, promise_2.decorateMethod);
        }
    }
    exports.Blueprint = Blueprint;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/promise/Code", ["require", "exports", "api/src/promise/index", "api-contract/src/base/index"], function (require, exports, promise_3, base_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Code = void 0;
    class Code extends base_9.Code {
        constructor(api, abi, wasm) {
            super(api, abi, wasm, promise_3.decorateMethod);
        }
    }
    exports.Code = Code;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/promise/Contract", ["require", "exports", "api/src/promise/index", "api-contract/src/base/index"], function (require, exports, promise_4, base_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = void 0;
    class Contract extends base_10.Contract {
        constructor(api, abi, address) {
            super(api, abi, address, promise_4.decorateMethod);
        }
    }
    exports.Contract = Contract;
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/promise/index", ["require", "exports", "api-contract/src/promise/Blueprint", "api-contract/src/promise/Code", "api-contract/src/promise/Contract"], function (require, exports, Blueprint_4, Code_3, Contract_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.Code = exports.Blueprint = void 0;
    Object.defineProperty(exports, "Blueprint", { enumerable: true, get: function () { return Blueprint_4.Blueprint; } });
    Object.defineProperty(exports, "Code", { enumerable: true, get: function () { return Code_3.Code; } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return Contract_4.Contract; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/index", ["require", "exports", "api-contract/src/Abi", "api-contract/src/rx/index", "api-contract/src/promise/index"], function (require, exports, Abi_2, rx_5, promise_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractPromise = exports.CodePromise = exports.BlueprintPromise = exports.ContractRx = exports.CodeRx = exports.BlueprintRx = exports.Abi = void 0;
    Object.defineProperty(exports, "Abi", { enumerable: true, get: function () { return Abi_2.Abi; } });
    Object.defineProperty(exports, "BlueprintRx", { enumerable: true, get: function () { return rx_5.Blueprint; } });
    Object.defineProperty(exports, "CodeRx", { enumerable: true, get: function () { return rx_5.Code; } });
    Object.defineProperty(exports, "ContractRx", { enumerable: true, get: function () { return rx_5.Contract; } });
    Object.defineProperty(exports, "BlueprintPromise", { enumerable: true, get: function () { return promise_5.Blueprint; } });
    Object.defineProperty(exports, "CodePromise", { enumerable: true, get: function () { return promise_5.Code; } });
    Object.defineProperty(exports, "ContractPromise", { enumerable: true, get: function () { return promise_5.Contract; } });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/Abi.spec", ["require", "exports", "api-contract/test/contracts/index", "api-contract/src/index"], function (require, exports, contracts_1, _3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    contracts_1 = __importDefault(contracts_1);
    describe('Abi', () => {
        Object.entries(contracts_1.default).forEach(([abiName, abi]) => {
            it(`initializes from a contract ABI (${abiName})`, () => {
                try {
                    const messageIds = abi.spec.messages.map(({ name }) => Array.isArray(name) ? name[0] : name);
                    const inkAbi = new _3.Abi(contracts_1.default[abiName]);
                    expect(inkAbi.messages.map(({ identifier }) => identifier)).toEqual(messageIds);
                }
                catch (error) {
                    console.error(error);
                    throw error;
                }
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/MetaRegistry.spec", ["require", "exports", "fs", "path", "api-contract/test/contracts/index", "api-contract/src/index"], function (require, exports, fs_1, path_1, contracts_2, _4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs_1 = __importDefault(fs_1);
    path_1 = __importDefault(path_1);
    contracts_2 = __importDefault(contracts_2);
    describe('MetaRegistry', () => {
        Object.keys(contracts_2.default).forEach((abiName) => {
            it(`initializes from a contract ABI (${abiName})`, () => {
                const abi = new _4.Abi(contracts_2.default[abiName]);
                try {
                    const cmpPath = path_1.default.join(__dirname, `../test/compare/${abiName}.test.json`);
                    if (!fs_1.default.existsSync(cmpPath)) {
                        fs_1.default.writeFileSync(cmpPath, JSON.stringify(abi.registry.metaTypeDefs, null, 2), { flag: 'w' });
                    }
                    // eslint-disable-next-line @typescript-eslint/no-var-requires
                    expect(abi.registry.metaTypeDefs).toEqual(require(cmpPath));
                }
                catch (error) {
                    console.error(JSON.stringify(abi.registry.metaTypeDefs));
                    throw error;
                }
            });
        });
        it('stores base project as JSON', () => {
            expect(new _4.Abi(contracts_2.default.ink_dns).json).toEqual(contracts_2.default.ink_dns);
        });
    });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/checkTypes.manual", ["require", "exports", "api/src/index", "@polkadot/keyring/testingPairs", "../test/contracts/ink/incrementer.json", "api-contract/src/index"], function (require, exports, api_7, testingPairs_3, incrementer_json_2, _5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    incrementer_json_2 = __importDefault(incrementer_json_2);
    async function checkBlueprint(api, pairs) {
        const blueprint = new _5.BlueprintPromise(api, incrementer_json_2.default, '0x1234');
        // new style
        await blueprint.tx.new({ gasLimit: 456, salt: '0x1234', value: 123 }, 42).signAndSend(pairs.bob);
        await blueprint.tx.new({ gasLimit: 456, value: 123 }, 42).signAndSend(pairs.bob);
        // old style
        await blueprint.tx.new(123, 456, 42).signAndSend(pairs.bob);
    }
    async function checkContract(api, pairs) {
        const contract = new _5.ContractPromise(api, incrementer_json_2.default, '0x1234');
        // queries
        await contract.query.get(pairs.alice.address, {});
        await contract.query.get(pairs.alice.address, 0, 0);
        // execute
        await contract.tx.inc({ gasLimit: 1234 }, 123).signAndSend(pairs.eve);
        await contract.tx.inc(123, 456, 69).signAndSend(pairs.eve);
        // deprecated
        await contract.read('get', {}).send(pairs.eve.address);
        await contract.exec('inc', {}, 123).signAndSend(pairs.dave);
    }
    async function main() {
        const api = await api_7.ApiPromise.create();
        const pairs = testingPairs_3.createTestPairs();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.all([
            checkBlueprint(api, pairs),
            checkContract(api, pairs)
        ]);
    }
    // eslint-disable-next-line @typescript-eslint/unbound-method
    main().catch(console.error);
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/mock", ["require", "exports", "types/src/index"], function (require, exports, types_115) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mockApi = void 0;
    const registry = new types_115.TypeRegistry();
    exports.mockApi = {
        registry,
        rx: {
            tx: {
                contracts: {
                    putCode: () => {
                        throw new Error('mock');
                    }
                }
            }
        }
    };
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/base/Code.spec", ["require", "exports", "fs", "path", "api/src/promise/index", "../../test/contracts/ink/flipper.contract.json", "../../test/contracts/ink/flipper.json", "api-contract/src/base/Code", "api-contract/src/base/mock"], function (require, exports, fs_2, path_2, promise_6, flipper_contract_json_1, flipper_json_2, Code_4, mock_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs_2 = __importDefault(fs_2);
    path_2 = __importDefault(path_2);
    flipper_contract_json_1 = __importDefault(flipper_contract_json_1);
    flipper_json_2 = __importDefault(flipper_json_2);
    const wasmFlipper = fs_2.default.readFileSync(path_2.default.join(__dirname, '../../test/contracts/ink/flipper.wasm'));
    describe('Code', () => {
        it('can construct with an individual ABI/WASM combo', () => {
            expect(() => new Code_4.Code(mock_3.mockApi, flipper_json_2.default, wasmFlipper, promise_6.decorateMethod)).not.toThrow();
        });
        it('can construct with an .contract ABI', () => {
            expect(() => new Code_4.Code(mock_3.mockApi, flipper_contract_json_1.default, null, promise_6.decorateMethod)).not.toThrow();
        });
    });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/promise/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-contract/src/rx/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/index.spec", ["require", "exports", "api/src/rx/index", "rpc-provider/src/mock/index", "types/src/create/index", "@polkadot/x-rxjs"], function (require, exports, rx_6, mock_4, create_11, x_rxjs_62) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const testFunction = (api) => {
        return (section, method, inputs) => {
            describe(`derive.${section}.${method}`, () => {
                it('should be a function', () => {
                    expect(typeof api.derive[section][method]).toBe('function');
                });
                it('should return an Observable', () => {
                    expect(api.derive[section][method](...inputs)).toBeInstanceOf(x_rxjs_62.Observable);
                });
            });
        };
    };
    describe('derive', () => {
        const registry = new create_11.TypeRegistry();
        describe('builtin', () => {
            const api = new rx_6.ApiRx({ provider: new mock_4.MockProvider(registry), registry });
            beforeAll((done) => {
                api.isReady.subscribe(() => done());
            });
            testFunction(api)('accounts', 'idAndIndex', []);
            testFunction(api)('accounts', 'idToIndex', []);
            testFunction(api)('accounts', 'indexes', []);
            testFunction(api)('accounts', 'indexToId', []);
            testFunction(api)('balances', 'all', []);
            testFunction(api)('balances', 'fees', []);
            testFunction(api)('balances', 'votingBalance', []);
            testFunction(api)('balances', 'votingBalances', []);
            testFunction(api)('chain', 'bestNumber', []);
            testFunction(api)('chain', 'bestNumberFinalized', []);
            testFunction(api)('democracy', 'proposals', []);
            testFunction(api)('democracy', 'referendums', []);
            testFunction(api)('elections', 'info', []);
            testFunction(api)('session', 'eraLength', []);
            testFunction(api)('session', 'eraProgress', []);
            testFunction(api)('session', 'sessionProgress', []);
            testFunction(api)('staking', 'account', []);
            testFunction(api)('staking', 'stashes', []);
        });
        describe('custom', () => {
            const api = new rx_6.ApiRx({
                derives: {
                    balances: {
                        fees: () => () => x_rxjs_62.from(['a', 'b'])
                    },
                    custom: {
                        test: () => () => x_rxjs_62.from([1, 2, 3])
                    }
                },
                provider: new mock_4.MockProvider(registry),
                registry
            });
            beforeAll((done) => {
                api.isReady.subscribe(() => done());
            });
            // override
            testFunction(api)('balances', 'fees', ['a', 'b']);
            // new
            testFunction(api)('custom', 'test', [1, 2, 3]);
            // existing
            testFunction(api)('chain', 'bestNumber', []);
        });
    });
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/test/bountyFactory", ["require", "exports", "types/src/index"], function (require, exports, types_116) {
    "use strict";
    var _api, _registry;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BountyFactory = void 0;
    class BountyFactory {
        constructor(api) {
            _api.set(this, void 0);
            _registry.set(this, void 0);
            this.storageKey = (index) => {
                const key = new types_116.StorageKey(__classPrivateFieldGet(this, _registry), __classPrivateFieldGet(this, _api).query.bounties.bounties.key(this.bountyIndex(index)));
                return key.setMeta(__classPrivateFieldGet(this, _api).query.bounties.bounties.creator.meta);
            };
            this.bountyIndex = (index) => __classPrivateFieldGet(this, _registry).createType('BountyIndex', index);
            this.defaultBounty = () => __classPrivateFieldGet(this, _registry).createType('Bounty');
            this.optionOf = (value) => {
                const typeName = __classPrivateFieldGet(this, _registry).getClassName(value.constructor);
                return new types_116.Option(__classPrivateFieldGet(this, _registry), typeName, value);
            };
            this.emptyOption = (typeName) => new types_116.Option(__classPrivateFieldGet(this, _registry), typeName);
            __classPrivateFieldSet(this, _api, api);
            __classPrivateFieldSet(this, _registry, __classPrivateFieldGet(this, _api).registry);
        }
    }
    exports.BountyFactory = BountyFactory;
    _api = new WeakMap(), _registry = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/test/bytesFactory", ["require", "exports"], function (require, exports) {
    "use strict";
    var _registry;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesFactory = void 0;
    class BytesFactory {
        constructor(registry) {
            _registry.set(this, void 0);
            this.bytes = (value) => __classPrivateFieldGet(this, _registry).createType('Bytes', value);
            __classPrivateFieldSet(this, _registry, registry);
        }
    }
    exports.BytesFactory = BytesFactory;
    _registry = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/test/helpers", ["require", "exports", "api/src/index", "metadata/src/index", "metadata/src/static", "types/src/index"], function (require, exports, api_8, metadata_5, static_4, types_117) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createApiWithAugmentations = void 0;
    static_4 = __importDefault(static_4);
    function createApiWithAugmentations() {
        const registry = new types_117.TypeRegistry();
        const metadata = new metadata_5.Metadata(registry, static_4.default);
        registry.setMetadata(metadata);
        const api = new api_8.ApiPromise({ provider: new api_8.WsProvider('ws://', false), registry });
        api.injectMetadata(metadata, true);
        return api;
    }
    exports.createApiWithAugmentations = createApiWithAugmentations;
});
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/test/proposalFactory", ["require", "exports"], function (require, exports) {
    "use strict";
    var _api, _registry;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProposalFactory = void 0;
    class ProposalFactory {
        constructor(api) {
            _api.set(this, void 0);
            _registry.set(this, void 0);
            this.createProposal = (method) => {
                return __classPrivateFieldGet(this, _registry).createType('Proposal', method);
            };
            this.proposalIndex = (index) => {
                return __classPrivateFieldGet(this, _registry).createType('ProposalIndex', index);
            };
            __classPrivateFieldSet(this, _api, api);
            __classPrivateFieldSet(this, _registry, __classPrivateFieldGet(this, _api).registry);
        }
    }
    exports.ProposalFactory = ProposalFactory;
    _api = new WeakMap(), _registry = new WeakMap();
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/bounties/bounties.spec", ["require", "exports", "@polkadot/x-rxjs", "api-derive/test/bountyFactory", "api-derive/test/bytesFactory", "api-derive/test/helpers", "api-derive/test/proposalFactory", "api-derive/src/bounties/index"], function (require, exports, x_rxjs_63, bountyFactory_1, bytesFactory_1, helpers_1, proposalFactory_1, _6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const DEFAULT_PROPOSER = '5C4hrfjw9DjXZTzV3MwzrrAr9P1MJhSrvWGWqi1eSuyUpnhM';
    describe('bounties derive', () => {
        let storageKey;
        let defaultBounty;
        let emptyOption;
        let optionOf;
        let bountyIndex;
        let proposalIndex;
        let bytes;
        let api;
        let createProposal;
        let defaultMockApi;
        beforeAll(() => {
            api = helpers_1.createApiWithAugmentations();
            ({ bountyIndex, defaultBounty, emptyOption, optionOf, storageKey } = new bountyFactory_1.BountyFactory(api));
            ({ bytes } = new bytesFactory_1.BytesFactory(api.registry));
            ({ createProposal, proposalIndex } = new proposalFactory_1.ProposalFactory(api));
        });
        beforeEach(() => {
            defaultMockApi = {
                derive: {
                    council: {
                        proposals: () => x_rxjs_63.of([])
                    }
                },
                query: {
                    council: {
                        proposalCount: () => x_rxjs_63.of(proposalIndex(2))
                    },
                    treasury: {
                        bounties: {
                            keys: () => x_rxjs_63.of([storageKey(0), storageKey(1)]),
                            multi: () => x_rxjs_63.of([optionOf(defaultBounty()), optionOf(defaultBounty())])
                        },
                        bountyCount: () => x_rxjs_63.of(bountyIndex(2)),
                        bountyDescriptions: {
                            multi: () => x_rxjs_63.of([
                                optionOf(bytes('make polkadot even better')),
                                optionOf(bytes('this will be totally ignored'))
                            ])
                        }
                    }
                },
                tx: api.tx
            };
        });
        it('creates storage key', function () {
            expect(storageKey(194).args[0].eq(194)).toBe(true);
        });
        it('creates proposal', function () {
            expect(createProposal(api.tx.balances.transfer('5EYCAe5ijiYfyeZ2JJCGq56LmPyNRAKzpG4QkoQkkQNB5e6Z', 1))).toBeTruthy();
        });
        it('combines bounties with descriptions', async () => {
            const mockApi = {
                ...defaultMockApi,
                query: {
                    ...defaultMockApi.query,
                    treasury: {
                        bounties: {
                            keys: () => x_rxjs_63.of([storageKey(0), storageKey(2), storageKey(3)]),
                            multi: () => x_rxjs_63.of([optionOf(defaultBounty()), emptyOption('Bounty'), optionOf(defaultBounty())])
                        },
                        bountyCount: () => x_rxjs_63.of(bountyIndex(3)),
                        bountyDescriptions: {
                            multi: () => x_rxjs_63.of([
                                optionOf(bytes('make polkadot even better')),
                                optionOf(bytes('this will be totally ignored')),
                                emptyOption('Bytes')
                            ])
                        }
                    }
                }
            };
            const result = await _6.bounties('', mockApi)().toPromise();
            expect(result).toHaveLength(2);
            expect(result[0].bounty.proposer.toString()).toEqual(DEFAULT_PROPOSER);
            expect(result[0].description).toEqual('make polkadot even better');
            expect(result[0].index.eq(0)).toBe(true);
            expect(result[1].bounty.proposer.toString()).toEqual(DEFAULT_PROPOSER);
            expect(result[1].description).toEqual('');
            expect(result[1].index.eq(3)).toBe(true);
        });
        it('returns motions', async () => {
            const result = await _6.bounties('', defaultMockApi)().toPromise();
            expect(result).toHaveLength(2);
            expect(result[0].proposals).toHaveLength(0);
            expect(result[1].proposals).toHaveLength(0);
        });
        it('combines bounties with motions', async () => {
            const mockApi = {
                ...defaultMockApi,
                derive: {
                    council: {
                        proposals: () => x_rxjs_63.of([
                            { proposal: createProposal(api.tx.bounties.approveBounty(1)) },
                            { proposal: createProposal(api.tx.treasury.approveProposal(1)) }
                        ])
                    }
                }
            };
            const result = await _6.bounties('', mockApi)().toPromise();
            expect(result).toHaveLength(2);
            expect(result[0].proposals).toHaveLength(0);
            expect(result[1].proposals).toHaveLength(1);
            expect(result[1].proposals[0].proposal.method).toEqual('approveBounty');
        });
    });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("api-derive/src/util/approvalFlagToBools.spec", ["require", "exports", "types/src/create/index", "api-derive/src/util/approvalFlagsToBools"], function (require, exports, create_12, approvalFlagsToBools_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('approvalFlagsToBools', () => {
        const registry = new create_12.TypeRegistry();
        it('translates and empty array to empty', () => {
            expect(approvalFlagsToBools_2.approvalFlagsToBools([])).toEqual([]);
        });
        it('translates a single input', () => {
            expect(approvalFlagsToBools_2.approvalFlagsToBools([
                registry.createType('ApprovalFlag', 0b1010)
            ])).toEqual([false, true, false, true]);
        });
        it('translates multiple inputs', () => {
            expect(approvalFlagsToBools_2.approvalFlagsToBools([
                registry.createType('ApprovalFlag', 0b0000),
                registry.createType('ApprovalFlag', 0b1100)
            ])).toEqual([false, false, false, true, true]);
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/MagicNumber.spec", ["require", "exports", "types/src/create/index", "metadata/src/MagicNumber"], function (require, exports, create_13, MagicNumber_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('MagicNumber', () => {
        const registry = new create_13.TypeRegistry();
        it('succeeds when the magic number matches', () => {
            expect(() => new MagicNumber_2.MagicNumber(registry, MagicNumber_2.MAGIC_NUMBER)).not.toThrow();
        });
        it('fails when the magic number mismatches', () => {
            expect(() => new MagicNumber_2.MagicNumber(registry, 0x12345)).toThrow(/MagicNumber/);
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/Metadata.spec", ["require", "exports", "types/src/create/index", "metadata/src/Metadata", "metadata/src/static"], function (require, exports, create_14, Metadata_4, static_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_5 = __importDefault(static_5);
    describe('Metadata', () => {
        it('allows creation from hex with JSON equivalence', () => {
            const test = new Metadata_4.Metadata(new create_14.TypeRegistry(), static_5.default);
            expect(new Metadata_4.Metadata(new create_14.TypeRegistry(), test.toHex()).toJSON()).toEqual(test.toJSON());
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/index.spec", ["require", "exports", "types/src/create/index", "@polkadot/util", "metadata/src/Metadata", "metadata/src/static", "metadata/src/decorate/index"], function (require, exports, create_15, util_215, Metadata_5, static_6, _7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_6 = __importDefault(static_6);
    const registry = new create_15.TypeRegistry();
    const metadata = new Metadata_5.Metadata(registry, static_6.default);
    registry.setMetadata(metadata);
    describe('Decorated', () => {
        it('should correctly get Alice\'s nonce storage key (u8a)', () => {
            const query = _7.decorateStorage(registry, metadata.asLatest, metadata.version);
            expect(util_215.u8aToHex(query.system.account('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'))).toEqual('0x410126aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d');
        });
        it('should return properly-encoded transactions', () => {
            const tx = _7.decorateExtrinsics(registry, metadata.asLatest, metadata.version);
            expect(registry.createType('Extrinsic', tx.timestamp.set([10101])).toU8a()).toEqual(new Uint8Array([
                // length (encoded)
                4 << 2,
                // version, no signature
                4,
                // index
                3, 0,
                // values, Compact<Moment>
                116
            ]));
        });
        it('should return constants with the correct type and value', () => {
            const consts = _7.decorateConstants(registry, metadata.asLatest);
            expect(consts.democracy.cooloffPeriod).toBeInstanceOf(registry.createClass('BlockNumber'));
            expect(consts.democracy.cooloffPeriod.toHex()).toEqual('0x000c4e00');
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v10/static", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = '0x6d6574610a6c1853797374656d011853797374656d34304163636f756e744e6f6e636501010130543a3a4163636f756e74496420543a3a496e646578001000000000047c2045787472696e73696373206e6f6e636520666f72206163636f756e74732e3845787472696e736963436f756e7400000c753332040004b820546f74616c2065787472696e7369637320636f756e7420666f72207468652063757272656e7420626c6f636b2e4c416c6c45787472696e73696373576569676874000018576569676874040004150120546f74616c2077656967687420666f7220616c6c2065787472696e736963732070757420746f6765746865722c20666f72207468652063757272656e7420626c6f636b2e40416c6c45787472696e736963734c656e00000c753332040004410120546f74616c206c656e6774682028696e2062797465732920666f7220616c6c2065787472696e736963732070757420746f6765746865722c20666f72207468652063757272656e7420626c6f636b2e24426c6f636b4861736801010138543a3a426c6f636b4e756d6265721c543a3a48617368008000000000000000000000000000000000000000000000000000000000000000000498204d6170206f6620626c6f636b206e756d6265727320746f20626c6f636b206861736865732e3445787472696e736963446174610101010c7533321c5665633c75383e000400043d012045787472696e73696373206461746120666f72207468652063757272656e7420626c6f636b20286d61707320616e2065787472696e736963277320696e64657820746f206974732064617461292e184e756d626572010038543a3a426c6f636b4e756d6265721000000000040901205468652063757272656e7420626c6f636b206e756d626572206265696e672070726f6365737365642e205365742062792060657865637574655f626c6f636b602e28506172656e744861736801001c543a3a4861736880000000000000000000000000000000000000000000000000000000000000000004702048617368206f66207468652070726576696f757320626c6f636b2e3845787472696e73696373526f6f7401001c543a3a486173688000000000000000000000000000000000000000000000000000000000000000000415012045787472696e7369637320726f6f74206f66207468652063757272656e7420626c6f636b2c20616c736f2070617274206f662074686520626c6f636b206865616465722e1844696765737401002c4469676573744f663c543e040004f020446967657374206f66207468652063757272656e7420626c6f636b2c20616c736f2070617274206f662074686520626c6f636b206865616465722e184576656e747301008c5665633c4576656e745265636f72643c543a3a4576656e742c20543a3a486173683e3e040004a0204576656e7473206465706f736974656420666f72207468652063757272656e7420626c6f636b2e284576656e74436f756e740100284576656e74496e646578100000000004b820546865206e756d626572206f66206576656e747320696e2074686520604576656e74733c543e60206c6973742e2c4576656e74546f706963730101011c543a3a48617368845665633c28543a3a426c6f636b4e756d6265722c204576656e74496e646578293e000400282501204d617070696e67206265747765656e206120746f7069632028726570726573656e74656420627920543a3a486173682920616e64206120766563746f72206f6620696e646578657394206f66206576656e747320696e2074686520603c4576656e74733c543e3e60206c6973742e00510120416c6c20746f70696320766563746f727320686176652064657465726d696e69737469632073746f72616765206c6f636174696f6e7320646570656e64696e67206f6e2074686520746f7069632e2054686973450120616c6c6f7773206c696768742d636c69656e747320746f206c6576657261676520746865206368616e67657320747269652073746f7261676520747261636b696e67206d656368616e69736d20616e64e420696e2063617365206f66206368616e67657320666574636820746865206c697374206f66206576656e7473206f6620696e7465726573742e004d01205468652076616c756520686173207468652074797065206028543a3a426c6f636b4e756d6265722c204576656e74496e646578296020626563617573652069662077652075736564206f6e6c79206a7573744d012074686520604576656e74496e64657860207468656e20696e20636173652069662074686520746f70696320686173207468652073616d6520636f6e74656e7473206f6e20746865206e65787420626c6f636b0101206e6f206e6f74696669636174696f6e2077696c6c20626520747269676765726564207468757320746865206576656e74206d69676874206265206c6f73742e01242866696c6c5f626c6f636b0004210120412062696720646973706174636820746861742077696c6c20646973616c6c6f7720616e79206f74686572207472616e73616374696f6e20746f20626520696e636c756465642e1872656d61726b041c5f72656d61726b1c5665633c75383e046c204d616b6520736f6d65206f6e2d636861696e2072656d61726b2e387365745f686561705f7061676573041470616765730c75363404fc2053657420746865206e756d626572206f6620706167657320696e2074686520576562417373656d626c7920656e7669726f6e6d656e74277320686561702e207365745f636f64650410636f64651c5665633c75383e04682053657420746865206e65772072756e74696d6520636f64652e5c7365745f636f64655f776974686f75745f636865636b730410636f64651c5665633c75383e041d012053657420746865206e65772072756e74696d6520636f646520776974686f757420646f696e6720616e7920636865636b73206f662074686520676976656e2060636f6465602e5c7365745f6368616e6765735f747269655f636f6e666967044c6368616e6765735f747269655f636f6e666967804f7074696f6e3c4368616e67657354726965436f6e66696775726174696f6e3e04a02053657420746865206e6577206368616e676573207472696520636f6e66696775726174696f6e2e2c7365745f73746f7261676504146974656d73345665633c4b657956616c75653e046c2053657420736f6d65206974656d73206f662073746f726167652e306b696c6c5f73746f7261676504106b657973205665633c4b65793e0478204b696c6c20736f6d65206974656d732066726f6d2073746f726167652e2c6b696c6c5f70726566697804187072656669780c4b6579041501204b696c6c20616c6c2073746f72616765206974656d7320776974682061206b657920746861742073746172747320776974682074686520676976656e207072656669782e01084045787472696e7369635375636365737304304469737061746368496e666f049420416e2065787472696e73696320636f6d706c65746564207375636365737366756c6c792e3c45787472696e7369634661696c6564083444697370617463684572726f72304469737061746368496e666f045420416e2065787472696e736963206661696c65642e00143c496e76616c6964537065634e616d6508150120546865206e616d65206f662073706563696669636174696f6e20646f6573206e6f74206d61746368206265747765656e207468652063757272656e742072756e74696d655420616e6420746865206e65772072756e74696d652e7c5370656356657273696f6e4e6f74416c6c6f776564546f4465637265617365084501205468652073706563696669636174696f6e2076657273696f6e206973206e6f7420616c6c6f77656420746f206465637265617365206265747765656e207468652063757272656e742072756e74696d655420616e6420746865206e65772072756e74696d652e7c496d706c56657273696f6e4e6f74416c6c6f776564546f44656372656173650849012054686520696d706c656d656e746174696f6e2076657273696f6e206973206e6f7420616c6c6f77656420746f206465637265617365206265747765656e207468652063757272656e742072756e74696d655420616e6420746865206e65772072756e74696d652e7c537065634f72496d706c56657273696f6e4e656564546f496e637265617365083501205468652073706563696669636174696f6e206f722074686520696d706c656d656e746174696f6e2076657273696f6e206e65656420746f20696e637265617365206265747765656e20746865942063757272656e742072756e74696d6520616e6420746865206e65772072756e74696d652e744661696c6564546f4578747261637452756e74696d6556657273696f6e0cf0204661696c656420746f2065787472616374207468652072756e74696d652076657273696f6e2066726f6d20746865206e65772072756e74696d652e000d01204569746865722063616c6c696e672060436f72655f76657273696f6e60206f72206465636f64696e67206052756e74696d6556657273696f6e60206661696c65642e1c5574696c697479011c5574696c69747904244d756c74697369677300020530543a3a4163636f756e744964205b75383b2033325dd04d756c74697369673c543a3a426c6f636b4e756d6265722c2042616c616e63654f663c543e2c20543a3a4163636f756e7449643e02040004942054686520736574206f66206f70656e206d756c7469736967206f7065726174696f6e732e0114146261746368041463616c6c735c5665633c3c542061732054726169743e3a3a43616c6c3e48802053656e642061206261746368206f662064697370617463682063616c6c732e00ec20546869732077696c6c206578656375746520756e74696c20746865206669727374206f6e65206661696c7320616e64207468656e2073746f702e007c204d61792062652063616c6c65642066726f6d20616e79206f726967696e2e00f0202d206063616c6c73603a205468652063616c6c7320746f20626520646973706174636865642066726f6d207468652073616d65206f726967696e2e002c2023203c7765696768743ea4202d205468652073756d206f66207468652077656967687473206f6620746865206063616c6c73602e34202d204f6e65206576656e742e302023203c2f7765696768743e00590120546869732077696c6c2072657475726e20604f6b6020696e20616c6c2063697263756d7374616e6365732e20546f2064657465726d696e65207468652073756363657373206f66207468652062617463682c20616e3501206576656e74206973206465706f73697465642e20496620612063616c6c206661696c656420616e64207468652062617463682077617320696e7465727275707465642c207468656e20746865590120604261746368496e74657272757074656460206576656e74206973206465706f73697465642c20616c6f6e67207769746820746865206e756d626572206f66207375636365737366756c2063616c6c73206d616465510120616e6420746865206572726f72206f6620746865206661696c65642063616c6c2e20496620616c6c2077657265207375636365737366756c2c207468656e2074686520604261746368436f6d706c657465646050206576656e74206973206465706f73697465642e1861735f7375620814696e6465780c7531361063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e1ce02053656e6420612063616c6c207468726f75676820616e20696e64657865642070736575646f6e796d206f66207468652073656e6465722e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e70202d2054686520776569676874206f6620746865206063616c6c602e302023203c2f7765696768743e2061735f6d756c746910247468726573686f6c640c753136446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e3c6d617962655f74696d65706f696e74844f7074696f6e3c54696d65706f696e743c543a3a426c6f636b4e756d6265723e3e1063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3ea4590120526567697374657220617070726f76616c20666f72206120646973706174636820746f206265206d6164652066726f6d20612064657465726d696e697374696320636f6d706f73697465206163636f756e74206966fc20617070726f766564206279206120746f74616c206f6620607468726573686f6c64202d203160206f6620606f746865725f7369676e61746f72696573602e00b42049662074686572652061726520656e6f7567682c207468656e206469737061746368207468652063616c6c2e005101205061796d656e743a20604d756c74697369674465706f73697442617365602077696c6c20626520726573657276656420696620746869732069732074686520666972737420617070726f76616c2c20706c7573610120607468726573686f6c64602074696d657320604d756c74697369674465706f736974466163746f72602e2049742069732072657475726e6564206f6e636520746869732064697370617463682068617070656e73206f72382069732063616e63656c6c65642e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901202d20607468726573686f6c64603a2054686520746f74616c206e756d626572206f6620617070726f76616c7320666f722074686973206469737061746368206265666f72652069742069732065786563757465642e4501202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f2063616e20617070726f76652074686973702064697370617463682e204d6179206e6f7420626520656d7074792e5d01202d20606d617962655f74696d65706f696e74603a20496620746869732069732074686520666972737420617070726f76616c2c207468656e2074686973206d75737420626520604e6f6e65602e2049662069742069735501206e6f742074686520666972737420617070726f76616c2c207468656e206974206d7573742062652060536f6d65602c2077697468207468652074696d65706f696e742028626c6f636b206e756d62657220616e64d8207472616e73616374696f6e20696e64657829206f662074686520666972737420617070726f76616c207472616e73616374696f6e2e8c202d206063616c6c603a205468652063616c6c20746f2062652065786563757465642e002101204e4f54453a20556e6c6573732074686973206973207468652066696e616c20617070726f76616c2c20796f752077696c6c2067656e6572616c6c792077616e7420746f207573651d012060617070726f76655f61735f6d756c74696020696e73746561642c2073696e6365206974206f6e6c7920726571756972657320612068617368206f66207468652063616c6c2e005d0120526573756c74206973206571756976616c656e7420746f20746865206469737061746368656420726573756c7420696620607468726573686f6c64602069732065786163746c79206031602e204f74686572776973655901206f6e20737563636573732c20726573756c7420697320604f6b6020616e642074686520726573756c742066726f6d2074686520696e746572696f722063616c6c2c206966206974207761732065786563757465642ce0206d617920626520666f756e6420696e20746865206465706f736974656420604d756c7469736967457865637574656460206576656e742e002c2023203c7765696768743e54202d20604f2853202b205a202b2043616c6c29602ed0202d20557020746f206f6e652062616c616e63652d72657365727665206f7220756e72657365727665206f7065726174696f6e2e4101202d204f6e6520706173737468726f756768206f7065726174696f6e2c206f6e6520696e736572742c20626f746820604f285329602077686572652060536020697320746865206e756d626572206f6649012020207369676e61746f726965732e206053602069732063617070656420627920604d61785369676e61746f72696573602c207769746820776569676874206265696e672070726f706f7274696f6e616c2e2501202d204f6e652063616c6c20656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285a296020776865726520605a602069732074782d6c656e2ec0202d204f6e6520656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285329602ed8202d20557020746f206f6e652062696e6172792073656172636820616e6420696e736572742028604f286c6f6753202b20532960292efc202d20492f4f3a2031207265616420604f285329602c20757020746f2031206d757461746520604f285329602e20557020746f206f6e652072656d6f76652e34202d204f6e65206576656e742e70202d2054686520776569676874206f6620746865206063616c6c602e3101202d2053746f726167653a20696e7365727473206f6e65206974656d2c2076616c75652073697a6520626f756e64656420627920604d61785369676e61746f72696573602c20776974682061902020206465706f7369742074616b656e20666f7220697473206c69666574696d65206f66f4202020604d756c74697369674465706f73697442617365202b207468726573686f6c64202a204d756c74697369674465706f736974466163746f72602e302023203c2f7765696768743e40617070726f76655f61735f6d756c746910247468726573686f6c640c753136446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e3c6d617962655f74696d65706f696e74844f7074696f6e3c54696d65706f696e743c543a3a426c6f636b4e756d6265723e3e2463616c6c5f68617368205b75383b2033325d80590120526567697374657220617070726f76616c20666f72206120646973706174636820746f206265206d6164652066726f6d20612064657465726d696e697374696320636f6d706f73697465206163636f756e74206966fc20617070726f766564206279206120746f74616c206f6620607468726573686f6c64202d203160206f6620606f746865725f7369676e61746f72696573602e005101205061796d656e743a20604d756c74697369674465706f73697442617365602077696c6c20626520726573657276656420696620746869732069732074686520666972737420617070726f76616c2c20706c7573610120607468726573686f6c64602074696d657320604d756c74697369674465706f736974466163746f72602e2049742069732072657475726e6564206f6e636520746869732064697370617463682068617070656e73206f72382069732063616e63656c6c65642e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901202d20607468726573686f6c64603a2054686520746f74616c206e756d626572206f6620617070726f76616c7320666f722074686973206469737061746368206265666f72652069742069732065786563757465642e4501202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f2063616e20617070726f76652074686973702064697370617463682e204d6179206e6f7420626520656d7074792e5d01202d20606d617962655f74696d65706f696e74603a20496620746869732069732074686520666972737420617070726f76616c2c207468656e2074686973206d75737420626520604e6f6e65602e2049662069742069735501206e6f742074686520666972737420617070726f76616c2c207468656e206974206d7573742062652060536f6d65602c2077697468207468652074696d65706f696e742028626c6f636b206e756d62657220616e64d8207472616e73616374696f6e20696e64657829206f662074686520666972737420617070726f76616c207472616e73616374696f6e2ed0202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f2062652065786563757465642e003901204e4f54453a2049662074686973206973207468652066696e616c20617070726f76616c2c20796f752077696c6c2077616e7420746f20757365206061735f6d756c74696020696e73746561642e002c2023203c7765696768743e28202d20604f285329602ed0202d20557020746f206f6e652062616c616e63652d72657365727665206f7220756e72657365727665206f7065726174696f6e2e4101202d204f6e6520706173737468726f756768206f7065726174696f6e2c206f6e6520696e736572742c20626f746820604f285329602077686572652060536020697320746865206e756d626572206f6649012020207369676e61746f726965732e206053602069732063617070656420627920604d61785369676e61746f72696573602c207769746820776569676874206265696e672070726f706f7274696f6e616c2ec0202d204f6e6520656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285329602ed8202d20557020746f206f6e652062696e6172792073656172636820616e6420696e736572742028604f286c6f6753202b20532960292efc202d20492f4f3a2031207265616420604f285329602c20757020746f2031206d757461746520604f285329602e20557020746f206f6e652072656d6f76652e34202d204f6e65206576656e742e3101202d2053746f726167653a20696e7365727473206f6e65206974656d2c2076616c75652073697a6520626f756e64656420627920604d61785369676e61746f72696573602c20776974682061902020206465706f7369742074616b656e20666f7220697473206c69666574696d65206f66f4202020604d756c74697369674465706f73697442617365202b207468726573686f6c64202a204d756c74697369674465706f736974466163746f72602e302023203c2f7765696768743e3c63616e63656c5f61735f6d756c746910247468726573686f6c640c753136446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e2474696d65706f696e746454696d65706f696e743c543a3a426c6f636b4e756d6265723e2463616c6c5f68617368205b75383b2033325d5859012043616e63656c2061207072652d6578697374696e672c206f6e2d676f696e67206d756c7469736967207472616e73616374696f6e2e20416e79206465706f7369742072657365727665642070726576696f75736c79c820666f722074686973206f7065726174696f6e2077696c6c20626520756e7265736572766564206f6e20737563636573732e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901202d20607468726573686f6c64603a2054686520746f74616c206e756d626572206f6620617070726f76616c7320666f722074686973206469737061746368206265666f72652069742069732065786563757465642e4501202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f2063616e20617070726f76652074686973702064697370617463682e204d6179206e6f7420626520656d7074792e6101202d206074696d65706f696e74603a205468652074696d65706f696e742028626c6f636b206e756d62657220616e64207472616e73616374696f6e20696e64657829206f662074686520666972737420617070726f76616c7c207472616e73616374696f6e20666f7220746869732064697370617463682ed0202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f2062652065786563757465642e002c2023203c7765696768743e28202d20604f285329602ed0202d20557020746f206f6e652062616c616e63652d72657365727665206f7220756e72657365727665206f7065726174696f6e2e4101202d204f6e6520706173737468726f756768206f7065726174696f6e2c206f6e6520696e736572742c20626f746820604f285329602077686572652060536020697320746865206e756d626572206f6649012020207369676e61746f726965732e206053602069732063617070656420627920604d61785369676e61746f72696573602c207769746820776569676874206265696e672070726f706f7274696f6e616c2ec0202d204f6e6520656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285329602e34202d204f6e65206576656e742e88202d20492f4f3a2031207265616420604f285329602c206f6e652072656d6f76652e74202d2053746f726167653a2072656d6f766573206f6e65206974656d2e302023203c2f7765696768743e0118404261746368496e746572727570746564080c7533323444697370617463684572726f72085901204261746368206f66206469737061746368657320646964206e6f7420636f6d706c6574652066756c6c792e20496e646578206f66206669727374206661696c696e6720646973706174636820676976656e2c2061734c2077656c6c20617320746865206572726f722e384261746368436f6d706c657465640004cc204261746368206f66206469737061746368657320636f6d706c657465642066756c6c792077697468206e6f206572726f722e2c4e65774d756c746973696708244163636f756e744964244163636f756e7449640849012041206e6577206d756c7469736967206f7065726174696f6e2068617320626567756e2e20466972737420706172616d20697320746865206163636f756e74207468617420697320617070726f76696e672c80207365636f6e6420697320746865206d756c7469736967206163636f756e742e404d756c7469736967417070726f76616c0c244163636f756e7449645854696d65706f696e743c426c6f636b4e756d6265723e244163636f756e7449640859012041206d756c7469736967206f7065726174696f6e20686173206265656e20617070726f76656420627920736f6d656f6e652e20466972737420706172616d20697320746865206163636f756e742074686174206973a820617070726f76696e672c20746869726420697320746865206d756c7469736967206163636f756e742e404d756c7469736967457865637574656410244163636f756e7449645854696d65706f696e743c426c6f636b4e756d6265723e244163636f756e744964384469737061746368526573756c74082d012041206d756c7469736967206f7065726174696f6e20686173206265656e2065786563757465642e20466972737420706172616d20697320746865206163636f756e742074686174206973a820617070726f76696e672c20746869726420697320746865206d756c7469736967206163636f756e742e444d756c746973696743616e63656c6c65640c244163636f756e7449645854696d65706f696e743c426c6f636b4e756d6265723e244163636f756e7449640831012041206d756c7469736967206f7065726174696f6e20686173206265656e2063616e63656c6c65642e20466972737420706172616d20697320746865206163636f756e742074686174206973ac2063616e63656c6c696e672c20746869726420697320746865206d756c7469736967206163636f756e742e00001042616265011042616265242845706f6368496e64657801000c75363420000000000000000004542043757272656e742065706f636820696e6465782e2c417574686f72697469657301009c5665633c28417574686f7269747949642c2042616265417574686f72697479576569676874293e0400046c2043757272656e742065706f636820617574686f7269746965732e2c47656e65736973536c6f7401000c75363420000000000000000008f82054686520736c6f74206174207768696368207468652066697273742065706f63682061637475616c6c7920737461727465642e205468697320697320309020756e74696c2074686520666972737420626c6f636b206f662074686520636861696e2e2c43757272656e74536c6f7401000c75363420000000000000000004542043757272656e7420736c6f74206e756d6265722e2852616e646f6d6e6573730100205b75383b2033325d80000000000000000000000000000000000000000000000000000000000000000028b8205468652065706f63682072616e646f6d6e65737320666f7220746865202a63757272656e742a2065706f63682e002c20232053656375726974790005012054686973204d555354204e4f54206265207573656420666f722067616d626c696e672c2061732069742063616e20626520696e666c75656e6365642062792061f8206d616c6963696f75732076616c696461746f7220696e207468652073686f7274207465726d2e204974204d4159206265207573656420696e206d616e7915012063727970746f677261706869632070726f746f636f6c732c20686f77657665722c20736f206c6f6e67206173206f6e652072656d656d6265727320746861742074686973150120286c696b652065766572797468696e6720656c7365206f6e2d636861696e29206974206973207075626c69632e20466f72206578616d706c652c2069742063616e206265050120757365642077686572652061206e756d626572206973206e656564656420746861742063616e6e6f742068617665206265656e2063686f73656e20627920616e0d01206164766572736172792c20666f7220707572706f7365732073756368206173207075626c69632d636f696e207a65726f2d6b6e6f776c656467652070726f6f66732e384e65787452616e646f6d6e6573730100205b75383b2033325d800000000000000000000000000000000000000000000000000000000000000000045c204e6578742065706f63682072616e646f6d6e6573732e305365676d656e74496e64657801000c7533321000000000247c2052616e646f6d6e65737320756e64657220636f6e737472756374696f6e2e00f4205765206d616b6520612074726164656f6666206265747765656e2073746f7261676520616363657373657320616e64206c697374206c656e6774682e01012057652073746f72652074686520756e6465722d636f6e737472756374696f6e2072616e646f6d6e65737320696e207365676d656e7473206f6620757020746f942060554e4445525f434f4e535452554354494f4e5f5345474d454e545f4c454e475448602e00ec204f6e63652061207365676d656e7420726561636865732074686973206c656e6774682c20776520626567696e20746865206e657874206f6e652e090120576520726573657420616c6c207365676d656e747320616e642072657475726e20746f206030602061742074686520626567696e6e696e67206f662065766572791c2065706f63682e44556e646572436f6e737472756374696f6e0101010c753332345665633c5b75383b2033325d3e000400002c496e697469616c697a65640000204d6179626556726604000801012054656d706f726172792076616c75652028636c656172656420617420626c6f636b2066696e616c697a6174696f6e292077686963682069732060536f6d65601d01206966207065722d626c6f636b20696e697469616c697a6174696f6e2068617320616c7265616479206265656e2063616c6c656420666f722063757272656e7420626c6f636b2e010000083445706f63684475726174696f6e0c75363420c800000000000000080d0120546865206e756d626572206f66202a2a736c6f74732a2a207468617420616e2065706f63682074616b65732e20576520636f75706c652073657373696f6e7320746ffc2065706f6368732c20692e652e2077652073746172742061206e65772073657373696f6e206f6e636520746865206e65772065706f636820626567696e732e444578706563746564426c6f636b54696d6524543a3a4d6f6d656e7420b80b00000000000014050120546865206578706563746564206176657261676520626c6f636b2074696d6520617420776869636820424142452073686f756c64206265206372656174696e67110120626c6f636b732e2053696e636520424142452069732070726f626162696c6973746963206974206973206e6f74207472697669616c20746f20666967757265206f75740501207768617420746865206578706563746564206176657261676520626c6f636b2074696d652073686f756c64206265206261736564206f6e2074686520736c6f740901206475726174696f6e20616e642074686520736563757269747920706172616d657465722060636020287768657265206031202d20636020726570726573656e7473a0207468652070726f626162696c697479206f66206120736c6f74206265696e6720656d707479292e002454696d657374616d70012454696d657374616d70080c4e6f77010024543a3a4d6f6d656e7420000000000000000004902043757272656e742074696d6520666f72207468652063757272656e7420626c6f636b2e24446964557064617465010010626f6f6c040004b420446964207468652074696d657374616d7020676574207570646174656420696e207468697320626c6f636b3f01040c736574040c6e6f7748436f6d706163743c543a3a4d6f6d656e743e245820536574207468652063757272656e742074696d652e00590120546869732063616c6c2073686f756c6420626520696e766f6b65642065786163746c79206f6e63652070657220626c6f636b2e2049742077696c6c2070616e6963206174207468652066696e616c697a6174696f6ed82070686173652c20696620746869732063616c6c206861736e2774206265656e20696e766f6b656420627920746861742074696d652e004501205468652074696d657374616d702073686f756c642062652067726561746572207468616e207468652070726576696f7573206f6e652062792074686520616d6f756e74207370656369666965642062794420604d696e696d756d506572696f64602e00d820546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652060496e686572656e74602e0004344d696e696d756d506572696f6424543a3a4d6f6d656e7420dc0500000000000010690120546865206d696e696d756d20706572696f64206265747765656e20626c6f636b732e204265776172652074686174207468697320697320646966666572656e7420746f20746865202a65787065637465642a20706572696f64690120746861742074686520626c6f636b2070726f64756374696f6e206170706172617475732070726f76696465732e20596f75722063686f73656e20636f6e73656e7375732073797374656d2077696c6c2067656e6572616c6c79650120776f726b2077697468207468697320746f2064657465726d696e6520612073656e7369626c6520626c6f636b2074696d652e20652e672e20466f7220417572612c2069742077696c6c20626520646f75626c6520746869737020706572696f64206f6e2064656661756c742073657474696e67732e0028417574686f72736869700128417574686f72736869700c18556e636c65730100e85665633c556e636c65456e7472794974656d3c543a3a426c6f636b4e756d6265722c20543a3a486173682c20543a3a4163636f756e7449643e3e0400041c20556e636c657318417574686f72000030543a3a4163636f756e7449640400046420417574686f72206f662063757272656e7420626c6f636b2e30446964536574556e636c6573010010626f6f6c040004bc205768657468657220756e636c6573207765726520616c72656164792073657420696e207468697320626c6f636b2e0104287365745f756e636c657304286e65775f756e636c6573385665633c543a3a4865616465723e04642050726f76696465206120736574206f6620756e636c65732e00001c48496e76616c6964556e636c65506172656e74048c2054686520756e636c6520706172656e74206e6f7420696e2074686520636861696e2e40556e636c6573416c7265616479536574048420556e636c657320616c72656164792073657420696e2074686520626c6f636b2e34546f6f4d616e79556e636c6573044420546f6f206d616e7920756e636c65732e3047656e65736973556e636c6504582054686520756e636c652069732067656e657369732e30546f6f48696768556e636c6504802054686520756e636c6520697320746f6f206869676820696e20636861696e2e50556e636c65416c7265616479496e636c75646564047c2054686520756e636c6520697320616c726561647920696e636c756465642e204f6c64556e636c6504b82054686520756e636c652069736e277420726563656e7420656e6f75676820746f20626520696e636c756465642e1c496e6469636573011c496e6469636573082c4e657874456e756d53657401003c543a3a4163636f756e74496e6465781000000000047c20546865206e657874206672656520656e756d65726174696f6e207365742e1c456e756d5365740101013c543a3a4163636f756e74496e646578445665633c543a3a4163636f756e7449643e00040004582054686520656e756d65726174696f6e20736574732e010001043c4e65774163636f756e74496e64657808244163636f756e744964304163636f756e74496e64657810882041206e6577206163636f756e7420696e646578207761732061737369676e65642e0005012054686973206576656e74206973206e6f7420747269676765726564207768656e20616e206578697374696e6720696e64657820697320726561737369676e65646020746f20616e6f7468657220604163636f756e744964602e00002042616c616e636573012042616c616e6365731434546f74616c49737375616e6365010028543a3a42616c616e6365400000000000000000000000000000000004982054686520746f74616c20756e6974732069737375656420696e207468652073797374656d2e1c56657374696e6700010130543a3a4163636f756e744964ac56657374696e675363686564756c653c543a3a42616c616e63652c20543a3a426c6f636b4e756d6265723e00040004d820496e666f726d6174696f6e20726567617264696e67207468652076657374696e67206f66206120676976656e206163636f756e742e2c4672656542616c616e636501010130543a3a4163636f756e74496428543a3a42616c616e63650040000000000000000000000000000000002c9c20546865202766726565272062616c616e6365206f66206120676976656e206163636f756e742e004101205468697320697320746865206f6e6c792062616c616e63652074686174206d61747465727320696e207465726d73206f66206d6f7374206f7065726174696f6e73206f6e20746f6b656e732e204974750120616c6f6e65206973207573656420746f2064657465726d696e65207468652062616c616e6365207768656e20696e2074686520636f6e747261637420657865637574696f6e20656e7669726f6e6d656e742e205768656e207468697355012062616c616e63652066616c6c732062656c6f77207468652076616c7565206f6620604578697374656e7469616c4465706f736974602c207468656e20746865202763757272656e74206163636f756e74272069733d012064656c657465643a207370656369666963616c6c7920604672656542616c616e6365602e20467572746865722c2074686520604f6e4672656542616c616e63655a65726f602063616c6c6261636b450120697320696e766f6b65642c20676976696e672061206368616e636520746f2065787465726e616c206d6f64756c657320746f20636c65616e2075702064617461206173736f636961746564207769746854207468652064656c65746564206163636f756e742e00750120606672616d655f73797374656d3a3a4163636f756e744e6f6e63656020697320616c736f2064656c657465642069662060526573657276656442616c616e63656020697320616c736f207a65726f2028697420616c736f2067657473150120636f6c6c617073656420746f207a65726f2069662069742065766572206265636f6d6573206c657373207468616e20604578697374656e7469616c4465706f736974602e3c526573657276656442616c616e636501010130543a3a4163636f756e74496428543a3a42616c616e63650040000000000000000000000000000000002c75012054686520616d6f756e74206f66207468652062616c616e6365206f66206120676976656e206163636f756e7420746861742069732065787465726e616c6c792072657365727665643b20746869732063616e207374696c6c206765749c20736c61736865642c20627574206765747320736c6173686564206c617374206f6620616c6c2e006d0120546869732062616c616e63652069732061202772657365727665272062616c616e63652074686174206f746865722073756273797374656d732075736520696e206f7264657220746f2073657420617369646520746f6b656e732501207468617420617265207374696c6c20276f776e65642720627920746865206163636f756e7420686f6c6465722c20627574207768696368206172652073757370656e6461626c652e007501205768656e20746869732062616c616e63652066616c6c732062656c6f77207468652076616c7565206f6620604578697374656e7469616c4465706f736974602c207468656e2074686973202772657365727665206163636f756e7427b42069732064656c657465643a207370656369666963616c6c792c2060526573657276656442616c616e6365602e00650120606672616d655f73797374656d3a3a4163636f756e744e6f6e63656020697320616c736f2064656c6574656420696620604672656542616c616e63656020697320616c736f207a65726f2028697420616c736f2067657473190120636f6c6c617073656420746f207a65726f2069662069742065766572206265636f6d6573206c657373207468616e20604578697374656e7469616c4465706f736974602e29144c6f636b7301010130543a3a4163636f756e744964b05665633c42616c616e63654c6f636b3c543a3a42616c616e63652c20543a3a426c6f636b4e756d6265723e3e00040004b820416e79206c6971756964697479206c6f636b73206f6e20736f6d65206163636f756e742062616c616e6365732e0110207472616e736665720810646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c75654c436f6d706163743c543a3a42616c616e63653e64d8205472616e7366657220736f6d65206c697175696420667265652062616c616e636520746f20616e6f74686572206163636f756e742e00090120607472616e73666572602077696c6c207365742074686520604672656542616c616e636560206f66207468652073656e64657220616e642072656365697665722e21012049742077696c6c2064656372656173652074686520746f74616c2069737375616e6365206f66207468652073797374656d2062792074686520605472616e73666572466565602e1501204966207468652073656e6465722773206163636f756e742069732062656c6f7720746865206578697374656e7469616c206465706f736974206173206120726573756c74b4206f6620746865207472616e736665722c20746865206163636f756e742077696c6c206265207265617065642e00190120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605369676e65646020627920746865207472616e736163746f722e002c2023203c7765696768743e3101202d20446570656e64656e74206f6e20617267756d656e747320627574206e6f7420637269746963616c2c20676976656e2070726f70657220696d706c656d656e746174696f6e7320666f72cc202020696e70757420636f6e6669672074797065732e205365652072656c617465642066756e6374696f6e732062656c6f772e6901202d20497420636f6e7461696e732061206c696d69746564206e756d626572206f6620726561647320616e642077726974657320696e7465726e616c6c7920616e64206e6f20636f6d706c657820636f6d7075746174696f6e2e004c2052656c617465642066756e6374696f6e733a0051012020202d2060656e737572655f63616e5f77697468647261776020697320616c776179732063616c6c656420696e7465726e616c6c792062757420686173206120626f756e64656420636f6d706c65786974792e2d012020202d205472616e7366657272696e672062616c616e63657320746f206163636f756e7473207468617420646964206e6f74206578697374206265666f72652077696c6c206361757365d420202020202060543a3a4f6e4e65774163636f756e743a3a6f6e5f6e65775f6163636f756e746020746f2062652063616c6c65642edc2020202d2052656d6f76696e6720656e6f7567682066756e64732066726f6d20616e206163636f756e742077696c6c20747269676765725901202020202060543a3a4475737452656d6f76616c3a3a6f6e5f756e62616c616e6365646020616e642060543a3a4f6e4672656542616c616e63655a65726f3a3a6f6e5f667265655f62616c616e63655f7a65726f602e49012020202d20607472616e736665725f6b6565705f616c6976656020776f726b73207468652073616d652077617920617320607472616e73666572602c206275742068617320616e206164646974696f6e616cf82020202020636865636b207468617420746865207472616e736665722077696c6c206e6f74206b696c6c20746865206f726967696e206163636f756e742e00302023203c2f7765696768743e2c7365745f62616c616e63650c0c77686f8c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365206e65775f667265654c436f6d706163743c543a3a42616c616e63653e306e65775f72657365727665644c436f6d706163743c543a3a42616c616e63653e349420536574207468652062616c616e636573206f66206120676976656e206163636f756e742e00210120546869732077696c6c20616c74657220604672656542616c616e63656020616e642060526573657276656442616c616e63656020696e2073746f726167652e2069742077696c6c090120616c736f2064656372656173652074686520746f74616c2069737375616e6365206f66207468652073797374656d202860546f74616c49737375616e636560292e190120496620746865206e65772066726565206f722072657365727665642062616c616e63652069732062656c6f7720746865206578697374656e7469616c206465706f7369742c01012069742077696c6c20726573657420746865206163636f756e74206e6f6e63652028606672616d655f73797374656d3a3a4163636f756e744e6f6e636560292e00b420546865206469737061746368206f726967696e20666f7220746869732063616c6c2069732060726f6f74602e002c2023203c7765696768743e80202d20496e646570656e64656e74206f662074686520617267756d656e74732ec4202d20436f6e7461696e732061206c696d69746564206e756d626572206f6620726561647320616e64207772697465732e302023203c2f7765696768743e38666f7263655f7472616e736665720c18736f757263658c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636510646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c75654c436f6d706163743c543a3a42616c616e63653e0851012045786163746c7920617320607472616e73666572602c2065786365707420746865206f726967696e206d75737420626520726f6f7420616e642074686520736f75726365206163636f756e74206d61792062652c207370656369666965642e4c7472616e736665725f6b6565705f616c6976650810646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c75654c436f6d706163743c543a3a42616c616e63653e1851012053616d6520617320746865205b607472616e73666572605d2063616c6c2c206275742077697468206120636865636b207468617420746865207472616e736665722077696c6c206e6f74206b696c6c2074686540206f726967696e206163636f756e742e00bc20393925206f66207468652074696d6520796f752077616e74205b607472616e73666572605d20696e73746561642e00c4205b607472616e73666572605d3a207374727563742e4d6f64756c652e68746d6c236d6574686f642e7472616e736665720114284e65774163636f756e7408244163636f756e7449641c42616c616e6365046c2041206e6577206163636f756e742077617320637265617465642e345265617065644163636f756e7408244163636f756e7449641c42616c616e6365045c20416e206163636f756e7420776173207265617065642e205472616e7366657210244163636f756e744964244163636f756e7449641c42616c616e63651c42616c616e636504b0205472616e7366657220737563636565646564202866726f6d2c20746f2c2076616c75652c2066656573292e2842616c616e63655365740c244163636f756e7449641c42616c616e63651c42616c616e636504c420412062616c616e6365207761732073657420627920726f6f74202877686f2c20667265652c207265736572766564292e1c4465706f73697408244163636f756e7449641c42616c616e636504dc20536f6d6520616d6f756e7420776173206465706f73697465642028652e672e20666f72207472616e73616374696f6e2066656573292e0c484578697374656e7469616c4465706f73697428543a3a42616c616e63654000407a10f35a0000000000000000000004d420546865206d696e696d756d20616d6f756e7420726571756972656420746f206b65657020616e206163636f756e74206f70656e2e2c5472616e7366657246656528543a3a42616c616e6365400010a5d4e800000000000000000000000494205468652066656520726571756972656420746f206d616b652061207472616e736665722e2c4372656174696f6e46656528543a3a42616c616e6365400010a5d4e80000000000000000000000049c205468652066656520726571756972656420746f2063726561746520616e206163636f756e742e203856657374696e6742616c616e6365049c2056657374696e672062616c616e636520746f6f206869676820746f2073656e642076616c7565544c69717569646974795265737472696374696f6e7304c8204163636f756e74206c6971756964697479207265737472696374696f6e732070726576656e74207769746864726177616c204f766572666c6f77047420476f7420616e206f766572666c6f7720616674657220616464696e674c496e73756666696369656e7442616c616e636504782042616c616e636520746f6f206c6f7720746f2073656e642076616c7565484578697374656e7469616c4465706f73697404ec2056616c756520746f6f206c6f7720746f20637265617465206163636f756e742064756520746f206578697374656e7469616c206465706f736974244b656570416c6976650490205472616e736665722f7061796d656e7420776f756c64206b696c6c206163636f756e745c4578697374696e6756657374696e675363686564756c6504cc20412076657374696e67207363686564756c6520616c72656164792065786973747320666f722074686973206163636f756e742c446561644163636f756e74048c2042656e6566696369617279206163636f756e74206d757374207072652d6578697374485472616e73616374696f6e5061796d656e74012042616c616e63657304444e6578744665654d756c7469706c6965720100284d756c7469706c69657220000000000000000000000008485472616e73616374696f6e426173654665653042616c616e63654f663c543e400010a5d4e8000000000000000000000004dc205468652066656520746f206265207061696420666f72206d616b696e672061207472616e73616374696f6e3b2074686520626173652e485472616e73616374696f6e427974654665653042616c616e63654f663c543e4000e40b54020000000000000000000000040d01205468652066656520746f206265207061696420666f72206d616b696e672061207472616e73616374696f6e3b20746865207065722d6279746520706f7274696f6e2e001c5374616b696e67011c5374616b696e67683856616c696461746f72436f756e7401000c753332100000000004a82054686520696465616c206e756d626572206f66207374616b696e67207061727469636970616e74732e544d696e696d756d56616c696461746f72436f756e7401000c7533321004000000044101204d696e696d756d206e756d626572206f66207374616b696e67207061727469636970616e7473206265666f726520656d657267656e637920636f6e646974696f6e732061726520696d706f7365642e34496e76756c6e657261626c65730100445665633c543a3a4163636f756e7449643e04000c590120416e792076616c696461746f72732074686174206d6179206e6576657220626520736c6173686564206f7220666f726369626c79206b69636b65642e20497427732061205665632073696e636520746865792772654d01206561737920746f20696e697469616c697a6520616e642074686520706572666f726d616e636520686974206973206d696e696d616c2028776520657870656374206e6f206d6f7265207468616e20666f7572ac20696e76756c6e657261626c65732920616e64207265737472696374656420746f20746573746e6574732e18426f6e64656400010130543a3a4163636f756e74496430543a3a4163636f756e744964000400040101204d61702066726f6d20616c6c206c6f636b65642022737461736822206163636f756e747320746f2074686520636f6e74726f6c6c6572206163636f756e742e184c656467657200010130543a3a4163636f756e744964a45374616b696e674c65646765723c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e000400044501204d61702066726f6d20616c6c2028756e6c6f636b6564292022636f6e74726f6c6c657222206163636f756e747320746f2074686520696e666f20726567617264696e6720746865207374616b696e672e14506179656501010130543a3a4163636f756e7449644452657761726444657374696e6174696f6e00040004e42057686572652074686520726577617264207061796d656e742073686f756c64206265206d6164652e204b657965642062792073746173682e2856616c696461746f727301010130543a3a4163636f756e7449643856616c696461746f72507265667301040004450120546865206d61702066726f6d202877616e6e616265292076616c696461746f72207374617368206b657920746f2074686520707265666572656e636573206f6620746861742076616c696461746f722e284e6f6d696e61746f727300010130543a3a4163636f756e744964644e6f6d696e6174696f6e733c543a3a4163636f756e7449643e01040010650120546865206d61702066726f6d206e6f6d696e61746f72207374617368206b657920746f2074686520736574206f66207374617368206b657973206f6620616c6c2076616c696461746f727320746f206e6f6d696e6174652e003501204e4f54453a206973207072697661746520736f20746861742077652063616e20656e73757265207570677261646564206265666f726520616c6c207479706963616c2061636365737365732ed8204469726563742073746f7261676520415049732063616e207374696c6c2062797061737320746869732070726f74656374696f6e2e1c5374616b65727301010130543a3a4163636f756e744964904578706f737572653c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e000c000000104d01204e6f6d696e61746f727320666f72206120706172746963756c6172206163636f756e74207468617420697320696e20616374696f6e207269676874206e6f772e20596f752063616e277420697465726174651901207468726f7567682076616c696461746f727320686572652c2062757420796f752063616e2066696e64207468656d20696e207468652053657373696f6e206d6f64756c652e00902054686973206973206b6579656420627920746865207374617368206163636f756e742e3843757272656e74456c65637465640100445665633c543a3a4163636f756e7449643e040004fc205468652063757272656e746c7920656c65637465642076616c696461746f7220736574206b65796564206279207374617368206163636f756e742049442e2843757272656e74457261010020457261496e6465781000000000045c205468652063757272656e742065726120696e6465782e3c43757272656e74457261537461727401002c4d6f6d656e744f663c543e200000000000000000047820546865207374617274206f66207468652063757272656e74206572612e6c43757272656e74457261537461727453657373696f6e496e64657801003053657373696f6e496e646578100000000004d0205468652073657373696f6e20696e646578206174207768696368207468652063757272656e742065726120737461727465642e5843757272656e74457261506f696e74734561726e6564010024457261506f696e7473140000000000040d01205265776172647320666f72207468652063757272656e74206572612e205573696e6720696e6469636573206f662063757272656e7420656c6563746564207365742e24536c6f745374616b6501003042616c616e63654f663c543e40000000000000000000000000000000000c31012054686520616d6f756e74206f662062616c616e6365206163746976656c79206174207374616b6520666f7220656163682076616c696461746f7220736c6f742c2063757272656e746c792e00c02054686973206973207573656420746f20646572697665207265776172647320616e642070756e6973686d656e74732e20466f72636545726101001c466f7263696e670400041d01205472756520696620746865206e6578742073657373696f6e206368616e67652077696c6c2062652061206e657720657261207265676172646c657373206f6620696e6465782e4c536c6173685265776172644672616374696f6e01001c50657262696c6c10000000000cf8205468652070657263656e74616765206f662074686520736c617368207468617420697320646973747269627574656420746f207265706f72746572732e00e4205468652072657374206f662074686520736c61736865642076616c75652069732068616e646c6564206279207468652060536c617368602e4c43616e63656c6564536c6173685061796f757401003042616c616e63654f663c543e40000000000000000000000000000000000815012054686520616d6f756e74206f662063757272656e637920676976656e20746f207265706f7274657273206f66206120736c617368206576656e7420776869636820776173ec2063616e63656c65642062792065787472616f7264696e6172792063697263756d7374616e6365732028652e672e20676f7665726e616e6365292e40556e6170706c696564536c617368657301010120457261496e646578bc5665633c556e6170706c696564536c6173683c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e3e00040004c420416c6c20756e6170706c69656420736c61736865732074686174206172652071756575656420666f72206c617465722e28426f6e646564457261730100745665633c28457261496e6465782c2053657373696f6e496e646578293e04000425012041206d617070696e672066726f6d207374696c6c2d626f6e646564206572617320746f207468652066697273742073657373696f6e20696e646578206f662074686174206572612e4c56616c696461746f72536c617368496e45726100020120457261496e64657830543a3a4163636f756e7449645c2850657262696c6c2c2042616c616e63654f663c543e2903040008450120416c6c20736c617368696e67206576656e7473206f6e2076616c696461746f72732c206d61707065642062792065726120746f20746865206869676865737420736c6173682070726f706f7274696f6e7020616e6420736c6173682076616c7565206f6620746865206572612e4c4e6f6d696e61746f72536c617368496e45726100020120457261496e64657830543a3a4163636f756e7449643042616c616e63654f663c543e03040004610120416c6c20736c617368696e67206576656e7473206f6e206e6f6d696e61746f72732c206d61707065642062792065726120746f20746865206869676865737420736c6173682076616c7565206f6620746865206572612e34536c617368696e675370616e7300010130543a3a4163636f756e7449645c736c617368696e673a3a536c617368696e675370616e73000400048c20536c617368696e67207370616e7320666f72207374617368206163636f756e74732e245370616e536c6173680101018c28543a3a4163636f756e7449642c20736c617368696e673a3a5370616e496e6465782988736c617368696e673a3a5370616e5265636f72643c42616c616e63654f663c543e3e00800000000000000000000000000000000000000000000000000000000000000000083d01205265636f72647320696e666f726d6174696f6e2061626f757420746865206d6178696d756d20736c617368206f6620612073746173682077697468696e206120736c617368696e67207370616e2cb82061732077656c6c20617320686f77206d7563682072657761726420686173206265656e2070616964206f75742e584561726c69657374556e6170706c696564536c617368000020457261496e646578040004fc20546865206561726c696573742065726120666f72207768696368207765206861766520612070656e64696e672c20756e6170706c69656420736c6173682e3853746f7261676556657273696f6e01000c75333210000000000490205468652076657273696f6e206f662073746f7261676520666f7220757067726164652e014410626f6e640c28636f6e74726f6c6c65728c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c756554436f6d706163743c42616c616e63654f663c543e3e1470617965654452657761726444657374696e6174696f6e3c65012054616b6520746865206f726967696e206163636f756e74206173206120737461736820616e64206c6f636b207570206076616c756560206f66206974732062616c616e63652e2060636f6e74726f6c6c6572602077696c6c8420626520746865206163636f756e74207468617420636f6e74726f6c732069742e003101206076616c756560206d757374206265206d6f7265207468616e2074686520606d696e696d756d5f62616c616e636560207370656369666965642062792060543a3a43757272656e6379602e00250120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20627920746865207374617368206163636f756e742e002c2023203c7765696768743ed4202d20496e646570656e64656e74206f662074686520617267756d656e74732e204d6f64657261746520636f6d706c65786974792e20202d204f2831292e68202d20546872656520657874726120444220656e74726965732e006d01204e4f54453a2054776f206f66207468652073746f726167652077726974657320286053656c663a3a626f6e646564602c206053656c663a3a7061796565602920617265205f6e657665725f20636c65616e656420756e6c65737325012074686520606f726967696e602066616c6c732062656c6f77205f6578697374656e7469616c206465706f7369745f20616e6420676574732072656d6f76656420617320647573742e302023203c2f7765696768743e28626f6e645f657874726104386d61785f6164646974696f6e616c54436f6d706163743c42616c616e63654f663c543e3e3865012041646420736f6d6520657874726120616d6f756e742074686174206861766520617070656172656420696e207468652073746173682060667265655f62616c616e63656020696e746f207468652062616c616e63652075703420666f72207374616b696e672e00510120557365207468697320696620746865726520617265206164646974696f6e616c2066756e647320696e20796f7572207374617368206163636f756e74207468617420796f75207769736820746f20626f6e642e650120556e6c696b65205b60626f6e64605d206f72205b60756e626f6e64605d20746869732066756e6374696f6e20646f6573206e6f7420696d706f736520616e79206c696d69746174696f6e206f6e2074686520616d6f756e744c20746861742063616e2062652061646465642e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f206279207468652073746173682c206e6f742074686520636f6e74726f6c6c65722e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e20202d204f2831292e40202d204f6e6520444220656e7472792e302023203c2f7765696768743e18756e626f6e64041476616c756554436f6d706163743c42616c616e63654f663c543e3e5c5501205363686564756c65206120706f7274696f6e206f662074686520737461736820746f20626520756e6c6f636b656420726561647920666f72207472616e73666572206f75742061667465722074686520626f6e64010120706572696f6420656e64732e2049662074686973206c656176657320616e20616d6f756e74206163746976656c7920626f6e646564206c657373207468616e250120543a3a43757272656e63793a3a6d696e696d756d5f62616c616e636528292c207468656e20697420697320696e6372656173656420746f207468652066756c6c20616d6f756e742e004901204f6e63652074686520756e6c6f636b20706572696f6420697320646f6e652c20796f752063616e2063616c6c206077697468647261775f756e626f6e6465646020746f2061637475616c6c79206d6f7665c0207468652066756e6473206f7574206f66206d616e6167656d656e7420726561647920666f72207472616e736665722e003d01204e6f206d6f7265207468616e2061206c696d69746564206e756d626572206f6620756e6c6f636b696e67206368756e6b73202873656520604d41585f554e4c4f434b494e475f4348554e4b5360293d012063616e20636f2d657869737473206174207468652073616d652074696d652e20496e207468617420636173652c205b6043616c6c3a3a77697468647261775f756e626f6e646564605d206e656564fc20746f2062652063616c6c656420666972737420746f2072656d6f766520736f6d65206f6620746865206368756e6b732028696620706f737369626c65292e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e00982053656520616c736f205b6043616c6c3a3a77697468647261775f756e626f6e646564605d2e002c2023203c7765696768743e4101202d20496e646570656e64656e74206f662074686520617267756d656e74732e204c696d697465642062757420706f74656e7469616c6c79206578706c6f697461626c6520636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732e6501202d20456163682063616c6c20287265717569726573207468652072656d61696e646572206f662074686520626f6e6465642062616c616e636520746f2062652061626f766520606d696e696d756d5f62616c616e63656029710120202077696c6c2063617573652061206e657720656e74727920746f20626520696e73657274656420696e746f206120766563746f722028604c65646765722e756e6c6f636b696e676029206b65707420696e2073746f726167652ea501202020546865206f6e6c792077617920746f20636c65616e207468652061666f72656d656e74696f6e65642073746f72616765206974656d20697320616c736f20757365722d636f6e74726f6c6c656420766961206077697468647261775f756e626f6e646564602e40202d204f6e6520444220656e7472792e28203c2f7765696768743e4477697468647261775f756e626f6e64656400402d012052656d6f766520616e7920756e6c6f636b6564206368756e6b732066726f6d207468652060756e6c6f636b696e67602071756575652066726f6d206f7572206d616e6167656d656e742e003501205468697320657373656e7469616c6c7920667265657320757020746861742062616c616e636520746f206265207573656420627920746865207374617368206163636f756e7420746f20646f4c2077686174657665722069742077616e74732e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e006c2053656520616c736f205b6043616c6c3a3a756e626f6e64605d2e002c2023203c7765696768743e5501202d20436f756c6420626520646570656e64656e74206f6e2074686520606f726967696e6020617267756d656e7420616e6420686f77206d7563682060756e6c6f636b696e6760206368756e6b732065786973742e45012020497420696d706c6965732060636f6e736f6c69646174655f756e6c6f636b656460207768696368206c6f6f7073206f76657220604c65646765722e756e6c6f636b696e67602c207768696368206973f42020696e6469726563746c7920757365722d636f6e74726f6c6c65642e20536565205b60756e626f6e64605d20666f72206d6f72652064657461696c2e7901202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732c20796574207468652073697a65206f6620776869636820636f756c64206265206c61726765206261736564206f6e20606c6564676572602ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e302023203c2f7765696768743e2076616c6964617465041470726566733856616c696461746f7250726566732ce8204465636c617265207468652064657369726520746f2076616c696461746520666f7220746865206f726967696e20636f6e74726f6c6c65722e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e302023203c2f7765696768743e206e6f6d696e617465041c74617267657473a05665633c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263653e2c1101204465636c617265207468652064657369726520746f206e6f6d696e6174652060746172676574736020666f7220746865206f726967696e20636f6e74726f6c6c65722e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e002c2023203c7765696768743e2501202d20546865207472616e73616374696f6e277320636f6d706c65786974792069732070726f706f7274696f6e616c20746f207468652073697a65206f66206074617267657473602c982077686963682069732063617070656420617420604d41585f4e4f4d494e4154494f4e53602ed8202d20426f74682074686520726561647320616e642077726974657320666f6c6c6f7720612073696d696c6172207061747465726e2e302023203c2f7765696768743e146368696c6c002cc8204465636c617265206e6f2064657369726520746f206569746865722076616c6964617465206f72206e6f6d696e6174652e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e54202d20436f6e7461696e73206f6e6520726561642ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e302023203c2f7765696768743e247365745f7061796565041470617965654452657761726444657374696e6174696f6e2cb8202852652d2973657420746865207061796d656e742074617267657420666f72206120636f6e74726f6c6c65722e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e302023203c2f7765696768743e387365745f636f6e74726f6c6c65720428636f6e74726f6c6c65728c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263652c90202852652d297365742074686520636f6e74726f6c6c6572206f6620612073746173682e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f206279207468652073746173682c206e6f742074686520636f6e74726f6c6c65722e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e302023203c2f7765696768743e4c7365745f76616c696461746f725f636f756e74040c6e657730436f6d706163743c7533323e04802054686520696465616c206e756d626572206f662076616c696461746f72732e34666f7263655f6e6f5f657261730014b020466f72636520746865726520746f206265206e6f206e6577206572617320696e646566696e6974656c792e002c2023203c7765696768743e40202d204e6f20617267756d656e74732e302023203c2f7765696768743e34666f7263655f6e65775f65726100184d0120466f72636520746865726520746f2062652061206e6577206572612061742074686520656e64206f6620746865206e6578742073657373696f6e2e20416674657220746869732c2069742077696c6c206265a020726573657420746f206e6f726d616c20286e6f6e2d666f7263656429206265686176696f75722e002c2023203c7765696768743e40202d204e6f20617267756d656e74732e302023203c2f7765696768743e447365745f696e76756c6e657261626c6573042876616c696461746f7273445665633c543a3a4163636f756e7449643e04cc20536574207468652076616c696461746f72732077686f2063616e6e6f7420626520736c61736865642028696620616e79292e34666f7263655f756e7374616b650414737461736830543a3a4163636f756e744964040d0120466f72636520612063757272656e74207374616b657220746f206265636f6d6520636f6d706c6574656c7920756e7374616b65642c20696d6d6564696174656c792e50666f7263655f6e65775f6572615f616c776179730014050120466f72636520746865726520746f2062652061206e6577206572612061742074686520656e64206f662073657373696f6e7320696e646566696e6974656c792e002c2023203c7765696768743e50202d204f6e652073746f72616765207772697465302023203c2f7765696768743e5463616e63656c5f64656665727265645f736c617368080c65726120457261496e64657834736c6173685f696e6469636573205665633c7533323e1c45012043616e63656c20656e6163746d656e74206f66206120646566657272656420736c6173682e2043616e2062652063616c6c6564206279206569746865722074686520726f6f74206f726967696e206f7270207468652060543a3a536c61736843616e63656c4f726967696e602e05012070617373696e67207468652065726120616e6420696e6469636573206f662074686520736c617368657320666f7220746861742065726120746f206b696c6c2e002c2023203c7765696768743e54202d204f6e652073746f726167652077726974652e302023203c2f7765696768743e187265626f6e64041476616c756554436f6d706163743c42616c616e63654f663c543e3e18e0205265626f6e64206120706f7274696f6e206f6620746865207374617368207363686564756c656420746f20626520756e6c6f636b65642e002c2023203c7765696768743ef0202d2054696d6520636f6d706c65786974793a204f2831292e20426f756e64656420627920604d41585f554e4c4f434b494e475f4348554e4b53602ef4202d2053746f72616765206368616e6765733a2043616e277420696e6372656173652073746f726167652c206f6e6c792064656372656173652069742e302023203c2f7765696768743e010c18526577617264081c42616c616e63651c42616c616e636508510120416c6c2076616c696461746f72732068617665206265656e207265776172646564206279207468652066697273742062616c616e63653b20746865207365636f6e64206973207468652072656d61696e6465728c2066726f6d20746865206d6178696d756d20616d6f756e74206f66207265776172642e14536c61736808244163636f756e7449641c42616c616e6365042501204f6e652076616c696461746f722028616e6420697473206e6f6d696e61746f72732920686173206265656e20736c61736865642062792074686520676976656e20616d6f756e742e684f6c64536c617368696e675265706f7274446973636172646564043053657373696f6e496e646578081d0120416e206f6c6420736c617368696e67207265706f72742066726f6d2061207072696f72206572612077617320646973636172646564206265636175736520697420636f756c6448206e6f742062652070726f6365737365642e083853657373696f6e735065724572613053657373696f6e496e64657810060000000470204e756d626572206f662073657373696f6e7320706572206572612e3c426f6e64696e674475726174696f6e20457261496e64657810a002000004e4204e756d626572206f6620657261732074686174207374616b65642066756e6473206d7573742072656d61696e20626f6e64656420666f722e28344e6f74436f6e74726f6c6c65720468204e6f74206120636f6e74726f6c6c6572206163636f756e742e204e6f7453746173680454204e6f742061207374617368206163636f756e742e34416c7265616479426f6e646564046420537461736820697320616c726561647920626f6e6465642e34416c7265616479506169726564047820436f6e74726f6c6c657220697320616c7265616479207061697265642e30456d70747954617267657473046420546172676574732063616e6e6f7420626520656d7074792e384475706c6963617465496e6465780444204475706c696361746520696e6465782e44496e76616c6964536c617368496e646578048820536c617368207265636f726420696e646578206f7574206f6620626f756e64732e44496e73756666696369656e7456616c756504cc2043616e206e6f7420626f6e6420776974682076616c7565206c657373207468616e206d696e696d756d2062616c616e63652e304e6f4d6f72654368756e6b7304942043616e206e6f74207363686564756c65206d6f726520756e6c6f636b206368756e6b732e344e6f556e6c6f636b4368756e6b04a42043616e206e6f74207265626f6e6420776974686f757420756e6c6f636b696e67206368756e6b732e1c53657373696f6e011c53657373696f6e1c2856616c696461746f727301004c5665633c543a3a56616c696461746f7249643e0400047c205468652063757272656e7420736574206f662076616c696461746f72732e3043757272656e74496e64657801003053657373696f6e496e646578100000000004782043757272656e7420696e646578206f66207468652073657373696f6e2e345175657565644368616e676564010010626f6f6c040008390120547275652069662074686520756e6465726c79696e672065636f6e6f6d6963206964656e746974696573206f7220776569676874696e6720626568696e64207468652076616c696461746f7273a420686173206368616e67656420696e20746865207175657565642076616c696461746f72207365742e285175657565644b6579730100785665633c28543a3a56616c696461746f7249642c20543a3a4b657973293e0400083d012054686520717565756564206b65797320666f7220746865206e6578742073657373696f6e2e205768656e20746865206e6578742073657373696f6e20626567696e732c207468657365206b657973e02077696c6c206265207573656420746f2064657465726d696e65207468652076616c696461746f7227732073657373696f6e206b6579732e4844697361626c656456616c696461746f72730100205665633c7533323e04000c8020496e6469636573206f662064697361626c65642076616c696461746f72732e003501205468652073657420697320636c6561726564207768656e20606f6e5f73657373696f6e5f656e64696e67602072657475726e732061206e657720736574206f66206964656e7469746965732e204e6578744b6579730002051c5665633c75383e38543a3a56616c696461746f7249641c543a3a4b657973010400109c20546865206e6578742073657373696f6e206b65797320666f7220612076616c696461746f722e00590120546865206669727374206b657920697320616c77617973206044454455505f4b45595f5052454649586020746f206861766520616c6c20746865206461746120696e207468652073616d65206272616e6368206f6661012074686520747269652e20486176696e6720616c6c206461746120696e207468652073616d65206272616e63682073686f756c642070726576656e7420736c6f77696e6720646f776e206f7468657220717565726965732e204b65794f776e65720002051c5665633c75383e50284b65795479706549642c205665633c75383e2938543a3a56616c696461746f72496401040010250120546865206f776e6572206f662061206b65792e20546865207365636f6e64206b65792069732074686520604b657954797065496460202b2074686520656e636f646564206b65792e00590120546865206669727374206b657920697320616c77617973206044454455505f4b45595f5052454649586020746f206861766520616c6c20746865206461746120696e207468652073616d65206272616e6368206f6661012074686520747269652e20486176696e6720616c6c206461746120696e207468652073616d65206272616e63682073686f756c642070726576656e7420736c6f77696e6720646f776e206f7468657220717565726965732e0104207365745f6b65797308106b6579731c543a3a4b6579731470726f6f661c5665633c75383e28e42053657473207468652073657373696f6e206b6579287329206f66207468652066756e6374696f6e2063616c6c657220746f20606b6579602e210120416c6c6f777320616e206163636f756e7420746f20736574206974732073657373696f6e206b6579207072696f7220746f206265636f6d696e6720612076616c696461746f722ec4205468697320646f65736e27742074616b652065666665637420756e74696c20746865206e6578742073657373696f6e2e00d420546865206469737061746368206f726967696e206f6620746869732066756e6374696f6e206d757374206265207369676e65642e002c2023203c7765696768743e88202d204f286c6f67206e2920696e206e756d626572206f66206163636f756e74732e58202d204f6e6520657874726120444220656e7472792e302023203c2f7765696768743e0104284e657753657373696f6e043053657373696f6e496e646578085501204e65772073657373696f6e206861732068617070656e65642e204e6f746520746861742074686520617267756d656e74206973207468652073657373696f6e20696e6465782c206e6f742074686520626c6f636b88206e756d626572206173207468652074797065206d6967687420737567676573742e044044454455505f4b45595f50524546495814265b75385d38343a73657373696f6e3a6b6579730865012055736564206173206669727374206b657920666f7220604e6578744b6579736020616e6420604b65794f776e65726020746f2070757420616c6c20746865206461746120696e746f207468652073616d65206272616e636834206f662074686520747269652e0c30496e76616c696450726f6f66046420496e76616c6964206f776e6572736869702070726f6f662e5c4e6f4173736f63696174656456616c696461746f72496404a0204e6f206173736f6369617465642076616c696461746f7220494420666f72206163636f756e742e344475706c6963617465644b657904682052656769737465726564206475706c6963617465206b65792e2444656d6f6372616379012444656d6f6372616379403c5075626c696350726f70436f756e7401002450726f70496e646578100000000004f420546865206e756d626572206f6620287075626c6963292070726f706f73616c7320746861742068617665206265656e206d61646520736f206661722e2c5075626c696350726f707301009c5665633c2850726f70496e6465782c20543a3a486173682c20543a3a4163636f756e744964293e040004210120546865207075626c69632070726f706f73616c732e20556e736f727465642e20546865207365636f6e64206974656d206973207468652070726f706f73616c277320686173682e24507265696d616765730001011c543a3a48617368d4285665633c75383e2c20543a3a4163636f756e7449642c2042616c616e63654f663c543e2c20543a3a426c6f636b4e756d62657229000400086101204d6170206f662068617368657320746f207468652070726f706f73616c20707265696d6167652c20616c6f6e6720776974682077686f207265676973746572656420697420616e64207468656972206465706f7369742ee42054686520626c6f636b206e756d6265722069732074686520626c6f636b20617420776869636820697420776173206465706f73697465642e244465706f7369744f660001012450726f70496e646578842842616c616e63654f663c543e2c205665633c543a3a4163636f756e7449643e2900040004842054686f73652077686f2068617665206c6f636b65642061206465706f7369742e3c5265666572656e64756d436f756e7401003c5265666572656e64756d496e646578100000000004310120546865206e6578742066726565207265666572656e64756d20696e6465782c20616b6120746865206e756d626572206f66207265666572656e6461207374617274656420736f206661722e344c6f77657374556e62616b656401003c5265666572656e64756d496e646578100000000008250120546865206c6f77657374207265666572656e64756d20696e64657820726570726573656e74696e6720616e20756e62616b6564207265666572656e64756d2e20457175616c20746fdc20605265666572656e64756d436f756e74602069662074686572652069736e2774206120756e62616b6564207265666572656e64756d2e405265666572656e64756d496e666f4f660001013c5265666572656e64756d496e6465789c5265666572656e64756d496e666f3c543a3a426c6f636b4e756d6265722c20543a3a486173683e00040004b420496e666f726d6174696f6e20636f6e6365726e696e6720616e7920676976656e207265666572656e64756d2e34446973706174636851756575650100bc5665633c28543a3a426c6f636b4e756d6265722c20543a3a486173682c205265666572656e64756d496e646578293e0400044101205175657565206f66207375636365737366756c207265666572656e646120746f20626520646973706174636865642e2053746f726564206f72646572656420627920626c6f636b206e756d6265722e24566f74657273466f720101013c5265666572656e64756d496e646578445665633c543a3a4163636f756e7449643e00040004a4204765742074686520766f7465727320666f72207468652063757272656e742070726f706f73616c2e18566f74654f660101017c285265666572656e64756d496e6465782c20543a3a4163636f756e7449642910566f7465000400106101204765742074686520766f746520696e206120676976656e207265666572656e64756d206f66206120706172746963756c617220766f7465722e2054686520726573756c74206973206d65616e696e6766756c206f6e6c794d012069662060766f746572735f666f726020696e636c756465732074686520766f746572207768656e2063616c6c6564207769746820746865207265666572656e64756d2028796f75276c6c20676574207468655d012064656661756c742060566f7465602076616c7565206f7468657277697365292e20496620796f7520646f6e27742077616e7420746f20636865636b2060766f746572735f666f72602c207468656e20796f752063616ef420616c736f20636865636b20666f722073696d706c65206578697374656e636520776974682060566f74654f663a3a657869737473602066697273742e1450726f787900010130543a3a4163636f756e74496430543a3a4163636f756e7449640004000831012057686f2069732061626c6520746f20766f746520666f722077686f6d2e2056616c7565206973207468652066756e642d686f6c64696e67206163636f756e742c206b6579206973207468658820766f74652d7472616e73616374696f6e2d73656e64696e67206163636f756e742e2c44656c65676174696f6e7301010130543a3a4163636f756e7449646828543a3a4163636f756e7449642c20436f6e76696374696f6e2901840000000000000000000000000000000000000000000000000000000000000000000441012047657420746865206163636f756e742028616e64206c6f636b20706572696f64732920746f20776869636820616e6f74686572206163636f756e742069732064656c65676174696e6720766f74652e544c6173745461626c656457617345787465726e616c010010626f6f6c0400085901205472756520696620746865206c617374207265666572656e64756d207461626c656420776173207375626d69747465642065787465726e616c6c792e2046616c7365206966206974207761732061207075626c6963282070726f706f73616c2e304e65787445787465726e616c00006028543a3a486173682c20566f74655468726573686f6c6429040010590120546865207265666572656e64756d20746f206265207461626c6564207768656e6576657220697420776f756c642062652076616c696420746f207461626c6520616e2065787465726e616c2070726f706f73616c2e550120546869732068617070656e73207768656e2061207265666572656e64756d206e6565647320746f206265207461626c656420616e64206f6e65206f662074776f20636f6e646974696f6e7320617265206d65743aa4202d20604c6173745461626c656457617345787465726e616c60206973206066616c7365603b206f7268202d20605075626c696350726f70736020697320656d7074792e24426c61636b6c6973740001011c543a3a486173688c28543a3a426c6f636b4e756d6265722c205665633c543a3a4163636f756e7449643e290004000851012041207265636f7264206f662077686f207665746f656420776861742e204d6170732070726f706f73616c206861736820746f206120706f737369626c65206578697374656e7420626c6f636b206e756d626572e82028756e74696c207768656e206974206d6179206e6f742062652072657375626d69747465642920616e642077686f207665746f65642069742e3443616e63656c6c6174696f6e730101011c543a3a4861736810626f6f6c000400042901205265636f7264206f6620616c6c2070726f706f73616c7320746861742068617665206265656e207375626a65637420746f20656d657267656e63792063616e63656c6c6174696f6e2e01541c70726f706f7365083470726f706f73616c5f686173681c543a3a486173681476616c756554436f6d706163743c42616c616e63654f663c543e3e18a02050726f706f736520612073656e73697469766520616374696f6e20746f2062652074616b656e2e002c2023203c7765696768743e20202d204f2831292e80202d2054776f204442206368616e6765732c206f6e6520444220656e7472792e302023203c2f7765696768743e187365636f6e64042070726f706f73616c48436f6d706163743c50726f70496e6465783e18a02050726f706f736520612073656e73697469766520616374696f6e20746f2062652074616b656e2e002c2023203c7765696768743e20202d204f2831292e40202d204f6e6520444220656e7472792e302023203c2f7765696768743e10766f746508247265665f696e64657860436f6d706163743c5265666572656e64756d496e6465783e10766f746510566f74651c350120566f746520696e2061207265666572656e64756d2e2049662060766f74652e69735f6179652829602c2074686520766f746520697320746f20656e616374207468652070726f706f73616c3bbc206f7468657277697365206974206973206120766f746520746f206b65657020746865207374617475732071756f2e002c2023203c7765696768743e20202d204f2831292e7c202d204f6e65204442206368616e67652c206f6e6520444220656e7472792e302023203c2f7765696768743e2870726f78795f766f746508247265665f696e64657860436f6d706163743c5265666572656e64756d496e6465783e10766f746510566f74651c510120566f746520696e2061207265666572656e64756d206f6e20626568616c66206f6620612073746173682e2049662060766f74652e69735f6179652829602c2074686520766f746520697320746f20656e616374f4207468652070726f706f73616c3b206f7468657277697365206974206973206120766f746520746f206b65657020746865207374617475732071756f2e002c2023203c7765696768743e20202d204f2831292e7c202d204f6e65204442206368616e67652c206f6e6520444220656e7472792e302023203c2f7765696768743e40656d657267656e63795f63616e63656c04247265665f696e6465783c5265666572656e64756d496e646578085101205363686564756c6520616e20656d657267656e63792063616e63656c6c6174696f6e206f662061207265666572656e64756d2e2043616e6e6f742068617070656e20747769636520746f207468652073616d6530207265666572656e64756d2e4065787465726e616c5f70726f706f7365043470726f706f73616c5f686173681c543a3a48617368083101205363686564756c652061207265666572656e64756d20746f206265207461626c6564206f6e6365206974206973206c6567616c20746f207363686564756c6520616e2065787465726e616c30207265666572656e64756d2e6465787465726e616c5f70726f706f73655f6d616a6f72697479043470726f706f73616c5f686173681c543a3a48617368145901205363686564756c652061206d616a6f726974792d63617272696573207265666572656e64756d20746f206265207461626c6564206e657874206f6e6365206974206973206c6567616c20746f207363686564756c656020616e2065787465726e616c207265666572656e64756d2e004d0120556e6c696b65206065787465726e616c5f70726f706f7365602c20626c61636b6c697374696e6720686173206e6f20656666656374206f6e207468697320616e64206974206d6179207265706c61636520619c207072652d7363686564756c6564206065787465726e616c5f70726f706f7365602063616c6c2e6065787465726e616c5f70726f706f73655f64656661756c74043470726f706f73616c5f686173681c543a3a48617368144901205363686564756c652061206e656761746976652d7475726e6f75742d62696173207265666572656e64756d20746f206265207461626c6564206e657874206f6e6365206974206973206c6567616c20746f84207363686564756c6520616e2065787465726e616c207265666572656e64756d2e004d0120556e6c696b65206065787465726e616c5f70726f706f7365602c20626c61636b6c697374696e6720686173206e6f20656666656374206f6e207468697320616e64206974206d6179207265706c61636520619c207072652d7363686564756c6564206065787465726e616c5f70726f706f7365602063616c6c2e28666173745f747261636b0c3470726f706f73616c5f686173681c543a3a4861736834766f74696e675f706572696f6438543a3a426c6f636b4e756d6265721464656c617938543a3a426c6f636b4e756d626572245101205363686564756c65207468652063757272656e746c792065787465726e616c6c792d70726f706f736564206d616a6f726974792d63617272696573207265666572656e64756d20746f206265207461626c6564650120696d6d6564696174656c792e204966207468657265206973206e6f2065787465726e616c6c792d70726f706f736564207265666572656e64756d2063757272656e746c792c206f72206966207468657265206973206f6e65ec20627574206974206973206e6f742061206d616a6f726974792d63617272696573207265666572656e64756d207468656e206974206661696c732e00f8202d206070726f706f73616c5f68617368603a205468652068617368206f66207468652063757272656e742065787465726e616c2070726f706f73616c2e6101202d2060766f74696e675f706572696f64603a2054686520706572696f64207468617420697320616c6c6f77656420666f7220766f74696e67206f6e20746869732070726f706f73616c2e20496e6372656173656420746f9820202060456d657267656e6379566f74696e67506572696f646020696620746f6f206c6f772e5501202d206064656c6179603a20546865206e756d626572206f6620626c6f636b20616674657220766f74696e672068617320656e64656420696e20617070726f76616c20616e6420746869732073686f756c64206265bc202020656e61637465642e205468697320646f65736e277420686176652061206d696e696d756d20616d6f756e742e347665746f5f65787465726e616c043470726f706f73616c5f686173681c543a3a4861736804bc205665746f20616e6420626c61636b6c697374207468652065787465726e616c2070726f706f73616c20686173682e4463616e63656c5f7265666572656e64756d04247265665f696e64657860436f6d706163743c5265666572656e64756d496e6465783e04542052656d6f76652061207265666572656e64756d2e3463616e63656c5f717565756564041477686963683c5265666572656e64756d496e64657804a02043616e63656c20612070726f706f73616c2071756575656420666f7220656e6163746d656e742e247365745f70726f7879041470726f787930543a3a4163636f756e7449641498205370656369667920612070726f78792e2043616c6c6564206279207468652073746173682e002c2023203c7765696768743e58202d204f6e6520657874726120444220656e7472792e302023203c2f7765696768743e3072657369676e5f70726f787900149820436c656172207468652070726f78792e2043616c6c6564206279207468652070726f78792e002c2023203c7765696768743e40202d204f6e6520444220636c6561722e302023203c2f7765696768743e3072656d6f76655f70726f7879041470726f787930543a3a4163636f756e744964149820436c656172207468652070726f78792e2043616c6c6564206279207468652073746173682e002c2023203c7765696768743e40202d204f6e6520444220636c6561722e302023203c2f7765696768743e2064656c65676174650808746f30543a3a4163636f756e74496428636f6e76696374696f6e28436f6e76696374696f6e143c2044656c656761746520766f74652e002c2023203c7765696768743e58202d204f6e6520657874726120444220656e7472792e302023203c2f7765696768743e28756e64656c656761746500144420556e64656c656761746520766f74652e002c2023203c7765696768743e20202d204f2831292e302023203c2f7765696768743e58636c6561725f7075626c69635f70726f706f73616c7300040101205665746f20616e6420626c61636b6c697374207468652070726f706f73616c20686173682e204d7573742062652066726f6d20526f6f74206f726967696e2e346e6f74655f707265696d6167650440656e636f6465645f70726f706f73616c1c5665633c75383e0861012052656769737465722074686520707265696d61676520666f7220616e207570636f6d696e672070726f706f73616c2e205468697320646f65736e27742072657175697265207468652070726f706f73616c20746f206265250120696e207468652064697370617463682071756575652062757420646f657320726571756972652061206465706f7369742c2072657475726e6564206f6e636520656e61637465642e586e6f74655f696d6d696e656e745f707265696d6167650440656e636f6465645f70726f706f73616c1c5665633c75383e0845012052656769737465722074686520707265696d61676520666f7220616e207570636f6d696e672070726f706f73616c2e2054686973207265717569726573207468652070726f706f73616c20746f206265b420696e207468652064697370617463682071756575652e204e6f206465706f736974206973206e65656465642e34726561705f707265696d616765043470726f706f73616c5f686173681c543a3a4861736814f42052656d6f766520616e20657870697265642070726f706f73616c20707265696d61676520616e6420636f6c6c65637420746865206465706f7369742e00510120546869732077696c6c206f6e6c7920776f726b2061667465722060566f74696e67506572696f646020626c6f636b732066726f6d207468652074696d6520746861742074686520707265696d616765207761735d01206e6f7465642c2069662069742773207468652073616d65206163636f756e7420646f696e672069742e2049662069742773206120646966666572656e74206163636f756e742c207468656e206974276c6c206f6e6c79b020776f726b20616e206164646974696f6e616c2060456e6163746d656e74506572696f6460206c617465722e01402050726f706f736564082450726f70496e6465781c42616c616e636504c02041206d6f74696f6e20686173206265656e2070726f706f7365642062792061207075626c6963206163636f756e742e185461626c65640c2450726f70496e6465781c42616c616e6365385665633c4163636f756e7449643e04dc2041207075626c69632070726f706f73616c20686173206265656e207461626c656420666f72207265666572656e64756d20766f74652e3845787465726e616c5461626c656400049820416e2065787465726e616c2070726f706f73616c20686173206265656e207461626c65642e1c53746172746564083c5265666572656e64756d496e64657834566f74655468726573686f6c6404602041207265666572656e64756d2068617320626567756e2e18506173736564043c5265666572656e64756d496e64657804b020412070726f706f73616c20686173206265656e20617070726f766564206279207265666572656e64756d2e244e6f74506173736564043c5265666572656e64756d496e64657804b020412070726f706f73616c20686173206265656e2072656a6563746564206279207265666572656e64756d2e2443616e63656c6c6564043c5265666572656e64756d496e64657804842041207265666572656e64756d20686173206265656e2063616e63656c6c65642e204578656375746564083c5265666572656e64756d496e64657810626f6f6c047420412070726f706f73616c20686173206265656e20656e61637465642e2444656c65676174656408244163636f756e744964244163636f756e74496404e020416e206163636f756e74206861732064656c65676174656420746865697220766f746520746f20616e6f74686572206163636f756e742e2c556e64656c65676174656404244163636f756e74496404e820416e206163636f756e74206861732063616e63656c6c656420612070726576696f75732064656c65676174696f6e206f7065726174696f6e2e185665746f65640c244163636f756e74496410486173682c426c6f636b4e756d626572049820416e2065787465726e616c2070726f706f73616c20686173206265656e207665746f65642e34507265696d6167654e6f7465640c1048617368244163636f756e7449641c42616c616e636504e020412070726f706f73616c277320707265696d61676520776173206e6f7465642c20616e6420746865206465706f7369742074616b656e2e30507265696d616765557365640c1048617368244163636f756e7449641c42616c616e636504150120412070726f706f73616c20707265696d616765207761732072656d6f76656420616e6420757365642028746865206465706f736974207761732072657475726e6564292e3c507265696d616765496e76616c69640810486173683c5265666572656e64756d496e646578040d0120412070726f706f73616c20636f756c64206e6f7420626520657865637574656420626563617573652069747320707265696d6167652077617320696e76616c69642e3c507265696d6167654d697373696e670810486173683c5265666572656e64756d496e646578040d0120412070726f706f73616c20636f756c64206e6f7420626520657865637574656420626563617573652069747320707265696d61676520776173206d697373696e672e38507265696d616765526561706564101048617368244163636f756e7449641c42616c616e6365244163636f756e744964045d012041207265676973746572656420707265696d616765207761732072656d6f76656420616e6420746865206465706f73697420636f6c6c6563746564206279207468652072656170657220286c617374206974656d292e1c3c456e6163746d656e74506572696f6438543a3a426c6f636b4e756d62657210002f0d0014710120546865206d696e696d756d20706572696f64206f66206c6f636b696e6720616e642074686520706572696f64206265747765656e20612070726f706f73616c206265696e6720617070726f76656420616e6420656e61637465642e0031012049742073686f756c642067656e6572616c6c792062652061206c6974746c65206d6f7265207468616e2074686520756e7374616b6520706572696f6420746f20656e737572652074686174690120766f74696e67207374616b657273206861766520616e206f70706f7274756e69747920746f2072656d6f7665207468656d73656c7665732066726f6d207468652073797374656d20696e2074686520636173652077686572659c207468657920617265206f6e20746865206c6f73696e672073696465206f66206120766f74652e304c61756e6368506572696f6438543a3a426c6f636b4e756d62657210004e0c0004e420486f77206f6674656e2028696e20626c6f636b7329206e6577207075626c6963207265666572656e646120617265206c61756e636865642e30566f74696e67506572696f6438543a3a426c6f636b4e756d62657210004e0c0004b820486f77206f6674656e2028696e20626c6f636b732920746f20636865636b20666f72206e657720766f7465732e384d696e696d756d4465706f7369743042616c616e63654f663c543e400000c16ff2862300000000000000000004350120546865206d696e696d756d20616d6f756e7420746f20626520757365642061732061206465706f73697420666f722061207075626c6963207265666572656e64756d2070726f706f73616c2e54456d657267656e6379566f74696e67506572696f6438543a3a426c6f636b4e756d626572108051010004ec204d696e696d756d20766f74696e6720706572696f6420616c6c6f77656420666f7220616e20656d657267656e6379207265666572656e64756d2e34436f6f6c6f6666506572696f6438543a3a426c6f636b4e756d62657210004e0c0004610120506572696f6420696e20626c6f636b7320776865726520616e2065787465726e616c2070726f706f73616c206d6179206e6f742062652072652d7375626d6974746564206166746572206265696e67207665746f65642e4c507265696d616765427974654465706f7369743042616c616e63654f663c543e400010a5d4e800000000000000000000000429012054686520616d6f756e74206f662062616c616e63652074686174206d757374206265206465706f7369746564207065722062797465206f6620707265696d6167652073746f7265642e582056616c75654c6f7704382056616c756520746f6f206c6f773c50726f706f73616c4d697373696e6704602050726f706f73616c20646f6573206e6f74206578697374204e6f7450726f78790430204e6f7420612070726f787920426164496e646578043820556e6b6e6f776e20696e6465783c416c726561647943616e63656c656404982043616e6e6f742063616e63656c207468652073616d652070726f706f73616c207477696365444475706c696361746550726f706f73616c04582050726f706f73616c20616c7265616479206d6164654c50726f706f73616c426c61636b6c6973746564046c2050726f706f73616c207374696c6c20626c61636b6c6973746564444e6f7453696d706c654d616a6f7269747904ac204e6578742065787465726e616c2070726f706f73616c206e6f742073696d706c65206d616a6f726974792c496e76616c696448617368043420496e76616c69642068617368284e6f50726f706f73616c0454204e6f2065787465726e616c2070726f706f73616c34416c72656164795665746f6564049c204964656e74697479206d6179206e6f74207665746f20612070726f706f73616c20747769636530416c726561647950726f7879044020416c726561647920612070726f78792857726f6e6750726f787904302057726f6e672070726f7879304e6f7444656c6567617465640438204e6f742064656c656761746564444475706c6963617465507265696d616765045c20507265696d61676520616c7265616479206e6f7465642c4e6f74496d6d696e656e740434204e6f7420696d6d696e656e74144561726c79042820546f6f206561726c7920496d6d696e656e74042420496d6d696e656e743c507265696d6167654d697373696e67044c20507265696d616765206e6f7420666f756e64445265666572656e64756d496e76616c6964048820566f746520676976656e20666f7220696e76616c6964207265666572656e64756d3c507265696d616765496e76616c6964044420496e76616c696420707265696d6167652c4e6f6e6557616974696e670454204e6f2070726f706f73616c732077616974696e671c436f756e63696c014c496e7374616e636531436f6c6c656374697665142450726f706f73616c730100305665633c543a3a486173683e040004902054686520686173686573206f6620746865206163746976652070726f706f73616c732e2850726f706f73616c4f660001011c543a3a48617368643c542061732054726169743c493e3e3a3a50726f706f73616c00040004cc2041637475616c2070726f706f73616c20666f72206120676976656e20686173682c20696620697427732063757272656e742e18566f74696e670001011c543a3a486173684c566f7465733c543a3a4163636f756e7449643e00040004b420566f746573206f6e206120676976656e2070726f706f73616c2c206966206974206973206f6e676f696e672e3450726f706f73616c436f756e7401000c753332100000000004482050726f706f73616c7320736f206661722e1c4d656d626572730100445665633c543a3a4163636f756e7449643e0400043901205468652063757272656e74206d656d62657273206f662074686520636f6c6c6563746976652e20546869732069732073746f72656420736f7274656420286a7573742062792076616c7565292e01102c7365745f6d656d62657273042c6e65775f6d656d62657273445665633c543a3a4163636f756e7449643e105101205365742074686520636f6c6c6563746976652773206d656d62657273686970206d616e75616c6c7920746f20606e65775f6d656d62657273602e204265206e69636520746f2074686520636861696e20616e645c2070726f76696465206974207072652d736f727465642e005820526571756972657320726f6f74206f726967696e2e1c65786563757465042070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e0cf420446973706174636820612070726f706f73616c2066726f6d2061206d656d626572207573696e672074686520604d656d62657260206f726967696e2e00ac204f726967696e206d7573742062652061206d656d626572206f662074686520636f6c6c6563746976652e1c70726f706f736508247468726573686f6c6450436f6d706163743c4d656d626572436f756e743e2070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e102c2023203c7765696768743e90202d20426f756e6465642073746f7261676520726561647320616e64207772697465732eb8202d20417267756d656e7420607468726573686f6c6460206861732062656172696e67206f6e207765696768742e302023203c2f7765696768743e10766f74650c2070726f706f73616c1c543a3a4861736814696e64657858436f6d706163743c50726f706f73616c496e6465783e1c617070726f766510626f6f6c102c2023203c7765696768743e8c202d20426f756e6465642073746f72616765207265616420616e64207772697465732e5501202d2057696c6c20626520736c696768746c792068656176696572206966207468652070726f706f73616c20697320617070726f766564202f20646973617070726f7665642061667465722074686520766f74652e302023203c2f7765696768743e01182050726f706f73656410244163636f756e7449643450726f706f73616c496e64657810486173682c4d656d626572436f756e74084d012041206d6f74696f6e2028676976656e20686173682920686173206265656e2070726f706f7365642028627920676976656e206163636f756e742920776974682061207468726573686f6c642028676976656e4020604d656d626572436f756e7460292e14566f74656414244163636f756e744964104861736810626f6f6c2c4d656d626572436f756e742c4d656d626572436f756e740809012041206d6f74696f6e2028676976656e20686173682920686173206265656e20766f746564206f6e20627920676976656e206163636f756e742c206c656176696e67190120612074616c6c79202879657320766f74657320616e64206e6f20766f74657320676976656e20726573706563746976656c7920617320604d656d626572436f756e7460292e20417070726f76656404104861736804c42041206d6f74696f6e2077617320617070726f76656420627920746865207265717569726564207468726573686f6c642e2c446973617070726f76656404104861736804d42041206d6f74696f6e20776173206e6f7420617070726f76656420627920746865207265717569726564207468726573686f6c642e20457865637574656408104861736810626f6f6c0405012041206d6f74696f6e207761732065786563757465643b2060626f6f6c6020697320747275652069662072657475726e656420776974686f7574206572726f722e384d656d626572457865637574656408104861736810626f6f6c042d0120412073696e676c65206d656d6265722064696420736f6d6520616374696f6e3b2060626f6f6c6020697320747275652069662072657475726e656420776974686f7574206572726f722e0018244e6f744d656d6265720460204163636f756e74206973206e6f742061206d656d626572444475706c696361746550726f706f73616c0480204475706c69636174652070726f706f73616c73206e6f7420616c6c6f7765643c50726f706f73616c4d697373696e6704502050726f706f73616c206d7573742065786973742857726f6e67496e6465780444204d69736d61746368656420696e646578344475706c6963617465566f7465045c204475706c696361746520766f74652069676e6f72656448416c7265616479496e697469616c697a65640484204d656d626572732061726520616c726561647920696e697469616c697a65642148546563686e6963616c436f6d6d6974746565014c496e7374616e636532436f6c6c656374697665142450726f706f73616c730100305665633c543a3a486173683e040004902054686520686173686573206f6620746865206163746976652070726f706f73616c732e2850726f706f73616c4f660001011c543a3a48617368643c542061732054726169743c493e3e3a3a50726f706f73616c00040004cc2041637475616c2070726f706f73616c20666f72206120676976656e20686173682c20696620697427732063757272656e742e18566f74696e670001011c543a3a486173684c566f7465733c543a3a4163636f756e7449643e00040004b420566f746573206f6e206120676976656e2070726f706f73616c2c206966206974206973206f6e676f696e672e3450726f706f73616c436f756e7401000c753332100000000004482050726f706f73616c7320736f206661722e1c4d656d626572730100445665633c543a3a4163636f756e7449643e0400043901205468652063757272656e74206d656d62657273206f662074686520636f6c6c6563746976652e20546869732069732073746f72656420736f7274656420286a7573742062792076616c7565292e01102c7365745f6d656d62657273042c6e65775f6d656d62657273445665633c543a3a4163636f756e7449643e105101205365742074686520636f6c6c6563746976652773206d656d62657273686970206d616e75616c6c7920746f20606e65775f6d656d62657273602e204265206e69636520746f2074686520636861696e20616e645c2070726f76696465206974207072652d736f727465642e005820526571756972657320726f6f74206f726967696e2e1c65786563757465042070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e0cf420446973706174636820612070726f706f73616c2066726f6d2061206d656d626572207573696e672074686520604d656d62657260206f726967696e2e00ac204f726967696e206d7573742062652061206d656d626572206f662074686520636f6c6c6563746976652e1c70726f706f736508247468726573686f6c6450436f6d706163743c4d656d626572436f756e743e2070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e102c2023203c7765696768743e90202d20426f756e6465642073746f7261676520726561647320616e64207772697465732eb8202d20417267756d656e7420607468726573686f6c6460206861732062656172696e67206f6e207765696768742e302023203c2f7765696768743e10766f74650c2070726f706f73616c1c543a3a4861736814696e64657858436f6d706163743c50726f706f73616c496e6465783e1c617070726f766510626f6f6c102c2023203c7765696768743e8c202d20426f756e6465642073746f72616765207265616420616e64207772697465732e5501202d2057696c6c20626520736c696768746c792068656176696572206966207468652070726f706f73616c20697320617070726f766564202f20646973617070726f7665642061667465722074686520766f74652e302023203c2f7765696768743e01182050726f706f73656410244163636f756e7449643450726f706f73616c496e64657810486173682c4d656d626572436f756e74084d012041206d6f74696f6e2028676976656e20686173682920686173206265656e2070726f706f7365642028627920676976656e206163636f756e742920776974682061207468726573686f6c642028676976656e4020604d656d626572436f756e7460292e14566f74656414244163636f756e744964104861736810626f6f6c2c4d656d626572436f756e742c4d656d626572436f756e740809012041206d6f74696f6e2028676976656e20686173682920686173206265656e20766f746564206f6e20627920676976656e206163636f756e742c206c656176696e67190120612074616c6c79202879657320766f74657320616e64206e6f20766f74657320676976656e20726573706563746976656c7920617320604d656d626572436f756e7460292e20417070726f76656404104861736804c42041206d6f74696f6e2077617320617070726f76656420627920746865207265717569726564207468726573686f6c642e2c446973617070726f76656404104861736804d42041206d6f74696f6e20776173206e6f7420617070726f76656420627920746865207265717569726564207468726573686f6c642e20457865637574656408104861736810626f6f6c0405012041206d6f74696f6e207761732065786563757465643b2060626f6f6c6020697320747275652069662072657475726e656420776974686f7574206572726f722e384d656d626572457865637574656408104861736810626f6f6c042d0120412073696e676c65206d656d6265722064696420736f6d6520616374696f6e3b2060626f6f6c6020697320747275652069662072657475726e656420776974686f7574206572726f722e0018244e6f744d656d6265720460204163636f756e74206973206e6f742061206d656d626572444475706c696361746550726f706f73616c0480204475706c69636174652070726f706f73616c73206e6f7420616c6c6f7765643c50726f706f73616c4d697373696e6704502050726f706f73616c206d7573742065786973742857726f6e67496e6465780444204d69736d61746368656420696e646578344475706c6963617465566f7465045c204475706c696361746520766f74652069676e6f72656448416c7265616479496e697469616c697a65640484204d656d626572732061726520616c726561647920696e697469616c697a65642124456c656374696f6e73014050687261676d656e456c656374696f6e181c4d656d626572730100845665633c28543a3a4163636f756e7449642c2042616c616e63654f663c543e293e040004f0205468652063757272656e7420656c6563746564206d656d626572736869702e20536f72746564206261736564206f6e206163636f756e742069642e2452756e6e65727355700100845665633c28543a3a4163636f756e7449642c2042616c616e63654f663c543e293e0400044901205468652063757272656e742072756e6e6572735f75702e20536f72746564206261736564206f6e206c6f7720746f2068696768206d657269742028776f72736520746f20626573742072756e6e6572292e38456c656374696f6e526f756e647301000c75333210000000000441012054686520746f74616c206e756d626572206f6620766f746520726f756e6473207468617420686176652068617070656e65642c206578636c7564696e6720746865207570636f6d696e67206f6e652e1c566f7465734f6601010130543a3a4163636f756e744964445665633c543a3a4163636f756e7449643e01040004010120566f746573206f66206120706172746963756c617220766f7465722c20776974682074686520726f756e6420696e646578206f662074686520766f7465732e1c5374616b654f6601010130543a3a4163636f756e7449643042616c616e63654f663c543e0040000000000000000000000000000000000464204c6f636b6564207374616b65206f66206120766f7465722e2843616e646964617465730100445665633c543a3a4163636f756e7449643e0400086501205468652070726573656e742063616e646964617465206c6973742e20536f72746564206261736564206f6e206163636f756e742d69642e20412063757272656e74206d656d626572206f7220612072756e6e65722063616e3101206e6576657220656e746572207468697320766563746f7220616e6420697320616c7761797320696d706c696369746c7920617373756d656420746f20626520612063616e6469646174652e011810766f74650814766f746573445665633c543a3a4163636f756e7449643e1476616c756554436f6d706163743c42616c616e63654f663c543e3e3c050120566f746520666f72206120736574206f662063616e6469646174657320666f7220746865207570636f6d696e6720726f756e64206f6620656c656374696f6e2e0050205468652060766f746573602073686f756c643a482020202d206e6f7420626520656d7074792eac2020202d206265206c657373207468616e20746865206e756d626572206f662063616e646964617465732e005d012055706f6e20766f74696e672c206076616c75656020756e697473206f66206077686f6027732062616c616e6365206973206c6f636b656420616e64206120626f6e6420616d6f756e742069732072657365727665642e5d012049742069732074686520726573706f6e736962696c697479206f66207468652063616c6c657220746f206e6f7420706c61636520616c6c206f662074686569722062616c616e636520696e746f20746865206c6f636ba020616e64206b65657020736f6d6520666f722066757274686572207472616e73616374696f6e732e002c2023203c7765696768743e2c2023232323205374617465302052656164733a204f283129c8205772697465733a204f28562920676976656e2060566020766f7465732e205620697320626f756e6465642062792031362e302023203c2f7765696768743e3072656d6f76655f766f746572001c21012052656d6f766520606f726967696e60206173206120766f7465722e20546869732072656d6f76657320746865206c6f636b20616e642072657475726e732074686520626f6e642e002c2023203c7765696768743e2c2023232323205374617465302052656164733a204f28312934205772697465733a204f283129302023203c2f7765696768743e507265706f72745f646566756e63745f766f74657204187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365345d01205265706f727420607461726765746020666f72206265696e6720616e20646566756e637420766f7465722e20496e2063617365206f6620612076616c6964207265706f72742c20746865207265706f727465722069735d012072657761726465642062792074686520626f6e6420616d6f756e74206f662060746172676574602e204f74686572776973652c20746865207265706f7274657220697473656c662069732072656d6f76656420616e645c20746865697220626f6e6420697320736c61736865642e0088204120646566756e637420766f74657220697320646566696e656420746f2062653a4d012020202d206120766f7465722077686f73652063757272656e74207375626d697474656420766f7465732061726520616c6c20696e76616c69642e20692e652e20616c6c206f66207468656d20617265206e6fb420202020206c6f6e67657220612063616e646964617465206e6f7220616e20616374697665206d656d6265722e002c2023203c7765696768743e2c202323232320537461746515012052656164733a204f284e4c6f674d2920676976656e204d2063757272656e742063616e6469646174657320616e64204e20766f74657320666f722060746172676574602e34205772697465733a204f283129302023203c2f7765696768743e407375626d69745f63616e646964616379003478205375626d6974206f6e6573656c6620666f722063616e6469646163792e006420412063616e6469646174652077696c6c206569746865723aec2020202d204c6f73652061742074686520656e64206f6620746865207465726d20616e6420666f7266656974207468656972206465706f7369742e2d012020202d2057696e20616e64206265636f6d652061206d656d6265722e204d656d626572732077696c6c206576656e7475616c6c7920676574207468656972207374617368206261636b2e55012020202d204265636f6d6520612072756e6e65722d75702e2052756e6e6572732d75707320617265207265736572766564206d656d6265727320696e2063617365206f6e65206765747320666f72636566756c6c7934202020202072656d6f7665642e002c2023203c7765696768743e2c20232323232053746174658c2052656164733a204f284c6f674e2920476976656e204e2063616e646964617465732e34205772697465733a204f283129302023203c2f7765696768743e4872656e6f756e63655f63616e646964616379002451012052656e6f756e6365206f6e65277320696e74656e74696f6e20746f20626520612063616e64696461746520666f7220746865206e65787420656c656374696f6e20726f756e642e203320706f74656e7469616c40206f7574636f6d65732065786973743a4101202d20606f726967696e6020697320612063616e64696461746520616e64206e6f7420656c656374656420696e20616e79207365742e20496e207468697320636173652c2074686520626f6e64206973f4202020756e72657365727665642c2072657475726e656420616e64206f726967696e2069732072656d6f76656420617320612063616e6469646174652e5901202d20606f726967696e6020697320612063757272656e742072756e6e65722075702e20496e207468697320636173652c2074686520626f6e6420697320756e72657365727665642c2072657475726e656420616e64842020206f726967696e2069732072656d6f76656420617320612072756e6e65722e4d01202d20606f726967696e6020697320612063757272656e74206d656d6265722e20496e207468697320636173652c2074686520626f6e6420697320756e726573657276656420616e64206f726967696e206973590120202072656d6f7665642061732061206d656d6265722c20636f6e73657175656e746c79206e6f74206265696e6720612063616e64696461746520666f7220746865206e65787420726f756e6420616e796d6f72652e650120202053696d696c617220746f205b6072656d6f76655f766f746572605d2c206966207265706c6163656d656e742072756e6e657273206578697374732c20746865792061726520696d6d6564696174656c7920757365642e3472656d6f76655f6d656d626572040c77686f8c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365345d012052656d6f7665206120706172746963756c6172206d656d6265722066726f6d20746865207365742e20546869732069732065666665637469766520696d6d6564696174656c7920616e642074686520626f6e64206f668020746865206f7574676f696e67206d656d62657220697320736c61736865642e00590120496620612072756e6e65722d757020697320617661696c61626c652c207468656e2074686520626573742072756e6e65722d75702077696c6c2062652072656d6f76656420616e64207265706c6163657320746865f4206f7574676f696e67206d656d6265722e204f74686572776973652c2061206e65772070687261676d656e20726f756e6420697320737461727465642e004501204e6f74652074686174207468697320646f6573206e6f7420616666656374207468652064657369676e6174656420626c6f636b206e756d626572206f6620746865206e65787420656c656374696f6e2e002c2023203c7765696768743e2c2023232323205374617465582052656164733a204f28646f5f70687261676d656e295c205772697465733a204f28646f5f70687261676d656e29302023203c2f7765696768743e01141c4e65775465726d04645665633c284163636f756e7449642c2042616c616e6365293e0855012041206e6577207465726d2077697468206e6577206d656d626572732e205468697320696e64696361746573207468617420656e6f7567682063616e6469646174657320657869737465642c206e6f742074686174450120656e6f756768206861766520686173206265656e20656c65637465642e2054686520696e6e65722076616c7565206d757374206265206578616d696e656420666f72207468697320707572706f73652e24456d7074795465726d0004d8204e6f20286f72206e6f7420656e6f756768292063616e64696461746573206578697374656420666f72207468697320726f756e642e304d656d6265724b69636b656404244163636f756e7449640845012041206d656d62657220686173206265656e2072656d6f7665642e20546869732073686f756c6420616c7761797320626520666f6c6c6f7765642062792065697468657220604e65775465726d60206f74342060456d7074795465726d602e3c4d656d62657252656e6f756e63656404244163636f756e74496404a02041206d656d626572206861732072656e6f756e6365642074686569722063616e6469646163792e34566f7465725265706f727465640c244163636f756e744964244163636f756e74496410626f6f6c086101204120766f7465722028666972737420656c656d656e742920776173207265706f72746564202862797420746865207365636f6e6420656c656d656e742920776974682074686520746865207265706f7274206265696e678c207375636365737366756c206f72206e6f742028746869726420656c656d656e74292e143443616e646964616379426f6e643042616c616e63654f663c543e400080c6a47e8d030000000000000000000028566f74696e67426f6e643042616c616e63654f663c543e4000407a10f35a000000000000000000000038446573697265644d656d626572730c753332100d00000000404465736972656452756e6e65727355700c753332100700000000305465726d4475726174696f6e38543a3a426c6f636b4e756d6265721080130300003830556e61626c65546f566f746504c42043616e6e6f7420766f7465207768656e206e6f2063616e64696461746573206f72206d656d626572732065786973742e1c4e6f566f7465730498204d75737420766f746520666f72206174206c65617374206f6e652063616e6469646174652e30546f6f4d616e79566f74657304882043616e6e6f7420766f7465206d6f7265207468616e2063616e646964617465732e504d6178696d756d566f7465734578636565646564049c2043616e6e6f7420766f7465206d6f7265207468616e206d6178696d756d20616c6c6f7765642e284c6f7742616c616e636504c82043616e6e6f7420766f74652077697468207374616b65206c657373207468616e206d696e696d756d2062616c616e63652e3c556e61626c65546f506179426f6e64047c20566f7465722063616e206e6f742070617920766f74696e6720626f6e642e2c4d7573744265566f7465720444204d757374206265206120766f7465722e285265706f727453656c6604502043616e6e6f74207265706f72742073656c662e4c4475706c69636174656443616e6469646174650484204475706c6963617465642063616e646964617465207375626d697373696f6e2e304d656d6265725375626d6974048c204d656d6265722063616e6e6f742072652d7375626d69742063616e6469646163792e3052756e6e65725375626d6974048c2052756e6e65722063616e6e6f742072652d7375626d69742063616e6469646163792e68496e73756666696369656e7443616e64696461746546756e647304982043616e64696461746520646f6573206e6f74206861766520656e6f7567682066756e64732e34496e76616c69644f726967696e04c8204f726967696e206973206e6f7420612063616e6469646174652c206d656d626572206f7220612072756e6e65722075702e244e6f744d656d6265720438204e6f742061206d656d6265722e4c546563686e6963616c4d656d62657273686970014c496e7374616e6365314d656d62657273686970041c4d656d626572730100445665633c543a3a4163636f756e7449643e040004c8205468652063757272656e74206d656d626572736869702c2073746f72656420617320616e206f726465726564205665632e0114286164645f6d656d626572040c77686f30543a3a4163636f756e7449640c7c204164642061206d656d626572206077686f6020746f20746865207365742e00b4204d6179206f6e6c792062652063616c6c65642066726f6d20604164644f726967696e60206f7220726f6f742e3472656d6f76655f6d656d626572040c77686f30543a3a4163636f756e7449640c902052656d6f76652061206d656d626572206077686f602066726f6d20746865207365742e00c0204d6179206f6e6c792062652063616c6c65642066726f6d206052656d6f76654f726967696e60206f7220726f6f742e2c737761705f6d656d626572081872656d6f766530543a3a4163636f756e7449640c61646430543a3a4163636f756e7449640cc02053776170206f7574206f6e65206d656d626572206072656d6f76656020666f7220616e6f746865722060616464602e00b8204d6179206f6e6c792062652063616c6c65642066726f6d2060537761704f726967696e60206f7220726f6f742e3472657365745f6d656d62657273041c6d656d62657273445665633c543a3a4163636f756e7449643e105901204368616e676520746865206d656d6265727368697020746f2061206e6577207365742c20646973726567617264696e6720746865206578697374696e67206d656d626572736869702e204265206e69636520616e646c207061737320606d656d6265727360207072652d736f727465642e00bc204d6179206f6e6c792062652063616c6c65642066726f6d206052657365744f726967696e60206f7220726f6f742e286368616e67655f6b6579040c6e657730543a3a4163636f756e7449640cd82053776170206f7574207468652073656e64696e67206d656d62657220666f7220736f6d65206f74686572206b657920606e6577602e00f4204d6179206f6e6c792062652063616c6c65642066726f6d20605369676e656460206f726967696e206f6620612063757272656e74206d656d6265722e01182c4d656d62657241646465640004e42054686520676976656e206d656d626572207761732061646465643b2073656520746865207472616e73616374696f6e20666f722077686f2e344d656d62657252656d6f7665640004ec2054686520676976656e206d656d626572207761732072656d6f7665643b2073656520746865207472616e73616374696f6e20666f722077686f2e384d656d62657273537761707065640004dc2054776f206d656d62657273207765726520737761707065643b2073656520746865207472616e73616374696f6e20666f722077686f2e304d656d6265727352657365740004190120546865206d656d62657273686970207761732072657365743b2073656520746865207472616e73616374696f6e20666f722077686f20746865206e6577207365742069732e284b65794368616e676564000488204f6e65206f6620746865206d656d6265727327206b657973206368616e6765642e1444756d6d7904bc73705f7374643a3a6d61726b65723a3a5068616e746f6d446174613c284163636f756e7449642c204576656e74293e0470205068616e746f6d206d656d6265722c206e6576657220757365642e00003c46696e616c697479547261636b65720001042866696e616c5f68696e74041068696e745c436f6d706163743c543a3a426c6f636b4e756d6265723e08f42048696e7420746861742074686520617574686f72206f66207468697320626c6f636b207468696e6b732074686520626573742066696e616c697a65646c20626c6f636b2069732074686520676976656e206e756d6265722e00082857696e646f7753697a6538543a3a426c6f636b4e756d626572106500000004190120546865206e756d626572206f6620726563656e742073616d706c657320746f206b6565702066726f6d207468697320636861696e2e2044656661756c74206973203130312e345265706f72744c6174656e637938543a3a426c6f636b4e756d62657210e8030000041d01205468652064656c617920616674657220776869636820706f696e74207468696e6773206265636f6d6520737573706963696f75732e2044656661756c7420697320313030302e0838416c72656164795570646174656404c82046696e616c2068696e74206d7573742062652075706461746564206f6e6c79206f6e636520696e2074686520626c6f636b1c42616448696e7404902046696e616c697a6564206865696768742061626f766520626c6f636b206e756d6265721c4772616e647061013c4772616e64706146696e616c6974791c2c417574686f726974696573010034417574686f726974794c6973740400102c20444550524543415445440061012054686973207573656420746f2073746f7265207468652063757272656e7420617574686f72697479207365742c20776869636820686173206265656e206d6967726174656420746f207468652077656c6c2d6b6e6f776e94204752414e4450415f415554484f52495445535f4b455920756e686173686564206b65792e14537461746501006c53746f72656453746174653c543a3a426c6f636b4e756d6265723e04000490205374617465206f66207468652063757272656e7420617574686f72697479207365742e3450656e64696e674368616e676500008c53746f72656450656e64696e674368616e67653c543a3a426c6f636b4e756d6265723e040004c42050656e64696e67206368616e67653a20287369676e616c65642061742c207363686564756c6564206368616e6765292e284e657874466f72636564000038543a3a426c6f636b4e756d626572040004bc206e65787420626c6f636b206e756d6265722077686572652077652063616e20666f7263652061206368616e67652e1c5374616c6c656400008028543a3a426c6f636b4e756d6265722c20543a3a426c6f636b4e756d626572290400049020607472756560206966207765206172652063757272656e746c79207374616c6c65642e3043757272656e7453657449640100145365744964200000000000000000085d0120546865206e756d626572206f66206368616e6765732028626f746820696e207465726d73206f66206b65797320616e6420756e6465726c79696e672065636f6e6f6d696320726573706f6e736962696c697469657329c420696e20746865202273657422206f66204772616e6470612076616c696461746f72732066726f6d2067656e657369732e30536574496453657373696f6e0001011453657449643053657373696f6e496e64657800040004c1012041206d617070696e672066726f6d206772616e6470612073657420494420746f2074686520696e646578206f6620746865202a6d6f737420726563656e742a2073657373696f6e20666f7220776869636820697473206d656d62657273207765726520726573706f6e7369626c652e0104487265706f72745f6d69736265686176696f72041c5f7265706f72741c5665633c75383e0464205265706f727420736f6d65206d69736265686176696f722e010c384e6577417574686f7269746965730434417574686f726974794c6973740490204e657720617574686f726974792073657420686173206265656e206170706c6965642e1850617573656400049c2043757272656e7420617574686f726974792073657420686173206265656e207061757365642e1c526573756d65640004a02043757272656e7420617574686f726974792073657420686173206265656e20726573756d65642e00102c50617573654661696c656408090120417474656d707420746f207369676e616c204752414e445041207061757365207768656e2074686520617574686f72697479207365742069736e2774206c697665a8202865697468657220706175736564206f7220616c72656164792070656e64696e67207061757365292e30526573756d654661696c656408150120417474656d707420746f207369676e616c204752414e44504120726573756d65207768656e2074686520617574686f72697479207365742069736e277420706175736564a42028656974686572206c697665206f7220616c72656164792070656e64696e6720726573756d65292e344368616e676550656e64696e6704ec20417474656d707420746f207369676e616c204752414e445041206368616e67652077697468206f6e6520616c72656164792070656e64696e672e1c546f6f536f6f6e04c02043616e6e6f74207369676e616c20666f72636564206368616e676520736f20736f6f6e206166746572206c6173742e20547265617375727901205472656173757279143450726f706f73616c436f756e7401003450726f706f73616c496e646578100000000004a4204e756d626572206f662070726f706f73616c7320746861742068617665206265656e206d6164652e2450726f706f73616c730001013450726f706f73616c496e6465789050726f706f73616c3c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e000400047c2050726f706f73616c7320746861742068617665206265656e206d6164652e24417070726f76616c730100485665633c50726f706f73616c496e6465783e040004f82050726f706f73616c20696e646963657320746861742068617665206265656e20617070726f76656420627574206e6f742079657420617761726465642e10546970730001051c543a3a48617368f04f70656e5469703c543a3a4163636f756e7449642c2042616c616e63654f663c543e2c20543a3a426c6f636b4e756d6265722c20543a3a486173683e0004000c59012054697073207468617420617265206e6f742079657420636f6d706c657465642e204b65796564206279207468652068617368206f66206028726561736f6e2c2077686f29602066726f6d207468652076616c75652e3d012054686973206861732074686520696e73656375726520656e756d657261626c6520686173682066756e6374696f6e2073696e636520746865206b657920697473656c6620697320616c7265616479802067756172616e7465656420746f20626520612073656375726520686173682e1c526561736f6e730001051c543a3a486173681c5665633c75383e0004000849012053696d706c6520707265696d616765206c6f6f6b75702066726f6d2074686520726561736f6e2773206861736820746f20746865206f726967696e616c20646174612e20416761696e2c2068617320616e610120696e73656375726520656e756d657261626c6520686173682073696e636520746865206b65792069732067756172616e7465656420746f2062652074686520726573756c74206f6620612073656375726520686173682e01203470726f706f73655f7370656e64081476616c756554436f6d706163743c42616c616e63654f663c543e3e2c62656e65666963696172798c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365242d012050757420666f727761726420612073756767657374696f6e20666f72207370656e64696e672e2041206465706f7369742070726f706f7274696f6e616c20746f207468652076616c7565350120697320726573657276656420616e6420736c6173686564206966207468652070726f706f73616c2069732072656a65637465642e2049742069732072657475726e6564206f6e636520746865542070726f706f73616c20697320617761726465642e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e94202d204f6e65204442206368616e67652c206f6e6520657874726120444220656e7472792e302023203c2f7765696768743e3c72656a6563745f70726f706f73616c042c70726f706f73616c5f696458436f6d706163743c50726f706f73616c496e6465783e1cfc2052656a65637420612070726f706f736564207370656e642e20546865206f726967696e616c206465706f7369742077696c6c20626520736c61736865642e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e40202d204f6e6520444220636c6561722e302023203c2f7765696768743e40617070726f76655f70726f706f73616c042c70726f706f73616c5f696458436f6d706163743c50726f706f73616c496e6465783e205d0120417070726f766520612070726f706f73616c2e2041742061206c617465722074696d652c207468652070726f706f73616c2077696c6c20626520616c6c6f636174656420746f207468652062656e6566696369617279ac20616e6420746865206f726967696e616c206465706f7369742077696c6c2062652072657475726e65642e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e44202d204f6e65204442206368616e67652e302023203c2f7765696768743e387265706f72745f617765736f6d650818726561736f6e1c5665633c75383e0c77686f30543a3a4163636f756e7449644c5d01205265706f727420736f6d657468696e672060726561736f6e60207468617420646573657276657320612074697020616e6420636c61696d20616e79206576656e7475616c207468652066696e6465722773206665652e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005501205061796d656e743a20605469705265706f72744465706f73697442617365602077696c6c2062652072657365727665642066726f6d20746865206f726967696e206163636f756e742c2061732077656c6c206173d420605469705265706f72744465706f736974506572427974656020666f722065616368206279746520696e2060726561736f6e602e006101202d2060726561736f6e603a2054686520726561736f6e20666f722c206f7220746865207468696e6720746861742064657365727665732c20746865207469703b2067656e6572616c6c7920746869732077696c6c2062655c20202061205554462d382d656e636f6465642055524c2eec202d206077686f603a20546865206163636f756e742077686963682073686f756c6420626520637265646974656420666f7220746865207469702e007820456d69747320604e657754697060206966207375636365737366756c2e002c2023203c7765696768743e9c202d20604f2852296020776865726520605260206c656e677468206f662060726561736f6e602e64202d204f6e652062616c616e6365206f7065726174696f6e2e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28522960292e34202d204f6e65206576656e742e302023203c2f7765696768743e2c726574726163745f7469700410686173681c543a3a486173684c550120526574726163742061207072696f72207469702d7265706f72742066726f6d20607265706f72745f617765736f6d65602c20616e642063616e63656c207468652070726f63657373206f662074697070696e672e00e0204966207375636365737366756c2c20746865206f726967696e616c206465706f7369742077696c6c20626520756e72657365727665642e00510120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642074686520746970206964656e746966696564206279206068617368604501206d7573742068617665206265656e207265706f7274656420627920746865207369676e696e67206163636f756e74207468726f75676820607265706f72745f617765736f6d65602028616e64206e6f7450207468726f75676820607469705f6e657760292e006501202d206068617368603a20546865206964656e74697479206f6620746865206f70656e2074697020666f722077686963682061207469702076616c7565206973206465636c617265642e205468697320697320666f726d656461012020206173207468652068617368206f6620746865207475706c65206f6620746865206f726967696e616c207469702060726561736f6e6020616e64207468652062656e6566696369617279206163636f756e742049442e009020456d697473206054697052657472616374656460206966207375636365737366756c2e002c2023203c7765696768743e24202d20604f2854296064202d204f6e652062616c616e6365206f7065726174696f6e2ec4202d2054776f2073746f726167652072656d6f76616c7320286f6e6520726561642c20636f64656320604f28542960292e34202d204f6e65206576656e742e302023203c2f7765696768743e1c7469705f6e65770c18726561736f6e1c5665633c75383e0c77686f30543a3a4163636f756e744964247469705f76616c75653042616c616e63654f663c543e4cf4204769766520612074697020666f7220736f6d657468696e67206e65773b206e6f2066696e6465722773206665652077696c6c2062652074616b656e2e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e6420746865207369676e696e67206163636f756e74206d757374206265206174206d656d626572206f662074686520605469707065727360207365742e006101202d2060726561736f6e603a2054686520726561736f6e20666f722c206f7220746865207468696e6720746861742064657365727665732c20746865207469703b2067656e6572616c6c7920746869732077696c6c2062655c20202061205554462d382d656e636f6465642055524c2eec202d206077686f603a20546865206163636f756e742077686963682073686f756c6420626520637265646974656420666f7220746865207469702e5101202d20607469705f76616c7565603a2054686520616d6f756e74206f66207469702074686174207468652073656e64657220776f756c64206c696b6520746f20676976652e20546865206d656469616e20746970d820202076616c7565206f662061637469766520746970706572732077696c6c20626520676976656e20746f20746865206077686f602e007820456d69747320604e657754697060206966207375636365737366756c2e002c2023203c7765696768743e4101202d20604f2852202b2054296020776865726520605260206c656e677468206f662060726561736f6e602c2060546020697320746865206e756d626572206f6620746970706572732e2060546020697345012020206e61747572616c6c79206361707065642061732061206d656d62657273686970207365742c20605260206973206c696d69746564207468726f756768207472616e73616374696f6e2d73697a652e0d01202d2054776f2073746f7261676520696e73657274696f6e732028636f6465637320604f285229602c20604f28542960292c206f6e65207265616420604f283129602e34202d204f6e65206576656e742e302023203c2f7765696768743e0c7469700810686173681c543a3a48617368247469705f76616c75653042616c616e63654f663c543e4cb4204465636c6172652061207469702076616c756520666f7220616e20616c72656164792d6f70656e207469702e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e6420746865207369676e696e67206163636f756e74206d757374206265206174206d656d626572206f662074686520605469707065727360207365742e006501202d206068617368603a20546865206964656e74697479206f6620746865206f70656e2074697020666f722077686963682061207469702076616c7565206973206465636c617265642e205468697320697320666f726d656461012020206173207468652068617368206f6620746865207475706c65206f66207468652068617368206f6620746865206f726967696e616c207469702060726561736f6e6020616e64207468652062656e6566696369617279382020206163636f756e742049442e5101202d20607469705f76616c7565603a2054686520616d6f756e74206f66207469702074686174207468652073656e64657220776f756c64206c696b6520746f20676976652e20546865206d656469616e20746970d820202076616c7565206f662061637469766520746970706572732077696c6c20626520676976656e20746f20746865206077686f602e00650120456d6974732060546970436c6f73696e676020696620746865207468726573686f6c64206f66207469707065727320686173206265656e207265616368656420616e642074686520636f756e74646f776e20706572696f64342068617320737461727465642e002c2023203c7765696768743e24202d20604f285429600101202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28542960292c206f6e652073746f72616765207265616420604f283129602e4c202d20557020746f206f6e65206576656e742e302023203c2f7765696768743e24636c6f73655f7469700410686173681c543a3a48617368386020436c6f736520616e64207061796f75742061207469702e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e0019012054686520746970206964656e74696669656420627920606861736860206d75737420686176652066696e69736865642069747320636f756e74646f776e20706572696f642e006501202d206068617368603a20546865206964656e74697479206f6620746865206f70656e2074697020666f722077686963682061207469702076616c7565206973206465636c617265642e205468697320697320666f726d656461012020206173207468652068617368206f6620746865207475706c65206f6620746865206f726967696e616c207469702060726561736f6e6020616e64207468652062656e6566696369617279206163636f756e742049442e002c2023203c7765696768743e24202d20604f28542960e4202d204f6e652073746f726167652072657472696576616c2028636f64656320604f285429602920616e642074776f2072656d6f76616c732e88202d20557020746f2074687265652062616c616e6365206f7065726174696f6e732e302023203c2f7765696768743e012c2050726f706f736564043450726f706f73616c496e6465780438204e65772070726f706f73616c2e205370656e64696e67041c42616c616e636504e8205765206861766520656e6465642061207370656e6420706572696f6420616e642077696c6c206e6f7720616c6c6f636174652066756e64732e1c417761726465640c3450726f706f73616c496e6465781c42616c616e6365244163636f756e744964048020536f6d652066756e64732068617665206265656e20616c6c6f63617465642e2052656a6563746564083450726f706f73616c496e6465781c42616c616e636504b420412070726f706f73616c207761732072656a65637465643b2066756e6473207765726520736c61736865642e144275726e74041c42616c616e6365048c20536f6d65206f66206f75722066756e64732068617665206265656e206275726e742e20526f6c6c6f766572041c42616c616e6365043101205370656e64696e67206861732066696e69736865643b20746869732069732074686520616d6f756e74207468617420726f6c6c73206f76657220756e74696c206e657874207370656e642e1c4465706f736974041c42616c616e6365048020536f6d652066756e64732068617665206265656e206465706f73697465642e184e657754697004104861736804982041206e6577207469702073756767657374696f6e20686173206265656e206f70656e65642e28546970436c6f73696e6704104861736804dc2041207469702073756767657374696f6e206861732072656163686564207468726573686f6c6420616e6420697320636c6f73696e672e24546970436c6f7365640c1048617368244163636f756e7449641c42616c616e636504882041207469702073756767657374696f6e20686173206265656e20636c6f7365642e3054697052657472616374656404104861736804942041207469702073756767657374696f6e20686173206265656e207265747261637465642e203050726f706f73616c426f6e641c5065726d696c6c1050c30000085501204672616374696f6e206f6620612070726f706f73616c27732076616c756520746861742073686f756c6420626520626f6e64656420696e206f7264657220746f20706c616365207468652070726f706f73616c2e110120416e2061636365707465642070726f706f73616c2067657473207468657365206261636b2e20412072656a65637465642070726f706f73616c20646f6573206e6f742e4c50726f706f73616c426f6e644d696e696d756d3042616c616e63654f663c543e4000407a10f35a00000000000000000000044901204d696e696d756d20616d6f756e74206f662066756e647320746861742073686f756c6420626520706c6163656420696e2061206465706f73697420666f72206d616b696e6720612070726f706f73616c2e2c5370656e64506572696f6438543a3a426c6f636b4e756d6265721080700000048820506572696f64206265747765656e2073756363657373697665207370656e64732e104275726e1c5065726d696c6c1020a107000411012050657263656e74616765206f662073706172652066756e64732028696620616e7929207468617420617265206275726e7420706572207370656e6420706572696f642e30546970436f756e74646f776e38543a3a426c6f636b4e756d62657210807000000445012054686520706572696f6420666f722077686963682061207469702072656d61696e73206f70656e20616674657220697320686173206163686965766564207468726573686f6c6420746970706572732e3454697046696e646572734665651c50657263656e7404140431012054686520616d6f756e74206f66207468652066696e616c2074697020776869636820676f657320746f20746865206f726967696e616c207265706f72746572206f6620746865207469702e505469705265706f72744465706f736974426173653042616c616e63654f663c543e4000407a10f35a0000000000000000000004d42054686520616d6f756e742068656c64206f6e206465706f73697420666f7220706c6163696e67206120746970207265706f72742e5c5469705265706f72744465706f736974506572427974653042616c616e63654f663c543e400010a5d4e800000000000000000000000409012054686520616d6f756e742068656c64206f6e206465706f7369742070657220627974652077697468696e2074686520746970207265706f727420726561736f6e2e2070496e73756666696369656e7450726f706f7365727342616c616e6365047c2050726f706f73657227732062616c616e636520697320746f6f206c6f772e50496e76616c696450726f706f73616c496e646578046c204e6f2070726f706f73616c206174207468617420696e6465782e30526561736f6e546f6f42696704882054686520726561736f6e20676976656e206973206a75737420746f6f206269672e30416c72656164794b6e6f776e048c20546865207469702077617320616c726561647920666f756e642f737461727465642e28556e6b6e6f776e54697004642054686520746970206861736820697320756e6b6e6f776e2e244e6f7446696e64657204210120546865206163636f756e7420617474656d7074696e6720746f20726574726163742074686520746970206973206e6f74207468652066696e646572206f6620746865207469702e245374696c6c4f70656e042d0120546865207469702063616e6e6f7420626520636c61696d65642f636c6f736564206265636175736520746865726520617265206e6f7420656e6f7567682074697070657273207965742e245072656d617475726504350120546865207469702063616e6e6f7420626520636c61696d65642f636c6f73656420626563617573652069742773207374696c6c20696e2074686520636f756e74646f776e20706572696f642e24436f6e7472616374730120436f6e74726163741c204761735370656e7401000c476173200000000000000000048020476173207370656e7420736f2066617220696e207468697320626c6f636b2e3c43757272656e745363686564756c650100205363686564756c65c5010000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000008700000000000000af000000000000000100000000000000010000000000000004000000000001001000000000400000002000000004942043757272656e7420636f7374207363686564756c6520666f7220636f6e7472616374732e305072697374696e65436f64650001012c436f6465486173683c543e1c5665633c75383e0004000465012041206d617070696e672066726f6d20616e206f726967696e616c20636f6465206861736820746f20746865206f726967696e616c20636f64652c20756e746f756368656420627920696e737472756d656e746174696f6e2e2c436f646553746f726167650001012c436f6465486173683c543e587761736d3a3a5072656661625761736d4d6f64756c650004000465012041206d617070696e67206265747765656e20616e206f726967696e616c20636f6465206861736820616e6420696e737472756d656e746564207761736d20636f64652c20726561647920666f7220657865637574696f6e2e384163636f756e74436f756e74657201000c753634200000000000000000045420546865207375627472696520636f756e7465722e38436f6e7472616374496e666f4f6600010130543a3a4163636f756e7449643c436f6e7472616374496e666f3c543e00040004a82054686520636f6465206173736f6369617465642077697468206120676976656e206163636f756e742e20476173507269636501003042616c616e63654f663c543e4001000000000000000000000000000000047820546865207072696365206f66206f6e6520756e6974206f66206761732e01143c7570646174655f7363686564756c6504207363686564756c65205363686564756c650cb4205570646174657320746865207363686564756c6520666f72206d65746572696e6720636f6e7472616374732e000d0120546865207363686564756c65206d7573742068617665206120677265617465722076657273696f6e207468616e207468652073746f726564207363686564756c652e207075745f636f646508246761735f6c696d697430436f6d706163743c4761733e10636f64651c5665633c75383e085d012053746f7265732074686520676976656e2062696e617279205761736d20636f646520696e746f2074686520636861696e27732073746f7261676520616e642072657475726e73206974732060636f646568617368602ed420596f752063616e20696e7374616e746961746520636f6e747261637473206f6e6c7920776974682073746f72656420636f64652e1063616c6c1010646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c756554436f6d706163743c42616c616e63654f663c543e3e246761735f6c696d697430436f6d706163743c4761733e10646174611c5665633c75383e1c0901204d616b657320612063616c6c20746f20616e206163636f756e742c206f7074696f6e616c6c79207472616e7366657272696e6720736f6d652062616c616e63652e002901202a20496620746865206163636f756e74206973206120736d6172742d636f6e7472616374206163636f756e742c20746865206173736f63696174656420636f64652077696c6c206265b020657865637574656420616e6420616e792076616c75652077696c6c206265207472616e736665727265642e1901202a20496620746865206163636f756e74206973206120726567756c6172206163636f756e742c20616e792076616c75652077696c6c206265207472616e736665727265642e4901202a204966206e6f206163636f756e742065786973747320616e64207468652063616c6c2076616c7565206973206e6f74206c657373207468616e20606578697374656e7469616c5f6465706f736974602c1501206120726567756c6172206163636f756e742077696c6c206265206372656174656420616e6420616e792076616c75652077696c6c206265207472616e736665727265642e2c696e7374616e74696174651024656e646f776d656e7454436f6d706163743c42616c616e63654f663c543e3e246761735f6c696d697430436f6d706163743c4761733e24636f64655f686173682c436f6465486173683c543e10646174611c5665633c75383e28bd0120496e7374616e7469617465732061206e657720636f6e74726163742066726f6d207468652060636f646568617368602067656e65726174656420627920607075745f636f6465602c206f7074696f6e616c6c79207472616e7366657272696e6720736f6d652062616c616e63652e009820496e7374616e74696174696f6e20697320657865637574656420617320666f6c6c6f77733a004101202d205468652064657374696e6174696f6e206164647265737320697320636f6d7075746564206261736564206f6e207468652073656e64657220616e642068617368206f662074686520636f64652e0501202d2054686520736d6172742d636f6e7472616374206163636f756e7420697320637265617465642061742074686520636f6d707574656420616464726573732e6d01202d20546865206063746f725f636f64656020697320657865637574656420696e2074686520636f6e74657874206f6620746865206e65776c792d63726561746564206163636f756e742e204275666665722072657475726e65645d0120202061667465722074686520657865637574696f6e206973207361766564206173207468652060636f646560206f6620746865206163636f756e742e205468617420636f64652077696c6c20626520696e766f6b6564a820202075706f6e20616e792063616c6c2072656365697665642062792074686973206163636f756e742e7c202d2054686520636f6e747261637420697320696e697469616c697a65642e3c636c61696d5f73757263686172676508106465737430543a3a4163636f756e744964286175785f73656e646572504f7074696f6e3c543a3a4163636f756e7449643e14710120416c6c6f777320626c6f636b2070726f64756365727320746f20636c61696d206120736d616c6c2072657761726420666f72206576696374696e67206120636f6e74726163742e204966206120626c6f636b2070726f64756365721501206661696c7320746f20646f20736f2c206120726567756c61722075736572732077696c6c20626520616c6c6f77656420746f20636c61696d20746865207265776172642e00390120496620636f6e7472616374206973206e6f742065766963746564206173206120726573756c74206f6620746869732063616c6c2c206e6f20616374696f6e73206172652074616b656e20616e64ac207468652073656e646572206973206e6f7420656c696769626c6520666f7220746865207265776172642e0118205472616e736665720c244163636f756e744964244163636f756e7449641c42616c616e6365046901205472616e736665722068617070656e6564206066726f6d6020746f2060746f60207769746820676976656e206076616c7565602061732070617274206f662061206063616c6c60206f722060696e7374616e7469617465602e30496e7374616e74696174656408244163636f756e744964244163636f756e74496404dc20436f6e7472616374206465706c6f7965642062792061646472657373206174207468652073706563696669656420616464726573732e28436f646553746f72656404104861736804b820436f646520776974682074686520737065636966696564206861736820686173206265656e2073746f7265642e3c5363686564756c6555706461746564040c75333204c020547269676765726564207768656e207468652063757272656e74207363686564756c6520697320757064617465642e284469737061746368656408244163636f756e74496410626f6f6c08390120412063616c6c2077617320646973706174636865642066726f6d2074686520676976656e206163636f756e742e2054686520626f6f6c207369676e616c7320776865746865722069742077617374207375636365737366756c20657865637574696f6e206f72206e6f742e20436f6e747261637408244163636f756e7449641c5665633c75383e048c20416e206576656e742066726f6d20636f6e7472616374206f66206163636f756e742e404c5369676e6564436c61696d48616e646963617038543a3a426c6f636b4e756d626572100200000010e0204e756d626572206f6620626c6f636b2064656c617920616e2065787472696e73696320636c61696d20737572636861726765206861732e000d01205768656e20636c61696d207375726368617267652069732063616c6c656420627920616e2065787472696e736963207468652072656e7420697320636865636b65646820666f722063757272656e745f626c6f636b202d2064656c617940546f6d6273746f6e654465706f7369743042616c616e63654f663c543e4000407a10f35a0000000000000000000004d420546865206d696e696d756d20616d6f756e7420726571756972656420746f2067656e6572617465206120746f6d6273746f6e652e4453746f7261676553697a654f66667365740c75333210080000000851012053697a65206f66206120636f6e7472616374206174207468652074696d65206f6620696e7374616e746961696f6e2e205468697320697320612073696d706c652077617920746f20656e737572652074686174a420656d70747920636f6e747261637473206576656e7475616c6c7920676574732064656c657465642e2c52656e74427974654665653042616c616e63654f663c543e4000407a10f35a00000000000000000000043501205072696365206f6620612062797465206f662073746f7261676520706572206f6e6520626c6f636b20696e74657276616c2e2053686f756c642062652067726561746572207468616e20302e4452656e744465706f7369744f66667365743042616c616e63654f663c543e4000008a5d7845630100000000000000001c05012054686520616d6f756e74206f662066756e6473206120636f6e74726163742073686f756c64206465706f73697420696e206f7264657220746f206f6666736574582074686520636f7374206f66206f6e6520627974652e006901204c6574277320737570706f736520746865206465706f73697420697320312c303030204255202862616c616e636520756e697473292f6279746520616e64207468652072656e7420697320312042552f627974652f6461792c5901207468656e206120636f6e7472616374207769746820312c3030302c3030302042552074686174207573657320312c303030206279746573206f662073746f7261676520776f756c6420706179206e6f2072656e742e4d0120427574206966207468652062616c616e6365207265647563656420746f203530302c30303020425520616e64207468652073746f7261676520737461796564207468652073616d6520617420312c3030302c78207468656e20697420776f756c6420706179203530302042552f6461792e3c5375726368617267655265776172643042616c616e63654f663c543e400080a1a76b4a3500000000000000000008e4205265776172642074686174206973207265636569766564206279207468652070617274792077686f736520746f75636820686173206c65646820746f2072656d6f76616c206f66206120636f6e74726163742e2c5472616e736665724665653042616c616e63654f663c543e400010a5d4e800000000000000000000000494205468652066656520726571756972656420746f206d616b652061207472616e736665722e2c4372656174696f6e4665653042616c616e63654f663c543e400010a5d4e80000000000000000000000049c205468652066656520726571756972656420746f2063726561746520616e206163636f756e742e485472616e73616374696f6e426173654665653042616c616e63654f663c543e400010a5d4e8000000000000000000000004dc205468652066656520746f206265207061696420666f72206d616b696e672061207472616e73616374696f6e3b2074686520626173652e485472616e73616374696f6e427974654665653042616c616e63654f663c543e4000e40b54020000000000000000000000040d01205468652066656520746f206265207061696420666f72206d616b696e672061207472616e73616374696f6e3b20746865207065722d6279746520706f7274696f6e2e2c436f6e74726163744665653042616c616e63654f663c543e400010a5d4e80000000000000000000000084101205468652066656520726571756972656420746f20696e7374616e7469617465206120636f6e747261637420696e7374616e63652e204120726561736f6e61626c652064656661756c742076616c75651c2069732032312e2c43616c6c426173654665650c47617320e803000000000000081d0120546865206261736520666565206368617267656420666f722063616c6c696e6720696e746f206120636f6e74726163742e204120726561736f6e61626c652064656661756c74382076616c7565206973203133352e48496e7374616e7469617465426173654665650c47617320e80300000000000008390120546865206261736520666565206368617267656420666f7220696e7374616e74696174696e67206120636f6e74726163742e204120726561736f6e61626c652064656661756c742076616c756520206973203137352e204d617844657074680c753332102000000008310120546865206d6178696d756d206e657374696e67206c6576656c206f6620612063616c6c2f696e7374616e746961746520737461636b2e204120726561736f6e61626c652064656661756c74382076616c7565206973203130302e304d617856616c756553697a650c753332100040000004390120546865206d6178696d756d2073697a65206f6620612073746f726167652076616c756520696e2062797465732e204120726561736f6e61626c652064656661756c74206973203136204b69422e34426c6f636b4761734c696d69740c47617320809698000000000008250120546865206d6178696d756d20616d6f756e74206f6620676173207468617420636f756c6420626520657870656e6465642070657220626c6f636b2e204120726561736f6e61626c65742064656661756c742076616c75652069732031305f3030305f3030302e1858496e76616c69645363686564756c6556657273696f6e0405012041206e6577207363686564756c65206d7573742068617665206120677265617465722076657273696f6e207468616e207468652063757272656e74206f6e652e54496e76616c6964537572636861726765436c61696d04550120416e206f726967696e206d757374206265207369676e6564206f7220696e686572656e7420616e6420617578696c696172792073656e646572206f6e6c792070726f7669646564206f6e20696e686572656e742e54496e76616c6964536f75726365436f6e747261637404dc2043616e6e6f7420726573746f72652066726f6d206e6f6e6578697374696e67206f7220746f6d6273746f6e6520636f6e74726163742e68496e76616c696444657374696e6174696f6e436f6e747261637404c42043616e6e6f7420726573746f726520746f206e6f6e6578697374696e67206f7220616c69766520636f6e74726163742e40496e76616c6964546f6d6273746f6e65046020546f6d6273746f6e657320646f6e2774206d617463682e54496e76616c6964436f6e74726163744f726967696e04bc20416e206f726967696e20547269654964207772697474656e20696e207468652063757272656e7420626c6f636b2e105375646f01105375646f040c4b6579010030543a3a4163636f756e74496480000000000000000000000000000000000000000000000000000000000000000004842054686520604163636f756e74496460206f6620746865207375646f206b65792e010c107375646f042070726f706f73616c40426f783c543a3a50726f706f73616c3e2839012041757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c20776974682060526f6f7460206f726967696e2e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e60202d204f6e6520444220777269746520286576656e74292ed4202d20556e6b6e6f776e20776569676874206f662064657269766174697665206070726f706f73616c6020657865637574696f6e2e302023203c2f7765696768743e1c7365745f6b6579040c6e65778c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263652475012041757468656e74696361746573207468652063757272656e74207375646f206b657920616e6420736574732074686520676976656e204163636f756e7449642028606e6577602920617320746865206e6577207375646f206b65792e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e44202d204f6e65204442206368616e67652e302023203c2f7765696768743e1c7375646f5f6173080c77686f8c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263652070726f706f73616c40426f783c543a3a50726f706f73616c3e2c51012041757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c207769746820605369676e656460206f726967696e2066726f6d44206120676976656e206163636f756e742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e60202d204f6e6520444220777269746520286576656e74292ed4202d20556e6b6e6f776e20776569676874206f662064657269766174697665206070726f706f73616c6020657865637574696f6e2e302023203c2f7765696768743e010c1453756469640410626f6f6c04602041207375646f206a75737420746f6f6b20706c6163652e284b65794368616e67656404244163636f756e74496404f020546865207375646f6572206a757374207377697463686564206964656e746974793b20746865206f6c64206b657920697320737570706c6965642e285375646f4173446f6e650410626f6f6c04602041207375646f206a75737420746f6f6b20706c6163652e00042c526571756972655375646f04802053656e646572206d75737420626520746865205375646f206163636f756e7420496d4f6e6c696e650120496d4f6e6c696e651020476f737369704174010038543a3a426c6f636b4e756d626572100000000004a02054686520626c6f636b206e756d626572207768656e2077652073686f756c6420676f737369702e104b65797301004c5665633c543a3a417574686f7269747949643e040004d0205468652063757272656e7420736574206f66206b6579732074686174206d61792069737375652061206865617274626561742e485265636569766564486561727462656174730002013053657373696f6e496e6465782441757468496e6465781c5665633c75383e01040008e420466f7220656163682073657373696f6e20696e6465782c207765206b6565702061206d617070696e67206f66206041757468496e646578608c20746f20606f6666636861696e3a3a4f70617175654e6574776f726b5374617465602e38417574686f726564426c6f636b730102013053657373696f6e496e64657838543a3a56616c696461746f7249640c75333201100000000008150120466f7220656163682073657373696f6e20696e6465782c207765206b6565702061206d617070696e67206f662060543a3a56616c696461746f7249646020746f20746865c8206e756d626572206f6620626c6f636b7320617574686f7265642062792074686520676976656e20617574686f726974792e0104246865617274626561740824686561727462656174644865617274626561743c543a3a426c6f636b4e756d6265723e285f7369676e6174757265bc3c543a3a417574686f7269747949642061732052756e74696d654170705075626c69633e3a3a5369676e617475726500010c444865617274626561745265636569766564042c417574686f72697479496404c02041206e657720686561727462656174207761732072656365697665642066726f6d2060417574686f726974794964601c416c6c476f6f640004d42041742074686520656e64206f66207468652073657373696f6e2c206e6f206f6666656e63652077617320636f6d6d69747465642e2c536f6d654f66666c696e6504605665633c4964656e74696669636174696f6e5475706c653e0431012041742074686520656e64206f66207468652073657373696f6e2c206174206c65617374206f6e63652076616c696461746f722077617320666f756e6420746f206265206f66666c696e652e000828496e76616c69644b65790464204e6f6e206578697374656e74207075626c6963206b65792e4c4475706c6963617465644865617274626561740458204475706c696361746564206865617274626561742e48417574686f72697479446973636f76657279000100000000204f6666656e63657301204f6666656e6365730c1c5265706f727473000101345265706f727449644f663c543ed04f6666656e636544657461696c733c543a3a4163636f756e7449642c20543a3a4964656e74696669636174696f6e5475706c653e00040004490120546865207072696d61727920737472756374757265207468617420686f6c647320616c6c206f6666656e6365207265636f726473206b65796564206279207265706f7274206964656e746966696572732e58436f6e63757272656e745265706f727473496e646578010201104b696e64384f706171756554696d65536c6f74485665633c5265706f727449644f663c543e3e010400042901204120766563746f72206f66207265706f727473206f66207468652073616d65206b696e6420746861742068617070656e6564206174207468652073616d652074696d6520736c6f742e485265706f72747342794b696e64496e646578010101104b696e641c5665633c75383e00040018110120456e756d65726174657320616c6c207265706f727473206f662061206b696e6420616c6f6e672077697468207468652074696d6520746865792068617070656e65642e00bc20416c6c207265706f7274732061726520736f72746564206279207468652074696d65206f66206f6666656e63652e004901204e6f74652074686174207468652061637475616c2074797065206f662074686973206d617070696e6720697320605665633c75383e602c207468697320697320626563617573652076616c756573206f66690120646966666572656e7420747970657320617265206e6f7420737570706f7274656420617420746865206d6f6d656e7420736f2077652061726520646f696e6720746865206d616e75616c2073657269616c697a6174696f6e2e010001041c4f6666656e636508104b696e64384f706171756554696d65536c6f7408550120546865726520697320616e206f6666656e6365207265706f72746564206f662074686520676976656e20606b696e64602068617070656e656420617420746865206073657373696f6e5f696e6465786020616e64390120286b696e642d7370656369666963292074696d6520736c6f742e2054686973206576656e74206973206e6f74206465706f736974656420666f72206475706c696361746520736c61736865732e00006052616e646f6d6e657373436f6c6c656374697665466c6970016052616e646f6d6e657373436f6c6c656374697665466c6970043852616e646f6d4d6174657269616c0100305665633c543a3a486173683e04000c610120536572696573206f6620626c6f636b20686561646572732066726f6d20746865206c61737420383120626c6f636b73207468617420616374732061732072616e646f6d2073656564206d6174657269616c2e2054686973610120697320617272616e67656420617320612072696e672062756666657220776974682060626c6f636b5f6e756d626572202520383160206265696e672074686520696e64657820696e746f20746865206056656360206f664420746865206f6c6465737420686173682e0100000000204964656e7469747901105375646f10284964656e746974794f6600010130543a3a4163636f756e74496468526567697374726174696f6e3c42616c616e63654f663c543e3e00040004210120496e666f726d6174696f6e20746861742069732070657274696e656e7420746f206964656e746966792074686520656e7469747920626568696e6420616e206163636f756e742e1c53757065724f6600010130543a3a4163636f756e7449645028543a3a4163636f756e7449642c204461746129000400086101205468652073757065722d6964656e74697479206f6620616e20616c7465726e6174697665202273756222206964656e7469747920746f676574686572207769746820697473206e616d652c2077697468696e2074686174510120636f6e746578742e20496620746865206163636f756e74206973206e6f7420736f6d65206f74686572206163636f756e742773207375622d6964656e746974792c207468656e206a75737420604e6f6e65602e18537562734f6601010130543a3a4163636f756e744964842842616c616e63654f663c543e2c205665633c543a3a4163636f756e7449643e29004400000000000000000000000000000000000cb820416c7465726e6174697665202273756222206964656e746974696573206f662074686973206163636f756e742e001d0120546865206669727374206974656d20697320746865206465706f7369742c20746865207365636f6e64206973206120766563746f72206f6620746865206163636f756e74732e28526567697374726172730100d85665633c4f7074696f6e3c526567697374726172496e666f3c42616c616e63654f663c543e2c20543a3a4163636f756e7449643e3e3e0400104d012054686520736574206f6620726567697374726172732e204e6f7420657870656374656420746f206765742076657279206269672061732063616e206f6e6c79206265206164646564207468726f7567682061a8207370656369616c206f726967696e20286c696b656c79206120636f756e63696c206d6f74696f6e292e0029012054686520696e64657820696e746f20746869732063616e206265206361737420746f2060526567697374726172496e6465786020746f2067657420612076616c69642076616c75652e012c346164645f726567697374726172041c6163636f756e7430543a3a4163636f756e744964347c2041646420612072656769737472617220746f207468652073797374656d2e001d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605265676973747261724f726967696e60206f722060526f6f74602e00ac202d20606163636f756e74603a20746865206163636f756e74206f6620746865207265676973747261722e009820456d6974732060526567697374726172416464656460206966207375636365737366756c2e002c2023203c7765696768743ee4202d20604f2852296020776865726520605260207265676973747261722d636f756e742028676f7665726e616e63652d626f756e646564292e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28522960292e34202d204f6e65206576656e742e302023203c2f7765696768743e307365745f6964656e746974790410696e666f304964656e74697479496e666f482d012053657420616e206163636f756e742773206964656e7469747920696e666f726d6174696f6e20616e6420726573657276652074686520617070726f707269617465206465706f7369742e00590120496620746865206163636f756e7420616c726561647920686173206964656e7469747920696e666f726d6174696f6e2c20746865206465706f7369742069732074616b656e2061732070617274207061796d656e745420666f7220746865206e6577206465706f7369742e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061207265676973746572656428206964656e746974792e0090202d2060696e666f603a20546865206964656e7469747920696e666f726d6174696f6e2e008c20456d69747320604964656e7469747953657460206966207375636365737366756c2e002c2023203c7765696768743e0501202d20604f2858202b2052296020776865726520605860206164646974696f6e616c2d6669656c642d636f756e7420286465706f7369742d626f756e646564292e88202d204174206d6f73742074776f2062616c616e6365206f7065726174696f6e732eac202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f2858202b20522960292e34202d204f6e65206576656e742e302023203c2f7765696768743e207365745f73756273041073756273645665633c28543a3a4163636f756e7449642c2044617461293e40902053657420746865207375622d6163636f756e7473206f66207468652073656e6465722e005901205061796d656e743a20416e79206167677265676174652062616c616e63652072657365727665642062792070726576696f757320607365745f73756273602063616c6c732077696c6c2062652072657475726e6564310120616e6420616e20616d6f756e7420605375624163636f756e744465706f736974602077696c6c20626520726573657276656420666f722065616368206974656d20696e206073756273602e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061207265676973746572656428206964656e746974792e009c202d206073756273603a20546865206964656e746974792773207375622d6163636f756e74732e002c2023203c7765696768743eec202d20604f285329602077686572652060536020737562732d636f756e742028686172642d20616e64206465706f7369742d626f756e646564292e88202d204174206d6f73742074776f2062616c616e6365206f7065726174696f6e732e4101202d204174206d6f7374204f2832202a2053202b2031292073746f72616765206d75746174696f6e733b20636f64656320636f6d706c657869747920604f2831202a2053202b2053202a20312960293b582020206f6e652073746f726167652d6578697374732e302023203c2f7765696768743e38636c6561725f6964656e74697479003c390120436c65617220616e206163636f756e742773206964656e7469747920696e666f20616e6420616c6c207375622d6163636f756e7420616e642072657475726e20616c6c206465706f736974732e00f0205061796d656e743a20416c6c2072657365727665642062616c616e636573206f6e20746865206163636f756e74206172652072657475726e65642e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061207265676973746572656428206964656e746974792e009c20456d69747320604964656e74697479436c656172656460206966207375636365737366756c2e002c2023203c7765696768743e48202d20604f2852202b2053202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2e74202d206053202b2032602073746f726167652064656c6574696f6e732e34202d204f6e65206576656e742e302023203c2f7765696768743e44726571756573745f6a756467656d656e7408247265675f696e6465785c436f6d706163743c526567697374726172496e6465783e1c6d61785f66656554436f6d706163743c42616c616e63654f663c543e3e5c9820526571756573742061206a756467656d656e742066726f6d2061207265676973747261722e005901205061796d656e743a204174206d6f737420606d61785f666565602077696c6c20626520726573657276656420666f72207061796d656e7420746f2074686520726567697374726172206966206a756467656d656e741c20676976656e2e00390120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061542072656769737465726564206964656e746974792e002101202d20607265675f696e646578603a2054686520696e646578206f6620746865207265676973747261722077686f7365206a756467656d656e74206973207265717565737465642e5901202d20606d61785f666565603a20546865206d6178696d756d206665652074686174206d617920626520706169642e20546869732073686f756c64206a757374206265206175746f2d706f70756c617465642061733a0034206060606e6f636f6d70696c65a42053656c663a3a72656769737472617273287265675f696e646578292e75776e72617028292e666565102060606000a820456d69747320604a756467656d656e7452657175657374656460206966207375636365737366756c2e002c2023203c7765696768743e38202d20604f2852202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2ebc202d2053746f726167653a2031207265616420604f285229602c2031206d757461746520604f2858202b205229602e34202d204f6e65206576656e742e302023203c2f7765696768743e3863616e63656c5f7265717565737404247265675f696e64657838526567697374726172496e646578446c2043616e63656c20612070726576696f757320726571756573742e00fc205061796d656e743a20412070726576696f75736c79207265736572766564206465706f7369742069732072657475726e6564206f6e20737563636573732e00390120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061542072656769737465726564206964656e746974792e004901202d20607265675f696e646578603a2054686520696e646578206f6620746865207265676973747261722077686f7365206a756467656d656e74206973206e6f206c6f6e676572207265717565737465642e00b020456d69747320604a756467656d656e74556e72657175657374656460206966207375636365737366756c2e002c2023203c7765696768743e38202d20604f2852202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2e8c202d204f6e652073746f72616765206d75746174696f6e20604f2852202b205829602e34202d204f6e65206576656e742e302023203c2f7765696768743e1c7365745f6665650814696e6465785c436f6d706163743c526567697374726172496e6465783e0c66656554436f6d706163743c42616c616e63654f663c543e3e301d0120536574207468652066656520726571756972656420666f722061206a756467656d656e7420746f206265207265717565737465642066726f6d2061207265676973747261722e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74a4206f6620746865207265676973747261722077686f736520696e6465782069732060696e646578602e00f8202d2060696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f73652066656520697320746f206265207365742e58202d2060666565603a20746865206e6577206665652e002c2023203c7765696768743e28202d20604f285229602e7c202d204f6e652073746f72616765206d75746174696f6e20604f285229602e302023203c2f7765696768743e387365745f6163636f756e745f69640814696e6465785c436f6d706163743c526567697374726172496e6465783e0c6e657730543a3a4163636f756e74496430c0204368616e676520746865206163636f756e74206173736f63696174656420776974682061207265676973747261722e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74a4206f6620746865207265676973747261722077686f736520696e6465782069732060696e646578602e00f8202d2060696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f73652066656520697320746f206265207365742e74202d20606e6577603a20746865206e6577206163636f756e742049442e002c2023203c7765696768743e28202d20604f285229602e7c202d204f6e652073746f72616765206d75746174696f6e20604f285229602e302023203c2f7765696768743e287365745f6669656c64730814696e6465785c436f6d706163743c526567697374726172496e6465783e186669656c6473384964656e746974794669656c647330ac2053657420746865206669656c6420696e666f726d6174696f6e20666f722061207265676973747261722e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74a4206f6620746865207265676973747261722077686f736520696e6465782069732060696e646578602e00f8202d2060696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f73652066656520697320746f206265207365742e1101202d20606669656c6473603a20746865206669656c64732074686174207468652072656769737472617220636f6e6365726e73207468656d73656c76657320776974682e002c2023203c7765696768743e28202d20604f285229602e7c202d204f6e652073746f72616765206d75746174696f6e20604f285229602e302023203c2f7765696768743e4470726f766964655f6a756467656d656e740c247265675f696e6465785c436f6d706163743c526567697374726172496e6465783e187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365246a756467656d656e745c4a756467656d656e743c42616c616e63654f663c543e3e4cbc2050726f766964652061206a756467656d656e7420666f7220616e206163636f756e742773206964656e746974792e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74b4206f6620746865207265676973747261722077686f736520696e64657820697320607265675f696e646578602e002501202d20607265675f696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f7365206a756467656d656e74206973206265696e67206d6164652e5901202d2060746172676574603a20746865206163636f756e742077686f7365206964656e7469747920746865206a756467656d656e742069732075706f6e2e2054686973206d75737420626520616e206163636f756e74782020207769746820612072656769737465726564206964656e746974792e4d01202d20606a756467656d656e74603a20746865206a756467656d656e74206f662074686520726567697374726172206f6620696e64657820607265675f696e646578602061626f75742060746172676574602e009820456d69747320604a756467656d656e74476976656e60206966207375636365737366756c2e002c2023203c7765696768743e38202d20604f2852202b205829602e88202d204f6e652062616c616e63652d7472616e73666572206f7065726174696f6e2e98202d20557020746f206f6e65206163636f756e742d6c6f6f6b7570206f7065726174696f6e2ebc202d2053746f726167653a2031207265616420604f285229602c2031206d757461746520604f2852202b205829602e34202d204f6e65206576656e742e302023203c2f7765696768743e346b696c6c5f6964656e7469747904187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263654c45012052656d6f766520616e206163636f756e742773206964656e7469747920616e64207375622d6163636f756e7420696e666f726d6174696f6e20616e6420736c61736820746865206465706f736974732e006501205061796d656e743a2052657365727665642062616c616e6365732066726f6d20607365745f737562736020616e6420607365745f6964656e74697479602061726520736c617368656420616e642068616e646c656420627949012060536c617368602e20566572696669636174696f6e2072657175657374206465706f7369747320617265206e6f742072657475726e65643b20746865792073686f756c642062652063616e63656c6c656484206d616e75616c6c79207573696e67206063616e63656c5f72657175657374602e00310120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f526f6f745f206f72206d617463682060543a3a466f7263654f726967696e602e005901202d2060746172676574603a20746865206163636f756e742077686f7365206964656e7469747920746865206a756467656d656e742069732075706f6e2e2054686973206d75737420626520616e206163636f756e74782020207769746820612072656769737465726564206964656e746974792e009820456d69747320604964656e746974794b696c6c656460206966207375636365737366756c2e002c2023203c7765696768743e48202d20604f2852202b2053202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2e74202d206053202b2032602073746f72616765206d75746174696f6e732e34202d204f6e65206576656e742e302023203c2f7765696768743e011c2c4964656e7469747953657404244163636f756e74496404f02041206e616d652077617320736574206f72207265736574202877686963682077696c6c2072656d6f766520616c6c206a756467656d656e7473292e3c4964656e74697479436c656172656408244163636f756e7449641c42616c616e636504d02041206e616d652077617320636c65617265642c20616e642074686520676976656e2062616c616e63652072657475726e65642e384964656e746974794b696c6c656408244163636f756e7449641c42616c616e636504c82041206e616d65207761732072656d6f76656420616e642074686520676976656e2062616c616e636520736c61736865642e484a756467656d656e7452657175657374656408244163636f756e74496438526567697374726172496e64657804a02041206a756467656d656e74207761732061736b65642066726f6d2061207265676973747261722e504a756467656d656e74556e72657175657374656408244163636f756e74496438526567697374726172496e646578048c2041206a756467656d656e74207265717565737420776173207265747261637465642e384a756467656d656e74476976656e08244163636f756e74496438526567697374726172496e64657804982041206a756467656d656e742077617320676976656e2062792061207265676973747261722e3852656769737472617241646465640438526567697374726172496e646578045c204120726567697374726172207761732061646465642e002c48546f6f4d616e795375624163636f756e7473046020546f6f206d616e7920737562732d6163636f756e74732e204e6f74466f756e640454204163636f756e742069736e277420666f756e642e204e6f744e616d65640454204163636f756e742069736e2774206e616d65642e28456d707479496e646578043420456d70747920696e6465782e284665654368616e676564044020466565206973206368616e6765642e284e6f4964656e74697479044c204e6f206964656e7469747920666f756e642e3c537469636b794a756467656d656e74044820537469636b79206a756467656d656e742e384a756467656d656e74476976656e0444204a756467656d656e7420676976656e2e40496e76616c69644a756467656d656e74044c20496e76616c6964206a756467656d656e742e30496e76616c6964496e64657804582054686520696e64657820697320696e76616c69642e34496e76616c6964546172676574045c205468652074617267657420697320696e76616c69642e1c536f6369657479011c536f6369657479401c466f756e646572000030543a3a4163636f756e7449640400044820546865206669727374206d656d6265722e1452756c657300001c543a3a48617368040008510120412068617368206f66207468652072756c6573206f66207468697320736f636965747920636f6e6365726e696e67206d656d626572736869702e2043616e206f6e6c7920626520736574206f6e636520616e6454206f6e6c792062792074686520666f756e6465722e2843616e6469646174657301009c5665633c4269643c543a3a4163636f756e7449642c2042616c616e63654f663c542c20493e3e3e0400043901205468652063757272656e7420736574206f662063616e646964617465733b206269646465727320746861742061726520617474656d7074696e6720746f206265636f6d65206d656d626572732e4c53757370656e64656443616e6469646174657300010130543a3a4163636f756e744964e42842616c616e63654f663c542c20493e2c204269644b696e643c543a3a4163636f756e7449642c2042616c616e63654f663c542c20493e3e2900040004842054686520736574206f662073757370656e6465642063616e646964617465732e0c506f7401003c42616c616e63654f663c542c20493e400000000000000000000000000000000004410120416d6f756e74206f66206f7572206163636f756e742062616c616e63652074686174206973207370656369666963616c6c7920666f7220746865206e65787420726f756e642773206269642873292e1048656164000030543a3a4163636f756e744964040004e820546865206d6f7374207072696d6172792066726f6d20746865206d6f737420726563656e746c7920617070726f766564206d656d626572732e1c4d656d626572730100445665633c543a3a4163636f756e7449643e04000494205468652063757272656e7420736574206f66206d656d626572732c206f7264657265642e4053757370656e6465644d656d6265727301010130543a3a4163636f756e74496410626f6f6c00040004782054686520736574206f662073757370656e646564206d656d626572732e104269647301009c5665633c4269643c543a3a4163636f756e7449642c2042616c616e63654f663c542c20493e3e3e040004e8205468652063757272656e7420626964732c2073746f726564206f726465726564206279207468652076616c7565206f6620746865206269642e20566f756368696e6700010130543a3a4163636f756e74496438566f756368696e6753746174757300040004e4204d656d626572732063757272656e746c7920766f756368696e67206f722062616e6e65642066726f6d20766f756368696e6720616761696e1c5061796f75747301010130543a3a4163636f756e744964985665633c28543a3a426c6f636b4e756d6265722c2042616c616e63654f663c542c20493e293e000400044d012050656e64696e67207061796f7574733b206f72646572656420627920626c6f636b206e756d6265722c20776974682074686520616d6f756e7420746861742073686f756c642062652070616964206f75742e1c537472696b657301010130543a3a4163636f756e7449642c537472696b65436f756e7400100000000004dc20546865206f6e676f696e67206e756d626572206f66206c6f73696e6720766f746573206361737420627920746865206d656d6265722e14566f74657300020530543a3a4163636f756e74496430543a3a4163636f756e74496410566f746505040004d020446f75626c65206d61702066726f6d2043616e646964617465202d3e20566f746572202d3e20284d617962652920566f74652e20446566656e646572000030543a3a4163636f756e744964040004c42054686520646566656e64696e67206d656d6265722063757272656e746c79206265696e67206368616c6c656e6765642e34446566656e646572566f74657300010530543a3a4163636f756e74496410566f7465000400046020566f74657320666f722074686520646566656e6465722e284d61784d656d6265727301000c753332100000000004dc20546865206d6178206e756d626572206f66206d656d6265727320666f722074686520736f6369657479206174206f6e652074696d652e01300c626964041476616c75653c42616c616e63654f663c542c20493e84e020412075736572206f757473696465206f662074686520736f63696574792063616e206d616b6520612062696420666f7220656e7472792e003901205061796d656e743a206043616e6469646174654465706f736974602077696c6c20626520726573657276656420666f72206d616b696e672061206269642e2049742069732072657475726e6564f0207768656e2074686520626964206265636f6d65732061206d656d6265722c206f7220696620746865206269642063616c6c732060756e626964602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a5901202d206076616c7565603a2041206f6e652074696d65207061796d656e74207468652062696420776f756c64206c696b6520746f2072656365697665207768656e206a6f696e696e672074686520736f63696574792e002c2023203c7765696768743e5501204b65793a204220286c656e206f662062696473292c204320286c656e206f662063616e64696461746573292c204d20286c656e206f66206d656d62657273292c2058202862616c616e636520726573657276652944202d2053746f726167652052656164733aec20092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e6465642063616e6469646174652e204f283129e020092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e646564206d656d6265722e204f283129dc20092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e7420626964732e204f284229f420092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e742063616e646964617465732e204f284329c820092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c206d656d626572732e204f284d2948202d2053746f72616765205772697465733a810120092d204f6e652073746f72616765206d757461746520746f206164642061206e65772062696420746f2074686520766563746f72204f2842292028544f444f3a20706f737369626c65206f7074696d697a6174696f6e20772f207265616429010120092d20557020746f206f6e652073746f726167652072656d6f76616c206966206269642e6c656e2829203e204d41585f4249445f434f554e542e204f2831295c202d204e6f7461626c6520436f6d7075746174696f6e3a2d0120092d204f2842202b2043202b206c6f67204d292073656172636820746f20636865636b2075736572206973206e6f7420616c726561647920612070617274206f6620736f63696574792ec420092d204f286c6f672042292073656172636820746f20696e7365727420746865206e65772062696420736f727465642e78202d2045787465726e616c204d6f64756c65204f7065726174696f6e733a9c20092d204f6e652062616c616e63652072657365727665206f7065726174696f6e2e204f285829210120092d20557020746f206f6e652062616c616e636520756e72657365727665206f7065726174696f6e20696620626964732e6c656e2829203e204d41585f4249445f434f554e542e28202d204576656e74733a6820092d204f6e65206576656e7420666f72206e6577206269642efc20092d20557020746f206f6e65206576656e7420666f72204175746f556e626964206966206269642e6c656e2829203e204d41585f4249445f434f554e542e00c420546f74616c20436f6d706c65786974793a204f284d202b2042202b2043202b206c6f674d202b206c6f6742202b205829302023203c2f7765696768743e14756e626964040c706f730c7533324cd82041206269646465722063616e2072656d6f76652074686569722062696420666f7220656e74727920696e746f20736f63696574792e010120427920646f696e6720736f2c20746865792077696c6c20686176652074686569722063616e646964617465206465706f7369742072657475726e6564206f728420746865792077696c6c20756e766f75636820746865697220766f75636865722e00fc205061796d656e743a2054686520626964206465706f73697420697320756e7265736572766564206966207468652075736572206d6164652061206269642e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206269646465722e003020506172616d65746572733a1901202d2060706f73603a20506f736974696f6e20696e207468652060426964736020766563746f72206f6620746865206269642077686f2077616e747320746f20756e6269642e002c2023203c7765696768743eb0204b65793a204220286c656e206f662062696473292c2058202862616c616e636520756e72657365727665290d01202d204f6e652073746f72616765207265616420616e6420777269746520746f20726574726965766520616e64207570646174652074686520626964732e204f2842294501202d20456974686572206f6e6520756e726573657276652062616c616e636520616374696f6e204f285829206f72206f6e6520766f756368696e672073746f726167652072656d6f76616c2e204f28312934202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2842202b205829302023203c2f7765696768743e14766f7563680c0c77686f30543a3a4163636f756e7449641476616c75653c42616c616e63654f663c542c20493e0c7469703c42616c616e63654f663c542c20493eb045012041732061206d656d6265722c20766f75636820666f7220736f6d656f6e6520746f206a6f696e20736f636965747920627920706c6163696e67206120626964206f6e20746865697220626568616c662e005501205468657265206973206e6f206465706f73697420726571756972656420746f20766f75636820666f722061206e6577206269642c206275742061206d656d6265722063616e206f6e6c7920766f75636820666f725d01206f6e652062696420617420612074696d652e2049662074686520626964206265636f6d657320612073757370656e6465642063616e64696461746520616e6420756c74696d6174656c792072656a65637465642062794101207468652073757370656e73696f6e206a756467656d656e74206f726967696e2c20746865206d656d6265722077696c6c2062652062616e6e65642066726f6d20766f756368696e6720616761696e2e005901204173206120766f756368696e67206d656d6265722c20796f752063616e20636c61696d206120746970206966207468652063616e6469646174652069732061636365707465642e2054686973207469702077696c6c51012062652070616964206173206120706f7274696f6e206f66207468652072657761726420746865206d656d6265722077696c6c207265636569766520666f72206a6f696e696e672074686520736f63696574792e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d6265722e003020506172616d65746572733acc202d206077686f603a2054686520757365722077686f20796f7520776f756c64206c696b6520746f20766f75636820666f722e5101202d206076616c7565603a2054686520746f74616c2072657761726420746f2062652070616964206265747765656e20796f7520616e64207468652063616e6469646174652069662074686579206265636f6d65642061206d656d62657220696e2074686520736f63696574792e4901202d2060746970603a20596f757220637574206f662074686520746f74616c206076616c756560207061796f7574207768656e207468652063616e64696461746520697320696e64756374656420696e746f15012074686520736f63696574792e2054697073206c6172676572207468616e206076616c7565602077696c6c206265207361747572617465642075706f6e207061796f75742e002c2023203c7765696768743e0101204b65793a204220286c656e206f662062696473292c204320286c656e206f662063616e64696461746573292c204d20286c656e206f66206d656d626572732944202d2053746f726167652052656164733ac820092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c206d656d626572732e204f284d29090120092d204f6e652073746f72616765207265616420746f20636865636b206d656d626572206973206e6f7420616c726561647920766f756368696e672e204f283129ec20092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e6465642063616e6469646174652e204f283129e020092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e646564206d656d6265722e204f283129dc20092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e7420626964732e204f284229f420092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e742063616e646964617465732e204f28432948202d2053746f72616765205772697465733a0d0120092d204f6e652073746f7261676520777269746520746f20696e7365727420766f756368696e672073746174757320746f20746865206d656d6265722e204f283129810120092d204f6e652073746f72616765206d757461746520746f206164642061206e65772062696420746f2074686520766563746f72204f2842292028544f444f3a20706f737369626c65206f7074696d697a6174696f6e20772f207265616429010120092d20557020746f206f6e652073746f726167652072656d6f76616c206966206269642e6c656e2829203e204d41585f4249445f434f554e542e204f2831295c202d204e6f7461626c6520436f6d7075746174696f6e3ac020092d204f286c6f67204d292073656172636820746f20636865636b2073656e6465722069732061206d656d6265722e2d0120092d204f2842202b2043202b206c6f67204d292073656172636820746f20636865636b2075736572206973206e6f7420616c726561647920612070617274206f6620736f63696574792ec420092d204f286c6f672042292073656172636820746f20696e7365727420746865206e65772062696420736f727465642e78202d2045787465726e616c204d6f64756c65204f7065726174696f6e733a9c20092d204f6e652062616c616e63652072657365727665206f7065726174696f6e2e204f285829210120092d20557020746f206f6e652062616c616e636520756e72657365727665206f7065726174696f6e20696620626964732e6c656e2829203e204d41585f4249445f434f554e542e28202d204576656e74733a6020092d204f6e65206576656e7420666f7220766f7563682efc20092d20557020746f206f6e65206576656e7420666f72204175746f556e626964206966206269642e6c656e2829203e204d41585f4249445f434f554e542e00c420546f74616c20436f6d706c65786974793a204f284d202b2042202b2043202b206c6f674d202b206c6f6742202b205829302023203c2f7765696768743e1c756e766f756368040c706f730c753332442d01204173206120766f756368696e67206d656d6265722c20756e766f7563682061206269642e2054686973206f6e6c7920776f726b73207768696c6520766f7563686564207573657220697394206f6e6c792061206269646465722028616e64206e6f7420612063616e646964617465292e00290120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206120766f756368696e67206d656d6265722e003020506172616d65746572733a2d01202d2060706f73603a20506f736974696f6e20696e207468652060426964736020766563746f72206f6620746865206269642077686f2073686f756c6420626520756e766f75636865642e002c2023203c7765696768743e54204b65793a204220286c656e206f662062696473290901202d204f6e652073746f726167652072656164204f28312920746f20636865636b20746865207369676e6572206973206120766f756368696e67206d656d6265722eec202d204f6e652073746f72616765206d757461746520746f20726574726965766520616e64207570646174652074686520626964732e204f28422994202d204f6e6520766f756368696e672073746f726167652072656d6f76616c2e204f28312934202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f284229302023203c2f7765696768743e10766f7465082463616e6469646174658c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651c617070726f766510626f6f6c4c882041732061206d656d6265722c20766f7465206f6e20612063616e6469646174652e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d6265722e003020506172616d65746572733a0d01202d206063616e646964617465603a205468652063616e646964617465207468617420746865206d656d62657220776f756c64206c696b6520746f20626964206f6e2ef4202d2060617070726f7665603a204120626f6f6c65616e2077686963682073617973206966207468652063616e6469646174652073686f756c64206265d82020202020202020202020202020617070726f766564202860747275656029206f722072656a656374656420286066616c736560292e002c2023203c7765696768743ebc204b65793a204320286c656e206f662063616e64696461746573292c204d20286c656e206f66206d656d62657273291d01202d204f6e652073746f726167652072656164204f284d2920616e64204f286c6f67204d292073656172636820746f20636865636b20757365722069732061206d656d6265722e58202d204f6e65206163636f756e74206c6f6f6b75702e2d01202d204f6e652073746f726167652072656164204f28432920616e64204f2843292073656172636820746f20636865636b2074686174207573657220697320612063616e6469646174652ebc202d204f6e652073746f7261676520777269746520746f2061646420766f746520746f20766f7465732e204f28312934202d204f6e65206576656e742e008820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b204329302023203c2f7765696768743e34646566656e6465725f766f7465041c617070726f766510626f6f6c408c2041732061206d656d6265722c20766f7465206f6e2074686520646566656e6465722e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d6265722e003020506172616d65746572733af4202d2060617070726f7665603a204120626f6f6c65616e2077686963682073617973206966207468652063616e6469646174652073686f756c64206265a420617070726f766564202860747275656029206f722072656a656374656420286066616c736560292e002c2023203c7765696768743e68202d204b65793a204d20286c656e206f66206d656d62657273291d01202d204f6e652073746f726167652072656164204f284d2920616e64204f286c6f67204d292073656172636820746f20636865636b20757365722069732061206d656d6265722ebc202d204f6e652073746f7261676520777269746520746f2061646420766f746520746f20766f7465732e204f28312934202d204f6e65206576656e742e007820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d29302023203c2f7765696768743e187061796f757400504501205472616e7366657220746865206669727374206d617475726564207061796f757420666f72207468652073656e64657220616e642072656d6f76652069742066726f6d20746865207265636f7264732e006901204e4f54453a20546869732065787472696e736963206e6565647320746f2062652063616c6c6564206d756c7469706c652074696d657320746f20636c61696d206d756c7469706c65206d617475726564207061796f7574732e002101205061796d656e743a20546865206d656d6265722077696c6c20726563656976652061207061796d656e7420657175616c20746f207468656972206669727374206d61747572656478207061796f757420746f20746865697220667265652062616c616e63652e00150120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d62657220776974684c207061796f7574732072656d61696e696e672e002c2023203c7765696768743e1d01204b65793a204d20286c656e206f66206d656d62657273292c205020286e756d626572206f66207061796f75747320666f72206120706172746963756c6172206d656d626572292501202d204f6e652073746f726167652072656164204f284d2920616e64204f286c6f67204d292073656172636820746f20636865636b207369676e65722069732061206d656d6265722ee4202d204f6e652073746f726167652072656164204f28502920746f2067657420616c6c207061796f75747320666f722061206d656d6265722ee4202d204f6e652073746f726167652072656164204f28312920746f20676574207468652063757272656e7420626c6f636b206e756d6265722e8c202d204f6e652063757272656e6379207472616e736665722063616c6c2e204f2858291101202d204f6e652073746f72616765207772697465206f722072656d6f76616c20746f2075706461746520746865206d656d6265722773207061796f7574732e204f285029009820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b2050202b205829302023203c2f7765696768743e14666f756e640c1c666f756e64657230543a3a4163636f756e7449642c6d61785f6d656d626572730c7533321472756c65731c5665633c75383e4c4c20466f756e642074686520736f63696574792e00f0205468697320697320646f6e65206173206120646973637265746520616374696f6e20696e206f7264657220746f20616c6c6f7720666f72207468651901206d6f64756c6520746f20626520696e636c7564656420696e746f20612072756e6e696e6720636861696e20616e642063616e206f6e6c7920626520646f6e65206f6e63652e001d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d20746865205f466f756e6465725365744f726967696e5f2e003020506172616d65746572733a1901202d2060666f756e64657260202d20546865206669727374206d656d62657220616e642068656164206f6620746865206e65776c7920666f756e64656420736f63696574792e1501202d20606d61785f6d656d6265727360202d2054686520696e697469616c206d6178206e756d626572206f66206d656d6265727320666f722074686520736f63696574792ef4202d206072756c657360202d205468652072756c6573206f66207468697320736f636965747920636f6e6365726e696e67206d656d626572736869702e002c2023203c7765696768743ee0202d2054776f2073746f72616765206d75746174657320746f207365742060486561646020616e642060466f756e646572602e204f283129f4202d204f6e652073746f7261676520777269746520746f2061646420746865206669727374206d656d62657220746f20736f63696574792e204f28312934202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f283129302023203c2f7765696768743e1c756e666f756e6400348c20416e756c6c2074686520666f756e64696e67206f662074686520736f63696574792e005d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205369676e65642c20616e6420746865207369676e696e67206163636f756e74206d75737420626520626f74685901207468652060466f756e6465726020616e6420746865206048656164602e205468697320696d706c6965732074686174206974206d6179206f6e6c7920626520646f6e65207768656e207468657265206973206f6e6520206d656d6265722e002c2023203c7765696768743e68202d2054776f2073746f72616765207265616473204f2831292e78202d20466f75722073746f726167652072656d6f76616c73204f2831292e34202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f283129302023203c2f7765696768743e586a756467655f73757370656e6465645f6d656d626572080c77686f30543a3a4163636f756e7449641c666f726769766510626f6f6c6c2d0120416c6c6f772073757370656e73696f6e206a756467656d656e74206f726967696e20746f206d616b65206a756467656d656e74206f6e20612073757370656e646564206d656d6265722e00590120496620612073757370656e646564206d656d62657220697320666f72676976656e2c2077652073696d706c7920616464207468656d206261636b2061732061206d656d6265722c206e6f7420616666656374696e67cc20616e79206f6620746865206578697374696e672073746f72616765206974656d7320666f722074686174206d656d6265722e00490120496620612073757370656e646564206d656d6265722069732072656a65637465642c2072656d6f766520616c6c206173736f6369617465642073746f72616765206974656d732c20696e636c7564696e670101207468656972207061796f7574732c20616e642072656d6f766520616e7920766f7563686564206269647320746865792063757272656e746c7920686176652e00410120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d20746865205f53757370656e73696f6e4a756467656d656e744f726967696e5f2e003020506172616d65746572733ab4202d206077686f60202d205468652073757370656e646564206d656d62657220746f206265206a75646765642e3501202d2060666f726769766560202d204120626f6f6c65616e20726570726573656e74696e672077686574686572207468652073757370656e73696f6e206a756467656d656e74206f726967696e2501202020202020202020202020202020666f726769766573202860747275656029206f722072656a6563747320286066616c7365602920612073757370656e646564206d656d6265722e002c2023203c7765696768743ea4204b65793a204220286c656e206f662062696473292c204d20286c656e206f66206d656d6265727329f8202d204f6e652073746f72616765207265616420746f20636865636b206077686f6020697320612073757370656e646564206d656d6265722e204f2831297101202d20557020746f206f6e652073746f72616765207772697465204f284d292077697468204f286c6f67204d292062696e6172792073656172636820746f206164642061206d656d626572206261636b20746f20736f63696574792ef8202d20557020746f20332073746f726167652072656d6f76616c73204f28312920746f20636c65616e20757020612072656d6f766564206d656d6265722e4501202d20557020746f206f6e652073746f72616765207772697465204f2842292077697468204f2842292073656172636820746f2072656d6f766520766f7563686564206269642066726f6d20626964732ed4202d20557020746f206f6e65206164646974696f6e616c206576656e7420696620756e766f7563682074616b657320706c6163652e70202d204f6e652073746f726167652072656d6f76616c2e204f2831297c202d204f6e65206576656e7420666f7220746865206a756467656d656e742e008820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b204229302023203c2f7765696768743e646a756467655f73757370656e6465645f63616e646964617465080c77686f30543a3a4163636f756e744964246a756467656d656e74244a756467656d656e74a0350120416c6c6f772073757370656e646564206a756467656d656e74206f726967696e20746f206d616b65206a756467656d656e74206f6e20612073757370656e6465642063616e6469646174652e005d0120496620746865206a756467656d656e742069732060417070726f7665602c20776520616464207468656d20746f20736f63696574792061732061206d656d62657220776974682074686520617070726f70726961746574207061796d656e7420666f72206a6f696e696e6720736f63696574792e00550120496620746865206a756467656d656e74206973206052656a656374602c2077652065697468657220736c61736820746865206465706f736974206f6620746865206269642c20676976696e67206974206261636b110120746f2074686520736f63696574792074726561737572792c206f722077652062616e2074686520766f75636865722066726f6d20766f756368696e6720616761696e2e005d0120496620746865206a756467656d656e7420697320605265626964602c20776520707574207468652063616e646964617465206261636b20696e207468652062696420706f6f6c20616e64206c6574207468656d20676f94207468726f7567682074686520696e64756374696f6e2070726f6365737320616761696e2e00410120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d20746865205f53757370656e73696f6e4a756467656d656e744f726967696e5f2e003020506172616d65746572733ac0202d206077686f60202d205468652073757370656e6465642063616e64696461746520746f206265206a75646765642ec4202d20606a756467656d656e7460202d2060417070726f7665602c206052656a656374602c206f7220605265626964602e002c2023203c7765696768743ef4204b65793a204220286c656e206f662062696473292c204d20286c656e206f66206d656d62657273292c2058202862616c616e636520616374696f6e29f0202d204f6e652073746f72616765207265616420746f20636865636b206077686f6020697320612073757370656e6465642063616e6469646174652ec8202d204f6e652073746f726167652072656d6f76616c206f66207468652073757370656e6465642063616e6469646174652e40202d20417070726f7665204c6f676963150120092d204f6e652073746f72616765207265616420746f206765742074686520617661696c61626c6520706f7420746f2070617920757365727320776974682e204f283129dc20092d204f6e652073746f7261676520777269746520746f207570646174652074686520617661696c61626c6520706f742e204f283129e820092d204f6e652073746f72616765207265616420746f20676574207468652063757272656e7420626c6f636b206e756d6265722e204f283129b420092d204f6e652073746f72616765207265616420746f2067657420616c6c206d656d626572732e204f284d29a020092d20557020746f206f6e6520756e726573657276652063757272656e637920616374696f6e2eb020092d20557020746f2074776f206e65772073746f726167652077726974657320746f207061796f7574732e4d0120092d20557020746f206f6e652073746f726167652077726974652077697468204f286c6f67204d292062696e6172792073656172636820746f206164642061206d656d62657220746f20736f63696574792e3c202d2052656a656374204c6f676963dc20092d20557020746f206f6e6520726570617472696174652072657365727665642063757272656e637920616374696f6e2e204f2858292d0120092d20557020746f206f6e652073746f7261676520777269746520746f2062616e2074686520766f756368696e67206d656d6265722066726f6d20766f756368696e6720616761696e2e38202d205265626964204c6f676963410120092d2053746f72616765206d75746174652077697468204f286c6f672042292062696e6172792073656172636820746f20706c616365207468652075736572206261636b20696e746f20626964732ed4202d20557020746f206f6e65206164646974696f6e616c206576656e7420696620756e766f7563682074616b657320706c6163652e5c202d204f6e652073746f726167652072656d6f76616c2e7c202d204f6e65206576656e7420666f7220746865206a756467656d656e742e009820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b2042202b205829302023203c2f7765696768743e3c7365745f6d61785f6d656d62657273040c6d61780c753332381d0120416c6c6f777320726f6f74206f726967696e20746f206368616e676520746865206d6178696d756d206e756d626572206f66206d656d6265727320696e20736f63696574792eb4204d6178206d656d6265727368697020636f756e74206d7573742062652067726561746572207468616e20312e00dc20546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d205f524f4f545f2e003020506172616d65746572733ae4202d20606d617860202d20546865206d6178696d756d206e756d626572206f66206d656d6265727320666f722074686520736f63696574792e002c2023203c7765696768743eb0202d204f6e652073746f7261676520777269746520746f2075706461746520746865206d61782e204f28312934202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f283129302023203c2f7765696768743e013c1c466f756e64656404244163636f756e74496404b82054686520736f636965747920697320666f756e6465642062792074686520676976656e206964656e746974792e0c42696408244163636f756e7449641c42616c616e63650861012041206d656d6265727368697020626964206a7573742068617070656e65642e2054686520676976656e206163636f756e74206973207468652063616e646964617465277320494420616e64207468656972206f666665723c20697320746865207365636f6e642e14566f7563680c244163636f756e7449641c42616c616e6365244163636f756e7449640861012041206d656d6265727368697020626964206a7573742068617070656e656420627920766f756368696e672e2054686520676976656e206163636f756e74206973207468652063616e646964617465277320494420616e64f0207468656972206f6666657220697320746865207365636f6e642e2054686520766f756368696e67207061727479206973207468652074686972642e244175746f556e62696404244163636f756e74496404090120412063616e646964617465207761732064726f70706564202864756520746f20616e20657863657373206f66206269647320696e207468652073797374656d292e14556e62696404244163636f756e74496404b020412063616e646964617465207761732064726f70706564202862792074686569722072657175657374292e1c556e766f75636804244163636f756e74496404f820412063616e646964617465207761732064726f70706564202862792072657175657374206f662077686f20766f756368656420666f72207468656d292e20496e64756374656408244163636f756e744964385665633c4163636f756e7449643e08590120412067726f7570206f662063616e646964617465732068617665206265656e20696e6475637465642e205468652062617463682773207072696d617279206973207468652066697273742076616c75652c207468657420626174636820696e2066756c6c20697320746865207365636f6e642e6053757370656e6465644d656d6265724a756467656d656e7408244163636f756e74496410626f6f6c048c20412073757370656e646564206d656d62657220686173206265656e206a75646765644843616e64696461746553757370656e64656404244163636f756e744964047c20412063616e64696461746520686173206265656e2073757370656e6465643c4d656d62657253757370656e64656404244163636f756e74496404702041206d656d62657220686173206265656e2073757370656e646564284368616c6c656e67656404244163636f756e74496404742041206d656d62657220686173206265656e206368616c6c656e67656410566f74650c244163636f756e744964244163636f756e74496410626f6f6c04c0204120766f746520686173206265656e20706c61636564202863616e6469646174652c20766f7465722c20766f74652930446566656e646572566f746508244163636f756e74496410626f6f6c04f0204120766f746520686173206265656e20706c6163656420666f72206120646566656e64696e67206d656d6265722028766f7465722c20766f746529344e65774d61784d656d62657273040c75333204902041206e6577206d6178206d656d62657220636f756e7420686173206265656e2073657424556e666f756e64656404244163636f756e744964045820536f636965747920697320756e666f756e6465642e184043616e6469646174654465706f7369743c42616c616e63654f663c542c20493e400080c6a47e8d0300000000000000000004fc20546865206d696e696d756d20616d6f756e74206f662061206465706f73697420726571756972656420666f7220612062696420746f206265206d6164652e4857726f6e6753696465446564756374696f6e3c42616c616e63654f663c542c20493e400080f420e6b5000000000000000000000855012054686520616d6f756e74206f662074686520756e70616964207265776172642074686174206765747320646564756374656420696e207468652063617365207468617420656974686572206120736b6570746963c020646f65736e277420766f7465206f7220736f6d656f6e6520766f74657320696e207468652077726f6e67207761792e284d6178537472696b65730c753332100a00000008750120546865206e756d626572206f662074696d65732061206d656d626572206d617920766f7465207468652077726f6e672077617920286f72206e6f7420617420616c6c2c207768656e207468657920617265206120736b65707469632978206265666f72652074686579206265636f6d652073757370656e6465642e2c506572696f645370656e643c42616c616e63654f663c542c20493e400000c52ebca2b1000000000000000000042d012054686520616d6f756e74206f6620696e63656e7469766520706169642077697468696e206561636820706572696f642e20446f65736e277420696e636c75646520566f7465725469702e38526f746174696f6e506572696f6438543a3a426c6f636b4e756d626572100077010004110120546865206e756d626572206f6620626c6f636b73206265747765656e2063616e6469646174652f6d656d6265727368697020726f746174696f6e20706572696f64732e3c4368616c6c656e6765506572696f6438543a3a426c6f636b4e756d626572108013030004d020546865206e756d626572206f6620626c6f636b73206265747765656e206d656d62657273686970206368616c6c656e6765732e482c426164506f736974696f6e049020416e20696e636f727265637420706f736974696f6e207761732070726f76696465642e244e6f744d656d62657204582055736572206973206e6f742061206d656d6265722e34416c72656164794d656d6265720468205573657220697320616c72656164792061206d656d6265722e2453757370656e646564044c20557365722069732073757370656e6465642e304e6f7453757370656e646564045c2055736572206973206e6f742073757370656e6465642e204e6f5061796f7574044c204e6f7468696e6720746f207061796f75742e38416c7265616479466f756e646564046420536f636965747920616c726561647920666f756e6465642e3c496e73756666696369656e74506f74049c204e6f7420656e6f75676820696e20706f7420746f206163636570742063616e6469646174652e3c416c7265616479566f756368696e6704e8204d656d62657220697320616c726561647920766f756368696e67206f722062616e6e65642066726f6d20766f756368696e6720616761696e2e2c4e6f74566f756368696e670460204d656d626572206973206e6f7420766f756368696e672e104865616404942043616e6e6f742072656d6f7665207468652068656164206f662074686520636861696e2e1c466f756e646572046c2043616e6e6f742072656d6f76652074686520666f756e6465722e28416c7265616479426964047420557365722068617320616c7265616479206d6164652061206269642e40416c726561647943616e6469646174650474205573657220697320616c726561647920612063616e6469646174652e304e6f7443616e64696461746504642055736572206973206e6f7420612063616e6469646174652e284d61784d656d62657273048420546f6f206d616e79206d656d6265727320696e2074686520736f63696574792e284e6f74466f756e646572047c205468652063616c6c6572206973206e6f742074686520666f756e6465722e1c4e6f74486561640470205468652063616c6c6572206973206e6f742074686520686561642e205265636f7665727901205265636f766572790c2c5265636f76657261626c6500010130543a3a4163636f756e744964e85265636f76657279436f6e6669673c543a3a426c6f636b4e756d6265722c2042616c616e63654f663c543e2c20543a3a4163636f756e7449643e0004000409012054686520736574206f66207265636f76657261626c65206163636f756e747320616e64207468656972207265636f7665727920636f6e66696775726174696f6e2e404163746976655265636f76657269657300020530543a3a4163636f756e74496430543a3a4163636f756e744964e84163746976655265636f766572793c543a3a426c6f636b4e756d6265722c2042616c616e63654f663c543e2c20543a3a4163636f756e7449643e050400106820416374697665207265636f7665727920617474656d7074732e001501204669727374206163636f756e7420697320746865206163636f756e7420746f206265207265636f76657265642c20616e6420746865207365636f6e64206163636f756e74ac20697320746865207573657220747279696e6720746f207265636f76657220746865206163636f756e742e245265636f766572656400010130543a3a4163636f756e74496430543a3a4163636f756e7449640004000c98205468652066696e616c206c697374206f66207265636f7665726564206163636f756e74732e00f8204d61702066726f6d20746865207265636f7665726564206163636f756e7420746f2074686520757365722077686f2063616e206163636573732069742e01203061735f7265636f7665726564081c6163636f756e7430543a3a4163636f756e7449641063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e34a42053656e6420612063616c6c207468726f7567682061207265636f7665726564206163636f756e742e00150120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207265676973746572656420746fe82062652061626c6520746f206d616b652063616c6c73206f6e20626568616c66206f6620746865207265636f7665726564206163636f756e742e003020506172616d65746572733a2501202d20606163636f756e74603a20546865207265636f7665726564206163636f756e7420796f752077616e7420746f206d616b6520612063616c6c206f6e2d626568616c662d6f662e0101202d206063616c6c603a205468652063616c6c20796f752077616e7420746f206d616b65207769746820746865207265636f7665726564206163636f756e742e002c2023203c7765696768743e70202d2054686520776569676874206f6620746865206063616c6c602e0901202d204f6e652073746f72616765206c6f6f6b757020746f20636865636b206163636f756e74206973207265636f7665726564206279206077686f602e204f283129302023203c2f7765696768743e347365745f7265636f766572656408106c6f737430543a3a4163636f756e7449641c7265736375657230543a3a4163636f756e744964341d0120416c6c6f7720524f4f5420746f2062797061737320746865207265636f766572792070726f6365737320616e642073657420616e20612072657363756572206163636f756e747420666f722061206c6f7374206163636f756e74206469726563746c792e00c820546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f524f4f545f2e003020506172616d65746572733ab8202d20606c6f7374603a2054686520226c6f7374206163636f756e742220746f206265207265636f76657265642e1d01202d206072657363756572603a20546865202272657363756572206163636f756e74222077686963682063616e2063616c6c20617320746865206c6f7374206163636f756e742e002c2023203c7765696768743e64202d204f6e652073746f72616765207772697465204f28312930202d204f6e65206576656e74302023203c2f7765696768743e3c6372656174655f7265636f766572790c1c667269656e6473445665633c543a3a4163636f756e7449643e247468726573686f6c640c7531363064656c61795f706572696f6438543a3a426c6f636b4e756d6265726c5d01204372656174652061207265636f7665727920636f6e66696775726174696f6e20666f7220796f7572206163636f756e742e2054686973206d616b657320796f7572206163636f756e74207265636f76657261626c652e003101205061796d656e743a2060436f6e6669674465706f7369744261736560202b2060467269656e644465706f736974466163746f7260202a20235f6f665f667269656e64732062616c616e636549012077696c6c20626520726573657276656420666f722073746f72696e6720746865207265636f7665727920636f6e66696775726174696f6e2e2054686973206465706f7369742069732072657475726e6564bc20696e2066756c6c207768656e2074686520757365722063616c6c73206072656d6f76655f7265636f76657279602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a2501202d2060667269656e6473603a2041206c697374206f6620667269656e647320796f7520747275737420746f20766f75636820666f72207265636f7665727920617474656d7074732ed420202053686f756c64206265206f72646572656420616e6420636f6e7461696e206e6f206475706c69636174652076616c7565732e3101202d20607468726573686f6c64603a20546865206e756d626572206f6620667269656e64732074686174206d75737420766f75636820666f722061207265636f7665727920617474656d70741d012020206265666f726520746865206163636f756e742063616e206265207265636f76657265642e2053686f756c64206265206c657373207468616e206f7220657175616c20746f94202020746865206c656e677468206f6620746865206c697374206f6620667269656e64732e3d01202d206064656c61795f706572696f64603a20546865206e756d626572206f6620626c6f636b732061667465722061207265636f7665727920617474656d707420697320696e697469616c697a6564e820202074686174206e6565647320746f2070617373206265666f726520746865206163636f756e742063616e206265207265636f76657265642e002c2023203c7765696768743e68202d204b65793a204620286c656e206f6620667269656e6473292d01202d204f6e652073746f72616765207265616420746f20636865636b2074686174206163636f756e74206973206e6f7420616c7265616479207265636f76657261626c652e204f2831292eec202d204120636865636b20746861742074686520667269656e6473206c69737420697320736f7274656420616e6420756e697175652e204f2846299c202d204f6e652063757272656e63792072657365727665206f7065726174696f6e2e204f2858299c202d204f6e652073746f726167652077726974652e204f2831292e20436f646563204f2846292e34202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205829302023203c2f7765696768743e44696e6974696174655f7265636f76657279041c6163636f756e7430543a3a4163636f756e74496458ec20496e697469617465207468652070726f6365737320666f72207265636f766572696e672061207265636f76657261626c65206163636f756e742e001d01205061796d656e743a20605265636f766572794465706f736974602062616c616e63652077696c6c20626520726573657276656420666f7220696e6974696174696e67207468652501207265636f766572792070726f636573732e2054686973206465706f7369742077696c6c20616c7761797320626520726570617472696174656420746f20746865206163636f756e74b820747279696e6720746f206265207265636f76657265642e205365652060636c6f73655f7265636f76657279602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a1501202d20606163636f756e74603a20546865206c6f7374206163636f756e74207468617420796f752077616e7420746f207265636f7665722e2054686973206163636f756e7401012020206e6565647320746f206265207265636f76657261626c652028692e652e20686176652061207265636f7665727920636f6e66696775726174696f6e292e002c2023203c7765696768743ef8202d204f6e652073746f72616765207265616420746f20636865636b2074686174206163636f756e74206973207265636f76657261626c652e204f2846295101202d204f6e652073746f72616765207265616420746f20636865636b20746861742074686973207265636f766572792070726f63657373206861736e277420616c726561647920737461727465642e204f2831299c202d204f6e652063757272656e63792072657365727665206f7065726174696f6e2e204f285829e4202d204f6e652073746f72616765207265616420746f20676574207468652063757272656e7420626c6f636b206e756d6265722e204f2831296c202d204f6e652073746f726167652077726974652e204f2831292e34202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205829302023203c2f7765696768743e38766f7563685f7265636f7665727908106c6f737430543a3a4163636f756e7449641c7265736375657230543a3a4163636f756e74496464290120416c6c6f7720612022667269656e6422206f662061207265636f76657261626c65206163636f756e7420746f20766f75636820666f7220616e20616374697665207265636f76657279682070726f6365737320666f722074686174206163636f756e742e00290120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d75737420626520612022667269656e64227420666f7220746865207265636f76657261626c65206163636f756e742e003020506172616d65746572733ad4202d20606c6f7374603a20546865206c6f7374206163636f756e74207468617420796f752077616e7420746f207265636f7665722e1101202d206072657363756572603a20546865206163636f756e7420747279696e6720746f2072657363756520746865206c6f7374206163636f756e74207468617420796f755420202077616e7420746f20766f75636820666f722e0025012054686520636f6d62696e6174696f6e206f662074686573652074776f20706172616d6574657273206d75737420706f696e7420746f20616e20616374697665207265636f76657279242070726f636573732e002c2023203c7765696768743efc204b65793a204620286c656e206f6620667269656e647320696e20636f6e666967292c205620286c656e206f6620766f756368696e6720667269656e6473291d01202d204f6e652073746f72616765207265616420746f2067657420746865207265636f7665727920636f6e66696775726174696f6e2e204f2831292c20436f646563204f2846292101202d204f6e652073746f72616765207265616420746f206765742074686520616374697665207265636f766572792070726f636573732e204f2831292c20436f646563204f285629ec202d204f6e652062696e6172792073656172636820746f20636f6e6669726d2063616c6c6572206973206120667269656e642e204f286c6f6746291d01202d204f6e652062696e6172792073656172636820746f20636f6e6669726d2063616c6c657220686173206e6f7420616c726561647920766f75636865642e204f286c6f6756299c202d204f6e652073746f726167652077726974652e204f2831292c20436f646563204f2856292e34202d204f6e65206576656e742e00a420546f74616c20436f6d706c65786974793a204f2846202b206c6f6746202b2056202b206c6f675629302023203c2f7765696768743e38636c61696d5f7265636f76657279041c6163636f756e7430543a3a4163636f756e74496450f420416c6c6f772061207375636365737366756c207265736375657220746f20636c61696d207468656972207265636f7665726564206163636f756e742e002d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d7573742062652061202272657363756572221d012077686f20686173207375636365737366756c6c7920636f6d706c6574656420746865206163636f756e74207265636f766572792070726f636573733a20636f6c6c6563746564310120607468726573686f6c6460206f72206d6f726520766f75636865732c20776169746564206064656c61795f706572696f646020626c6f636b732073696e636520696e6974696174696f6e2e003020506172616d65746572733a2d01202d20606163636f756e74603a20546865206c6f7374206163636f756e74207468617420796f752077616e7420746f20636c61696d20686173206265656e207375636365737366756c6c79502020207265636f766572656420627920796f752e002c2023203c7765696768743efc204b65793a204620286c656e206f6620667269656e647320696e20636f6e666967292c205620286c656e206f6620766f756368696e6720667269656e6473291d01202d204f6e652073746f72616765207265616420746f2067657420746865207265636f7665727920636f6e66696775726174696f6e2e204f2831292c20436f646563204f2846292101202d204f6e652073746f72616765207265616420746f206765742074686520616374697665207265636f766572792070726f636573732e204f2831292c20436f646563204f285629e4202d204f6e652073746f72616765207265616420746f20676574207468652063757272656e7420626c6f636b206e756d6265722e204f2831299c202d204f6e652073746f726167652077726974652e204f2831292c20436f646563204f2856292e34202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205629302023203c2f7765696768743e38636c6f73655f7265636f76657279041c7265736375657230543a3a4163636f756e7449645015012041732074686520636f6e74726f6c6c6572206f662061207265636f76657261626c65206163636f756e742c20636c6f736520616e20616374697665207265636f76657279682070726f6365737320666f7220796f7572206163636f756e742e002101205061796d656e743a2042792063616c6c696e6720746869732066756e6374696f6e2c20746865207265636f76657261626c65206163636f756e742077696c6c2072656365697665f820746865207265636f76657279206465706f73697420605265636f766572794465706f7369746020706c616365642062792074686520726573637565722e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d7573742062652061f0207265636f76657261626c65206163636f756e74207769746820616e20616374697665207265636f766572792070726f6365737320666f722069742e003020506172616d65746572733a1101202d206072657363756572603a20546865206163636f756e7420747279696e6720746f207265736375652074686973207265636f76657261626c65206163636f756e742e002c2023203c7765696768743e84204b65793a205620286c656e206f6620766f756368696e6720667269656e6473293d01202d204f6e652073746f7261676520726561642f72656d6f766520746f206765742074686520616374697665207265636f766572792070726f636573732e204f2831292c20436f646563204f285629c0202d204f6e652062616c616e63652063616c6c20746f20726570617472696174652072657365727665642e204f28582934202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2856202b205829302023203c2f7765696768743e3c72656d6f76655f7265636f766572790054b82052656d6f766520746865207265636f766572792070726f6365737320666f7220796f7572206163636f756e742e001501204e4f54453a205468652075736572206d757374206d616b65207375726520746f2063616c6c2060636c6f73655f7265636f7665727960206f6e20616c6c206163746976650901207265636f7665727920617474656d707473206265666f72652063616c6c696e6720746869732066756e6374696f6e20656c73652069742077696c6c206661696c2e002501205061796d656e743a2042792063616c6c696e6720746869732066756e6374696f6e20746865207265636f76657261626c65206163636f756e742077696c6c20756e7265736572766598207468656972207265636f7665727920636f6e66696775726174696f6e206465706f7369742ef4202860436f6e6669674465706f7369744261736560202b2060467269656e644465706f736974466163746f7260202a20235f6f665f667269656e64732900050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d7573742062652061e4207265636f76657261626c65206163636f756e742028692e652e206861732061207265636f7665727920636f6e66696775726174696f6e292e002c2023203c7765696768743e60204b65793a204620286c656e206f6620667269656e6473292901202d204f6e652073746f72616765207265616420746f206765742074686520707265666978206974657261746f7220666f7220616374697665207265636f7665726965732e204f2831293901202d204f6e652073746f7261676520726561642f72656d6f766520746f2067657420746865207265636f7665727920636f6e66696775726174696f6e2e204f2831292c20436f646563204f2846299c202d204f6e652062616c616e63652063616c6c20746f20756e72657365727665642e204f28582934202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205829302023203c2f7765696768743e01183c5265636f766572794372656174656404244163636f756e74496404c82041207265636f766572792070726f6365737320686173206265656e2073657420757020666f7220616e206163636f756e74445265636f76657279496e6974696174656408244163636f756e744964244163636f756e7449640405012041207265636f766572792070726f6365737320686173206265656e20696e6974696174656420666f72206163636f756e745f31206279206163636f756e745f323c5265636f76657279566f75636865640c244163636f756e744964244163636f756e744964244163636f756e7449640441012041207265636f766572792070726f6365737320666f72206163636f756e745f31206279206163636f756e745f3220686173206265656e20766f756368656420666f72206279206163636f756e745f33385265636f76657279436c6f73656408244163636f756e744964244163636f756e74496404f82041207265636f766572792070726f6365737320666f72206163636f756e745f31206279206163636f756e745f3220686173206265656e20636c6f736564404163636f756e745265636f766572656408244163636f756e744964244163636f756e74496404dc204163636f756e745f3120686173206265656e207375636365737366756c6c79207265636f7665726564206279206163636f756e745f323c5265636f7665727952656d6f76656404244163636f756e74496404cc2041207265636f766572792070726f6365737320686173206265656e2072656d6f76656420666f7220616e206163636f756e740000';
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/constants/index.spec", ["require", "exports", "types/src/create/index", "metadata/src/Metadata", "metadata/src/static", "metadata/src/v10/static", "metadata/src/decorate/index"], function (require, exports, create_16, Metadata_6, static_7, static_8, __1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_7 = __importDefault(static_7);
    static_8 = __importDefault(static_8);
    function init(meta) {
        const registry = new create_16.TypeRegistry();
        const metadata = new Metadata_6.Metadata(registry, meta);
        registry.setMetadata(metadata);
        return [__1.decorateConstants(registry, metadata.asLatest), registry];
    }
    describe('decorateConstants', () => {
        it('should return constants with the correct type and value', () => {
            const [consts, registry] = init(static_7.default);
            expect(consts.democracy.cooloffPeriod).toBeInstanceOf(registry.createClass('BlockNumber'));
            // 3 second blocks, 28 days
            expect(consts.democracy.cooloffPeriod.toNumber()).toEqual(28 * 24 * 60 * (60 / 3));
        });
        // removed from session
        it('correctly handles bytes (V10)', () => {
            const [consts] = init(static_8.default);
            // 0x34 removes as the length prefix removed
            expect(consts.session.dedupKeyPrefix.toHex()).toEqual('0x3a73657373696f6e3a6b657973');
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/extrinsics/index.spec", ["require", "exports", "bn.js", "@polkadot/keyring/testingPairs", "types/src/create/index", "metadata/src/Metadata", "metadata/src/static", "metadata/src/decorate/index"], function (require, exports, bn_js_14, testingPairs_4, create_17, Metadata_7, static_9, __2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_14 = __importDefault(bn_js_14);
    static_9 = __importDefault(static_9);
    const keyring = testingPairs_4.createTestPairs({ type: 'ed25519' }, false);
    const registry = new create_17.TypeRegistry();
    const metadata = new Metadata_7.Metadata(registry, static_9.default);
    registry.setMetadata(metadata);
    const extrinsics = __2.decorateExtrinsics(registry, metadata.asLatest, metadata.version);
    describe('extrinsics', () => {
        it('encodes an actual transfer (actual data)', () => {
            expect(registry.createType('Extrinsic', extrinsics.balances.transfer(keyring.bob.publicKey, 6969)).sign(keyring.alice, {
                blockHash: '0xec7afaf1cca720ce88c1d1b689d81f0583cc15a97d621cf046dd9abf605ef22f',
                genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
                nonce: 0,
                runtimeVersion: {
                    apis: [],
                    authoringVersion: new bn_js_14.default(123),
                    implName: 'test',
                    implVersion: new bn_js_14.default(123),
                    specName: 'test',
                    specVersion: new bn_js_14.default(123),
                    transactionVersion: new bn_js_14.default(123)
                }
            }).toHex()).toEqual('0x' +
                '2d02' + // length
                '84' + // signed flag
                'ffd172a74cda4c865912c32ba0a80a57ae69abae410e5ccb59dee84e2f4432db4f' + // who
                '00' + // ed25519
                '4634f7b973084f983ef48e2afbd72a990f7d4dd9d86c39e645cb34d9a45466b6' + // sig1
                '263f0f2020363a6475f91e323a8b1bd43dedd97e78ec3c5d5b5197466305400e' + // sig2
                '000000' + // nonce, era, tip
                '0600' + // balances.transfer
                'ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9' + // to
                'e56c' // value
            );
        });
    });
    describe('decorateExtrinsics', () => {
        it('should throw if an incorrect number of args is supplied', () => {
            expect(() => extrinsics.balances.setBalance()).toThrowError(/expects 3 arguments/);
        });
        it('should return a value if the storage function does not expect an argument', () => {
            expect(() => extrinsics.balances.setBalance('5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF', 2, 3)).not.toThrow();
        });
        it('should return properly-encoded transactions', () => {
            expect(registry.createType('Extrinsic', extrinsics.timestamp.set([10101])).toU8a()).toEqual(new Uint8Array([
                // length (encoded)
                4 << 2,
                // version, no signature
                4,
                // index
                3, 0,
                // values, Compact<Moment>
                116
            ]));
        });
        it('has working .is', () => {
            const tx = extrinsics.balances.setBalance('5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF', 2, 3);
            expect(extrinsics.balances.setBalance.is(tx)).toBe(true);
            expect(extrinsics.balances.transfer.is(tx)).toBe(false);
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/createFunction.spec", ["require", "exports", "types/src/index", "types/src/create/index", "@polkadot/util", "metadata/src/decorate/storage/createFunction"], function (require, exports, types_118, create_18, util_216, createFunction_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('createFunction', () => {
        const registry = new create_18.TypeRegistry();
        it('allows creating of known DoubleMap keys (with Bytes)', () => {
            const storageFn = createFunction_3.createFunction(registry, {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                meta: {
                    type: {
                        asDoubleMap: {
                            hasher: registry.createType('StorageHasher', 'Twox64Concat'),
                            key1: new types_118.Text(registry, 'Bytes'),
                            key2: new types_118.Text(registry, 'AccountId'),
                            key2Hasher: registry.createType('StorageHasher', 'Blake2_256'),
                            value: new types_118.Text(registry, 'SessionKeys5')
                        },
                        isDoubleMap: true
                    }
                },
                method: 'NextKeys',
                prefix: 'Session',
                section: 'session'
            }, { metaVersion: 9 });
            expect(util_216.u8aToHex(storageFn([
                // hex, without length prefix
                '0x3a73657373696f6e3a6b657973',
                // address
                'DB2mp5nNhbFN86J9hxoAog8JALMhDXgwvWMxrRMLNUFMEY4'
            ]))).toEqual('0x' +
                '5901' + // length
                'cec5070d609dd3497f72bde07fc96ba0' + // twox 128
                '4c014e6bf8b8c2c011e7290b85696bb3' + // twox 128
                '9fe6329cc0b39e09' + // twox 64
                '343a73657373696f6e3a6b657973' + // twox 64 (concat, with length)
                '5eb36b60f0fc4b9177116eba3e5cd57fea6289a57f5f5b9ffeb0475c66e7a521' // blake2
            );
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/getHasher.spec", ["require", "exports", "types/src/create/index", "@polkadot/util", "@polkadot/util-crypto", "metadata/src/decorate/storage/getHasher"], function (require, exports, create_19, util_217, util_crypto_15, getHasher_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('getHasher', () => {
        const registry = new create_19.TypeRegistry();
        describe('Twox64Concat', () => {
            it('matches the foo test from Rust', () => {
                const hasher = getHasher_2.getHasher(registry.createType('StorageHasher', 'Twox64Concat'));
                const hash = hasher('foo');
                const xxhash = util_crypto_15.xxhashAsU8a('foo', 128);
                expect([
                    hash.subarray(0, 8),
                    hash.subarray(8)
                ]).toEqual([
                    xxhash.subarray(0, 8),
                    util_217.stringToU8a('foo')
                ]);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/getStorage.spec", ["require", "exports", "types/src/create/index", "metadata/src/decorate/storage/getStorage"], function (require, exports, create_20, getStorage_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('getSorage', () => {
        const registry = new create_20.TypeRegistry();
        const storage = getStorage_2.getStorage(registry, 8);
        it('should return well known keys', () => {
            expect(typeof storage.substrate).toBe('object');
            expect(storage.substrate.changesTrieConfig).toBeTruthy();
            expect(storage.substrate.childStorageKeyPrefix).toBeTruthy();
            expect(storage.substrate.code).toBeTruthy();
            expect(storage.substrate.extrinsicIndex).toBeTruthy();
            expect(storage.substrate.heapPages).toBeTruthy();
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/decorate/storage/index.spec", ["require", "exports", "@polkadot/keyring/testingPairs", "types/src/create/index", "@polkadot/util", "metadata/src/index", "metadata/src/static", "metadata/src/decorate/index"], function (require, exports, testingPairs_5, create_21, util_218, __3, static_10, __4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_10 = __importDefault(static_10);
    const keyring = testingPairs_5.createTestPairs({ type: 'ed25519' });
    describe('decorateStorage', () => {
        describe('latest', () => {
            const registry = new create_21.TypeRegistry();
            const metadata = new __3.Metadata(registry, static_10.default);
            registry.setMetadata(metadata);
            const query = __4.decorateStorage(registry, metadata.asLatest, metadata.version);
            it('should throw if the storage function expects an argument', () => {
                expect(() => query.balances.account()).toThrowError(/requires one argument/);
            });
            it('should return a value if the storage function does not expect an argument', () => {
                expect(() => query.timestamp.now()).not.toThrow();
            });
            it('should return the correct length-prefixed storage key', () => {
                expect(util_218.u8aToHex(query.system.account(keyring.alice.address))).toEqual('0x410126aa394eea5630e07c48ae0c9558cef7b99d880ec681799c0cf30e8886371da9de1e86a9a8c739864cf3cc5ec2bea59fd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/testUtil", ["require", "exports", "types/src/primitive/StorageKey", "metadata/src/Metadata", "metadata/src/util/getUniqTypes"], function (require, exports, StorageKey_3, Metadata_8, getUniqTypes_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultValues = exports.toLatest = exports.decodeLatestSubstrate = void 0;
    /** @internal */
    function decodeLatestSubstrate(registry, version, rpcData, staticSubstrate) {
        it('decodes latest substrate properly', () => {
            const metadata = new Metadata_8.Metadata(registry, rpcData);
            registry.setMetadata(metadata);
            try {
                expect(metadata.version).toBe(version);
                expect(metadata[`asV${version}`].modules.length).not.toBe(0);
                expect(metadata.toJSON()).toEqual(staticSubstrate);
            }
            catch (error) {
                console.error(JSON.stringify(metadata.toJSON()));
                throw error;
            }
        });
    }
    exports.decodeLatestSubstrate = decodeLatestSubstrate;
    /** @internal */
    function toLatest(registry, version, rpcData, withThrow = true) {
        it(`converts v${version} to latest`, () => {
            const metadata = new Metadata_8.Metadata(registry, rpcData);
            registry.setMetadata(metadata);
            const metadataInit = metadata[`asV${version}`];
            const metadataLatest = metadata.asLatest;
            expect(getUniqTypes_2.getUniqTypes(registry, metadataInit, withThrow)).toEqual(getUniqTypes_2.getUniqTypes(registry, metadataLatest, withThrow));
        });
    }
    exports.toLatest = toLatest;
    /** @internal */
    function defaultValues(registry, rpcData, withThrow = true) {
        describe('storage with default values', () => {
            const metadata = new Metadata_8.Metadata(registry, rpcData);
            metadata.asLatest.modules.filter(({ storage }) => storage.isSome).forEach((mod) => {
                mod.storage.unwrap().items.forEach(({ fallback, name, type }) => {
                    const inner = StorageKey_3.unwrapStorageType(type);
                    const location = `${mod.name.toString()}.${name.toString()}: ${inner}`;
                    it(`creates default types for ${location}`, () => {
                        expect(() => {
                            try {
                                registry.createType(inner, fallback);
                            }
                            catch (error) {
                                const message = `${location}:: ${error.message}`;
                                if (withThrow) {
                                    throw new Error(message);
                                }
                                else {
                                    console.warn(message);
                                }
                            }
                        }).not.toThrow();
                    });
                });
            });
        });
    }
    exports.defaultValues = defaultValues;
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/util/toCallsOnly.spec", ["require", "exports", "types/src/create/index", "metadata/src/Metadata", "metadata/src/static"], function (require, exports, create_22, Metadata_9, static_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_11 = __importDefault(static_11);
    describe('toCallsOnly', () => {
        const registry = new create_22.TypeRegistry();
        it('creates a calls-only version of the  metadata', () => {
            const stripped = new Metadata_9.Metadata(registry, static_11.default).asCallsOnly;
            try {
                expect(stripped).toBeDefined();
            }
            catch (error) {
                console.error(JSON.stringify(stripped));
                throw error;
            }
        });
        it('can serialize from the input', () => {
            const s1 = new Metadata_9.Metadata(registry, static_11.default).asCallsOnly.toU8a();
            const s2 = new Metadata_9.Metadata(registry, s1).asCallsOnly.toU8a();
            expect(s1).toEqual(s2);
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v10/Metadata.spec", ["require", "exports", "types/src/create/index", "metadata/src/util/testUtil", "metadata/src/v10/static", "./static-substrate.json"], function (require, exports, create_23, testUtil_1, static_12, static_substrate_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_12 = __importDefault(static_12);
    static_substrate_json_1 = __importDefault(static_substrate_json_1);
    describe('MetadataV10 (substrate)', () => {
        const registry = new create_23.TypeRegistry();
        testUtil_1.decodeLatestSubstrate(registry, 10, static_12.default, static_substrate_json_1.default);
        testUtil_1.toLatest(registry, 10, static_12.default);
        testUtil_1.defaultValues(registry, static_12.default);
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v11/static", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = '0x6d6574610b801853797374656d011853797374656d3c1c4163636f756e7401010230543a3a4163636f756e744964944163636f756e74496e666f3c543a3a496e6465782c20543a3a4163636f756e74446174613e00150100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e8205468652066756c6c206163636f756e7420696e666f726d6174696f6e20666f72206120706172746963756c6172206163636f756e742049442e3845787472696e736963436f756e7400000c753332040004b820546f74616c2065787472696e7369637320636f756e7420666f72207468652063757272656e7420626c6f636b2e2c426c6f636b576569676874010064776569676874733a3a45787472696e7369637357656967687440000000000000000000000000000000000488205468652063757272656e742077656967687420666f722074686520626c6f636b2e40416c6c45787472696e736963734c656e00000c753332040004410120546f74616c206c656e6774682028696e2062797465732920666f7220616c6c2065787472696e736963732070757420746f6765746865722c20666f72207468652063757272656e7420626c6f636b2e24426c6f636b4861736801010538543a3a426c6f636b4e756d6265721c543a3a48617368008000000000000000000000000000000000000000000000000000000000000000000498204d6170206f6620626c6f636b206e756d6265727320746f20626c6f636b206861736865732e3445787472696e736963446174610101050c7533321c5665633c75383e000400043d012045787472696e73696373206461746120666f72207468652063757272656e7420626c6f636b20286d61707320616e2065787472696e736963277320696e64657820746f206974732064617461292e184e756d626572010038543a3a426c6f636b4e756d6265721000000000040901205468652063757272656e7420626c6f636b206e756d626572206265696e672070726f6365737365642e205365742062792060657865637574655f626c6f636b602e28506172656e744861736801001c543a3a4861736880000000000000000000000000000000000000000000000000000000000000000004702048617368206f66207468652070726576696f757320626c6f636b2e3845787472696e73696373526f6f7401001c543a3a486173688000000000000000000000000000000000000000000000000000000000000000000415012045787472696e7369637320726f6f74206f66207468652063757272656e7420626c6f636b2c20616c736f2070617274206f662074686520626c6f636b206865616465722e1844696765737401002c4469676573744f663c543e040004f020446967657374206f66207468652063757272656e7420626c6f636b2c20616c736f2070617274206f662074686520626c6f636b206865616465722e184576656e747301008c5665633c4576656e745265636f72643c543a3a4576656e742c20543a3a486173683e3e040004a0204576656e7473206465706f736974656420666f72207468652063757272656e7420626c6f636b2e284576656e74436f756e740100284576656e74496e646578100000000004b820546865206e756d626572206f66206576656e747320696e2074686520604576656e74733c543e60206c6973742e2c4576656e74546f706963730101021c543a3a48617368845665633c28543a3a426c6f636b4e756d6265722c204576656e74496e646578293e000400282501204d617070696e67206265747765656e206120746f7069632028726570726573656e74656420627920543a3a486173682920616e64206120766563746f72206f6620696e646578657394206f66206576656e747320696e2074686520603c4576656e74733c543e3e60206c6973742e00510120416c6c20746f70696320766563746f727320686176652064657465726d696e69737469632073746f72616765206c6f636174696f6e7320646570656e64696e67206f6e2074686520746f7069632e2054686973450120616c6c6f7773206c696768742d636c69656e747320746f206c6576657261676520746865206368616e67657320747269652073746f7261676520747261636b696e67206d656368616e69736d20616e64e420696e2063617365206f66206368616e67657320666574636820746865206c697374206f66206576656e7473206f6620696e7465726573742e004d01205468652076616c756520686173207468652074797065206028543a3a426c6f636b4e756d6265722c204576656e74496e646578296020626563617573652069662077652075736564206f6e6c79206a7573744d012074686520604576656e74496e64657860207468656e20696e20636173652069662074686520746f70696320686173207468652073616d6520636f6e74656e7473206f6e20746865206e65787420626c6f636b0101206e6f206e6f74696669636174696f6e2077696c6c20626520747269676765726564207468757320746865206576656e74206d69676874206265206c6f73742e484c61737452756e74696d65557067726164650000584c61737452756e74696d6555706772616465496e666f04000455012053746f726573207468652060737065635f76657273696f6e6020616e642060737065635f6e616d6560206f66207768656e20746865206c6173742072756e74696d6520757067726164652068617070656e65642e38457865637574696f6e50686173650000145068617365040004882054686520657865637574696f6e207068617365206f662074686520626c6f636b2e01282866696c6c5f626c6f636b04185f726174696f1c50657262696c6c040901204120646973706174636820746861742077696c6c2066696c6c2074686520626c6f636b2077656967687420757020746f2074686520676976656e20726174696f2e1872656d61726b041c5f72656d61726b1c5665633c75383e1c6c204d616b6520736f6d65206f6e2d636861696e2072656d61726b2e002c2023203c7765696768743e24202d20604f28312960e0202d2042617365205765696768743a20302e36363520c2b5732c20696e646570656e64656e74206f662072656d61726b206c656e6774682e50202d204e6f204442206f7065726174696f6e732e302023203c2f7765696768743e387365745f686561705f7061676573041470616765730c75363420fc2053657420746865206e756d626572206f6620706167657320696e2074686520576562417373656d626c7920656e7669726f6e6d656e74277320686561702e002c2023203c7765696768743e24202d20604f283129604c202d20312073746f726167652077726974652e64202d2042617365205765696768743a20312e34303520c2b57360202d203120777269746520746f20484541505f5041474553302023203c2f7765696768743e207365745f636f64650410636f64651c5665633c75383e28682053657420746865206e65772072756e74696d6520636f64652e002c2023203c7765696768743e3501202d20604f2843202b2053296020776865726520604360206c656e677468206f662060636f64656020616e642060536020636f6d706c6578697479206f66206063616e5f7365745f636f64656088202d20312073746f726167652077726974652028636f64656320604f28432960292e7901202d20312063616c6c20746f206063616e5f7365745f636f6465603a20604f28532960202863616c6c73206073705f696f3a3a6d6973633a3a72756e74696d655f76657273696f6e6020776869636820697320657870656e73697665292e2c202d2031206576656e742e7d012054686520776569676874206f6620746869732066756e6374696f6e20697320646570656e64656e74206f6e207468652072756e74696d652c206275742067656e6572616c6c792074686973206973207665727920657870656e736976652e902057652077696c6c207472656174207468697320617320612066756c6c20626c6f636b2e302023203c2f7765696768743e5c7365745f636f64655f776974686f75745f636865636b730410636f64651c5665633c75383e201d012053657420746865206e65772072756e74696d6520636f646520776974686f757420646f696e6720616e7920636865636b73206f662074686520676976656e2060636f6465602e002c2023203c7765696768743e90202d20604f2843296020776865726520604360206c656e677468206f662060636f64656088202d20312073746f726167652077726974652028636f64656320604f28432960292e2c202d2031206576656e742e75012054686520776569676874206f6620746869732066756e6374696f6e20697320646570656e64656e74206f6e207468652072756e74696d652e2057652077696c6c207472656174207468697320617320612066756c6c20626c6f636b2e302023203c2f7765696768743e5c7365745f6368616e6765735f747269655f636f6e666967044c6368616e6765735f747269655f636f6e666967804f7074696f6e3c4368616e67657354726965436f6e66696775726174696f6e3e28a02053657420746865206e6577206368616e676573207472696520636f6e66696775726174696f6e2e002c2023203c7765696768743e24202d20604f28312960b0202d20312073746f72616765207772697465206f722064656c6574652028636f64656320604f28312960292ed8202d20312063616c6c20746f20606465706f7369745f6c6f67603a20557365732060617070656e6460204150492c20736f204f28312964202d2042617365205765696768743a20372e32313820c2b57334202d204442205765696768743aa820202020202d205772697465733a204368616e67657320547269652c2053797374656d20446967657374302023203c2f7765696768743e2c7365745f73746f7261676504146974656d73345665633c4b657956616c75653e206c2053657420736f6d65206974656d73206f662073746f726167652e002c2023203c7765696768743e94202d20604f2849296020776865726520604960206c656e677468206f6620606974656d73607c202d206049602073746f72616765207772697465732028604f28312960292e74202d2042617365205765696768743a20302e353638202a206920c2b57368202d205772697465733a204e756d626572206f66206974656d73302023203c2f7765696768743e306b696c6c5f73746f7261676504106b657973205665633c4b65793e2078204b696c6c20736f6d65206974656d732066726f6d2073746f726167652e002c2023203c7765696768743efc202d20604f28494b296020776865726520604960206c656e677468206f6620606b6579736020616e6420604b60206c656e677468206f66206f6e65206b657964202d206049602073746f726167652064656c6574696f6e732e70202d2042617365205765696768743a202e333738202a206920c2b57368202d205772697465733a204e756d626572206f66206974656d73302023203c2f7765696768743e2c6b696c6c5f70726566697808187072656669780c4b6579205f7375626b6579730c7533322c1501204b696c6c20616c6c2073746f72616765206974656d7320776974682061206b657920746861742073746172747320776974682074686520676976656e207072656669782e003d01202a2a4e4f54453a2a2a2057652072656c79206f6e2074686520526f6f74206f726967696e20746f2070726f7669646520757320746865206e756d626572206f66207375626b65797320756e64657241012074686520707265666978207765206172652072656d6f76696e6720746f2061636375726174656c792063616c63756c6174652074686520776569676874206f6620746869732066756e6374696f6e2e002c2023203c7765696768743edc202d20604f285029602077686572652060506020616d6f756e74206f66206b65797320776974682070726566697820607072656669786064202d206050602073746f726167652064656c6574696f6e732e74202d2042617365205765696768743a20302e383334202a205020c2b57380202d205772697465733a204e756d626572206f66207375626b657973202b2031302023203c2f7765696768743e1c7375696369646500286501204b696c6c207468652073656e64696e67206163636f756e742c20617373756d696e6720746865726520617265206e6f207265666572656e636573206f75747374616e64696e6720616e642074686520636f6d706f7369746590206461746120697320657175616c20746f206974732064656661756c742076616c75652e002c2023203c7765696768743e24202d20604f283129607c202d20312073746f72616765207265616420616e642064656c6574696f6e2e54202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d5c2042617365205765696768743a20382e36323620c2b5731101204e6f2044422052656164206f72205772697465206f7065726174696f6e7320626563617573652063616c6c657220697320616c726561647920696e206f7665726c6179302023203c2f7765696768743e01144045787472696e7369635375636365737304304469737061746368496e666f04b020416e2065787472696e73696320636f6d706c65746564207375636365737366756c6c792e205b696e666f5d3c45787472696e7369634661696c6564083444697370617463684572726f72304469737061746368496e666f048c20416e2065787472696e736963206661696c65642e205b6572726f722c20696e666f5d2c436f64655570646174656400045420603a636f6465602077617320757064617465642e284e65774163636f756e7404244163636f756e74496404742041206e6577205b6163636f756e745d2077617320637265617465642e344b696c6c65644163636f756e7404244163636f756e744964046420416e205b6163636f756e745d20776173207265617065642e1838426c6f636b48617368436f756e7438543a3a426c6f636b4e756d626572106009000004d820546865206d6178696d756d206e756d626572206f6620626c6f636b7320746f20616c6c6f7720696e206d6f7274616c20657261732e484d6178696d756d426c6f636b576569676874185765696768742000204aa9d1010000047c20546865206d6178696d756d20776569676874206f66206120626c6f636b2e2044625765696768743c52756e74696d6544625765696768744040787d010000000000e1f505000000000409012054686520776569676874206f662072756e74696d65206461746162617365206f7065726174696f6e73207468652072756e74696d652063616e20696e766f6b652e50426c6f636b457865637574696f6e576569676874185765696768742000f2052a0100000004510120546865206261736520776569676874206f6620657865637574696e67206120626c6f636b2c20696e646570656e64656e74206f6620746865207472616e73616374696f6e7320696e2074686520626c6f636b2e4c45787472696e736963426173655765696768741857656967687420405973070000000004790120546865206261736520776569676874206f6620616e2045787472696e73696320696e2074686520626c6f636b2c20696e646570656e64656e74206f6620746865206f662065787472696e736963206265696e672065786563757465642e484d6178696d756d426c6f636b4c656e6774680c753332100000500004a820546865206d6178696d756d206c656e677468206f66206120626c6f636b2028696e206279746573292e143c496e76616c6964537065634e616d6508150120546865206e616d65206f662073706563696669636174696f6e20646f6573206e6f74206d61746368206265747765656e207468652063757272656e742072756e74696d655420616e6420746865206e65772072756e74696d652e685370656356657273696f6e4e65656473546f496e637265617365084501205468652073706563696669636174696f6e2076657273696f6e206973206e6f7420616c6c6f77656420746f206465637265617365206265747765656e207468652063757272656e742072756e74696d655420616e6420746865206e65772072756e74696d652e744661696c6564546f4578747261637452756e74696d6556657273696f6e0cf0204661696c656420746f2065787472616374207468652072756e74696d652076657273696f6e2066726f6d20746865206e65772072756e74696d652e000d01204569746865722063616c6c696e672060436f72655f76657273696f6e60206f72206465636f64696e67206052756e74696d6556657273696f6e60206661696c65642e4c4e6f6e44656661756c74436f6d706f7369746504010120537569636964652063616c6c6564207768656e20746865206163636f756e7420686173206e6f6e2d64656661756c7420636f6d706f7369746520646174612e3c4e6f6e5a65726f526566436f756e740439012054686572652069732061206e6f6e2d7a65726f207265666572656e636520636f756e742070726576656e74696e6720746865206163636f756e742066726f6d206265696e67207075726765642e1c5574696c697479000108146261746368041463616c6c735c5665633c3c542061732054726169743e3a3a43616c6c3e50802053656e642061206261746368206f662064697370617463682063616c6c732e007c204d61792062652063616c6c65642066726f6d20616e79206f726967696e2e00f0202d206063616c6c73603a205468652063616c6c7320746f20626520646973706174636865642066726f6d207468652073616d65206f726967696e2e006101204966206f726967696e20697320726f6f74207468656e2063616c6c2061726520646973706174636820776974686f757420636865636b696e67206f726967696e2066696c7465722e20285468697320696e636c75646573c820627970617373696e6720606672616d655f73797374656d3a3a54726169743a3a4261736543616c6c46696c74657260292e002c2023203c7765696768743e90202d2042617365207765696768743a2031342e3339202b202e393837202a206320c2b573b8202d20506c7573207468652073756d206f66207468652077656967687473206f6620746865206063616c6c73602ec4202d20506c7573206f6e65206164646974696f6e616c206576656e742e202872657065617420726561642f777269746529302023203c2f7765696768743e00590120546869732077696c6c2072657475726e20604f6b6020696e20616c6c2063697263756d7374616e6365732e20546f2064657465726d696e65207468652073756363657373206f66207468652062617463682c20616e3501206576656e74206973206465706f73697465642e20496620612063616c6c206661696c656420616e64207468652062617463682077617320696e7465727275707465642c207468656e20746865590120604261746368496e74657272757074656460206576656e74206973206465706f73697465642c20616c6f6e67207769746820746865206e756d626572206f66207375636365737366756c2063616c6c73206d616465510120616e6420746865206572726f72206f6620746865206661696c65642063616c6c2e20496620616c6c2077657265207375636365737366756c2c207468656e2074686520604261746368436f6d706c657465646050206576656e74206973206465706f73697465642e3461735f646572697661746976650814696e6465780c7531361063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e34e02053656e6420612063616c6c207468726f75676820616e20696e64657865642070736575646f6e796d206f66207468652073656e6465722e0059012046696c7465722066726f6d206f726967696e206172652070617373656420616c6f6e672e205468652063616c6c2077696c6c2062652064697370617463686564207769746820616e206f726967696e207768696368c020757365207468652073616d652066696c74657220617320746865206f726967696e206f6620746869732063616c6c2e004901204e4f54453a20496620796f75206e65656420746f20656e73757265207468617420616e79206163636f756e742d62617365642066696c746572696e67206973206e6f7420686f6e6f7265642028692e652e6501206265636175736520796f7520657870656374206070726f78796020746f2068617665206265656e2075736564207072696f7220696e207468652063616c6c20737461636b20616e6420796f7520646f206e6f742077616e745501207468652063616c6c207265737472696374696f6e7320746f206170706c7920746f20616e79207375622d6163636f756e7473292c207468656e20757365206061735f6d756c74695f7468726573686f6c645f31608020696e20746865204d756c74697369672070616c6c657420696e73746561642e00f8204e4f54453a205072696f7220746f2076657273696f6e202a31322c2074686973207761732063616c6c6564206061735f6c696d697465645f737562602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e0108404261746368496e746572727570746564080c7533323444697370617463684572726f72085901204261746368206f66206469737061746368657320646964206e6f7420636f6d706c6574652066756c6c792e20496e646578206f66206669727374206661696c696e6720646973706174636820676976656e2c206173882077656c6c20617320746865206572726f722e205b696e6465782c206572726f725d384261746368436f6d706c657465640004cc204261746368206f66206469737061746368657320636f6d706c657465642066756c6c792077697468206e6f206572726f722e000010426162650110426162652c2845706f6368496e64657801000c75363420000000000000000004542043757272656e742065706f636820696e6465782e2c417574686f72697469657301009c5665633c28417574686f7269747949642c2042616265417574686f72697479576569676874293e0400046c2043757272656e742065706f636820617574686f7269746965732e2c47656e65736973536c6f7401000c75363420000000000000000008f82054686520736c6f74206174207768696368207468652066697273742065706f63682061637475616c6c7920737461727465642e205468697320697320309020756e74696c2074686520666972737420626c6f636b206f662074686520636861696e2e2c43757272656e74536c6f7401000c75363420000000000000000004542043757272656e7420736c6f74206e756d6265722e2852616e646f6d6e6573730100587363686e6f72726b656c3a3a52616e646f6d6e65737380000000000000000000000000000000000000000000000000000000000000000028b8205468652065706f63682072616e646f6d6e65737320666f7220746865202a63757272656e742a2065706f63682e002c20232053656375726974790005012054686973204d555354204e4f54206265207573656420666f722067616d626c696e672c2061732069742063616e20626520696e666c75656e6365642062792061f8206d616c6963696f75732076616c696461746f7220696e207468652073686f7274207465726d2e204974204d4159206265207573656420696e206d616e7915012063727970746f677261706869632070726f746f636f6c732c20686f77657665722c20736f206c6f6e67206173206f6e652072656d656d6265727320746861742074686973150120286c696b652065766572797468696e6720656c7365206f6e2d636861696e29206974206973207075626c69632e20466f72206578616d706c652c2069742063616e206265050120757365642077686572652061206e756d626572206973206e656564656420746861742063616e6e6f742068617665206265656e2063686f73656e20627920616e0d01206164766572736172792c20666f7220707572706f7365732073756368206173207075626c69632d636f696e207a65726f2d6b6e6f776c656467652070726f6f66732e3c4e65787445706f6368436f6e6669670000504e657874436f6e66696744657363726970746f7204000498204e6578742065706f636820636f6e66696775726174696f6e2c206966206368616e6765642e384e65787452616e646f6d6e6573730100587363686e6f72726b656c3a3a52616e646f6d6e657373800000000000000000000000000000000000000000000000000000000000000000045c204e6578742065706f63682072616e646f6d6e6573732e305365676d656e74496e64657801000c7533321000000000247c2052616e646f6d6e65737320756e64657220636f6e737472756374696f6e2e00f4205765206d616b6520612074726164656f6666206265747765656e2073746f7261676520616363657373657320616e64206c697374206c656e6774682e01012057652073746f72652074686520756e6465722d636f6e737472756374696f6e2072616e646f6d6e65737320696e207365676d656e7473206f6620757020746f942060554e4445525f434f4e535452554354494f4e5f5345474d454e545f4c454e475448602e00ec204f6e63652061207365676d656e7420726561636865732074686973206c656e6774682c20776520626567696e20746865206e657874206f6e652e090120576520726573657420616c6c207365676d656e747320616e642072657475726e20746f206030602061742074686520626567696e6e696e67206f662065766572791c2065706f63682e44556e646572436f6e737472756374696f6e0101050c7533326c5665633c7363686e6f72726b656c3a3a52616e646f6d6e6573733e0004000415012054574f582d4e4f54453a20605365676d656e74496e6465786020697320616e20696e6372656173696e6720696e74656765722c20736f2074686973206973206f6b61792e2c496e697469616c697a656400003c4d6179626552616e646f6d6e65737304000801012054656d706f726172792076616c75652028636c656172656420617420626c6f636b2066696e616c697a6174696f6e292077686963682069732060536f6d65601d01206966207065722d626c6f636b20696e697469616c697a6174696f6e2068617320616c7265616479206265656e2063616c6c656420666f722063757272656e7420626c6f636b2e204c6174656e657373010038543a3a426c6f636b4e756d626572100000000014d820486f77206c617465207468652063757272656e7420626c6f636b20697320636f6d706172656420746f2069747320706172656e742e001501205468697320656e74727920697320706f70756c617465642061732070617274206f6620626c6f636b20657865637574696f6e20616e6420697320636c65616e65642075701101206f6e20626c6f636b2066696e616c697a6174696f6e2e205175657279696e6720746869732073746f7261676520656e747279206f757473696465206f6620626c6f636bb020657865637574696f6e20636f6e746578742073686f756c6420616c77617973207969656c64207a65726f2e01084c7265706f72745f65717569766f636174696f6e084865717569766f636174696f6e5f70726f6f667045717569766f636174696f6e50726f6f663c543a3a4865616465723e3c6b65795f6f776e65725f70726f6f6640543a3a4b65794f776e657250726f6f66100d01205265706f727420617574686f726974792065717569766f636174696f6e2f6d69736265686176696f722e2054686973206d6574686f642077696c6c207665726966790901207468652065717569766f636174696f6e2070726f6f6620616e642076616c69646174652074686520676976656e206b6579206f776e6572736869702070726f6f66110120616761696e73742074686520657874726163746564206f6666656e6465722e20496620626f7468206172652076616c69642c20746865206f6666656e63652077696c6c34206265207265706f727465642e707265706f72745f65717569766f636174696f6e5f756e7369676e6564084865717569766f636174696f6e5f70726f6f667045717569766f636174696f6e50726f6f663c543a3a4865616465723e3c6b65795f6f776e65725f70726f6f6640543a3a4b65794f776e657250726f6f66200d01205265706f727420617574686f726974792065717569766f636174696f6e2f6d69736265686176696f722e2054686973206d6574686f642077696c6c207665726966790901207468652065717569766f636174696f6e2070726f6f6620616e642076616c69646174652074686520676976656e206b6579206f776e6572736869702070726f6f66110120616761696e73742074686520657874726163746564206f6666656e6465722e20496620626f7468206172652076616c69642c20746865206f6666656e63652077696c6c34206265207265706f727465642e110120546869732065787472696e736963206d7573742062652063616c6c656420756e7369676e656420616e642069742069732065787065637465642074686174206f6e6c79190120626c6f636b20617574686f72732077696c6c2063616c6c206974202876616c69646174656420696e206056616c6964617465556e7369676e656460292c206173207375636819012069662074686520626c6f636b20617574686f7220697320646566696e65642069742077696c6c20626520646566696e6564206173207468652065717569766f636174696f6e28207265706f727465722e00083445706f63684475726174696f6e0c75363420c800000000000000080d0120546865206e756d626572206f66202a2a736c6f74732a2a207468617420616e2065706f63682074616b65732e20576520636f75706c652073657373696f6e7320746ffc2065706f6368732c20692e652e2077652073746172742061206e65772073657373696f6e206f6e636520746865206e65772065706f636820626567696e732e444578706563746564426c6f636b54696d6524543a3a4d6f6d656e7420b80b00000000000014050120546865206578706563746564206176657261676520626c6f636b2074696d6520617420776869636820424142452073686f756c64206265206372656174696e67110120626c6f636b732e2053696e636520424142452069732070726f626162696c6973746963206974206973206e6f74207472697669616c20746f20666967757265206f75740501207768617420746865206578706563746564206176657261676520626c6f636b2074696d652073686f756c64206265206261736564206f6e2074686520736c6f740901206475726174696f6e20616e642074686520736563757269747920706172616d657465722060636020287768657265206031202d20636020726570726573656e7473a0207468652070726f626162696c697479206f66206120736c6f74206265696e6720656d707479292e002454696d657374616d70012454696d657374616d70080c4e6f77010024543a3a4d6f6d656e7420000000000000000004902043757272656e742074696d6520666f72207468652063757272656e7420626c6f636b2e24446964557064617465010010626f6f6c040004b420446964207468652074696d657374616d7020676574207570646174656420696e207468697320626c6f636b3f01040c736574040c6e6f7748436f6d706163743c543a3a4d6f6d656e743e3c5820536574207468652063757272656e742074696d652e00590120546869732063616c6c2073686f756c6420626520696e766f6b65642065786163746c79206f6e63652070657220626c6f636b2e2049742077696c6c2070616e6963206174207468652066696e616c697a6174696f6ed82070686173652c20696620746869732063616c6c206861736e2774206265656e20696e766f6b656420627920746861742074696d652e004501205468652074696d657374616d702073686f756c642062652067726561746572207468616e207468652070726576696f7573206f6e652062792074686520616d6f756e74207370656369666965642062794420604d696e696d756d506572696f64602e00d820546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652060496e686572656e74602e002c2023203c7765696768743ed0202d20604f285429602077686572652060546020636f6d706c6578697479206f6620606f6e5f74696d657374616d705f73657460a101202d20312073746f72616765207265616420616e6420312073746f72616765206d75746174696f6e2028636f64656320604f28312960292e202862656361757365206f6620604469645570646174653a3a74616b656020696e20606f6e5f66696e616c697a656029b4202d2031206576656e742068616e646c657220606f6e5f74696d657374616d705f7365746020604f285429602e302023203c2f7765696768743e0004344d696e696d756d506572696f6424543a3a4d6f6d656e7420dc0500000000000010690120546865206d696e696d756d20706572696f64206265747765656e20626c6f636b732e204265776172652074686174207468697320697320646966666572656e7420746f20746865202a65787065637465642a20706572696f64690120746861742074686520626c6f636b2070726f64756374696f6e206170706172617475732070726f76696465732e20596f75722063686f73656e20636f6e73656e7375732073797374656d2077696c6c2067656e6572616c6c79650120776f726b2077697468207468697320746f2064657465726d696e6520612073656e7369626c6520626c6f636b2074696d652e20652e672e20466f7220417572612c2069742077696c6c20626520646f75626c6520746869737020706572696f64206f6e2064656661756c742073657474696e67732e0028417574686f72736869700128417574686f72736869700c18556e636c65730100e85665633c556e636c65456e7472794974656d3c543a3a426c6f636b4e756d6265722c20543a3a486173682c20543a3a4163636f756e7449643e3e0400041c20556e636c657318417574686f72000030543a3a4163636f756e7449640400046420417574686f72206f662063757272656e7420626c6f636b2e30446964536574556e636c6573010010626f6f6c040004bc205768657468657220756e636c6573207765726520616c72656164792073657420696e207468697320626c6f636b2e0104287365745f756e636c657304286e65775f756e636c6573385665633c543a3a4865616465723e04642050726f76696465206120736574206f6620756e636c65732e00001c48496e76616c6964556e636c65506172656e74048c2054686520756e636c6520706172656e74206e6f7420696e2074686520636861696e2e40556e636c6573416c7265616479536574048420556e636c657320616c72656164792073657420696e2074686520626c6f636b2e34546f6f4d616e79556e636c6573044420546f6f206d616e7920756e636c65732e3047656e65736973556e636c6504582054686520756e636c652069732067656e657369732e30546f6f48696768556e636c6504802054686520756e636c6520697320746f6f206869676820696e20636861696e2e50556e636c65416c7265616479496e636c75646564047c2054686520756e636c6520697320616c726561647920696e636c756465642e204f6c64556e636c6504b82054686520756e636c652069736e277420726563656e7420656e6f75676820746f20626520696e636c756465642e1c496e6469636573011c496e646963657304204163636f756e74730001023c543a3a4163636f756e74496e6465788828543a3a4163636f756e7449642c2042616c616e63654f663c543e2c20626f6f6c29000400048820546865206c6f6f6b75702066726f6d20696e64657820746f206163636f756e742e011414636c61696d0414696e6465783c543a3a4163636f756e74496e6465784c9c2041737369676e20616e2070726576696f75736c7920756e61737369676e656420696e6465782e00e0205061796d656e743a20604465706f736974602069732072657365727665642066726f6d207468652073656e646572206163636f756e742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e00f4202d2060696e646578603a2074686520696e64657820746f20626520636c61696d65642e2054686973206d757374206e6f7420626520696e207573652e009420456d6974732060496e64657841737369676e656460206966207375636365737366756c2e002c2023203c7765696768743e28202d20604f283129602e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28312960292e64202d204f6e652072657365727665206f7065726174696f6e2e34202d204f6e65206576656e742e50202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d64202d2042617365205765696768743a2032382e363920c2b57394202d204442205765696768743a203120526561642f577269746520284163636f756e747329302023203c2f7765696768743e207472616e73666572080c6e657730543a3a4163636f756e74496414696e6465783c543a3a4163636f756e74496e6465785461012041737369676e20616e20696e64657820616c7265616479206f776e6564206279207468652073656e64657220746f20616e6f74686572206163636f756e742e205468652062616c616e6365207265736572766174696f6ebc206973206566666563746976656c79207472616e7366657272656420746f20746865206e6577206163636f756e742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002901202d2060696e646578603a2074686520696e64657820746f2062652072652d61737369676e65642e2054686973206d757374206265206f776e6564206279207468652073656e6465722e6101202d20606e6577603a20746865206e6577206f776e6572206f662074686520696e6465782e20546869732066756e6374696f6e2069732061206e6f2d6f7020696620697420697320657175616c20746f2073656e6465722e009420456d6974732060496e64657841737369676e656460206966207375636365737366756c2e002c2023203c7765696768743e28202d20604f283129602e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28312960292e68202d204f6e65207472616e73666572206f7065726174696f6e2e34202d204f6e65206576656e742e50202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d64202d2042617365205765696768743a2033332e373420c2b57334202d204442205765696768743ae4202020202d2052656164733a20496e6469636573204163636f756e74732c2053797374656d204163636f756e742028726563697069656e7429e8202020202d205772697465733a20496e6469636573204163636f756e74732c2053797374656d204163636f756e742028726563697069656e7429302023203c2f7765696768743e10667265650414696e6465783c543a3a4163636f756e74496e6465784c98204672656520757020616e20696e646578206f776e6564206279207468652073656e6465722e006101205061796d656e743a20416e792070726576696f7573206465706f73697420706c6163656420666f722074686520696e64657820697320756e726573657276656420696e207468652073656e646572206163636f756e742e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d757374206f776e2074686520696e6465782e001101202d2060696e646578603a2074686520696e64657820746f2062652066726565642e2054686973206d757374206265206f776e6564206279207468652073656e6465722e008820456d6974732060496e646578467265656460206966207375636365737366756c2e002c2023203c7765696768743e28202d20604f283129602e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28312960292e64202d204f6e652072657365727665206f7065726174696f6e2e34202d204f6e65206576656e742e50202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d64202d2042617365205765696768743a2032352e353320c2b57394202d204442205765696768743a203120526561642f577269746520284163636f756e747329302023203c2f7765696768743e38666f7263655f7472616e736665720c0c6e657730543a3a4163636f756e74496414696e6465783c543a3a4163636f756e74496e64657818667265657a6510626f6f6c58590120466f72636520616e20696e64657820746f20616e206163636f756e742e205468697320646f65736e277420726571756972652061206465706f7369742e2049662074686520696e64657820697320616c7265616479ec2068656c642c207468656e20616e79206465706f736974206973207265696d62757273656420746f206974732063757272656e74206f776e65722e00c820546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f526f6f745f2e00a8202d2060696e646578603a2074686520696e64657820746f206265202872652d2961737369676e65642e6101202d20606e6577603a20746865206e6577206f776e6572206f662074686520696e6465782e20546869732066756e6374696f6e2069732061206e6f2d6f7020696620697420697320657175616c20746f2073656e6465722e4501202d2060667265657a65603a2069662073657420746f206074727565602c2077696c6c20667265657a652074686520696e64657820736f2069742063616e6e6f74206265207472616e736665727265642e009420456d6974732060496e64657841737369676e656460206966207375636365737366756c2e002c2023203c7765696768743e28202d20604f283129602e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28312960292e7c202d20557020746f206f6e652072657365727665206f7065726174696f6e2e34202d204f6e65206576656e742e50202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d64202d2042617365205765696768743a2032362e383320c2b57334202d204442205765696768743af8202020202d2052656164733a20496e6469636573204163636f756e74732c2053797374656d204163636f756e7420286f726967696e616c206f776e657229fc202020202d205772697465733a20496e6469636573204163636f756e74732c2053797374656d204163636f756e7420286f726967696e616c206f776e657229302023203c2f7765696768743e18667265657a650414696e6465783c543a3a4163636f756e74496e64657848690120467265657a6520616e20696e64657820736f2069742077696c6c20616c7761797320706f696e7420746f207468652073656e646572206163636f756e742e205468697320636f6e73756d657320746865206465706f7369742e005d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e6420746865207369676e696e67206163636f756e74206d7573742068617665206170206e6f6e2d66726f7a656e206163636f756e742060696e646578602e00b0202d2060696e646578603a2074686520696e64657820746f2062652066726f7a656e20696e20706c6163652e008c20456d6974732060496e64657846726f7a656e60206966207375636365737366756c2e002c2023203c7765696768743e28202d20604f283129602e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28312960292e74202d20557020746f206f6e6520736c617368206f7065726174696f6e2e34202d204f6e65206576656e742e50202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d64202d2042617365205765696768743a2033302e383620c2b57394202d204442205765696768743a203120526561642f577269746520284163636f756e747329302023203c2f7765696768743e010c34496e64657841737369676e656408244163636f756e744964304163636f756e74496e64657804ac2041206163636f756e7420696e646578207761732061737369676e65642e205b77686f2c20696e6465785d28496e646578467265656404304163636f756e74496e64657804e02041206163636f756e7420696e64657820686173206265656e2066726565642075702028756e61737369676e6564292e205b696e6465785d2c496e64657846726f7a656e08304163636f756e74496e646578244163636f756e7449640421012041206163636f756e7420696e64657820686173206265656e2066726f7a656e20746f206974732063757272656e74206163636f756e742049442e205b77686f2c20696e6465785d041c4465706f7369743042616c616e63654f663c543e4000407a10f35a0000000000000000000004ac20546865206465706f736974206e656564656420666f7220726573657276696e6720616e20696e6465782e002042616c616e636573012042616c616e6365731034546f74616c49737375616e6365010028543a3a42616c616e6365400000000000000000000000000000000004982054686520746f74616c20756e6974732069737375656420696e207468652073797374656d2e1c4163636f756e7401010230543a3a4163636f756e7449645c4163636f756e74446174613c543a3a42616c616e63653e000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c6c205468652062616c616e6365206f6620616e206163636f756e742e004101204e4f54453a2054686973206973206f6e6c79207573656420696e20746865206361736520746861742074686973206d6f64756c65206973207573656420746f2073746f72652062616c616e6365732e144c6f636b7301010230543a3a4163636f756e744964705665633c42616c616e63654c6f636b3c543a3a42616c616e63653e3e00040008b820416e79206c6971756964697479206c6f636b73206f6e20736f6d65206163636f756e742062616c616e6365732e2501204e4f54453a2053686f756c64206f6e6c79206265206163636573736564207768656e2073657474696e672c206368616e67696e6720616e642066726565696e672061206c6f636b2e3853746f7261676556657273696f6e01002052656c656173657304000c7c2053746f726167652076657273696f6e206f66207468652070616c6c65742e00a020546869732069732073657420746f2076322e302e3020666f72206e6577206e6574776f726b732e0110207472616e736665720810646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c75654c436f6d706163743c543a3a42616c616e63653e6cd8205472616e7366657220736f6d65206c697175696420667265652062616c616e636520746f20616e6f74686572206163636f756e742e00090120607472616e73666572602077696c6c207365742074686520604672656542616c616e636560206f66207468652073656e64657220616e642072656365697665722e21012049742077696c6c2064656372656173652074686520746f74616c2069737375616e6365206f66207468652073797374656d2062792074686520605472616e73666572466565602e1501204966207468652073656e6465722773206163636f756e742069732062656c6f7720746865206578697374656e7469616c206465706f736974206173206120726573756c74b4206f6620746865207472616e736665722c20746865206163636f756e742077696c6c206265207265617065642e00190120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d75737420626520605369676e65646020627920746865207472616e736163746f722e002c2023203c7765696768743e3101202d20446570656e64656e74206f6e20617267756d656e747320627574206e6f7420637269746963616c2c20676976656e2070726f70657220696d706c656d656e746174696f6e7320666f72cc202020696e70757420636f6e6669672074797065732e205365652072656c617465642066756e6374696f6e732062656c6f772e6901202d20497420636f6e7461696e732061206c696d69746564206e756d626572206f6620726561647320616e642077726974657320696e7465726e616c6c7920616e64206e6f20636f6d706c657820636f6d7075746174696f6e2e004c2052656c617465642066756e6374696f6e733a0051012020202d2060656e737572655f63616e5f77697468647261776020697320616c776179732063616c6c656420696e7465726e616c6c792062757420686173206120626f756e64656420636f6d706c65786974792e2d012020202d205472616e7366657272696e672062616c616e63657320746f206163636f756e7473207468617420646964206e6f74206578697374206265666f72652077696c6c206361757365d420202020202060543a3a4f6e4e65774163636f756e743a3a6f6e5f6e65775f6163636f756e746020746f2062652063616c6c65642e61012020202d2052656d6f76696e6720656e6f7567682066756e64732066726f6d20616e206163636f756e742077696c6c20747269676765722060543a3a4475737452656d6f76616c3a3a6f6e5f756e62616c616e636564602e49012020202d20607472616e736665725f6b6565705f616c6976656020776f726b73207468652073616d652077617920617320607472616e73666572602c206275742068617320616e206164646974696f6e616cf82020202020636865636b207468617420746865207472616e736665722077696c6c206e6f74206b696c6c20746865206f726967696e206163636f756e742e88202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d4501202d2042617365205765696768743a2037332e363420c2b5732c20776f7273742063617365207363656e6172696f20286163636f756e7420637265617465642c206163636f756e742072656d6f76656429dc202d204442205765696768743a2031205265616420616e64203120577269746520746f2064657374696e6174696f6e206163636f756e741501202d204f726967696e206163636f756e7420697320616c726561647920696e206d656d6f72792c20736f206e6f204442206f7065726174696f6e7320666f72207468656d2e302023203c2f7765696768743e2c7365745f62616c616e63650c0c77686f8c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365206e65775f667265654c436f6d706163743c543a3a42616c616e63653e306e65775f72657365727665644c436f6d706163743c543a3a42616c616e63653e489420536574207468652062616c616e636573206f66206120676976656e206163636f756e742e00210120546869732077696c6c20616c74657220604672656542616c616e63656020616e642060526573657276656442616c616e63656020696e2073746f726167652e2069742077696c6c090120616c736f2064656372656173652074686520746f74616c2069737375616e6365206f66207468652073797374656d202860546f74616c49737375616e636560292e190120496620746865206e65772066726565206f722072657365727665642062616c616e63652069732062656c6f7720746865206578697374656e7469616c206465706f7369742c01012069742077696c6c20726573657420746865206163636f756e74206e6f6e63652028606672616d655f73797374656d3a3a4163636f756e744e6f6e636560292e00b420546865206469737061746368206f726967696e20666f7220746869732063616c6c2069732060726f6f74602e002c2023203c7765696768743e80202d20496e646570656e64656e74206f662074686520617267756d656e74732ec4202d20436f6e7461696e732061206c696d69746564206e756d626572206f6620726561647320616e64207772697465732e58202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3c202d2042617365205765696768743a6820202020202d204372656174696e673a2032372e353620c2b5736420202020202d204b696c6c696e673a2033352e313120c2b57398202d204442205765696768743a203120526561642c203120577269746520746f206077686f60302023203c2f7765696768743e38666f7263655f7472616e736665720c18736f757263658c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f7572636510646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c75654c436f6d706163743c543a3a42616c616e63653e1851012045786163746c7920617320607472616e73666572602c2065786365707420746865206f726967696e206d75737420626520726f6f7420616e642074686520736f75726365206163636f756e74206d61792062652c207370656369666965642e2c2023203c7765696768743e4101202d2053616d65206173207472616e736665722c20627574206164646974696f6e616c207265616420616e6420777269746520626563617573652074686520736f75726365206163636f756e74206973902020206e6f7420617373756d656420746f20626520696e20746865206f7665726c61792e302023203c2f7765696768743e4c7472616e736665725f6b6565705f616c6976650810646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c75654c436f6d706163743c543a3a42616c616e63653e2c51012053616d6520617320746865205b607472616e73666572605d2063616c6c2c206275742077697468206120636865636b207468617420746865207472616e736665722077696c6c206e6f74206b696c6c2074686540206f726967696e206163636f756e742e00bc20393925206f66207468652074696d6520796f752077616e74205b607472616e73666572605d20696e73746561642e00c4205b607472616e73666572605d3a207374727563742e4d6f64756c652e68746d6c236d6574686f642e7472616e736665722c2023203c7765696768743ee8202d2043686561706572207468616e207472616e736665722062656361757365206163636f756e742063616e6e6f74206265206b696c6c65642e60202d2042617365205765696768743a2035312e3420c2b5731d01202d204442205765696768743a2031205265616420616e64203120577269746520746f2064657374202873656e64657220697320696e206f7665726c617920616c7265616479292c20233c2f7765696768743e01201c456e646f77656408244163636f756e7449641c42616c616e6365041d0120416e206163636f756e74207761732063726561746564207769746820736f6d6520667265652062616c616e63652e205b6163636f756e742c20667265655f62616c616e63655d20447573744c6f737408244163636f756e7449641c42616c616e636508410120416e206163636f756e74207761732072656d6f7665642077686f73652062616c616e636520776173206e6f6e2d7a65726f206275742062656c6f77204578697374656e7469616c4465706f7369742cc820726573756c74696e6720696e20616e206f75747269676874206c6f73732e205b6163636f756e742c2062616c616e63655d205472616e736665720c244163636f756e744964244163636f756e7449641c42616c616e63650498205472616e73666572207375636365656465642e205b66726f6d2c20746f2c2076616c75655d2842616c616e63655365740c244163636f756e7449641c42616c616e63651c42616c616e636504c420412062616c616e6365207761732073657420627920726f6f742e205b77686f2c20667265652c2072657365727665645d1c4465706f73697408244163636f756e7449641c42616c616e636504190120536f6d6520616d6f756e7420776173206465706f73697465642028652e672e20666f72207472616e73616374696f6e2066656573292e205b77686f2c206465706f7369745d20526573657276656408244163636f756e7449641c42616c616e636504190120536f6d652062616c616e63652077617320726573657276656420286d6f7665642066726f6d206672656520746f207265736572766564292e205b77686f2c2076616c75655d28556e726573657276656408244163636f756e7449641c42616c616e636504210120536f6d652062616c616e63652077617320756e726573657276656420286d6f7665642066726f6d20726573657276656420746f2066726565292e205b77686f2c2076616c75655d4852657365727665526570617472696174656410244163636f756e744964244163636f756e7449641c42616c616e6365185374617475730c510120536f6d652062616c616e636520776173206d6f7665642066726f6d207468652072657365727665206f6620746865206669727374206163636f756e7420746f20746865207365636f6e64206163636f756e742edc2046696e616c20617267756d656e7420696e64696361746573207468652064657374696e6174696f6e2062616c616e636520747970652ea0205b66726f6d2c20746f2c2062616c616e63652c2064657374696e6174696f6e5f7374617475735d04484578697374656e7469616c4465706f73697428543a3a42616c616e63654000407a10f35a0000000000000000000004d420546865206d696e696d756d20616d6f756e7420726571756972656420746f206b65657020616e206163636f756e74206f70656e2e203856657374696e6742616c616e6365049c2056657374696e672062616c616e636520746f6f206869676820746f2073656e642076616c7565544c69717569646974795265737472696374696f6e7304c8204163636f756e74206c6971756964697479207265737472696374696f6e732070726576656e74207769746864726177616c204f766572666c6f77047420476f7420616e206f766572666c6f7720616674657220616464696e674c496e73756666696369656e7442616c616e636504782042616c616e636520746f6f206c6f7720746f2073656e642076616c7565484578697374656e7469616c4465706f73697404ec2056616c756520746f6f206c6f7720746f20637265617465206163636f756e742064756520746f206578697374656e7469616c206465706f736974244b656570416c6976650490205472616e736665722f7061796d656e7420776f756c64206b696c6c206163636f756e745c4578697374696e6756657374696e675363686564756c6504cc20412076657374696e67207363686564756c6520616c72656164792065786973747320666f722074686973206163636f756e742c446561644163636f756e74048c2042656e6566696369617279206163636f756e74206d757374207072652d6578697374485472616e73616374696f6e5061796d656e7401485472616e73616374696f6e5061796d656e7408444e6578744665654d756c7469706c6965720100284d756c7469706c69657240000064a7b3b6e00d0000000000000000003853746f7261676556657273696f6e01002052656c6561736573040000000008485472616e73616374696f6e427974654665653042616c616e63654f663c543e4000e40b54020000000000000000000000040d01205468652066656520746f206265207061696420666f72206d616b696e672061207472616e73616374696f6e3b20746865207065722d6279746520706f7274696f6e2e2c576569676874546f466565a45665633c576569676874546f466565436f656666696369656e743c42616c616e63654f663c543e3e3e5c0401000000000000000000000000000000000000000001040d012054686520706f6c796e6f6d69616c2074686174206973206170706c69656420696e206f7264657220746f20646572697665206665652066726f6d207765696768742e001c5374616b696e67011c5374616b696e678c30486973746f7279446570746801000c75333210540000001c8c204e756d626572206f66206572617320746f206b65657020696e20686973746f72792e00390120496e666f726d6174696f6e206973206b65707420666f72206572617320696e20605b63757272656e745f657261202d20686973746f72795f64657074683b2063757272656e745f6572615d602e006101204d757374206265206d6f7265207468616e20746865206e756d626572206f6620657261732064656c617965642062792073657373696f6e206f74686572776973652e20492e652e2061637469766520657261206d757374390120616c7761797320626520696e20686973746f72792e20492e652e20606163746976655f657261203e2063757272656e745f657261202d20686973746f72795f646570746860206d757374206265302067756172616e746565642e3856616c696461746f72436f756e7401000c753332100000000004a82054686520696465616c206e756d626572206f66207374616b696e67207061727469636970616e74732e544d696e696d756d56616c696461746f72436f756e7401000c7533321000000000044101204d696e696d756d206e756d626572206f66207374616b696e67207061727469636970616e7473206265666f726520656d657267656e637920636f6e646974696f6e732061726520696d706f7365642e34496e76756c6e657261626c65730100445665633c543a3a4163636f756e7449643e04000c590120416e792076616c696461746f72732074686174206d6179206e6576657220626520736c6173686564206f7220666f726369626c79206b69636b65642e20497427732061205665632073696e636520746865792772654d01206561737920746f20696e697469616c697a6520616e642074686520706572666f726d616e636520686974206973206d696e696d616c2028776520657870656374206e6f206d6f7265207468616e20666f7572ac20696e76756c6e657261626c65732920616e64207265737472696374656420746f20746573746e6574732e18426f6e64656400010530543a3a4163636f756e74496430543a3a4163636f756e744964000400040101204d61702066726f6d20616c6c206c6f636b65642022737461736822206163636f756e747320746f2074686520636f6e74726f6c6c6572206163636f756e742e184c656467657200010230543a3a4163636f756e744964a45374616b696e674c65646765723c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e000400044501204d61702066726f6d20616c6c2028756e6c6f636b6564292022636f6e74726f6c6c657222206163636f756e747320746f2074686520696e666f20726567617264696e6720746865207374616b696e672e14506179656501010530543a3a4163636f756e7449647c52657761726444657374696e6174696f6e3c543a3a4163636f756e7449643e00040004e42057686572652074686520726577617264207061796d656e742073686f756c64206265206d6164652e204b657965642062792073746173682e2856616c696461746f727301010530543a3a4163636f756e7449643856616c696461746f72507265667300040004450120546865206d61702066726f6d202877616e6e616265292076616c696461746f72207374617368206b657920746f2074686520707265666572656e636573206f6620746861742076616c696461746f722e284e6f6d696e61746f727300010530543a3a4163636f756e744964644e6f6d696e6174696f6e733c543a3a4163636f756e7449643e00040004650120546865206d61702066726f6d206e6f6d696e61746f72207374617368206b657920746f2074686520736574206f66207374617368206b657973206f6620616c6c2076616c696461746f727320746f206e6f6d696e6174652e2843757272656e74457261000020457261496e6465780400105c205468652063757272656e742065726120696e6465782e006501205468697320697320746865206c617465737420706c616e6e6564206572612c20646570656e64696e67206f6e20686f77207468652053657373696f6e2070616c6c657420717565756573207468652076616c696461746f7280207365742c206974206d6967687420626520616374697665206f72206e6f742e24416374697665457261000034416374697665457261496e666f040010d820546865206163746976652065726120696e666f726d6174696f6e2c20697420686f6c647320696e64657820616e642073746172742e00b820546865206163746976652065726120697320746865206572612063757272656e746c792072657761726465642e2d012056616c696461746f7220736574206f66207468697320657261206d75737420626520657175616c20746f206053657373696f6e496e746572666163653a3a76616c696461746f7273602e5445726173537461727453657373696f6e496e64657800010520457261496e6465783053657373696f6e496e646578000400043101205468652073657373696f6e20696e646578206174207768696368207468652065726120737461727420666f7220746865206c6173742060484953544f52595f44455054486020657261732e2c457261735374616b65727301020520457261496e64657830543a3a4163636f756e744964904578706f737572653c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e050c0000001878204578706f73757265206f662076616c696461746f72206174206572612e0061012054686973206973206b65796564206669727374206279207468652065726120696e64657820746f20616c6c6f772062756c6b2064656c6574696f6e20616e64207468656e20746865207374617368206163636f756e742e00a82049732069742072656d6f7665642061667465722060484953544f52595f44455054486020657261732e4101204966207374616b657273206861736e2774206265656e20736574206f7220686173206265656e2072656d6f766564207468656e20656d707479206578706f737572652069732072657475726e65642e48457261735374616b657273436c697070656401020520457261496e64657830543a3a4163636f756e744964904578706f737572653c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e050c0000002c9820436c6970706564204578706f73757265206f662076616c696461746f72206174206572612e00590120546869732069732073696d696c617220746f205b60457261735374616b657273605d20627574206e756d626572206f66206e6f6d696e61746f7273206578706f736564206973207265647563656420746f20746865dc2060543a3a4d61784e6f6d696e61746f72526577617264656450657256616c696461746f72602062696767657374207374616b6572732e1d0120284e6f74653a20746865206669656c642060746f74616c6020616e6420606f776e60206f6620746865206578706f737572652072656d61696e7320756e6368616e676564292ef42054686973206973207573656420746f206c696d69742074686520692f6f20636f737420666f7220746865206e6f6d696e61746f72207061796f75742e005d012054686973206973206b657965642066697374206279207468652065726120696e64657820746f20616c6c6f772062756c6b2064656c6574696f6e20616e64207468656e20746865207374617368206163636f756e742e00a82049732069742072656d6f7665642061667465722060484953544f52595f44455054486020657261732e4101204966207374616b657273206861736e2774206265656e20736574206f7220686173206265656e2072656d6f766564207468656e20656d707479206578706f737572652069732072657475726e65642e484572617356616c696461746f72507265667301020520457261496e64657830543a3a4163636f756e7449643856616c696461746f7250726566730504001411012053696d696c617220746f2060457261735374616b657273602c207468697320686f6c64732074686520707265666572656e636573206f662076616c696461746f72732e0061012054686973206973206b65796564206669727374206279207468652065726120696e64657820746f20616c6c6f772062756c6b2064656c6574696f6e20616e64207468656e20746865207374617368206163636f756e742e00a82049732069742072656d6f7665642061667465722060484953544f52595f44455054486020657261732e4c4572617356616c696461746f7252657761726400010520457261496e6465783042616c616e63654f663c543e0004000c09012054686520746f74616c2076616c696461746f7220657261207061796f757420666f7220746865206c6173742060484953544f52595f44455054486020657261732e0021012045726173207468617420686176656e27742066696e697368656420796574206f7220686173206265656e2072656d6f76656420646f65736e27742068617665207265776172642e4045726173526577617264506f696e747301010520457261496e64657874457261526577617264506f696e74733c543a3a4163636f756e7449643e0014000000000008ac205265776172647320666f7220746865206c6173742060484953544f52595f44455054486020657261732e250120496620726577617264206861736e2774206265656e20736574206f7220686173206265656e2072656d6f766564207468656e2030207265776172642069732072657475726e65642e3845726173546f74616c5374616b6501010520457261496e6465783042616c616e63654f663c543e00400000000000000000000000000000000008ec2054686520746f74616c20616d6f756e74207374616b656420666f7220746865206c6173742060484953544f52595f44455054486020657261732e1d0120496620746f74616c206861736e2774206265656e20736574206f7220686173206265656e2072656d6f766564207468656e2030207374616b652069732072657475726e65642e20466f72636545726101001c466f7263696e6704000454204d6f6465206f662065726120666f7263696e672e4c536c6173685265776172644672616374696f6e01001c50657262696c6c10000000000cf8205468652070657263656e74616765206f662074686520736c617368207468617420697320646973747269627574656420746f207265706f72746572732e00e4205468652072657374206f662074686520736c61736865642076616c75652069732068616e646c6564206279207468652060536c617368602e4c43616e63656c6564536c6173685061796f757401003042616c616e63654f663c543e40000000000000000000000000000000000815012054686520616d6f756e74206f662063757272656e637920676976656e20746f207265706f7274657273206f66206120736c617368206576656e7420776869636820776173ec2063616e63656c65642062792065787472616f7264696e6172792063697263756d7374616e6365732028652e672e20676f7665726e616e6365292e40556e6170706c696564536c617368657301010520457261496e646578bc5665633c556e6170706c696564536c6173683c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e3e00040004c420416c6c20756e6170706c69656420736c61736865732074686174206172652071756575656420666f72206c617465722e28426f6e646564457261730100745665633c28457261496e6465782c2053657373696f6e496e646578293e04001025012041206d617070696e672066726f6d207374696c6c2d626f6e646564206572617320746f207468652066697273742073657373696f6e20696e646578206f662074686174206572612e00c8204d75737420636f6e7461696e7320696e666f726d6174696f6e20666f72206572617320666f72207468652072616e67653abc20605b6163746976655f657261202d20626f756e64696e675f6475726174696f6e3b206163746976655f6572615d604c56616c696461746f72536c617368496e45726100020520457261496e64657830543a3a4163636f756e7449645c2850657262696c6c2c2042616c616e63654f663c543e2905040008450120416c6c20736c617368696e67206576656e7473206f6e2076616c696461746f72732c206d61707065642062792065726120746f20746865206869676865737420736c6173682070726f706f7274696f6e7020616e6420736c6173682076616c7565206f6620746865206572612e4c4e6f6d696e61746f72536c617368496e45726100020520457261496e64657830543a3a4163636f756e7449643042616c616e63654f663c543e05040004610120416c6c20736c617368696e67206576656e7473206f6e206e6f6d696e61746f72732c206d61707065642062792065726120746f20746865206869676865737420736c6173682076616c7565206f6620746865206572612e34536c617368696e675370616e7300010530543a3a4163636f756e7449645c736c617368696e673a3a536c617368696e675370616e73000400048c20536c617368696e67207370616e7320666f72207374617368206163636f756e74732e245370616e536c6173680101058c28543a3a4163636f756e7449642c20736c617368696e673a3a5370616e496e6465782988736c617368696e673a3a5370616e5265636f72643c42616c616e63654f663c543e3e00800000000000000000000000000000000000000000000000000000000000000000083d01205265636f72647320696e666f726d6174696f6e2061626f757420746865206d6178696d756d20736c617368206f6620612073746173682077697468696e206120736c617368696e67207370616e2cb82061732077656c6c20617320686f77206d7563682072657761726420686173206265656e2070616964206f75742e584561726c69657374556e6170706c696564536c617368000020457261496e646578040004fc20546865206561726c696573742065726120666f72207768696368207765206861766520612070656e64696e672c20756e6170706c69656420736c6173682e48536e617073686f7456616c696461746f72730000445665633c543a3a4163636f756e7449643e040008650120536e617073686f74206f662076616c696461746f72732061742074686520626567696e6e696e67206f66207468652063757272656e7420656c656374696f6e2077696e646f772e20546869732073686f756c64206f6e6c791901206861766520612076616c7565207768656e205b60457261456c656374696f6e537461747573605d203d3d2060456c656374696f6e5374617475733a3a4f70656e285f29602e48536e617073686f744e6f6d696e61746f72730000445665633c543a3a4163636f756e7449643e040008650120536e617073686f74206f66206e6f6d696e61746f72732061742074686520626567696e6e696e67206f66207468652063757272656e7420656c656374696f6e2077696e646f772e20546869732073686f756c64206f6e6c791901206861766520612076616c7565207768656e205b60457261456c656374696f6e537461747573605d203d3d2060456c656374696f6e5374617475733a3a4f70656e285f29602e34517565756564456c65637465640000a8456c656374696f6e526573756c743c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e04000c650120546865206e6578742076616c696461746f72207365742e2041742074686520656e64206f6620616e206572612c206966207468697320697320617661696c61626c652028706f74656e7469616c6c792066726f6d20746865610120726573756c74206f6620616e206f6666636861696e20776f726b6572292c20697420697320696d6d6564696174656c7920757365642e204f74686572776973652c20746865206f6e2d636861696e20656c656374696f6e342069732065786563757465642e2c51756575656453636f7265000034456c656374696f6e53636f7265040004b0205468652073636f7265206f66207468652063757272656e74205b60517565756564456c6563746564605d2e44457261456c656374696f6e537461747573010078456c656374696f6e5374617475733c543a3a426c6f636b4e756d6265723e040008490120466c616720746f20636f6e74726f6c2074686520657865637574696f6e206f6620746865206f6666636861696e20656c656374696f6e2e205768656e20604f70656e285f29602c207765206163636570746c20736f6c7574696f6e7320746f206265207375626d69747465642e54497343757272656e7453657373696f6e46696e616c010010626f6f6c0400084d012054727565206966207468652063757272656e74202a2a706c616e6e65642a2a2073657373696f6e2069732066696e616c2e204e6f74652074686174207468697320646f6573206e6f742074616b65206572615820666f7263696e6720696e746f206163636f756e742e3853746f7261676556657273696f6e01002052656c6561736573040310cc2054727565206966206e6574776f726b20686173206265656e20757067726164656420746f20746869732076657273696f6e2e7c2053746f726167652076657273696f6e206f66207468652070616c6c65742e00a020546869732069732073657420746f2076332e302e3020666f72206e6577206e6574776f726b732e016010626f6e640c28636f6e74726f6c6c65728c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c756554436f6d706163743c42616c616e63654f663c543e3e1470617965657c52657761726444657374696e6174696f6e3c543a3a4163636f756e7449643e5865012054616b6520746865206f726967696e206163636f756e74206173206120737461736820616e64206c6f636b207570206076616c756560206f66206974732062616c616e63652e2060636f6e74726f6c6c6572602077696c6c8420626520746865206163636f756e74207468617420636f6e74726f6c732069742e003101206076616c756560206d757374206265206d6f7265207468616e2074686520606d696e696d756d5f62616c616e636560207370656369666965642062792060543a3a43757272656e6379602e00250120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20627920746865207374617368206163636f756e742e004020456d6974732060426f6e646564602e002c2023203c7765696768743ed4202d20496e646570656e64656e74206f662074686520617267756d656e74732e204d6f64657261746520636f6d706c65786974792e20202d204f2831292e68202d20546872656520657874726120444220656e74726965732e005101204e4f54453a2054776f206f66207468652073746f726167652077726974657320286053656c663a3a626f6e646564602c206053656c663a3a7061796565602920617265205f6e657665725f20636c65616e6564410120756e6c6573732074686520606f726967696e602066616c6c732062656c6f77205f6578697374656e7469616c206465706f7369745f20616e6420676574732072656d6f76656420617320647573742e4c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d5c2042617365205765696768743a2036372e383720c2b5732c204442205765696768743a3101202d20526561643a20426f6e6465642c204c65646765722c205b4f726967696e204163636f756e745d2c2043757272656e74204572612c20486973746f72792044657074682c204c6f636b73e0202d2057726974653a20426f6e6465642c2050617965652c205b4f726967696e204163636f756e745d2c204c6f636b732c204c6564676572302023203c2f7765696768743e28626f6e645f657874726104386d61785f6164646974696f6e616c54436f6d706163743c42616c616e63654f663c543e3e5865012041646420736f6d6520657874726120616d6f756e742074686174206861766520617070656172656420696e207468652073746173682060667265655f62616c616e63656020696e746f207468652062616c616e63652075703420666f72207374616b696e672e00510120557365207468697320696620746865726520617265206164646974696f6e616c2066756e647320696e20796f7572207374617368206163636f756e74207468617420796f75207769736820746f20626f6e642e650120556e6c696b65205b60626f6e64605d206f72205b60756e626f6e64605d20746869732066756e6374696f6e20646f6573206e6f7420696d706f736520616e79206c696d69746174696f6e206f6e2074686520616d6f756e744c20746861742063616e2062652061646465642e00610120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f206279207468652073746173682c206e6f742074686520636f6e74726f6c6c657220616e64f82069742063616e206265206f6e6c792063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e004020456d6974732060426f6e646564602e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e20202d204f2831292e40202d204f6e6520444220656e7472792e34202d2d2d2d2d2d2d2d2d2d2d2d5c2042617365205765696768743a2035342e383820c2b5732c204442205765696768743a1501202d20526561643a2045726120456c656374696f6e205374617475732c20426f6e6465642c204c65646765722c205b4f726967696e204163636f756e745d2c204c6f636b73a4202d2057726974653a205b4f726967696e204163636f756e745d2c204c6f636b732c204c6564676572302023203c2f7765696768743e18756e626f6e64041476616c756554436f6d706163743c42616c616e63654f663c543e3e805501205363686564756c65206120706f7274696f6e206f662074686520737461736820746f20626520756e6c6f636b656420726561647920666f72207472616e73666572206f75742061667465722074686520626f6e64010120706572696f6420656e64732e2049662074686973206c656176657320616e20616d6f756e74206163746976656c7920626f6e646564206c657373207468616e250120543a3a43757272656e63793a3a6d696e696d756d5f62616c616e636528292c207468656e20697420697320696e6372656173656420746f207468652066756c6c20616d6f756e742e004901204f6e63652074686520756e6c6f636b20706572696f6420697320646f6e652c20796f752063616e2063616c6c206077697468647261775f756e626f6e6465646020746f2061637475616c6c79206d6f7665c0207468652066756e6473206f7574206f66206d616e6167656d656e7420726561647920666f72207472616e736665722e003d01204e6f206d6f7265207468616e2061206c696d69746564206e756d626572206f6620756e6c6f636b696e67206368756e6b73202873656520604d41585f554e4c4f434b494e475f4348554e4b5360293d012063616e20636f2d657869737473206174207468652073616d652074696d652e20496e207468617420636173652c205b6043616c6c3a3a77697468647261775f756e626f6e646564605d206e656564fc20746f2062652063616c6c656420666972737420746f2072656d6f766520736f6d65206f6620746865206368756e6b732028696620706f737369626c65292e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e0d0120416e642c2069742063616e206265206f6e6c792063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e004820456d6974732060556e626f6e646564602e00982053656520616c736f205b6043616c6c3a3a77697468647261775f756e626f6e646564605d2e002c2023203c7765696768743e4101202d20496e646570656e64656e74206f662074686520617267756d656e74732e204c696d697465642062757420706f74656e7469616c6c79206578706c6f697461626c6520636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732e6501202d20456163682063616c6c20287265717569726573207468652072656d61696e646572206f662074686520626f6e6465642062616c616e636520746f2062652061626f766520606d696e696d756d5f62616c616e63656029710120202077696c6c2063617573652061206e657720656e74727920746f20626520696e73657274656420696e746f206120766563746f722028604c65646765722e756e6c6f636b696e676029206b65707420696e2073746f726167652e5101202020546865206f6e6c792077617920746f20636c65616e207468652061666f72656d656e74696f6e65642073746f72616765206974656d20697320616c736f20757365722d636f6e74726f6c6c6564207669615c2020206077697468647261775f756e626f6e646564602e40202d204f6e6520444220656e7472792e2c202d2d2d2d2d2d2d2d2d2d5c2042617365205765696768743a2035302e333420c2b5732c204442205765696768743a2901202d20526561643a2045726120456c656374696f6e205374617475732c204c65646765722c2043757272656e74204572612c204c6f636b732c205b4f726967696e204163636f756e745da4202d2057726974653a205b4f726967696e204163636f756e745d2c204c6f636b732c204c656467657228203c2f7765696768743e4477697468647261775f756e626f6e64656404486e756d5f736c617368696e675f7370616e730c753332782d012052656d6f766520616e7920756e6c6f636b6564206368756e6b732066726f6d207468652060756e6c6f636b696e67602071756575652066726f6d206f7572206d616e6167656d656e742e003501205468697320657373656e7469616c6c7920667265657320757020746861742062616c616e636520746f206265207573656420627920746865207374617368206163636f756e7420746f20646f4c2077686174657665722069742077616e74732e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e0d0120416e642c2069742063616e206265206f6e6c792063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e004c20456d697473206057697468647261776e602e006c2053656520616c736f205b6043616c6c3a3a756e626f6e64605d2e002c2023203c7765696768743e5501202d20436f756c6420626520646570656e64656e74206f6e2074686520606f726967696e6020617267756d656e7420616e6420686f77206d7563682060756e6c6f636b696e6760206368756e6b732065786973742e45012020497420696d706c6965732060636f6e736f6c69646174655f756e6c6f636b656460207768696368206c6f6f7073206f76657220604c65646765722e756e6c6f636b696e67602c207768696368206973f42020696e6469726563746c7920757365722d636f6e74726f6c6c65642e20536565205b60756e626f6e64605d20666f72206d6f72652064657461696c2e7901202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732c20796574207468652073697a65206f6620776869636820636f756c64206265206c61726765206261736564206f6e20606c6564676572602ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e40202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d090120436f6d706c6578697479204f285329207768657265205320697320746865206e756d626572206f6620736c617368696e67207370616e7320746f2072656d6f7665342042617365205765696768743a74205570646174653a2035302e3532202b202e303238202a205320c2b5732501202d2052656164733a20457261456c656374696f6e5374617475732c204c65646765722c2043757272656e74204572612c204c6f636b732c205b4f726967696e204163636f756e745da8202d205772697465733a205b4f726967696e204163636f756e745d2c204c6f636b732c204c656467657270204b696c6c3a2037392e3431202b20322e333636202a205320c2b5738501202d2052656164733a20457261456c656374696f6e5374617475732c204c65646765722c2043757272656e74204572612c20426f6e6465642c20536c617368696e67205370616e732c205b4f726967696e204163636f756e745d2c204c6f636b73b101202d205772697465733a20426f6e6465642c20536c617368696e67205370616e73202869662053203e2030292c204c65646765722c2050617965652c2056616c696461746f72732c204e6f6d696e61746f72732c205b4f726967696e204163636f756e745d2c204c6f636b7374202d2057726974657320456163683a205370616e536c617368202a20530d01204e4f54453a2057656967687420616e6e6f746174696f6e20697320746865206b696c6c207363656e6172696f2c20776520726566756e64206f74686572776973652e302023203c2f7765696768743e2076616c6964617465041470726566733856616c696461746f72507265667344e8204465636c617265207468652064657369726520746f2076616c696461746520666f7220746865206f726967696e20636f6e74726f6c6c65722e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e0d0120416e642c2069742063616e206265206f6e6c792063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e30202d2d2d2d2d2d2d2d2d2d2d5c2042617365205765696768743a2031372e313320c2b5732c204442205765696768743a90202d20526561643a2045726120456c656374696f6e205374617475732c204c656467657280202d2057726974653a204e6f6d696e61746f72732c2056616c696461746f7273302023203c2f7765696768743e206e6f6d696e617465041c74617267657473a05665633c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263653e4c1101204465636c617265207468652064657369726520746f206e6f6d696e6174652060746172676574736020666f7220746865206f726967696e20636f6e74726f6c6c65722e00510120456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e20546869732063616e206f6e6c792062652063616c6c6564207768656e8c205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e0d0120416e642c2069742063616e206265206f6e6c792063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e002c2023203c7765696768743e3101202d20546865207472616e73616374696f6e277320636f6d706c65786974792069732070726f706f7274696f6e616c20746f207468652073697a65206f662060746172676574736020284e2901012077686963682069732063617070656420617420436f6d7061637441737369676e6d656e74733a3a4c494d495420284d41585f4e4f4d494e4154494f4e53292ed8202d20426f74682074686520726561647320616e642077726974657320666f6c6c6f7720612073696d696c6172207061747465726e2e28202d2d2d2d2d2d2d2d2d842042617365205765696768743a2032322e3334202b202e3336202a204e20c2b57384207768657265204e20697320746865206e756d626572206f6620746172676574732c204442205765696768743ac8202d2052656164733a2045726120456c656374696f6e205374617475732c204c65646765722c2043757272656e742045726184202d205772697465733a2056616c696461746f72732c204e6f6d696e61746f7273302023203c2f7765696768743e146368696c6c0044c8204465636c617265206e6f2064657369726520746f206569746865722076616c6964617465206f72206e6f6d696e6174652e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e0d0120416e642c2069742063616e206265206f6e6c792063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e54202d20436f6e7461696e73206f6e6520726561642ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e24202d2d2d2d2d2d2d2d5c2042617365205765696768743a2031362e353320c2b5732c204442205765696768743a88202d20526561643a20457261456c656374696f6e5374617475732c204c656467657280202d2057726974653a2056616c696461746f72732c204e6f6d696e61746f7273302023203c2f7765696768743e247365745f7061796565041470617965657c52657761726444657374696e6174696f6e3c543a3a4163636f756e7449643e40b8202852652d2973657420746865207061796d656e742074617267657420666f72206120636f6e74726f6c6c65722e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2062792074686520636f6e74726f6c6c65722c206e6f74207468652073746173682e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e28202d2d2d2d2d2d2d2d2d64202d2042617365205765696768743a2031312e333320c2b57334202d204442205765696768743a4c20202020202d20526561643a204c65646765724c20202020202d2057726974653a205061796565302023203c2f7765696768743e387365745f636f6e74726f6c6c65720428636f6e74726f6c6c65728c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263654090202852652d297365742074686520636f6e74726f6c6c6572206f6620612073746173682e00dc20456666656374732077696c6c2062652066656c742061742074686520626567696e6e696e67206f6620746865206e657874206572612e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f206279207468652073746173682c206e6f742074686520636f6e74726f6c6c65722e002c2023203c7765696768743ee8202d20496e646570656e64656e74206f662074686520617267756d656e74732e20496e7369676e69666963616e7420636f6d706c65786974792e98202d20436f6e7461696e732061206c696d69746564206e756d626572206f662072656164732ec8202d2057726974657320617265206c696d6974656420746f2074686520606f726967696e60206163636f756e74206b65792e2c202d2d2d2d2d2d2d2d2d2d5c2042617365205765696768743a2032352e323220c2b5732c204442205765696768743af4202d20526561643a20426f6e6465642c204c6564676572204e657720436f6e74726f6c6c65722c204c6564676572204f6c6420436f6e74726f6c6c6572f8202d2057726974653a20426f6e6465642c204c6564676572204e657720436f6e74726f6c6c65722c204c6564676572204f6c6420436f6e74726f6c6c6572302023203c2f7765696768743e4c7365745f76616c696461746f725f636f756e74040c6e657730436f6d706163743c7533323e209420536574732074686520696465616c206e756d626572206f662076616c696461746f72732e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e5c2042617365205765696768743a20312e37313720c2b5735c2057726974653a2056616c696461746f7220436f756e74302023203c2f7765696768743e60696e6372656173655f76616c696461746f725f636f756e7404286164646974696f6e616c30436f6d706163743c7533323e20ac20496e6372656d656e74732074686520696465616c206e756d626572206f662076616c696461746f72732e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e5c2042617365205765696768743a20312e37313720c2b5737020526561642f57726974653a2056616c696461746f7220436f756e74302023203c2f7765696768743e547363616c655f76616c696461746f725f636f756e740418666163746f721c50657263656e7420d4205363616c652075702074686520696465616c206e756d626572206f662076616c696461746f7273206279206120666163746f722e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e5c2042617365205765696768743a20312e37313720c2b5737020526561642f57726974653a2056616c696461746f7220436f756e74302023203c2f7765696768743e34666f7263655f6e6f5f657261730024b020466f72636520746865726520746f206265206e6f206e6577206572617320696e646566696e6974656c792e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e40202d204e6f20617267756d656e74732e64202d2042617365205765696768743a20312e38353720c2b57348202d2057726974653a20466f726365457261302023203c2f7765696768743e34666f7263655f6e65775f65726100284d0120466f72636520746865726520746f2062652061206e6577206572612061742074686520656e64206f6620746865206e6578742073657373696f6e2e20416674657220746869732c2069742077696c6c206265a020726573657420746f206e6f726d616c20286e6f6e2d666f7263656429206265686176696f75722e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e40202d204e6f20617267756d656e74732e64202d2042617365205765696768743a20312e39353920c2b57344202d20577269746520466f726365457261302023203c2f7765696768743e447365745f696e76756c6e657261626c6573042876616c696461746f7273445665633c543a3a4163636f756e7449643e24cc20536574207468652076616c696461746f72732077686f2063616e6e6f7420626520736c61736865642028696620616e79292e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e1c202d204f28562990202d2042617365205765696768743a20322e323038202b202e303036202a205620c2b5735c202d2057726974653a20496e76756c6e657261626c6573302023203c2f7765696768743e34666f7263655f756e7374616b650814737461736830543a3a4163636f756e744964486e756d5f736c617368696e675f7370616e730c7533322c0d0120466f72636520612063757272656e74207374616b657220746f206265636f6d6520636f6d706c6574656c7920756e7374616b65642c20696d6d6564696174656c792e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743eec204f285329207768657265205320697320746865206e756d626572206f6620736c617368696e67207370616e7320746f2062652072656d6f7665648c2042617365205765696768743a2035332e3037202b20322e333635202a205320c2b573b82052656164733a20426f6e6465642c20536c617368696e67205370616e732c204163636f756e742c204c6f636b738501205772697465733a20426f6e6465642c20536c617368696e67205370616e73202869662053203e2030292c204c65646765722c2050617965652c2056616c696461746f72732c204e6f6d696e61746f72732c204163636f756e742c204c6f636b736c2057726974657320456163683a205370616e536c617368202a2053302023203c2f7765696768743e50666f7263655f6e65775f6572615f616c776179730020050120466f72636520746865726520746f2062652061206e6577206572612061742074686520656e64206f662073657373696f6e7320696e646566696e6974656c792e008820546865206469737061746368206f726967696e206d75737420626520526f6f742e002c2023203c7765696768743e60202d2042617365205765696768743a20322e303520c2b57348202d2057726974653a20466f726365457261302023203c2f7765696768743e5463616e63656c5f64656665727265645f736c617368080c65726120457261496e64657834736c6173685f696e6469636573205665633c7533323e38982043616e63656c20656e6163746d656e74206f66206120646566657272656420736c6173682e00b42043616e2062652063616c6c6564206279207468652060543a3a536c61736843616e63656c4f726967696e602e00050120506172616d65746572733a2065726120616e6420696e6469636573206f662074686520736c617368657320666f7220746861742065726120746f206b696c6c2e002c2023203c7765696768743e5420436f6d706c65786974793a204f2855202b205329b82077697468205520756e6170706c69656420736c6173686573207765696768746564207769746820553d31303030d420616e64205320697320746865206e756d626572206f6620736c61736820696e646963657320746f2062652063616e63656c65642e74202d20426173653a2035383730202b2033342e3631202a205320c2b57368202d20526561643a20556e6170706c69656420536c61736865736c202d2057726974653a20556e6170706c69656420536c6173686573302023203c2f7765696768743e387061796f75745f7374616b657273083c76616c696461746f725f737461736830543a3a4163636f756e7449640c65726120457261496e64657864110120506179206f757420616c6c20746865207374616b65727320626568696e6420612073696e676c652076616c696461746f7220666f7220612073696e676c65206572612e004d01202d206076616c696461746f725f73746173686020697320746865207374617368206163636f756e74206f66207468652076616c696461746f722e205468656972206e6f6d696e61746f72732c20757020746f290120202060543a3a4d61784e6f6d696e61746f72526577617264656450657256616c696461746f72602c2077696c6c20616c736f207265636569766520746865697220726577617264732e3501202d206065726160206d617920626520616e7920657261206265747765656e20605b63757272656e745f657261202d20686973746f72795f64657074683b2063757272656e745f6572615d602e00590120546865206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e20416e79206163636f756e742063616e2063616c6c20746869732066756e6374696f6e2c206576656e20696678206974206973206e6f74206f6e65206f6620746865207374616b6572732e00010120546869732063616e206f6e6c792062652063616c6c6564207768656e205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e002c2023203c7765696768743e0101202d2054696d6520636f6d706c65786974793a206174206d6f7374204f284d61784e6f6d696e61746f72526577617264656450657256616c696461746f72292ec4202d20436f6e7461696e732061206c696d69746564206e756d626572206f6620726561647320616e64207772697465732e30202d2d2d2d2d2d2d2d2d2d2d1d01204e20697320746865204e756d626572206f66207061796f75747320666f72207468652076616c696461746f722028696e636c7564696e67207468652076616c696461746f7229342042617365205765696768743a0101202d205265776172642044657374696e6174696f6e205374616b65643a20313130202b2035342e32202a204e20c2b57320284d656469616e20536c6f706573294101202d205265776172642044657374696e6174696f6e20436f6e74726f6c6c657220284372656174696e67293a20313230202b2034312e3935202a204e20c2b57320284d656469616e20536c6f706573292c204442205765696768743a2901202d20526561643a20457261456c656374696f6e5374617475732c2043757272656e744572612c20486973746f727944657074682c204572617356616c696461746f725265776172642c2d01202020202020202020457261735374616b657273436c69707065642c2045726173526577617264506f696e74732c204572617356616c696461746f725072656673202838206974656d73291101202d205265616420456163683a20426f6e6465642c204c65646765722c2050617965652c204c6f636b732c2053797374656d204163636f756e74202835206974656d7329d8202d20577269746520456163683a2053797374656d204163636f756e742c204c6f636b732c204c6564676572202833206974656d7329302023203c2f7765696768743e187265626f6e64041476616c756554436f6d706163743c42616c616e63654f663c543e3e3ce0205265626f6e64206120706f7274696f6e206f6620746865207374617368207363686564756c656420746f20626520756e6c6f636b65642e00550120546865206469737061746368206f726967696e206d757374206265207369676e65642062792074686520636f6e74726f6c6c65722c20616e642069742063616e206265206f6e6c792063616c6c6564207768656e8c205b60457261456c656374696f6e537461747573605d2069732060436c6f736564602e002c2023203c7765696768743ed4202d2054696d6520636f6d706c65786974793a204f284c292c207768657265204c20697320756e6c6f636b696e67206368756e6b7394202d20426f756e64656420627920604d41585f554e4c4f434b494e475f4348554e4b53602ef4202d2053746f72616765206368616e6765733a2043616e277420696e6372656173652073746f726167652c206f6e6c792064656372656173652069742e40202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d98202d2042617365205765696768743a2033342e353120c2b573202a202e303438204c20c2b57334202d204442205765696768743a010120202020202d2052656164733a20457261456c656374696f6e5374617475732c204c65646765722c204c6f636b732c205b4f726967696e204163636f756e745db820202020202d205772697465733a205b4f726967696e204163636f756e745d2c204c6f636b732c204c6564676572302023203c2f7765696768743e447365745f686973746f72795f646570746808446e65775f686973746f72795f646570746844436f6d706163743c457261496e6465783e485f6572615f6974656d735f64656c6574656430436f6d706163743c7533323e543101205365742060486973746f72794465707468602076616c75652e20546869732066756e6374696f6e2077696c6c2064656c65746520616e7920686973746f727920696e666f726d6174696f6e80207768656e2060486973746f727944657074686020697320726564756365642e003020506172616d65746572733a1101202d20606e65775f686973746f72795f6465707468603a20546865206e657720686973746f727920646570746820796f7520776f756c64206c696b6520746f207365742e4901202d20606572615f6974656d735f64656c65746564603a20546865206e756d626572206f66206974656d7320746861742077696c6c2062652064656c6574656420627920746869732064697370617463682e450120202020546869732073686f756c64207265706f727420616c6c207468652073746f72616765206974656d7320746861742077696c6c2062652064656c6574656420627920636c656172696e67206f6c6445012020202065726120686973746f72792e204e656564656420746f207265706f727420616e2061636375726174652077656967687420666f72207468652064697370617463682e2054727573746564206279a02020202060526f6f746020746f207265706f727420616e206163637572617465206e756d6265722e0054204f726967696e206d75737420626520726f6f742e002c2023203c7765696768743ee0202d20453a204e756d626572206f6620686973746f7279206465707468732072656d6f7665642c20692e652e203130202d3e2037203d203374202d2042617365205765696768743a2032392e3133202a204520c2b57334202d204442205765696768743aa020202020202d2052656164733a2043757272656e74204572612c20486973746f72792044657074687020202020202d205772697465733a20486973746f7279204465707468310120202020202d20436c6561722050726566697820456163683a20457261205374616b6572732c204572615374616b657273436c69707065642c204572617356616c696461746f725072656673810120202020202d2057726974657320456163683a204572617356616c696461746f725265776172642c2045726173526577617264506f696e74732c2045726173546f74616c5374616b652c2045726173537461727453657373696f6e496e646578302023203c2f7765696768743e28726561705f73746173680814737461736830543a3a4163636f756e744964486e756d5f736c617368696e675f7370616e730c7533324039012052656d6f766520616c6c20646174612073747275637475726520636f6e6365726e696e672061207374616b65722f7374617368206f6e6365206974732062616c616e6365206973207a65726f2e6101205468697320697320657373656e7469616c6c79206571756976616c656e7420746f206077697468647261775f756e626f6e64656460206578636570742069742063616e2062652063616c6c656420627920616e796f6e65c020616e6420746865207461726765742060737461736860206d7573742068617665206e6f2066756e6473206c6566742e009020546869732063616e2062652063616c6c65642066726f6d20616e79206f726967696e2e000101202d20607374617368603a20546865207374617368206163636f756e7420746f20726561702e204974732062616c616e6365206d757374206265207a65726f2e002c2023203c7765696768743e250120436f6d706c65786974793a204f285329207768657265205320697320746865206e756d626572206f6620736c617368696e67207370616e73206f6e20746865206163636f756e742e8c2042617365205765696768743a2037352e3934202b20322e333936202a205320c2b5732c204442205765696768743ad8202d2052656164733a205374617368204163636f756e742c20426f6e6465642c20536c617368696e67205370616e732c204c6f636b73a501202d205772697465733a20426f6e6465642c20536c617368696e67205370616e73202869662053203e2030292c204c65646765722c2050617965652c2056616c696461746f72732c204e6f6d696e61746f72732c205374617368204163636f756e742c204c6f636b7374202d2057726974657320456163683a205370616e536c617368202a2053302023203c2f7765696768743e607375626d69745f656c656374696f6e5f736f6c7574696f6e141c77696e6e6572734c5665633c56616c696461746f72496e6465783e1c636f6d7061637448436f6d7061637441737369676e6d656e74731473636f726534456c656374696f6e53636f72650c65726120457261496e6465781073697a6530456c656374696f6e53697a65bce4205375626d697420616e20656c656374696f6e20726573756c7420746f2074686520636861696e2e2049662074686520736f6c7574696f6e3a003420312e2069732076616c69642e150120322e206861732061206265747465722073636f7265207468616e206120706f74656e7469616c6c79206578697374696e6720736f6c7574696f6e206f6e20636861696e2e0084207468656e2c2069742077696c6c206265205f7075745f206f6e20636861696e2e00ac204120736f6c7574696f6e20636f6e7369737473206f662074776f20706965636573206f6620646174613a00f420312e206077696e6e657273603a206120666c617420766563746f72206f6620616c6c207468652077696e6e657273206f662074686520726f756e642e510120322e206061737369676e6d656e7473603a2074686520636f6d706163742076657273696f6e206f6620616e2061737369676e6d656e7420766563746f72207468617420656e636f6465732074686520656467653020202020776569676874732e00210120426f7468206f66207768696368206d617920626520636f6d7075746564207573696e67205f70687261676d656e5f2c206f7220616e79206f7468657220616c676f726974686d2e00a8204164646974696f6e616c6c792c20746865207375626d6974746572206d7573742070726f766964653a00c8202d20546865206073636f7265602074686174207468657920636c61696d20746865697220736f6c7574696f6e206861732e004d0120426f74682076616c696461746f727320616e64206e6f6d696e61746f72732077696c6c20626520726570726573656e74656420627920696e646963657320696e2074686520736f6c7574696f6e2e205468651d0120696e64696365732073686f756c6420726573706563742074686520636f72726573706f6e64696e6720747970657320285b6056616c696461746f72496e646578605d20616e643101205b604e6f6d696e61746f72496e646578605d292e204d6f72656f7665722c20746865792073686f756c642062652076616c6964207768656e207573656420746f20696e64657820696e746f5101205b60536e617073686f7456616c696461746f7273605d20616e64205b60536e617073686f744e6f6d696e61746f7273605d2e20416e7920696e76616c696420696e6465782077696c6c20636175736520746865610120736f6c7574696f6e20746f2062652072656a65637465642e2054686573652074776f2073746f72616765206974656d73206172652073657420647572696e672074686520656c656374696f6e2077696e646f7720616e6498206d6179206265207573656420746f2064657465726d696e652074686520696e64696365732e0060204120736f6c7574696f6e2069732076616c69642069663a00e420302e204974206973207375626d6974746564207768656e205b60457261456c656374696f6e537461747573605d20697320604f70656e602ef820312e2049747320636c61696d65642073636f726520697320657175616c20746f207468652073636f726520636f6d7075746564206f6e2d636861696e2eac20322e2050726573656e74732074686520636f7272656374206e756d626572206f662077696e6e6572732e550120332e20416c6c20696e6465786573206d7573742062652076616c7565206163636f7264696e6720746f2074686520736e617073686f7420766563746f72732e20416c6c20656467652076616c756573206d7573745d0120202020616c736f20626520636f727265637420616e642073686f756c64206e6f74206f766572666c6f7720746865206772616e756c6172697479206f662074686520726174696f20747970652028692e652e2032353640202020206f722062696c6c696f6e292e0d0120342e20466f72206561636820656467652c20616c6c2074617267657473206172652061637475616c6c79206e6f6d696e617465642062792074686520766f7465722e6c20352e2048617320636f72726563742073656c662d766f7465732e00c0204120736f6c7574696f6e732073636f726520697320636f6e736973746564206f66203320706172616d65746572733a00650120312e20606d696e207b20737570706f72742e746f74616c207d6020666f72206561636820737570706f7274206f6620612077696e6e65722e20546869732076616c75652073686f756c64206265206d6178696d697a65642e650120322e206073756d207b20737570706f72742e746f74616c207d6020666f72206561636820737570706f7274206f6620612077696e6e65722e20546869732076616c75652073686f756c64206265206d696e696d697a65642e410120332e206073756d207b20737570706f72742e746f74616c5e32207d6020666f72206561636820737570706f7274206f6620612077696e6e65722e20546869732076616c75652073686f756c642062659c202020206d696e696d697a65642028746f20656e73757265206c6573732076617269616e636529002c2023203c7765696768743e7020536565206063726174653a3a77656967687460206d6f64756c652e302023203c2f7765696768743e847375626d69745f656c656374696f6e5f736f6c7574696f6e5f756e7369676e6564141c77696e6e6572734c5665633c56616c696461746f72496e6465783e1c636f6d7061637448436f6d7061637441737369676e6d656e74731473636f726534456c656374696f6e53636f72650c65726120457261496e6465781073697a6530456c656374696f6e53697a6524c020556e7369676e65642076657273696f6e206f6620607375626d69745f656c656374696f6e5f736f6c7574696f6e602e005d01204e6f746520746861742074686973206d757374207061737320746865205b6056616c6964617465556e7369676e6564605d20636865636b207768696368206f6e6c7920616c6c6f7773207472616e73616374696f6e7361012066726f6d20746865206c6f63616c206e6f646520746f20626520696e636c756465642e20496e206f7468657220776f7264732c206f6e6c792074686520626c6f636b20617574686f722063616e20696e636c756465206168207472616e73616374696f6e20696e2074686520626c6f636b2e002c2023203c7765696768743e7020536565206063726174653a3a77656967687460206d6f64756c652e302023203c2f7765696768743e0124244572615061796f75740c20457261496e6465781c42616c616e63651c42616c616e63650c59012054686520657261207061796f757420686173206265656e207365743b207468652066697273742062616c616e6365206973207468652076616c696461746f722d7061796f75743b20746865207365636f6e64206973c4207468652072656d61696e6465722066726f6d20746865206d6178696d756d20616d6f756e74206f66207265776172642ea4205b6572615f696e6465782c2076616c696461746f725f7061796f75742c2072656d61696e6465725d1852657761726408244163636f756e7449641c42616c616e636504f420546865207374616b657220686173206265656e207265776172646564206279207468697320616d6f756e742e205b73746173682c20616d6f756e745d14536c61736808244163636f756e7449641c42616c616e6365082501204f6e652076616c696461746f722028616e6420697473206e6f6d696e61746f72732920686173206265656e20736c61736865642062792074686520676976656e20616d6f756e742e50205b76616c696461746f722c20616d6f756e745d684f6c64536c617368696e675265706f7274446973636172646564043053657373696f6e496e646578081d0120416e206f6c6420736c617368696e67207265706f72742066726f6d2061207072696f72206572612077617320646973636172646564206265636175736520697420636f756c6488206e6f742062652070726f6365737365642e205b73657373696f6e5f696e6465785d3c5374616b696e67456c656374696f6e043c456c656374696f6e436f6d7075746504ec2041206e657720736574206f66207374616b6572732077617320656c656374656420776974682074686520676976656e205b636f6d707574655d2e38536f6c7574696f6e53746f726564043c456c656374696f6e436f6d707574650411012041206e657720736f6c7574696f6e20666f7220746865207570636f6d696e6720656c656374696f6e20686173206265656e2073746f7265642e205b636f6d707574655d18426f6e64656408244163636f756e7449641c42616c616e636510cc20416e206163636f756e742068617320626f6e646564207468697320616d6f756e742e205b73746173682c20616d6f756e745d005101204e4f54453a2054686973206576656e74206973206f6e6c7920656d6974746564207768656e2066756e64732061726520626f6e64656420766961206120646973706174636861626c652e204e6f7461626c792c25012069742077696c6c206e6f7420626520656d697474656420666f72207374616b696e672072657761726473207768656e20746865792061726520616464656420746f207374616b652e20556e626f6e64656408244163636f756e7449641c42616c616e636504d420416e206163636f756e742068617320756e626f6e646564207468697320616d6f756e742e205b73746173682c20616d6f756e745d2457697468647261776e08244163636f756e7449641c42616c616e6365085d0120416e206163636f756e74206861732063616c6c6564206077697468647261775f756e626f6e6465646020616e642072656d6f76656420756e626f6e64696e67206368756e6b7320776f727468206042616c616e636560a82066726f6d2074686520756e6c6f636b696e672071756575652e205b73746173682c20616d6f756e745d1c3853657373696f6e735065724572613053657373696f6e496e64657810060000000470204e756d626572206f662073657373696f6e7320706572206572612e3c426f6e64696e674475726174696f6e20457261496e64657810a002000004e4204e756d626572206f6620657261732074686174207374616b65642066756e6473206d7573742072656d61696e20626f6e64656420666f722e48536c61736844656665724475726174696f6e20457261496e64657810a8000000140101204e756d626572206f662065726173207468617420736c6173686573206172652064656665727265642062792c20616674657220636f6d7075746174696f6e2e00bc20546869732073686f756c64206265206c657373207468616e2074686520626f6e64696e67206475726174696f6e2e2d012053657420746f203020696620736c61736865732073686f756c64206265206170706c69656420696d6d6564696174656c792c20776974686f7574206f70706f7274756e69747920666f723820696e74657276656e74696f6e2e44456c656374696f6e4c6f6f6b616865616438543a3a426c6f636b4e756d62657210320000001c710120546865206e756d626572206f6620626c6f636b73206265666f72652074686520656e64206f6620746865206572612066726f6d20776869636820656c656374696f6e207375626d697373696f6e732061726520616c6c6f7765642e006d012053657474696e67207468697320746f207a65726f2077696c6c2064697361626c6520746865206f6666636861696e20636f6d7075746520616e64206f6e6c79206f6e2d636861696e207365712d70687261676d656e2077696c6c2420626520757365642e007501205468697320697320626f756e646564206279206265696e672077697468696e20746865206c6173742073657373696f6e2e2048656e63652c2073657474696e6720697420746f20612076616c7565206d6f7265207468616e207468659c206c656e677468206f6620612073657373696f6e2077696c6c20626520706f696e746c6573732e344d6178497465726174696f6e730c753332100a0000000c2901204d6178696d756d206e756d626572206f662062616c616e63696e6720697465726174696f6e7320746f2072756e20696e20746865206f6666636861696e207375626d697373696f6e2e00ec2049662073657420746f20302c2062616c616e63655f736f6c7574696f6e2077696c6c206e6f7420626520657865637574656420617420616c6c2e504d696e536f6c7574696f6e53636f726542756d701c50657262696c6c1020a1070004610120546865207468726573686f6c64206f6620696d70726f76656d656e7420746861742073686f756c642062652070726f766964656420666f722061206e657720736f6c7574696f6e20746f2062652061636365707465642e804d61784e6f6d696e61746f72526577617264656450657256616c696461746f720c753332104000000010f820546865206d6178696d756d206e756d626572206f66206e6f6d696e61746f727320726577617264656420666f7220656163682076616c696461746f722e00690120466f7220656163682076616c696461746f72206f6e6c79207468652060244d61784e6f6d696e61746f72526577617264656450657256616c696461746f72602062696767657374207374616b6572732063616e20636c61696d2101207468656972207265776172642e2054686973207573656420746f206c696d69742074686520692f6f20636f737420666f7220746865206e6f6d696e61746f72207061796f75742e7c344e6f74436f6e74726f6c6c65720468204e6f74206120636f6e74726f6c6c6572206163636f756e742e204e6f7453746173680454204e6f742061207374617368206163636f756e742e34416c7265616479426f6e646564046420537461736820697320616c726561647920626f6e6465642e34416c7265616479506169726564047820436f6e74726f6c6c657220697320616c7265616479207061697265642e30456d70747954617267657473046420546172676574732063616e6e6f7420626520656d7074792e384475706c6963617465496e6465780444204475706c696361746520696e6465782e44496e76616c6964536c617368496e646578048820536c617368207265636f726420696e646578206f7574206f6620626f756e64732e44496e73756666696369656e7456616c756504cc2043616e206e6f7420626f6e6420776974682076616c7565206c657373207468616e206d696e696d756d2062616c616e63652e304e6f4d6f72654368756e6b7304942043616e206e6f74207363686564756c65206d6f726520756e6c6f636b206368756e6b732e344e6f556e6c6f636b4368756e6b04a42043616e206e6f74207265626f6e6420776974686f757420756e6c6f636b696e67206368756e6b732e3046756e64656454617267657404cc20417474656d7074696e6720746f2074617267657420612073746173682074686174207374696c6c206861732066756e64732e48496e76616c6964457261546f526577617264045c20496e76616c69642065726120746f207265776172642e68496e76616c69644e756d6265724f664e6f6d696e6174696f6e73047c20496e76616c6964206e756d626572206f66206e6f6d696e6174696f6e732e484e6f74536f72746564416e64556e697175650484204974656d7320617265206e6f7420736f7274656420616e6420756e697175652e38416c7265616479436c61696d6564040d01205265776172647320666f72207468697320657261206861766520616c7265616479206265656e20636c61696d656420666f7220746869732076616c696461746f722e7c4f6666636861696e456c656374696f6e4561726c795375626d697373696f6e04e420546865207375626d697474656420726573756c74206973207265636569766564206f7574206f6620746865206f70656e2077696e646f772e784f6666636861696e456c656374696f6e5765616b5375626d697373696f6e04010120546865207375626d697474656420726573756c74206973206e6f7420617320676f6f6420617320746865206f6e652073746f726564206f6e20636861696e2e4c536e617073686f74556e617661696c61626c6504d02054686520736e617073686f742064617461206f66207468652063757272656e742077696e646f77206973206d697373696e672e804f6666636861696e456c656374696f6e426f67757357696e6e6572436f756e7404b020496e636f7272656374206e756d626572206f662077696e6e65727320776572652070726573656e7465642e6c4f6666636861696e456c656374696f6e426f67757357696e6e6572086101204f6e65206f6620746865207375626d69747465642077696e6e657273206973206e6f7420616e206163746976652063616e646964617465206f6e20636861696e2028696e646578206973206f7574206f662072616e67653820696e20736e617073686f74292e704f6666636861696e456c656374696f6e426f677573436f6d70616374085d01204572726f72207768696c65206275696c64696e67207468652061737369676e6d656e7420747970652066726f6d2074686520636f6d706163742e20546869732063616e2068617070656e20696620616e20696e646578a820697320696e76616c69642c206f72206966207468652077656967687473205f6f766572666c6f775f2e784f6666636861696e456c656374696f6e426f6775734e6f6d696e61746f72041501204f6e65206f6620746865207375626d6974746564206e6f6d696e61746f7273206973206e6f7420616e20616374697665206e6f6d696e61746f72206f6e20636861696e2e7c4f6666636861696e456c656374696f6e426f6775734e6f6d696e6174696f6e044d01204f6e65206f6620746865207375626d6974746564206e6f6d696e61746f72732068617320616e206564676520746f20776869636820746865792068617665206e6f7420766f746564206f6e20636861696e2e844f6666636861696e456c656374696f6e536c61736865644e6f6d696e6174696f6e086101204f6e65206f6620746865207375626d6974746564206e6f6d696e61746f72732068617320616e2065646765207768696368206973207375626d6974746564206265666f726520746865206c617374206e6f6e2d7a65726f5420736c617368206f6620746865207461726765742e744f6666636861696e456c656374696f6e426f67757353656c66566f746504250120412073656c6620766f7465206d757374206f6e6c79206265206f726967696e617465642066726f6d20612076616c696461746f7220746f204f4e4c59207468656d73656c7665732e644f6666636861696e456c656374696f6e426f6775734564676504450120546865207375626d697474656420726573756c742068617320756e6b6e6f776e206564676573207468617420617265206e6f7420616d6f6e67207468652070726573656e7465642077696e6e6572732e684f6666636861696e456c656374696f6e426f67757353636f72650419012054686520636c61696d65642073636f726520646f6573206e6f74206d61746368207769746820746865206f6e6520636f6d70757465642066726f6d2074686520646174612e844f6666636861696e456c656374696f6e426f677573456c656374696f6e53697a6504782054686520656c656374696f6e2073697a6520697320696e76616c69642e3843616c6c4e6f74416c6c6f776564044901205468652063616c6c206973206e6f7420616c6c6f7765642061742074686520676976656e2074696d652064756520746f207265737472696374696f6e73206f6620656c656374696f6e20706572696f642e54496e636f7272656374486973746f7279446570746804c420496e636f72726563742070726576696f757320686973746f727920646570746820696e7075742070726f76696465642e58496e636f7272656374536c617368696e675370616e7304b420496e636f7272656374206e756d626572206f6620736c617368696e67207370616e732070726f76696465642e1c53657373696f6e011c53657373696f6e1c2856616c696461746f727301004c5665633c543a3a56616c696461746f7249643e0400047c205468652063757272656e7420736574206f662076616c696461746f72732e3043757272656e74496e64657801003053657373696f6e496e646578100000000004782043757272656e7420696e646578206f66207468652073657373696f6e2e345175657565644368616e676564010010626f6f6c040008390120547275652069662074686520756e6465726c79696e672065636f6e6f6d6963206964656e746974696573206f7220776569676874696e6720626568696e64207468652076616c696461746f7273a420686173206368616e67656420696e20746865207175657565642076616c696461746f72207365742e285175657565644b6579730100785665633c28543a3a56616c696461746f7249642c20543a3a4b657973293e0400083d012054686520717565756564206b65797320666f7220746865206e6578742073657373696f6e2e205768656e20746865206e6578742073657373696f6e20626567696e732c207468657365206b657973e02077696c6c206265207573656420746f2064657465726d696e65207468652076616c696461746f7227732073657373696f6e206b6579732e4844697361626c656456616c696461746f72730100205665633c7533323e04000c8020496e6469636573206f662064697361626c65642076616c696461746f72732e003501205468652073657420697320636c6561726564207768656e20606f6e5f73657373696f6e5f656e64696e67602072657475726e732061206e657720736574206f66206964656e7469746965732e204e6578744b65797300010538543a3a56616c696461746f7249641c543a3a4b657973000400049c20546865206e6578742073657373696f6e206b65797320666f7220612076616c696461746f722e204b65794f776e657200010550284b65795479706549642c205665633c75383e2938543a3a56616c696461746f72496400040004090120546865206f776e6572206f662061206b65792e20546865206b65792069732074686520604b657954797065496460202b2074686520656e636f646564206b65792e0108207365745f6b65797308106b6579731c543a3a4b6579731470726f6f661c5665633c75383e38e82053657473207468652073657373696f6e206b6579287329206f66207468652066756e6374696f6e2063616c6c657220746f20606b657973602e210120416c6c6f777320616e206163636f756e7420746f20736574206974732073657373696f6e206b6579207072696f7220746f206265636f6d696e6720612076616c696461746f722ec4205468697320646f65736e27742074616b652065666665637420756e74696c20746865206e6578742073657373696f6e2e00d420546865206469737061746368206f726967696e206f6620746869732066756e6374696f6e206d757374206265207369676e65642e002c2023203c7765696768743e54202d20436f6d706c65786974793a20604f28312960590120202041637475616c20636f737420646570656e6473206f6e20746865206e756d626572206f66206c656e677468206f662060543a3a4b6579733a3a6b65795f6964732829602077686963682069732066697865642ef0202d20446252656164733a20606f726967696e206163636f756e74602c2060543a3a56616c696461746f7249644f66602c20604e6578744b65797360a4202d2044625772697465733a20606f726967696e206163636f756e74602c20604e6578744b6579736084202d204462526561647320706572206b65792069643a20604b65794f776e65726088202d20446257726974657320706572206b65792069643a20604b65794f776e657260302023203c2f7765696768743e2870757267655f6b6579730030cc2052656d6f76657320616e792073657373696f6e206b6579287329206f66207468652066756e6374696f6e2063616c6c65722ec4205468697320646f65736e27742074616b652065666665637420756e74696c20746865206e6578742073657373696f6e2e00d420546865206469737061746368206f726967696e206f6620746869732066756e6374696f6e206d757374206265207369676e65642e002c2023203c7765696768743eb4202d20436f6d706c65786974793a20604f2831296020696e206e756d626572206f66206b65792074797065732e590120202041637475616c20636f737420646570656e6473206f6e20746865206e756d626572206f66206c656e677468206f662060543a3a4b6579733a3a6b65795f6964732829602077686963682069732066697865642ef0202d20446252656164733a2060543a3a56616c696461746f7249644f66602c20604e6578744b657973602c20606f726967696e206163636f756e7460a4202d2044625772697465733a20604e6578744b657973602c20606f726967696e206163636f756e74608c202d20446257726974657320706572206b65792069643a20604b65794f776e64657260302023203c2f7765696768743e0104284e657753657373696f6e043053657373696f6e496e646578085d01204e65772073657373696f6e206861732068617070656e65642e204e6f746520746861742074686520617267756d656e7420697320746865205b73657373696f6e5f696e6465785d2c206e6f742074686520626c6f636b88206e756d626572206173207468652074797065206d6967687420737567676573742e001030496e76616c696450726f6f66046420496e76616c6964206f776e6572736869702070726f6f662e5c4e6f4173736f63696174656456616c696461746f72496404a0204e6f206173736f6369617465642076616c696461746f7220494420666f72206163636f756e742e344475706c6963617465644b657904682052656769737465726564206475706c6963617465206b65792e184e6f4b65797304a8204e6f206b65797320617265206173736f63696174656420776974682074686973206163636f756e742e2444656d6f6372616379012444656d6f6372616379383c5075626c696350726f70436f756e7401002450726f70496e646578100000000004f420546865206e756d626572206f6620287075626c6963292070726f706f73616c7320746861742068617665206265656e206d61646520736f206661722e2c5075626c696350726f707301009c5665633c2850726f70496e6465782c20543a3a486173682c20543a3a4163636f756e744964293e040004210120546865207075626c69632070726f706f73616c732e20556e736f727465642e20546865207365636f6e64206974656d206973207468652070726f706f73616c277320686173682e244465706f7369744f660001052450726f70496e64657884285665633c543a3a4163636f756e7449643e2c2042616c616e63654f663c543e290004000c842054686f73652077686f2068617665206c6f636b65642061206465706f7369742e00d82054574f582d4e4f54453a20536166652c20617320696e6372656173696e6720696e7465676572206b6579732061726520736166652e24507265696d616765730001061c543a3a48617368e8507265696d6167655374617475733c543a3a4163636f756e7449642c2042616c616e63654f663c543e2c20543a3a426c6f636b4e756d6265723e000400086101204d6170206f662068617368657320746f207468652070726f706f73616c20707265696d6167652c20616c6f6e6720776974682077686f207265676973746572656420697420616e64207468656972206465706f7369742ee42054686520626c6f636b206e756d6265722069732074686520626c6f636b20617420776869636820697420776173206465706f73697465642e3c5265666572656e64756d436f756e7401003c5265666572656e64756d496e646578100000000004310120546865206e6578742066726565207265666572656e64756d20696e6465782c20616b6120746865206e756d626572206f66207265666572656e6461207374617274656420736f206661722e344c6f77657374556e62616b656401003c5265666572656e64756d496e646578100000000008250120546865206c6f77657374207265666572656e64756d20696e64657820726570726573656e74696e6720616e20756e62616b6564207265666572656e64756d2e20457175616c20746fdc20605265666572656e64756d436f756e74602069662074686572652069736e2774206120756e62616b6564207265666572656e64756d2e405265666572656e64756d496e666f4f660001053c5265666572656e64756d496e646578d45265666572656e64756d496e666f3c543a3a426c6f636b4e756d6265722c20543a3a486173682c2042616c616e63654f663c543e3e0004000cb420496e666f726d6174696f6e20636f6e6365726e696e6720616e7920676976656e207265666572656e64756d2e0009012054574f582d4e4f54453a205341464520617320696e646578657320617265206e6f7420756e64657220616e2061747461636b6572e280997320636f6e74726f6c2e20566f74696e674f6601010530543a3a4163636f756e744964c8566f74696e673c42616c616e63654f663c543e2c20543a3a4163636f756e7449642c20543a3a426c6f636b4e756d6265723e00d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000105d0120416c6c20766f74657320666f72206120706172746963756c617220766f7465722e2057652073746f7265207468652062616c616e636520666f7220746865206e756d626572206f6620766f74657320746861742077655d012068617665207265636f726465642e20546865207365636f6e64206974656d2069732074686520746f74616c20616d6f756e74206f662064656c65676174696f6e732c20746861742077696c6c2062652061646465642e00e82054574f582d4e4f54453a205341464520617320604163636f756e7449646073206172652063727970746f2068617368657320616e797761792e144c6f636b7300010530543a3a4163636f756e74496438543a3a426c6f636b4e756d626572000400105d01204163636f756e747320666f7220776869636820746865726520617265206c6f636b7320696e20616374696f6e207768696368206d61792062652072656d6f76656420617420736f6d6520706f696e7420696e207468655101206675747572652e205468652076616c75652069732074686520626c6f636b206e756d62657220617420776869636820746865206c6f636b206578706972657320616e64206d61792062652072656d6f7665642e00c02054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e544c6173745461626c656457617345787465726e616c010010626f6f6c0400085901205472756520696620746865206c617374207265666572656e64756d207461626c656420776173207375626d69747465642065787465726e616c6c792e2046616c7365206966206974207761732061207075626c6963282070726f706f73616c2e304e65787445787465726e616c00006028543a3a486173682c20566f74655468726573686f6c6429040010590120546865207265666572656e64756d20746f206265207461626c6564207768656e6576657220697420776f756c642062652076616c696420746f207461626c6520616e2065787465726e616c2070726f706f73616c2e550120546869732068617070656e73207768656e2061207265666572656e64756d206e6565647320746f206265207461626c656420616e64206f6e65206f662074776f20636f6e646974696f6e7320617265206d65743aa4202d20604c6173745461626c656457617345787465726e616c60206973206066616c7365603b206f7268202d20605075626c696350726f70736020697320656d7074792e24426c61636b6c6973740001061c543a3a486173688c28543a3a426c6f636b4e756d6265722c205665633c543a3a4163636f756e7449643e290004000851012041207265636f7264206f662077686f207665746f656420776861742e204d6170732070726f706f73616c206861736820746f206120706f737369626c65206578697374656e7420626c6f636b206e756d626572e82028756e74696c207768656e206974206d6179206e6f742062652072657375626d69747465642920616e642077686f207665746f65642069742e3443616e63656c6c6174696f6e730101061c543a3a4861736810626f6f6c000400042901205265636f7264206f6620616c6c2070726f706f73616c7320746861742068617665206265656e207375626a65637420746f20656d657267656e63792063616e63656c6c6174696f6e2e3853746f7261676556657273696f6e00002052656c656173657304000c7c2053746f726167652076657273696f6e206f66207468652070616c6c65742e0098204e6577206e6574776f726b732073746172742077697468206c6173742076657273696f6e2e015c1c70726f706f7365083470726f706f73616c5f686173681c543a3a486173681476616c756554436f6d706163743c42616c616e63654f663c543e3e3ca02050726f706f736520612073656e73697469766520616374696f6e20746f2062652074616b656e2e00190120546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d7573748420686176652066756e647320746f20636f76657220746865206465706f7369742e00d8202d206070726f706f73616c5f68617368603a205468652068617368206f66207468652070726f706f73616c20707265696d6167652e1901202d206076616c7565603a2054686520616d6f756e74206f66206465706f73697420286d757374206265206174206c6561737420604d696e696d756d4465706f73697460292e004820456d697473206050726f706f736564602e002c2023203c7765696768743e54202d20436f6d706c65786974793a20604f28312960b4202d2044622072656164733a20605075626c696350726f70436f756e74602c20605075626c696350726f707360ec202d204462207772697465733a20605075626c696350726f70436f756e74602c20605075626c696350726f7073602c20604465706f7369744f6660302023203c2f7765696768743e187365636f6e64082070726f706f73616c48436f6d706163743c50726f70496e6465783e4c7365636f6e64735f75707065725f626f756e6430436f6d706163743c7533323e38b8205369676e616c732061677265656d656e742077697468206120706172746963756c61722070726f706f73616c2e00050120546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e6465721501206d75737420686176652066756e647320746f20636f76657220746865206465706f7369742c20657175616c20746f20746865206f726967696e616c206465706f7369742e00cc202d206070726f706f73616c603a2054686520696e646578206f66207468652070726f706f73616c20746f207365636f6e642e4501202d20607365636f6e64735f75707065725f626f756e64603a20616e20757070657220626f756e64206f6e207468652063757272656e74206e756d626572206f66207365636f6e6473206f6e2074686973290120202070726f706f73616c2e2045787472696e736963206973207765696768746564206163636f7264696e6720746f20746869732076616c75652077697468206e6f20726566756e642e002c2023203c7765696768743e3901202d20436f6d706c65786974793a20604f28532960207768657265205320697320746865206e756d626572206f66207365636f6e647320612070726f706f73616c20616c7265616479206861732e60202d2044622072656164733a20604465706f7369744f666064202d204462207772697465733a20604465706f7369744f6660302023203c2f7765696768743e10766f746508247265665f696e64657860436f6d706163743c5265666572656e64756d496e6465783e10766f7465644163636f756e74566f74653c42616c616e63654f663c543e3e38350120566f746520696e2061207265666572656e64756d2e2049662060766f74652e69735f6179652829602c2074686520766f746520697320746f20656e616374207468652070726f706f73616c3bbc206f7468657277697365206974206973206120766f746520746f206b65657020746865207374617475732071756f2e00cc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e00e0202d20607265665f696e646578603a2054686520696e646578206f6620746865207265666572656e64756d20746f20766f746520666f722e88202d2060766f7465603a2054686520766f746520636f6e66696775726174696f6e2e002c2023203c7765696768743e4901202d20436f6d706c65786974793a20604f28522960207768657265205220697320746865206e756d626572206f66207265666572656e64756d732074686520766f7465722068617320766f746564206f6e2ea42020207765696768742069732063686172676564206173206966206d6178696d756d20766f7465732ef4202d2044622072656164733a20605265666572656e64756d496e666f4f66602c2060566f74696e674f66602c206062616c616e636573206c6f636b7360f8202d204462207772697465733a20605265666572656e64756d496e666f4f66602c2060566f74696e674f66602c206062616c616e636573206c6f636b7360302023203c2f7765696768743e40656d657267656e63795f63616e63656c04247265665f696e6465783c5265666572656e64756d496e646578305101205363686564756c6520616e20656d657267656e63792063616e63656c6c6174696f6e206f662061207265666572656e64756d2e2043616e6e6f742068617070656e20747769636520746f207468652073616d6530207265666572656e64756d2e00fc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265206043616e63656c6c6174696f6e4f726967696e602e00d4202d607265665f696e646578603a2054686520696e646578206f6620746865207265666572656e64756d20746f2063616e63656c2e002c2023203c7765696768743e58202d20436f6d706c65786974793a20604f283129602ec0202d2044622072656164733a20605265666572656e64756d496e666f4f66602c206043616e63656c6c6174696f6e7360c4202d204462207772697465733a20605265666572656e64756d496e666f4f66602c206043616e63656c6c6174696f6e7360302023203c2f7765696768743e4065787465726e616c5f70726f706f7365043470726f706f73616c5f686173681c543a3a48617368343101205363686564756c652061207265666572656e64756d20746f206265207461626c6564206f6e6365206974206973206c6567616c20746f207363686564756c6520616e2065787465726e616c30207265666572656e64756d2e00ec20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265206045787465726e616c4f726967696e602e00d8202d206070726f706f73616c5f68617368603a2054686520707265696d6167652068617368206f66207468652070726f706f73616c2e002c2023203c7765696768743e2d01202d20436f6d706c657869747920604f2856296020776974682056206e756d626572206f66207665746f65727320696e2074686520626c61636b6c697374206f662070726f706f73616c2ebc2020204465636f64696e6720766563206f66206c656e67746820562e2043686172676564206173206d6178696d756da0202d2044622072656164733a20604e65787445787465726e616c602c2060426c61636b6c6973746070202d204462207772697465733a20604e65787445787465726e616c60302023203c2f7765696768743e6465787465726e616c5f70726f706f73655f6d616a6f72697479043470726f706f73616c5f686173681c543a3a48617368385901205363686564756c652061206d616a6f726974792d63617272696573207265666572656e64756d20746f206265207461626c6564206e657874206f6e6365206974206973206c6567616c20746f207363686564756c656020616e2065787465726e616c207265666572656e64756d2e00f020546865206469737061746368206f6620746869732063616c6c206d757374206265206045787465726e616c4d616a6f726974794f726967696e602e00d8202d206070726f706f73616c5f68617368603a2054686520707265696d6167652068617368206f66207468652070726f706f73616c2e004d0120556e6c696b65206065787465726e616c5f70726f706f7365602c20626c61636b6c697374696e6720686173206e6f20656666656374206f6e207468697320616e64206974206d6179207265706c61636520619c207072652d7363686564756c6564206065787465726e616c5f70726f706f7365602063616c6c2e002c2023203c7765696768743e54202d20436f6d706c65786974793a20604f283129606c202d2044622077726974653a20604e65787445787465726e616c60302023203c2f7765696768743e6065787465726e616c5f70726f706f73655f64656661756c74043470726f706f73616c5f686173681c543a3a48617368384901205363686564756c652061206e656761746976652d7475726e6f75742d62696173207265666572656e64756d20746f206265207461626c6564206e657874206f6e6365206974206973206c6567616c20746f84207363686564756c6520616e2065787465726e616c207265666572656e64756d2e00ec20546865206469737061746368206f6620746869732063616c6c206d757374206265206045787465726e616c44656661756c744f726967696e602e00d8202d206070726f706f73616c5f68617368603a2054686520707265696d6167652068617368206f66207468652070726f706f73616c2e004d0120556e6c696b65206065787465726e616c5f70726f706f7365602c20626c61636b6c697374696e6720686173206e6f20656666656374206f6e207468697320616e64206974206d6179207265706c61636520619c207072652d7363686564756c6564206065787465726e616c5f70726f706f7365602063616c6c2e002c2023203c7765696768743e54202d20436f6d706c65786974793a20604f283129606c202d2044622077726974653a20604e65787445787465726e616c60302023203c2f7765696768743e28666173745f747261636b0c3470726f706f73616c5f686173681c543a3a4861736834766f74696e675f706572696f6438543a3a426c6f636b4e756d6265721464656c617938543a3a426c6f636b4e756d626572505101205363686564756c65207468652063757272656e746c792065787465726e616c6c792d70726f706f736564206d616a6f726974792d63617272696573207265666572656e64756d20746f206265207461626c6564650120696d6d6564696174656c792e204966207468657265206973206e6f2065787465726e616c6c792d70726f706f736564207265666572656e64756d2063757272656e746c792c206f72206966207468657265206973206f6e65ec20627574206974206973206e6f742061206d616a6f726974792d63617272696573207265666572656e64756d207468656e206974206661696c732e00d420546865206469737061746368206f6620746869732063616c6c206d757374206265206046617374547261636b4f726967696e602e00f8202d206070726f706f73616c5f68617368603a205468652068617368206f66207468652063757272656e742065787465726e616c2070726f706f73616c2e6101202d2060766f74696e675f706572696f64603a2054686520706572696f64207468617420697320616c6c6f77656420666f7220766f74696e67206f6e20746869732070726f706f73616c2e20496e6372656173656420746f982020206046617374547261636b566f74696e67506572696f646020696620746f6f206c6f772e5501202d206064656c6179603a20546865206e756d626572206f6620626c6f636b20616674657220766f74696e672068617320656e64656420696e20617070726f76616c20616e6420746869732073686f756c64206265bc202020656e61637465642e205468697320646f65736e277420686176652061206d696e696d756d20616d6f756e742e004420456d697473206053746172746564602e002c2023203c7765696768743e54202d20436f6d706c65786974793a20604f28312960b8202d2044622072656164733a20604e65787445787465726e616c602c20605265666572656e64756d436f756e74600d01202d204462207772697465733a20604e65787445787465726e616c602c20605265666572656e64756d436f756e74602c20605265666572656e64756d496e666f4f666060202d2042617365205765696768743a2033302e3120c2b573302023203c2f7765696768743e347665746f5f65787465726e616c043470726f706f73616c5f686173681c543a3a4861736838bc205665746f20616e6420626c61636b6c697374207468652065787465726e616c2070726f706f73616c20686173682e00dc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d75737420626520605665746f4f726967696e602e003101202d206070726f706f73616c5f68617368603a2054686520707265696d6167652068617368206f66207468652070726f706f73616c20746f207665746f20616e6420626c61636b6c6973742e004020456d69747320605665746f6564602e002c2023203c7765696768743e1901202d20436f6d706c65786974793a20604f2856202b206c6f6728562929602077686572652056206973206e756d626572206f6620606578697374696e67207665746f657273604501202020506572666f726d7320612062696e61727920736561726368206f6e20606578697374696e675f7665746f657273602077686963682073686f756c64206e6f742062652076657279206c617267652ea0202d2044622072656164733a20604e65787445787465726e616c602c2060426c61636b6c69737460a4202d204462207772697465733a20604e65787445787465726e616c602c2060426c61636b6c69737460302023203c2f7765696768743e4463616e63656c5f7265666572656e64756d04247265665f696e64657860436f6d706163743c5265666572656e64756d496e6465783e28542052656d6f76652061207265666572656e64756d2e00c420546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f526f6f745f2e00d8202d20607265665f696e646578603a2054686520696e646578206f6620746865207265666572656e64756d20746f2063616e63656c2e002c2023203c7765696768743e58202d20436f6d706c65786974793a20604f283129602e80202d204462207772697465733a20605265666572656e64756d496e666f4f6660302023203c2f7765696768743e3463616e63656c5f717565756564041477686963683c5265666572656e64756d496e6465782ca02043616e63656c20612070726f706f73616c2071756575656420666f7220656e6163746d656e742e00c420546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f526f6f745f2e00c8202d20607768696368603a2054686520696e646578206f6620746865207265666572656e64756d20746f2063616e63656c2e002c2023203c7765696768743e3501202d20604f284429602077686572652060446020697320746865206974656d7320696e207468652064697370617463682071756575652e205765696768746564206173206044203d203130602ec8202d2044622072656164733a20607363686564756c6572206c6f6f6b7570602c207363686564756c6572206167656e646160cc202d204462207772697465733a20607363686564756c6572206c6f6f6b7570602c207363686564756c6572206167656e646160302023203c2f7765696768743e2064656c65676174650c08746f30543a3a4163636f756e74496428636f6e76696374696f6e28436f6e76696374696f6e1c62616c616e63653042616c616e63654f663c543e683d012044656c65676174652074686520766f74696e6720706f77657220287769746820736f6d6520676976656e20636f6e76696374696f6e29206f66207468652073656e64696e67206163636f756e742e005901205468652062616c616e63652064656c656761746564206973206c6f636b656420666f72206173206c6f6e6720617320697427732064656c6567617465642c20616e64207468657265616674657220666f7220746865cc2074696d6520617070726f70726961746520666f722074686520636f6e76696374696f6e2773206c6f636b20706572696f642e00610120546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2c20616e6420746865207369676e696e67206163636f756e74206d757374206569746865723a782020202d2062652064656c65676174696e6720616c72656164793b206f725d012020202d2068617665206e6f20766f74696e67206163746976697479202869662074686572652069732c207468656e2069742077696c6c206e65656420746f2062652072656d6f7665642f636f6e736f6c6964617465649820202020207468726f7567682060726561705f766f746560206f722060756e766f746560292e004901202d2060746f603a20546865206163636f756e742077686f736520766f74696e6720746865206074617267657460206163636f756e74277320766f74696e6720706f7765722077696c6c20666f6c6c6f772e5901202d2060636f6e76696374696f6e603a2054686520636f6e76696374696f6e20746861742077696c6c20626520617474616368656420746f207468652064656c65676174656420766f7465732e205768656e2074686545012020206163636f756e7420697320756e64656c6567617465642c207468652066756e64732077696c6c206265206c6f636b656420666f722074686520636f72726573706f6e64696e6720706572696f642e5501202d206062616c616e6365603a2054686520616d6f756e74206f6620746865206163636f756e7427732062616c616e636520746f206265207573656420696e2064656c65676174696e672e2054686973206d757374c82020206e6f74206265206d6f7265207468616e20746865206163636f756e7427732063757272656e742062616c616e63652e004c20456d697473206044656c656761746564602e002c2023203c7765696768743e5901202d20436f6d706c65786974793a20604f28522960207768657265205220697320746865206e756d626572206f66207265666572656e64756d732074686520766f7465722064656c65676174696e6720746f20686173cc202020766f746564206f6e2e205765696768742069732063686172676564206173206966206d6178696d756d20766f7465732ec4202d2044622072656164733a20332a60566f74696e674f66602c20606f726967696e206163636f756e74206c6f636b7360c8202d204462207772697465733a20332a60566f74696e674f66602c20606f726967696e206163636f756e74206c6f636b7360a4202d2044622072656164732070657220766f7465733a20605265666572656e64756d496e666f4f6660a8202d204462207772697465732070657220766f7465733a20605265666572656e64756d496e666f4f6660302023203c2f7765696768743e28756e64656c65676174650048d020556e64656c65676174652074686520766f74696e6720706f776572206f66207468652073656e64696e67206163636f756e742e00610120546f6b656e73206d617920626520756e6c6f636b656420666f6c6c6f77696e67206f6e636520616e20616d6f756e74206f662074696d6520636f6e73697374656e74207769746820746865206c6f636b20706572696f64e0206f662074686520636f6e76696374696f6e2077697468207768696368207468652064656c65676174696f6e20776173206973737565642e00490120546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f20616e6420746865207369676e696e67206163636f756e74206d757374206265582063757272656e746c792064656c65676174696e672e005420456d6974732060556e64656c656761746564602e002c2023203c7765696768743e5901202d20436f6d706c65786974793a20604f28522960207768657265205220697320746865206e756d626572206f66207265666572656e64756d732074686520766f7465722064656c65676174696e6720746f20686173cc202020766f746564206f6e2e205765696768742069732063686172676564206173206966206d6178696d756d20766f7465732e64202d2044622072656164733a20322a60566f74696e674f666068202d204462207772697465733a20322a60566f74696e674f6660a4202d2044622072656164732070657220766f7465733a20605265666572656e64756d496e666f4f6660a8202d204462207772697465732070657220766f7465733a20605265666572656e64756d496e666f4f6660302023203c2f7765696768743e58636c6561725f7075626c69635f70726f706f73616c7300207420436c6561727320616c6c207075626c69632070726f706f73616c732e00c420546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f526f6f745f2e002c2023203c7765696768743e28202d20604f283129602e6c202d204462207772697465733a20605075626c696350726f707360302023203c2f7765696768743e346e6f74655f707265696d6167650440656e636f6465645f70726f706f73616c1c5665633c75383e3861012052656769737465722074686520707265696d61676520666f7220616e207570636f6d696e672070726f706f73616c2e205468697320646f65736e27742072657175697265207468652070726f706f73616c20746f206265250120696e207468652064697370617463682071756575652062757420646f657320726571756972652061206465706f7369742c2072657475726e6564206f6e636520656e61637465642e00cc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e00c8202d2060656e636f6465645f70726f706f73616c603a2054686520707265696d616765206f6620612070726f706f73616c2e005c20456d6974732060507265696d6167654e6f746564602e002c2023203c7765696768743e6901202d20436f6d706c65786974793a20604f28452960207769746820452073697a65206f662060656e636f6465645f70726f706f73616c60202870726f7465637465642062792061207265717569726564206465706f736974292e60202d2044622072656164733a2060507265696d616765736064202d204462207772697465733a2060507265696d6167657360302023203c2f7765696768743e646e6f74655f707265696d6167655f6f7065726174696f6e616c0440656e636f6465645f70726f706f73616c1c5665633c75383e040d012053616d6520617320606e6f74655f707265696d6167656020627574206f726967696e20697320604f7065726174696f6e616c507265696d6167654f726967696e602e586e6f74655f696d6d696e656e745f707265696d6167650440656e636f6465645f70726f706f73616c1c5665633c75383e4045012052656769737465722074686520707265696d61676520666f7220616e207570636f6d696e672070726f706f73616c2e2054686973207265717569726573207468652070726f706f73616c20746f206265410120696e207468652064697370617463682071756575652e204e6f206465706f736974206973206e65656465642e205768656e20746869732063616c6c206973207375636365737366756c2c20692e652e39012074686520707265696d61676520686173206e6f74206265656e2075706c6f61646564206265666f726520616e64206d61746368657320736f6d6520696d6d696e656e742070726f706f73616c2c40206e6f2066656520697320706169642e00cc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e00c8202d2060656e636f6465645f70726f706f73616c603a2054686520707265696d616765206f6620612070726f706f73616c2e005c20456d6974732060507265696d6167654e6f746564602e002c2023203c7765696768743e6901202d20436f6d706c65786974793a20604f28452960207769746820452073697a65206f662060656e636f6465645f70726f706f73616c60202870726f7465637465642062792061207265717569726564206465706f736974292e60202d2044622072656164733a2060507265696d616765736064202d204462207772697465733a2060507265696d6167657360302023203c2f7765696768743e886e6f74655f696d6d696e656e745f707265696d6167655f6f7065726174696f6e616c0440656e636f6465645f70726f706f73616c1c5665633c75383e0431012053616d6520617320606e6f74655f696d6d696e656e745f707265696d6167656020627574206f726967696e20697320604f7065726174696f6e616c507265696d6167654f726967696e602e34726561705f707265696d616765083470726f706f73616c5f686173681c543a3a486173686070726f706f73616c5f6c656e5f75707065725f626f756e6430436f6d706163743c7533323e4cf42052656d6f766520616e20657870697265642070726f706f73616c20707265696d61676520616e6420636f6c6c65637420746865206465706f7369742e00cc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e00d0202d206070726f706f73616c5f68617368603a2054686520707265696d6167652068617368206f6620612070726f706f73616c2e2d01202d206070726f706f73616c5f6c656e6774685f75707065725f626f756e64603a20616e20757070657220626f756e64206f6e206c656e677468206f66207468652070726f706f73616c2e010120202045787472696e736963206973207765696768746564206163636f7264696e6720746f20746869732076616c75652077697468206e6f20726566756e642e00510120546869732077696c6c206f6e6c7920776f726b2061667465722060566f74696e67506572696f646020626c6f636b732066726f6d207468652074696d6520746861742074686520707265696d616765207761735d01206e6f7465642c2069662069742773207468652073616d65206163636f756e7420646f696e672069742e2049662069742773206120646966666572656e74206163636f756e742c207468656e206974276c6c206f6e6c79b020776f726b20616e206164646974696f6e616c2060456e6163746d656e74506572696f6460206c617465722e006020456d6974732060507265696d616765526561706564602e002c2023203c7765696768743ed0202d20436f6d706c65786974793a20604f284429602077686572652044206973206c656e677468206f662070726f706f73616c2ebc202d2044622072656164733a2060507265696d61676573602c2070726f7669646572206163636f756e742064617461bc202d204462207772697465733a2060507265696d61676573602070726f7669646572206163636f756e742064617461302023203c2f7765696768743e18756e6c6f636b041874617267657430543a3a4163636f756e7449642ca420556e6c6f636b20746f6b656e732074686174206861766520616e2065787069726564206c6f636b2e00cc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e00bc202d2060746172676574603a20546865206163636f756e7420746f2072656d6f766520746865206c6f636b206f6e2e002c2023203c7765696768743ed4202d20436f6d706c657869747920604f2852296020776974682052206e756d626572206f6620766f7465206f66207461726765742eec202d2044622072656164733a2060566f74696e674f66602c206062616c616e636573206c6f636b73602c2060746172676574206163636f756e7460f0202d204462207772697465733a2060566f74696e674f66602c206062616c616e636573206c6f636b73602c2060746172676574206163636f756e7460302023203c2f7765696768743e2c72656d6f76655f766f74650414696e6465783c5265666572656e64756d496e6465787c802052656d6f7665206120766f746520666f722061207265666572656e64756d2e00102049663a8c202d20746865207265666572656e64756d207761732063616e63656c6c65642c206f7280202d20746865207265666572656e64756d206973206f6e676f696e672c206f7294202d20746865207265666572656e64756d2068617320656e6465642073756368207468617401012020202d2074686520766f7465206f6620746865206163636f756e742077617320696e206f70706f736974696f6e20746f2074686520726573756c743b206f72d82020202d20746865726520776173206e6f20636f6e76696374696f6e20746f20746865206163636f756e74277320766f74653b206f72882020202d20746865206163636f756e74206d61646520612073706c697420766f74656101202e2e2e7468656e2074686520766f74652069732072656d6f76656420636c65616e6c7920616e64206120666f6c6c6f77696e672063616c6c20746f2060756e6c6f636b60206d617920726573756c7420696e206d6f72655c2066756e6473206265696e6720617661696c61626c652e00ac2049662c20686f77657665722c20746865207265666572656e64756d2068617320656e64656420616e643af0202d2069742066696e697368656420636f72726573706f6e64696e6720746f2074686520766f7465206f6620746865206163636f756e742c20616e64e0202d20746865206163636f756e74206d6164652061207374616e6461726420766f7465207769746820636f6e76696374696f6e2c20616e64c0202d20746865206c6f636b20706572696f64206f662074686520636f6e76696374696f6e206973206e6f74206f7665725d01202e2e2e7468656e20746865206c6f636b2077696c6c206265206167677265676174656420696e746f20746865206f766572616c6c206163636f756e742773206c6f636b2c207768696368206d617920696e766f6c76655d01202a6f7665726c6f636b696e672a20287768657265207468652074776f206c6f636b732061726520636f6d62696e656420696e746f20612073696e676c65206c6f636b207468617420697320746865206d6178696d756de8206f6620626f74682074686520616d6f756e74206c6f636b656420616e64207468652074696d65206973206974206c6f636b656420666f72292e004d0120546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2c20616e6420746865207369676e6572206d7573742068617665206120766f74658c207265676973746572656420666f72207265666572656e64756d2060696e646578602e00f8202d2060696e646578603a2054686520696e646578206f66207265666572656e64756d206f662074686520766f746520746f2062652072656d6f7665642e002c2023203c7765696768743e4101202d20604f2852202b206c6f6720522960207768657265205220697320746865206e756d626572206f66207265666572656e646120746861742060746172676574602068617320766f746564206f6e2edc2020205765696768742069732063616c63756c6174656420666f7220746865206d6178696d756d206e756d626572206f6620766f74652eac202d2044622072656164733a20605265666572656e64756d496e666f4f66602c2060566f74696e674f6660b0202d204462207772697465733a20605265666572656e64756d496e666f4f66602c2060566f74696e674f6660302023203c2f7765696768743e4472656d6f76655f6f746865725f766f7465081874617267657430543a3a4163636f756e74496414696e6465783c5265666572656e64756d496e6465784c802052656d6f7665206120766f746520666f722061207265666572656e64756d2e0051012049662074686520607461726765746020697320657175616c20746f20746865207369676e65722c207468656e20746869732066756e6374696f6e2069732065786163746c79206571756976616c656e7420746f3101206072656d6f76655f766f7465602e204966206e6f7420657175616c20746f20746865207369676e65722c207468656e2074686520766f7465206d757374206861766520657870697265642c590120656974686572206265636175736520746865207265666572656e64756d207761732063616e63656c6c65642c20626563617573652074686520766f746572206c6f737420746865207265666572656e64756d206f729c20626563617573652074686520636f6e76696374696f6e20706572696f64206973206f7665722e00cc20546865206469737061746368206f726967696e206f6620746869732063616c6c206d757374206265205f5369676e65645f2e005101202d2060746172676574603a20546865206163636f756e74206f662074686520766f746520746f2062652072656d6f7665643b2074686973206163636f756e74206d757374206861766520766f74656420666f72582020207265666572656e64756d2060696e646578602ef8202d2060696e646578603a2054686520696e646578206f66207265666572656e64756d206f662074686520766f746520746f2062652072656d6f7665642e002c2023203c7765696768743e4101202d20604f2852202b206c6f6720522960207768657265205220697320746865206e756d626572206f66207265666572656e646120746861742060746172676574602068617320766f746564206f6e2edc2020205765696768742069732063616c63756c6174656420666f7220746865206d6178696d756d206e756d626572206f6620766f74652eac202d2044622072656164733a20605265666572656e64756d496e666f4f66602c2060566f74696e674f6660b0202d204462207772697465733a20605265666572656e64756d496e666f4f66602c2060566f74696e674f6660302023203c2f7765696768743e38656e6163745f70726f706f73616c083470726f706f73616c5f686173681c543a3a4861736814696e6465783c5265666572656e64756d496e64657804510120456e61637420612070726f706f73616c2066726f6d2061207265666572656e64756d2e20466f72206e6f77207765206a757374206d616b65207468652077656967687420626520746865206d6178696d756d2e01442050726f706f736564082450726f70496e6465781c42616c616e63650429012041206d6f74696f6e20686173206265656e2070726f706f7365642062792061207075626c6963206163636f756e742e205b70726f706f73616c5f696e6465782c206465706f7369745d185461626c65640c2450726f70496e6465781c42616c616e6365385665633c4163636f756e7449643e0475012041207075626c69632070726f706f73616c20686173206265656e207461626c656420666f72207265666572656e64756d20766f74652e205b70726f706f73616c5f696e6465782c206465706f7369742c206465706f7369746f72735d3845787465726e616c5461626c656400049820416e2065787465726e616c2070726f706f73616c20686173206265656e207461626c65642e1c53746172746564083c5265666572656e64756d496e64657834566f74655468726573686f6c6404bc2041207265666572656e64756d2068617320626567756e2e205b7265665f696e6465782c207468726573686f6c645d18506173736564043c5265666572656e64756d496e64657804e020412070726f706f73616c20686173206265656e20617070726f766564206279207265666572656e64756d2e205b7265665f696e6465785d244e6f74506173736564043c5265666572656e64756d496e64657804e020412070726f706f73616c20686173206265656e2072656a6563746564206279207265666572656e64756d2e205b7265665f696e6465785d2443616e63656c6c6564043c5265666572656e64756d496e64657804b42041207265666572656e64756d20686173206265656e2063616e63656c6c65642e205b7265665f696e6465785d204578656375746564083c5265666572656e64756d496e64657810626f6f6c04c020412070726f706f73616c20686173206265656e20656e61637465642e205b7265665f696e6465782c2069735f6f6b5d2444656c65676174656408244163636f756e744964244163636f756e74496404190120416e206163636f756e74206861732064656c65676174656420746865697220766f746520746f20616e6f74686572206163636f756e742e205b77686f2c207461726765745d2c556e64656c65676174656404244163636f756e74496404f020416e205b6163636f756e745d206861732063616e63656c6c656420612070726576696f75732064656c65676174696f6e206f7065726174696f6e2e185665746f65640c244163636f756e74496410486173682c426c6f636b4e756d62657204090120416e2065787465726e616c2070726f706f73616c20686173206265656e207665746f65642e205b77686f2c2070726f706f73616c5f686173682c20756e74696c5d34507265696d6167654e6f7465640c1048617368244163636f756e7449641c42616c616e636504590120412070726f706f73616c277320707265696d61676520776173206e6f7465642c20616e6420746865206465706f7369742074616b656e2e205b70726f706f73616c5f686173682c2077686f2c206465706f7369745d30507265696d616765557365640c1048617368244163636f756e7449641c42616c616e636508150120412070726f706f73616c20707265696d616765207761732072656d6f76656420616e6420757365642028746865206465706f736974207761732072657475726e6564292e8c205b70726f706f73616c5f686173682c2070726f76696465722c206465706f7369745d3c507265696d616765496e76616c69640810486173683c5265666572656e64756d496e64657804790120412070726f706f73616c20636f756c64206e6f7420626520657865637574656420626563617573652069747320707265696d6167652077617320696e76616c69642e205b70726f706f73616c5f686173682c207265665f696e6465785d3c507265696d6167654d697373696e670810486173683c5265666572656e64756d496e64657804790120412070726f706f73616c20636f756c64206e6f7420626520657865637574656420626563617573652069747320707265696d61676520776173206d697373696e672e205b70726f706f73616c5f686173682c207265665f696e6465785d38507265696d616765526561706564101048617368244163636f756e7449641c42616c616e6365244163636f756e744964082d012041207265676973746572656420707265696d616765207761732072656d6f76656420616e6420746865206465706f73697420636f6c6c656374656420627920746865207265617065722eac205b70726f706f73616c5f686173682c2070726f76696465722c206465706f7369742c207265617065725d20556e6c6f636b656404244163636f756e74496404b420416e205b6163636f756e745d20686173206265656e20756e6c6f636b6564207375636365737366756c6c792e203c456e6163746d656e74506572696f6438543a3a426c6f636b4e756d62657210002f0d0014710120546865206d696e696d756d20706572696f64206f66206c6f636b696e6720616e642074686520706572696f64206265747765656e20612070726f706f73616c206265696e6720617070726f76656420616e6420656e61637465642e0031012049742073686f756c642067656e6572616c6c792062652061206c6974746c65206d6f7265207468616e2074686520756e7374616b6520706572696f6420746f20656e737572652074686174690120766f74696e67207374616b657273206861766520616e206f70706f7274756e69747920746f2072656d6f7665207468656d73656c7665732066726f6d207468652073797374656d20696e2074686520636173652077686572659c207468657920617265206f6e20746865206c6f73696e672073696465206f66206120766f74652e304c61756e6368506572696f6438543a3a426c6f636b4e756d62657210004e0c0004e420486f77206f6674656e2028696e20626c6f636b7329206e6577207075626c6963207265666572656e646120617265206c61756e636865642e30566f74696e67506572696f6438543a3a426c6f636b4e756d62657210004e0c0004b820486f77206f6674656e2028696e20626c6f636b732920746f20636865636b20666f72206e657720766f7465732e384d696e696d756d4465706f7369743042616c616e63654f663c543e400000c16ff2862300000000000000000004350120546865206d696e696d756d20616d6f756e7420746f20626520757365642061732061206465706f73697420666f722061207075626c6963207265666572656e64756d2070726f706f73616c2e5446617374547261636b566f74696e67506572696f6438543a3a426c6f636b4e756d626572108051010004ec204d696e696d756d20766f74696e6720706572696f6420616c6c6f77656420666f7220616e20656d657267656e6379207265666572656e64756d2e34436f6f6c6f6666506572696f6438543a3a426c6f636b4e756d62657210004e0c0004610120506572696f6420696e20626c6f636b7320776865726520616e2065787465726e616c2070726f706f73616c206d6179206e6f742062652072652d7375626d6974746564206166746572206265696e67207665746f65642e4c507265696d616765427974654465706f7369743042616c616e63654f663c543e400010a5d4e800000000000000000000000429012054686520616d6f756e74206f662062616c616e63652074686174206d757374206265206465706f7369746564207065722062797465206f6620707265696d6167652073746f7265642e204d6178566f7465730c753332106400000004b020546865206d6178696d756d206e756d626572206f6620766f74657320666f7220616e206163636f756e742e842056616c75654c6f7704382056616c756520746f6f206c6f773c50726f706f73616c4d697373696e6704602050726f706f73616c20646f6573206e6f7420657869737420426164496e646578043820556e6b6e6f776e20696e6465783c416c726561647943616e63656c656404982043616e6e6f742063616e63656c207468652073616d652070726f706f73616c207477696365444475706c696361746550726f706f73616c04582050726f706f73616c20616c7265616479206d6164654c50726f706f73616c426c61636b6c6973746564046c2050726f706f73616c207374696c6c20626c61636b6c6973746564444e6f7453696d706c654d616a6f7269747904ac204e6578742065787465726e616c2070726f706f73616c206e6f742073696d706c65206d616a6f726974792c496e76616c696448617368043420496e76616c69642068617368284e6f50726f706f73616c0454204e6f2065787465726e616c2070726f706f73616c34416c72656164795665746f6564049c204964656e74697479206d6179206e6f74207665746f20612070726f706f73616c207477696365304e6f7444656c6567617465640438204e6f742064656c656761746564444475706c6963617465507265696d616765045c20507265696d61676520616c7265616479206e6f7465642c4e6f74496d6d696e656e740434204e6f7420696d6d696e656e7420546f6f4561726c79042820546f6f206561726c7920496d6d696e656e74042420496d6d696e656e743c507265696d6167654d697373696e67044c20507265696d616765206e6f7420666f756e64445265666572656e64756d496e76616c6964048820566f746520676976656e20666f7220696e76616c6964207265666572656e64756d3c507265696d616765496e76616c6964044420496e76616c696420707265696d6167652c4e6f6e6557616974696e670454204e6f2070726f706f73616c732077616974696e67244e6f744c6f636b656404a42054686520746172676574206163636f756e7420646f6573206e6f7420686176652061206c6f636b2e284e6f744578706972656404f020546865206c6f636b206f6e20746865206163636f756e7420746f20626520756e6c6f636b656420686173206e6f742079657420657870697265642e204e6f74566f74657204c82054686520676976656e206163636f756e7420646964206e6f7420766f7465206f6e20746865207265666572656e64756d2e304e6f5065726d697373696f6e04cc20546865206163746f7220686173206e6f207065726d697373696f6e20746f20636f6e647563742074686520616374696f6e2e44416c726561647944656c65676174696e67048c20546865206163636f756e7420697320616c72656164792064656c65676174696e672e204f766572666c6f7704a420416e20756e657870656374656420696e7465676572206f766572666c6f77206f636375727265642e24556e646572666c6f7704a820416e20756e657870656374656420696e746567657220756e646572666c6f77206f636375727265642e44496e73756666696369656e7446756e647304010120546f6f206869676820612062616c616e6365207761732070726f7669646564207468617420746865206163636f756e742063616e6e6f74206166666f72642e344e6f7444656c65676174696e6704a420546865206163636f756e74206973206e6f742063757272656e746c792064656c65676174696e672e28566f746573457869737408590120546865206163636f756e742063757272656e746c792068617320766f74657320617474616368656420746f20697420616e6420746865206f7065726174696f6e2063616e6e6f74207375636365656420756e74696cec207468657365206172652072656d6f7665642c20656974686572207468726f7567682060756e766f746560206f722060726561705f766f7465602e44496e7374616e744e6f74416c6c6f77656404dc2054686520696e7374616e74207265666572656e64756d206f726967696e2069732063757272656e746c7920646973616c6c6f7765642e204e6f6e73656e736504982044656c65676174696f6e20746f206f6e6573656c66206d616b6573206e6f2073656e73652e3c57726f6e675570706572426f756e64045420496e76616c696420757070657220626f756e642e3c4d6178566f746573526561636865640484204d6178696d756d206e756d626572206f6620766f74657320726561636865642e1c436f756e63696c014c496e7374616e636531436f6c6c656374697665182450726f706f73616c730100305665633c543a3a486173683e040004902054686520686173686573206f6620746865206163746976652070726f706f73616c732e2850726f706f73616c4f660001061c543a3a48617368643c542061732054726169743c493e3e3a3a50726f706f73616c00040004cc2041637475616c2070726f706f73616c20666f72206120676976656e20686173682c20696620697427732063757272656e742e18566f74696e670001061c543a3a486173688c566f7465733c543a3a4163636f756e7449642c20543a3a426c6f636b4e756d6265723e00040004b420566f746573206f6e206120676976656e2070726f706f73616c2c206966206974206973206f6e676f696e672e3450726f706f73616c436f756e7401000c753332100000000004482050726f706f73616c7320736f206661722e1c4d656d626572730100445665633c543a3a4163636f756e7449643e0400043901205468652063757272656e74206d656d62657273206f662074686520636f6c6c6563746976652e20546869732069732073746f72656420736f7274656420286a7573742062792076616c7565292e145072696d65000030543a3a4163636f756e7449640400085d0120546865206d656d6265722077686f2070726f7669646573207468652064656661756c7420766f746520666f7220616e79206f74686572206d656d62657273207468617420646f206e6f7420766f7465206265666f7265e4207468652074696d656f75742e204966204e6f6e652c207468656e206e6f206d656d6265722068617320746861742070726976696c6567652e01182c7365745f6d656d626572730c2c6e65775f6d656d62657273445665633c543a3a4163636f756e7449643e147072696d65504f7074696f6e3c543a3a4163636f756e7449643e246f6c645f636f756e742c4d656d626572436f756e746084205365742074686520636f6c6c6563746976652773206d656d626572736869702e004901202d20606e65775f6d656d62657273603a20546865206e6577206d656d626572206c6973742e204265206e69636520746f2074686520636861696e20616e642070726f7669646520697420736f727465642ee4202d20607072696d65603a20546865207072696d65206d656d6265722077686f736520766f74652073657473207468652064656661756c742e3901202d20606f6c645f636f756e74603a2054686520757070657220626f756e6420666f72207468652070726576696f7573206e756d626572206f66206d656d6265727320696e2073746f726167652eac202020202020202020202020202020205573656420666f722077656967687420657374696d6174696f6e2e005820526571756972657320726f6f74206f726967696e2e005501204e4f54453a20446f6573206e6f7420656e666f7263652074686520657870656374656420604d61784d656d6265727360206c696d6974206f6e2074686520616d6f756e74206f66206d656d626572732c206275742501202020202020207468652077656967687420657374696d6174696f6e732072656c79206f6e20697420746f20657374696d61746520646973706174636861626c65207765696768742e002c2023203c7765696768743e282023232057656967687454202d20604f284d50202b204e29602077686572653ae42020202d20604d60206f6c642d6d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e64656429e42020202d20604e60206e65772d6d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e646564299c2020202d206050602070726f706f73616c732d636f756e742028636f64652d626f756e6465642918202d2044423a75012020202d20312073746f72616765206d75746174696f6e2028636f64656320604f284d296020726561642c20604f284e29602077726974652920666f722072656164696e6720616e642077726974696e6720746865206d656d62657273f02020202d20312073746f7261676520726561642028636f64656320604f285029602920666f722072656164696e67207468652070726f706f73616c7349012020202d206050602073746f72616765206d75746174696f6e732028636f64656320604f284d29602920666f72207570646174696e672074686520766f74657320666f7220656163682070726f706f73616c61012020202d20312073746f726167652077726974652028636f64656320604f283129602920666f722064656c6574696e6720746865206f6c6420607072696d656020616e642073657474696e6720746865206e6577206f6e65302023203c2f7765696768743e1c65786563757465082070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e306c656e6774685f626f756e6430436f6d706163743c7533323e28f420446973706174636820612070726f706f73616c2066726f6d2061206d656d626572207573696e672074686520604d656d62657260206f726967696e2e00ac204f726967696e206d7573742062652061206d656d626572206f662074686520636f6c6c6563746976652e002c2023203c7765696768743e28202323205765696768748501202d20604f284d202b2050296020776865726520604d60206d656d626572732d636f756e742028636f64652d626f756e6465642920616e642060506020636f6d706c6578697479206f66206469737061746368696e67206070726f706f73616c60d8202d2044423a203120726561642028636f64656320604f284d296029202b20444220616363657373206f66206070726f706f73616c6028202d2031206576656e74302023203c2f7765696768743e1c70726f706f73650c247468726573686f6c6450436f6d706163743c4d656d626572436f756e743e2070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e306c656e6774685f626f756e6430436f6d706163743c7533323e6cfc204164642061206e65772070726f706f73616c20746f2065697468657220626520766f746564206f6e206f72206578656375746564206469726563746c792e0088205265717569726573207468652073656e64657220746f206265206d656d6265722e00450120607468726573686f6c64602064657465726d696e65732077686574686572206070726f706f73616c60206973206578656375746564206469726563746c792028607468726573686f6c64203c2032602958206f722070757420757020666f7220766f74696e672e002c2023203c7765696768743e2820232320576569676874b0202d20604f2842202b204d202b2050312960206f7220604f2842202b204d202b20503229602077686572653ae42020202d20604260206973206070726f706f73616c602073697a6520696e20627974657320286c656e6774682d6665652d626f756e64656429e02020202d20604d60206973206d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e64656429c82020202d206272616e6368696e6720697320696e666c75656e63656420627920607468726573686f6c64602077686572653af820202020202d20605031602069732070726f706f73616c20657865637574696f6e20636f6d706c65786974792028607468726573686f6c64203c20326029010120202020202d20605032602069732070726f706f73616c732d636f756e742028636f64652d626f756e646564292028607468726573686f6c64203e3d2032602918202d2044423ab82020202d20312073746f726167652072656164206069735f6d656d626572602028636f64656320604f284d296029f42020202d20312073746f726167652072656164206050726f706f73616c4f663a3a636f6e7461696e735f6b6579602028636f64656320604f2831296029ac2020202d20444220616363657373657320696e666c75656e63656420627920607468726573686f6c64603a0d0120202020202d204549544845522073746f7261676520616363657373657320646f6e65206279206070726f706f73616c602028607468726573686f6c64203c20326029bc20202020202d204f522070726f706f73616c20696e73657274696f6e2028607468726573686f6c64203c3d20326029dc202020202020202d20312073746f72616765206d75746174696f6e206050726f706f73616c73602028636f64656320604f285032296029e8202020202020202d20312073746f72616765206d75746174696f6e206050726f706f73616c436f756e74602028636f64656320604f2831296029d0202020202020202d20312073746f72616765207772697465206050726f706f73616c4f66602028636f64656320604f2842296029c0202020202020202d20312073746f726167652077726974652060566f74696e67602028636f64656320604f284d296029302020202d2031206576656e74302023203c2f7765696768743e10766f74650c2070726f706f73616c1c543a3a4861736814696e64657858436f6d706163743c50726f706f73616c496e6465783e1c617070726f766510626f6f6c30f42041646420616e20617965206f72206e617920766f746520666f72207468652073656e64657220746f2074686520676976656e2070726f706f73616c2e0090205265717569726573207468652073656e64657220746f2062652061206d656d6265722e002c2023203c7765696768743e28202323205765696768740d01202d20604f284d296020776865726520604d60206973206d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e6465642918202d2044423ab02020202d20312073746f72616765207265616420604d656d62657273602028636f64656320604f284d296029bc2020202d20312073746f72616765206d75746174696f6e2060566f74696e67602028636f64656320604f284d29602928202d2031206576656e74302023203c2f7765696768743e14636c6f7365103470726f706f73616c5f686173681c543a3a4861736814696e64657858436f6d706163743c50726f706f73616c496e6465783e5470726f706f73616c5f7765696768745f626f756e643c436f6d706163743c5765696768743e306c656e6774685f626f756e6430436f6d706163743c7533323e6c510120436c6f7365206120766f746520746861742069732065697468657220617070726f7665642c20646973617070726f766564206f722077686f736520766f74696e6720706572696f642068617320656e6465642e005901204d61792062652063616c6c656420627920616e79207369676e6564206163636f756e7420696e206f7264657220746f2066696e69736820766f74696e6720616e6420636c6f7365207468652070726f706f73616c2e004d012049662063616c6c6564206265666f72652074686520656e64206f662074686520766f74696e6720706572696f642069742077696c6c206f6e6c7920636c6f73652074686520766f7465206966206974206973c02068617320656e6f75676820766f74657320746f20626520617070726f766564206f7220646973617070726f7665642e004d012049662063616c6c65642061667465722074686520656e64206f662074686520766f74696e6720706572696f642061627374656e74696f6e732061726520636f756e7465642061732072656a656374696f6e73290120756e6c6573732074686572652069732061207072696d65206d656d6265722073657420616e6420746865207072696d65206d656d626572206361737420616e20617070726f76616c2e008d01202b206070726f706f73616c5f7765696768745f626f756e64603a20546865206d6178696d756d20616d6f756e74206f662077656967687420636f6e73756d656420627920657865637574696e672074686520636c6f7365642070726f706f73616c2e6501202b20606c656e6774685f626f756e64603a2054686520757070657220626f756e6420666f7220746865206c656e677468206f66207468652070726f706f73616c20696e2073746f726167652e20436865636b6564207669618101202020202020202020202020202020202020206073746f726167653a3a726561646020736f206974206973206073697a655f6f663a3a3c7533323e2829203d3d203460206c6172676572207468616e207468652070757265206c656e6774682e002c2023203c7765696768743e282023232057656967687478202d20604f2842202b204d202b205031202b20503229602077686572653ae42020202d20604260206973206070726f706f73616c602073697a6520696e20627974657320286c656e6774682d6665652d626f756e64656429e02020202d20604d60206973206d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e64656429cc2020202d20605031602069732074686520636f6d706c6578697479206f66206070726f706f73616c6020707265696d6167652ea82020202d20605032602069732070726f706f73616c2d636f756e742028636f64652d626f756e6465642918202d2044423a110120202d20322073746f726167652072656164732028604d656d62657273603a20636f64656320604f284d29602c20605072696d65603a20636f64656320604f2831296029810120202d2033206d75746174696f6e73202860566f74696e67603a20636f64656320604f284d29602c206050726f706f73616c4f66603a20636f64656320604f284229602c206050726f706f73616c73603a20636f64656320604f285032296029e020202d20616e79206d75746174696f6e7320646f6e65207768696c6520657865637574696e67206070726f706f73616c602028605031602944202d20757020746f2033206576656e7473302023203c2f7765696768743e4c646973617070726f76655f70726f706f73616c043470726f706f73616c5f686173681c543a3a4861736834790120446973617070726f766520612070726f706f73616c2c20636c6f73652c20616e642072656d6f76652069742066726f6d207468652073797374656d2c207265676172646c657373206f66206974732063757272656e742073746174652e008c204d7573742062652063616c6c65642062792074686520526f6f74206f726967696e2e003020506172616d65746572733a2101202a206070726f706f73616c5f68617368603a205468652068617368206f66207468652070726f706f73616c20746861742073686f756c6420626520646973617070726f7665642e002c2023203c7765696768743ee020436f6d706c65786974793a204f285029207768657265205020697320746865206e756d626572206f66206d61782070726f706f73616c732c204442205765696768743a4c202a2052656164733a2050726f706f73616c73a0202a205772697465733a20566f74696e672c2050726f706f73616c732c2050726f706f73616c4f66302023203c2f7765696768743e011c2050726f706f73656410244163636f756e7449643450726f706f73616c496e64657810486173682c4d656d626572436f756e740c4d012041206d6f74696f6e2028676976656e20686173682920686173206265656e2070726f706f7365642028627920676976656e206163636f756e742920776974682061207468726573686f6c642028676976656e4020604d656d626572436f756e7460292ed0205b6163636f756e742c2070726f706f73616c5f696e6465782c2070726f706f73616c5f686173682c207468726573686f6c645d14566f74656414244163636f756e744964104861736810626f6f6c2c4d656d626572436f756e742c4d656d626572436f756e740c09012041206d6f74696f6e2028676976656e20686173682920686173206265656e20766f746564206f6e20627920676976656e206163636f756e742c206c656176696e67190120612074616c6c79202879657320766f74657320616e64206e6f20766f74657320676976656e20726573706563746976656c7920617320604d656d626572436f756e7460292ea4205b6163636f756e742c2070726f706f73616c5f686173682c20766f7465642c207965732c206e6f5d20417070726f76656404104861736808c42041206d6f74696f6e2077617320617070726f76656420627920746865207265717569726564207468726573686f6c642e40205b70726f706f73616c5f686173685d2c446973617070726f76656404104861736808d42041206d6f74696f6e20776173206e6f7420617070726f76656420627920746865207265717569726564207468726573686f6c642e40205b70726f706f73616c5f686173685d204578656375746564081048617368384469737061746368526573756c740825012041206d6f74696f6e207761732065786563757465643b20726573756c742077696c6c20626520604f6b602069662069742072657475726e656420776974686f7574206572726f722e60205b70726f706f73616c5f686173682c20726573756c745d384d656d6265724578656375746564081048617368384469737061746368526573756c74084d0120412073696e676c65206d656d6265722064696420736f6d6520616374696f6e3b20726573756c742077696c6c20626520604f6b602069662069742072657475726e656420776974686f7574206572726f722e60205b70726f706f73616c5f686173682c20726573756c745d18436c6f7365640c10486173682c4d656d626572436f756e742c4d656d626572436f756e7408590120412070726f706f73616c2077617320636c6f736564206265636175736520697473207468726573686f6c64207761732072656163686564206f7220616674657220697473206475726174696f6e207761732075702e64205b70726f706f73616c5f686173682c207965732c206e6f5d0028244e6f744d656d6265720460204163636f756e74206973206e6f742061206d656d626572444475706c696361746550726f706f73616c0480204475706c69636174652070726f706f73616c73206e6f7420616c6c6f7765643c50726f706f73616c4d697373696e6704502050726f706f73616c206d7573742065786973742857726f6e67496e6465780444204d69736d61746368656420696e646578344475706c6963617465566f7465045c204475706c696361746520766f74652069676e6f72656448416c7265616479496e697469616c697a65640484204d656d626572732061726520616c726561647920696e697469616c697a65642120546f6f4561726c790405012054686520636c6f73652063616c6c20776173206d61646520746f6f206561726c792c206265666f72652074686520656e64206f662074686520766f74696e672e40546f6f4d616e7950726f706f73616c730401012054686572652063616e206f6e6c792062652061206d6178696d756d206f6620604d617850726f706f73616c7360206163746976652070726f706f73616c732e4c57726f6e6750726f706f73616c57656967687404d42054686520676976656e2077656967687420626f756e6420666f72207468652070726f706f73616c2077617320746f6f206c6f772e4c57726f6e6750726f706f73616c4c656e67746804d42054686520676976656e206c656e67746820626f756e6420666f72207468652070726f706f73616c2077617320746f6f206c6f772e48546563686e6963616c436f6d6d6974746565014c496e7374616e636532436f6c6c656374697665182450726f706f73616c730100305665633c543a3a486173683e040004902054686520686173686573206f6620746865206163746976652070726f706f73616c732e2850726f706f73616c4f660001061c543a3a48617368643c542061732054726169743c493e3e3a3a50726f706f73616c00040004cc2041637475616c2070726f706f73616c20666f72206120676976656e20686173682c20696620697427732063757272656e742e18566f74696e670001061c543a3a486173688c566f7465733c543a3a4163636f756e7449642c20543a3a426c6f636b4e756d6265723e00040004b420566f746573206f6e206120676976656e2070726f706f73616c2c206966206974206973206f6e676f696e672e3450726f706f73616c436f756e7401000c753332100000000004482050726f706f73616c7320736f206661722e1c4d656d626572730100445665633c543a3a4163636f756e7449643e0400043901205468652063757272656e74206d656d62657273206f662074686520636f6c6c6563746976652e20546869732069732073746f72656420736f7274656420286a7573742062792076616c7565292e145072696d65000030543a3a4163636f756e7449640400085d0120546865206d656d6265722077686f2070726f7669646573207468652064656661756c7420766f746520666f7220616e79206f74686572206d656d62657273207468617420646f206e6f7420766f7465206265666f7265e4207468652074696d656f75742e204966204e6f6e652c207468656e206e6f206d656d6265722068617320746861742070726976696c6567652e01182c7365745f6d656d626572730c2c6e65775f6d656d62657273445665633c543a3a4163636f756e7449643e147072696d65504f7074696f6e3c543a3a4163636f756e7449643e246f6c645f636f756e742c4d656d626572436f756e746084205365742074686520636f6c6c6563746976652773206d656d626572736869702e004901202d20606e65775f6d656d62657273603a20546865206e6577206d656d626572206c6973742e204265206e69636520746f2074686520636861696e20616e642070726f7669646520697420736f727465642ee4202d20607072696d65603a20546865207072696d65206d656d6265722077686f736520766f74652073657473207468652064656661756c742e3901202d20606f6c645f636f756e74603a2054686520757070657220626f756e6420666f72207468652070726576696f7573206e756d626572206f66206d656d6265727320696e2073746f726167652eac202020202020202020202020202020205573656420666f722077656967687420657374696d6174696f6e2e005820526571756972657320726f6f74206f726967696e2e005501204e4f54453a20446f6573206e6f7420656e666f7263652074686520657870656374656420604d61784d656d6265727360206c696d6974206f6e2074686520616d6f756e74206f66206d656d626572732c206275742501202020202020207468652077656967687420657374696d6174696f6e732072656c79206f6e20697420746f20657374696d61746520646973706174636861626c65207765696768742e002c2023203c7765696768743e282023232057656967687454202d20604f284d50202b204e29602077686572653ae42020202d20604d60206f6c642d6d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e64656429e42020202d20604e60206e65772d6d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e646564299c2020202d206050602070726f706f73616c732d636f756e742028636f64652d626f756e6465642918202d2044423a75012020202d20312073746f72616765206d75746174696f6e2028636f64656320604f284d296020726561642c20604f284e29602077726974652920666f722072656164696e6720616e642077726974696e6720746865206d656d62657273f02020202d20312073746f7261676520726561642028636f64656320604f285029602920666f722072656164696e67207468652070726f706f73616c7349012020202d206050602073746f72616765206d75746174696f6e732028636f64656320604f284d29602920666f72207570646174696e672074686520766f74657320666f7220656163682070726f706f73616c61012020202d20312073746f726167652077726974652028636f64656320604f283129602920666f722064656c6574696e6720746865206f6c6420607072696d656020616e642073657474696e6720746865206e6577206f6e65302023203c2f7765696768743e1c65786563757465082070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e306c656e6774685f626f756e6430436f6d706163743c7533323e28f420446973706174636820612070726f706f73616c2066726f6d2061206d656d626572207573696e672074686520604d656d62657260206f726967696e2e00ac204f726967696e206d7573742062652061206d656d626572206f662074686520636f6c6c6563746976652e002c2023203c7765696768743e28202323205765696768748501202d20604f284d202b2050296020776865726520604d60206d656d626572732d636f756e742028636f64652d626f756e6465642920616e642060506020636f6d706c6578697479206f66206469737061746368696e67206070726f706f73616c60d8202d2044423a203120726561642028636f64656320604f284d296029202b20444220616363657373206f66206070726f706f73616c6028202d2031206576656e74302023203c2f7765696768743e1c70726f706f73650c247468726573686f6c6450436f6d706163743c4d656d626572436f756e743e2070726f706f73616c78426f783c3c542061732054726169743c493e3e3a3a50726f706f73616c3e306c656e6774685f626f756e6430436f6d706163743c7533323e6cfc204164642061206e65772070726f706f73616c20746f2065697468657220626520766f746564206f6e206f72206578656375746564206469726563746c792e0088205265717569726573207468652073656e64657220746f206265206d656d6265722e00450120607468726573686f6c64602064657465726d696e65732077686574686572206070726f706f73616c60206973206578656375746564206469726563746c792028607468726573686f6c64203c2032602958206f722070757420757020666f7220766f74696e672e002c2023203c7765696768743e2820232320576569676874b0202d20604f2842202b204d202b2050312960206f7220604f2842202b204d202b20503229602077686572653ae42020202d20604260206973206070726f706f73616c602073697a6520696e20627974657320286c656e6774682d6665652d626f756e64656429e02020202d20604d60206973206d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e64656429c82020202d206272616e6368696e6720697320696e666c75656e63656420627920607468726573686f6c64602077686572653af820202020202d20605031602069732070726f706f73616c20657865637574696f6e20636f6d706c65786974792028607468726573686f6c64203c20326029010120202020202d20605032602069732070726f706f73616c732d636f756e742028636f64652d626f756e646564292028607468726573686f6c64203e3d2032602918202d2044423ab82020202d20312073746f726167652072656164206069735f6d656d626572602028636f64656320604f284d296029f42020202d20312073746f726167652072656164206050726f706f73616c4f663a3a636f6e7461696e735f6b6579602028636f64656320604f2831296029ac2020202d20444220616363657373657320696e666c75656e63656420627920607468726573686f6c64603a0d0120202020202d204549544845522073746f7261676520616363657373657320646f6e65206279206070726f706f73616c602028607468726573686f6c64203c20326029bc20202020202d204f522070726f706f73616c20696e73657274696f6e2028607468726573686f6c64203c3d20326029dc202020202020202d20312073746f72616765206d75746174696f6e206050726f706f73616c73602028636f64656320604f285032296029e8202020202020202d20312073746f72616765206d75746174696f6e206050726f706f73616c436f756e74602028636f64656320604f2831296029d0202020202020202d20312073746f72616765207772697465206050726f706f73616c4f66602028636f64656320604f2842296029c0202020202020202d20312073746f726167652077726974652060566f74696e67602028636f64656320604f284d296029302020202d2031206576656e74302023203c2f7765696768743e10766f74650c2070726f706f73616c1c543a3a4861736814696e64657858436f6d706163743c50726f706f73616c496e6465783e1c617070726f766510626f6f6c30f42041646420616e20617965206f72206e617920766f746520666f72207468652073656e64657220746f2074686520676976656e2070726f706f73616c2e0090205265717569726573207468652073656e64657220746f2062652061206d656d6265722e002c2023203c7765696768743e28202323205765696768740d01202d20604f284d296020776865726520604d60206973206d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e6465642918202d2044423ab02020202d20312073746f72616765207265616420604d656d62657273602028636f64656320604f284d296029bc2020202d20312073746f72616765206d75746174696f6e2060566f74696e67602028636f64656320604f284d29602928202d2031206576656e74302023203c2f7765696768743e14636c6f7365103470726f706f73616c5f686173681c543a3a4861736814696e64657858436f6d706163743c50726f706f73616c496e6465783e5470726f706f73616c5f7765696768745f626f756e643c436f6d706163743c5765696768743e306c656e6774685f626f756e6430436f6d706163743c7533323e6c510120436c6f7365206120766f746520746861742069732065697468657220617070726f7665642c20646973617070726f766564206f722077686f736520766f74696e6720706572696f642068617320656e6465642e005901204d61792062652063616c6c656420627920616e79207369676e6564206163636f756e7420696e206f7264657220746f2066696e69736820766f74696e6720616e6420636c6f7365207468652070726f706f73616c2e004d012049662063616c6c6564206265666f72652074686520656e64206f662074686520766f74696e6720706572696f642069742077696c6c206f6e6c7920636c6f73652074686520766f7465206966206974206973c02068617320656e6f75676820766f74657320746f20626520617070726f766564206f7220646973617070726f7665642e004d012049662063616c6c65642061667465722074686520656e64206f662074686520766f74696e6720706572696f642061627374656e74696f6e732061726520636f756e7465642061732072656a656374696f6e73290120756e6c6573732074686572652069732061207072696d65206d656d6265722073657420616e6420746865207072696d65206d656d626572206361737420616e20617070726f76616c2e008d01202b206070726f706f73616c5f7765696768745f626f756e64603a20546865206d6178696d756d20616d6f756e74206f662077656967687420636f6e73756d656420627920657865637574696e672074686520636c6f7365642070726f706f73616c2e6501202b20606c656e6774685f626f756e64603a2054686520757070657220626f756e6420666f7220746865206c656e677468206f66207468652070726f706f73616c20696e2073746f726167652e20436865636b6564207669618101202020202020202020202020202020202020206073746f726167653a3a726561646020736f206974206973206073697a655f6f663a3a3c7533323e2829203d3d203460206c6172676572207468616e207468652070757265206c656e6774682e002c2023203c7765696768743e282023232057656967687478202d20604f2842202b204d202b205031202b20503229602077686572653ae42020202d20604260206973206070726f706f73616c602073697a6520696e20627974657320286c656e6774682d6665652d626f756e64656429e02020202d20604d60206973206d656d626572732d636f756e742028636f64652d20616e6420676f7665726e616e63652d626f756e64656429cc2020202d20605031602069732074686520636f6d706c6578697479206f66206070726f706f73616c6020707265696d6167652ea82020202d20605032602069732070726f706f73616c2d636f756e742028636f64652d626f756e6465642918202d2044423a110120202d20322073746f726167652072656164732028604d656d62657273603a20636f64656320604f284d29602c20605072696d65603a20636f64656320604f2831296029810120202d2033206d75746174696f6e73202860566f74696e67603a20636f64656320604f284d29602c206050726f706f73616c4f66603a20636f64656320604f284229602c206050726f706f73616c73603a20636f64656320604f285032296029e020202d20616e79206d75746174696f6e7320646f6e65207768696c6520657865637574696e67206070726f706f73616c602028605031602944202d20757020746f2033206576656e7473302023203c2f7765696768743e4c646973617070726f76655f70726f706f73616c043470726f706f73616c5f686173681c543a3a4861736834790120446973617070726f766520612070726f706f73616c2c20636c6f73652c20616e642072656d6f76652069742066726f6d207468652073797374656d2c207265676172646c657373206f66206974732063757272656e742073746174652e008c204d7573742062652063616c6c65642062792074686520526f6f74206f726967696e2e003020506172616d65746572733a2101202a206070726f706f73616c5f68617368603a205468652068617368206f66207468652070726f706f73616c20746861742073686f756c6420626520646973617070726f7665642e002c2023203c7765696768743ee020436f6d706c65786974793a204f285029207768657265205020697320746865206e756d626572206f66206d61782070726f706f73616c732c204442205765696768743a4c202a2052656164733a2050726f706f73616c73a0202a205772697465733a20566f74696e672c2050726f706f73616c732c2050726f706f73616c4f66302023203c2f7765696768743e011c2050726f706f73656410244163636f756e7449643450726f706f73616c496e64657810486173682c4d656d626572436f756e740c4d012041206d6f74696f6e2028676976656e20686173682920686173206265656e2070726f706f7365642028627920676976656e206163636f756e742920776974682061207468726573686f6c642028676976656e4020604d656d626572436f756e7460292ed0205b6163636f756e742c2070726f706f73616c5f696e6465782c2070726f706f73616c5f686173682c207468726573686f6c645d14566f74656414244163636f756e744964104861736810626f6f6c2c4d656d626572436f756e742c4d656d626572436f756e740c09012041206d6f74696f6e2028676976656e20686173682920686173206265656e20766f746564206f6e20627920676976656e206163636f756e742c206c656176696e67190120612074616c6c79202879657320766f74657320616e64206e6f20766f74657320676976656e20726573706563746976656c7920617320604d656d626572436f756e7460292ea4205b6163636f756e742c2070726f706f73616c5f686173682c20766f7465642c207965732c206e6f5d20417070726f76656404104861736808c42041206d6f74696f6e2077617320617070726f76656420627920746865207265717569726564207468726573686f6c642e40205b70726f706f73616c5f686173685d2c446973617070726f76656404104861736808d42041206d6f74696f6e20776173206e6f7420617070726f76656420627920746865207265717569726564207468726573686f6c642e40205b70726f706f73616c5f686173685d204578656375746564081048617368384469737061746368526573756c740825012041206d6f74696f6e207761732065786563757465643b20726573756c742077696c6c20626520604f6b602069662069742072657475726e656420776974686f7574206572726f722e60205b70726f706f73616c5f686173682c20726573756c745d384d656d6265724578656375746564081048617368384469737061746368526573756c74084d0120412073696e676c65206d656d6265722064696420736f6d6520616374696f6e3b20726573756c742077696c6c20626520604f6b602069662069742072657475726e656420776974686f7574206572726f722e60205b70726f706f73616c5f686173682c20726573756c745d18436c6f7365640c10486173682c4d656d626572436f756e742c4d656d626572436f756e7408590120412070726f706f73616c2077617320636c6f736564206265636175736520697473207468726573686f6c64207761732072656163686564206f7220616674657220697473206475726174696f6e207761732075702e64205b70726f706f73616c5f686173682c207965732c206e6f5d0028244e6f744d656d6265720460204163636f756e74206973206e6f742061206d656d626572444475706c696361746550726f706f73616c0480204475706c69636174652070726f706f73616c73206e6f7420616c6c6f7765643c50726f706f73616c4d697373696e6704502050726f706f73616c206d7573742065786973742857726f6e67496e6465780444204d69736d61746368656420696e646578344475706c6963617465566f7465045c204475706c696361746520766f74652069676e6f72656448416c7265616479496e697469616c697a65640484204d656d626572732061726520616c726561647920696e697469616c697a65642120546f6f4561726c790405012054686520636c6f73652063616c6c20776173206d61646520746f6f206561726c792c206265666f72652074686520656e64206f662074686520766f74696e672e40546f6f4d616e7950726f706f73616c730401012054686572652063616e206f6e6c792062652061206d6178696d756d206f6620604d617850726f706f73616c7360206163746976652070726f706f73616c732e4c57726f6e6750726f706f73616c57656967687404d42054686520676976656e2077656967687420626f756e6420666f72207468652070726f706f73616c2077617320746f6f206c6f772e4c57726f6e6750726f706f73616c4c656e67746804d42054686520676976656e206c656e67746820626f756e6420666f72207468652070726f706f73616c2077617320746f6f206c6f772e24456c656374696f6e73014050687261676d656e456c656374696f6e141c4d656d626572730100845665633c28543a3a4163636f756e7449642c2042616c616e63654f663c543e293e040004f0205468652063757272656e7420656c6563746564206d656d626572736869702e20536f72746564206261736564206f6e206163636f756e742069642e2452756e6e65727355700100845665633c28543a3a4163636f756e7449642c2042616c616e63654f663c543e293e0400044901205468652063757272656e742072756e6e6572735f75702e20536f72746564206261736564206f6e206c6f7720746f2068696768206d657269742028776f72736520746f20626573742072756e6e6572292e38456c656374696f6e526f756e647301000c75333210000000000441012054686520746f74616c206e756d626572206f6620766f746520726f756e6473207468617420686176652068617070656e65642c206578636c7564696e6720746865207570636f6d696e67206f6e652e18566f74696e6701010530543a3a4163636f756e744964842842616c616e63654f663c543e2c205665633c543a3a4163636f756e7449643e29004400000000000000000000000000000000000cb820566f74657320616e64206c6f636b6564207374616b65206f66206120706172746963756c617220766f7465722e00c02054574f582d4e4f54453a205341464520617320604163636f756e7449646020697320612063727970746f20686173682843616e646964617465730100445665633c543a3a4163636f756e7449643e0400085901205468652070726573656e742063616e646964617465206c6973742e20536f72746564206261736564206f6e206163636f756e742d69642e20412063757272656e74206d656d626572206f722072756e6e65722d757041012063616e206e6576657220656e746572207468697320766563746f7220616e6420697320616c7761797320696d706c696369746c7920617373756d656420746f20626520612063616e6469646174652e011810766f74650814766f746573445665633c543a3a4163636f756e7449643e1476616c756554436f6d706163743c42616c616e63654f663c543e3e645d0120566f746520666f72206120736574206f662063616e6469646174657320666f7220746865207570636f6d696e6720726f756e64206f6620656c656374696f6e2e20546869732063616e2062652063616c6c656420746fe4207365742074686520696e697469616c20766f7465732c206f722075706461746520616c7265616479206578697374696e6720766f7465732e0055012055706f6e20696e697469616c20766f74696e672c206076616c75656020756e697473206f66206077686f6027732062616c616e6365206973206c6f636b656420616e64206120626f6e6420616d6f756e74206973282072657365727665642e0050205468652060766f746573602073686f756c643a482020202d206e6f7420626520656d7074792e59012020202d206265206c657373207468616e20746865206e756d626572206f6620706f737369626c652063616e646964617465732e204e6f7465207468617420616c6c2063757272656e74206d656d6265727320616e641501202020202072756e6e6572732d75702061726520616c736f206175746f6d61746963616c6c792063616e6469646174657320666f7220746865206e65787420726f756e642e005d012049742069732074686520726573706f6e736962696c697479206f66207468652063616c6c657220746f206e6f7420706c61636520616c6c206f662074686569722062616c616e636520696e746f20746865206c6f636ba020616e64206b65657020736f6d6520666f722066757274686572207472616e73616374696f6e732e002c2023203c7765696768743e5c2042617365207765696768743a2034372e393320c2b573342053746174652072656164733ad820092d2043616e646964617465732e6c656e2829202b204d656d626572732e6c656e2829202b2052756e6e65727355702e6c656e28295420092d20566f74696e67202869735f766f74657229d420092d205b4163636f756e7442616c616e63652877686f292028756e72657365727665202b20746f74616c5f62616c616e6365295d38205374617465207772697465733a2820092d20566f74696e672020092d204c6f636b1d0120092d205b4163636f756e7442616c616e63652877686f292028756e72657365727665202d2d206f6e6c79207768656e206372656174696e672061206e657720766f746572295d302023203c2f7765696768743e3072656d6f76655f766f746572003421012052656d6f766520606f726967696e60206173206120766f7465722e20546869732072656d6f76657320746865206c6f636b20616e642072657475726e732074686520626f6e642e002c2023203c7765696768743e582042617365207765696768743a2033362e3820c2b573a820416c6c207374617465206163636573732069732066726f6d20646f5f72656d6f76655f766f7465722e342053746174652072656164733a2820092d20566f74696e675820092d205b4163636f756e74446174612877686f295d38205374617465207772697465733a2820092d20566f74696e672420092d204c6f636b735820092d205b4163636f756e74446174612877686f295d302023203c2f7765696768743e507265706f72745f646566756e63745f766f746572041c646566756e6374c4446566756e6374566f7465723c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263653e6c5d01205265706f727420607461726765746020666f72206265696e6720616e20646566756e637420766f7465722e20496e2063617365206f6620612076616c6964207265706f72742c20746865207265706f727465722069735d012072657761726465642062792074686520626f6e6420616d6f756e74206f662060746172676574602e204f74686572776973652c20746865207265706f7274657220697473656c662069732072656d6f76656420616e645c20746865697220626f6e6420697320736c61736865642e0088204120646566756e637420766f74657220697320646566696e656420746f2062653a4d012020202d206120766f7465722077686f73652063757272656e74207375626d697474656420766f7465732061726520616c6c20696e76616c69642e20692e652e20616c6c206f66207468656d20617265206e6ff020202020206c6f6e67657220612063616e646964617465206e6f7220616e20616374697665206d656d626572206f7220612072756e6e65722d75702e0000690120546865206f726967696e206d7573742070726f7669646520746865206e756d626572206f662063757272656e742063616e6469646174657320616e6420766f746573206f6620746865207265706f7274656420746172676574c020666f722074686520707572706f7365206f66206163637572617465207765696768742063616c63756c6174696f6e2e002c2023203c7765696768743eb4204e6f204261736520776569676874206261736564206f6e206d696e2073717561726520616e616c797369732ea420436f6d706c6578697479206f662063616e6469646174655f636f756e743a20312e37353520c2b5739020436f6d706c6578697479206f6620766f74655f636f756e743a2031382e353120c2b573342053746174652072656164733a542020092d20566f74696e67287265706f7274657229502020092d2043616e6469646174652e6c656e28294c2020092d20566f74696e672854617267657429d82020092d2043616e646964617465732c204d656d626572732c2052756e6e6572735570202869735f646566756e63745f766f7465722938205374617465207772697465733a7020092d204c6f636b287265706f72746572207c7c2074617267657429dc20092d205b4163636f756e7442616c616e6365287265706f72746572295d202b204163636f756e7442616c616e636528746172676574297820092d20566f74696e67287265706f72746572207c7c20746172676574295901204e6f74653a207468652064622061636365737320697320776f7273652077697468207265737065637420746f2064622c207768696368206973207768656e20746865207265706f727420697320636f72726563742e302023203c2f7765696768743e407375626d69745f63616e646964616379043c63616e6469646174655f636f756e7430436f6d706163743c7533323e5478205375626d6974206f6e6573656c6620666f722063616e6469646163792e006420412063616e6469646174652077696c6c206569746865723aec2020202d204c6f73652061742074686520656e64206f6620746865207465726d20616e6420666f7266656974207468656972206465706f7369742e2d012020202d2057696e20616e64206265636f6d652061206d656d6265722e204d656d626572732077696c6c206576656e7475616c6c7920676574207468656972207374617368206261636b2e55012020202d204265636f6d6520612072756e6e65722d75702e2052756e6e6572732d75707320617265207265736572766564206d656d6265727320696e2063617365206f6e65206765747320666f72636566756c6c7934202020202072656d6f7665642e002c2023203c7765696768743e60204261736520776569676874203d2033332e333320c2b573a420436f6d706c6578697479206f662063616e6469646174655f636f756e743a20302e33373520c2b573342053746174652072656164733a5020092d2043616e646964617465732e6c656e28293820092d2043616e646964617465732c20092d204d656d626572733420092d2052756e6e65727355706420092d205b4163636f756e7442616c616e63652877686f295d38205374617465207772697465733a6420092d205b4163636f756e7442616c616e63652877686f295d3820092d2043616e64696461746573302023203c2f7765696768743e4872656e6f756e63655f63616e646964616379042872656e6f756e63696e672852656e6f756e63696e679851012052656e6f756e6365206f6e65277320696e74656e74696f6e20746f20626520612063616e64696461746520666f7220746865206e65787420656c656374696f6e20726f756e642e203320706f74656e7469616c40206f7574636f6d65732065786973743a4101202d20606f726967696e6020697320612063616e64696461746520616e64206e6f7420656c656374656420696e20616e79207365742e20496e207468697320636173652c2074686520626f6e64206973f4202020756e72657365727665642c2072657475726e656420616e64206f726967696e2069732072656d6f76656420617320612063616e6469646174652e5901202d20606f726967696e6020697320612063757272656e742072756e6e65722d75702e20496e207468697320636173652c2074686520626f6e6420697320756e72657365727665642c2072657475726e656420616e64902020206f726967696e2069732072656d6f76656420617320612072756e6e65722d75702e4d01202d20606f726967696e6020697320612063757272656e74206d656d6265722e20496e207468697320636173652c2074686520626f6e6420697320756e726573657276656420616e64206f726967696e206973590120202072656d6f7665642061732061206d656d6265722c20636f6e73657175656e746c79206e6f74206265696e6720612063616e64696461746520666f7220746865206e65787420726f756e6420616e796d6f72652e650120202053696d696c617220746f205b6072656d6f76655f766f746572605d2c206966207265706c6163656d656e742072756e6e657273206578697374732c20746865792061726520696d6d6564696174656c7920757365642e24203c7765696768743e7820496620612063616e6469646174652069732072656e6f756e63696e673a60200942617365207765696768743a2031372e323820c2b573a82009436f6d706c6578697479206f662063616e6469646174655f636f756e743a20302e32333520c2b57338200953746174652072656164733a3c2009092d2043616e64696461746573982009092d205b4163636f756e7442616c616e63652877686f292028756e72657365727665295d3c20095374617465207772697465733a3c2009092d2043616e64696461746573982009092d205b4163636f756e7442616c616e63652877686f292028756e72657365727665295d64204966206d656d6265722069732072656e6f756e63696e673a60200942617365207765696768743a2034362e323520c2b57338200953746174652072656164733ad02009092d204d656d626572732c2052756e6e6572735570202872656d6f76655f616e645f7265706c6163655f6d656d626572292c8c2009092d205b4163636f756e74446174612877686f292028756e72657365727665295d3c20095374617465207772697465733ad02009092d204d656d626572732c2052756e6e6572735570202872656d6f76655f616e645f7265706c6163655f6d656d626572292c8c2009092d205b4163636f756e74446174612877686f292028756e72657365727665295d642049662072756e6e65722069732072656e6f756e63696e673a60200942617365207765696768743a2034362e323520c2b57338200953746174652072656164733aac2009092d2052756e6e6572735570202872656d6f76655f616e645f7265706c6163655f6d656d626572292c8c2009092d205b4163636f756e74446174612877686f292028756e72657365727665295d3c20095374617465207772697465733aac2009092d2052756e6e6572735570202872656d6f76655f616e645f7265706c6163655f6d656d626572292c8c2009092d205b4163636f756e74446174612877686f292028756e72657365727665295d000d0120576569676874206e6f74653a205468652063616c6c20696e746f206368616e67654d656d62657273206e65656420746f206265206163636f756e74656420666f722e28203c2f7765696768743e3472656d6f76655f6d656d626572080c77686f8c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263653c6861735f7265706c6163656d656e7410626f6f6c485d012052656d6f7665206120706172746963756c6172206d656d6265722066726f6d20746865207365742e20546869732069732065666665637469766520696d6d6564696174656c7920616e642074686520626f6e64206f668020746865206f7574676f696e67206d656d62657220697320736c61736865642e00590120496620612072756e6e65722d757020697320617661696c61626c652c207468656e2074686520626573742072756e6e65722d75702077696c6c2062652072656d6f76656420616e64207265706c61636573207468650101206f7574676f696e67206d656d6265722e204f74686572776973652c2061206e65772070687261676d656e20656c656374696f6e20697320737461727465642e004501204e6f74652074686174207468697320646f6573206e6f7420616666656374207468652064657369676e6174656420626c6f636b206e756d626572206f6620746865206e65787420656c656374696f6e2e002c2023203c7765696768743e6820496620776520686176652061207265706c6163656d656e743a6820092d2042617365207765696768743a2035302e393320c2b5734020092d2053746174652072656164733a502009092d2052756e6e65727355702e6c656e2829cc2009092d204d656d626572732c2052756e6e6572735570202872656d6f76655f616e645f7265706c6163655f6d656d626572294420092d205374617465207772697465733acc2009092d204d656d626572732c2052756e6e6572735570202872656d6f76655f616e645f7265706c6163655f6d656d62657229650120456c73652c2073696e63652074686973206973206120726f6f742063616c6c20616e642077696c6c20676f20696e746f2070687261676d656e2c20776520617373756d652066756c6c20626c6f636b20666f72206e6f772e302023203c2f7765696768743e01141c4e65775465726d04645665633c284163636f756e7449642c2042616c616e6365293e1061012041206e6577207465726d2077697468205b6e65775f6d656d626572735d2e205468697320696e64696361746573207468617420656e6f7567682063616e64696461746573206578697374656420746f2072756e20746865590120656c656374696f6e2c206e6f74207468617420656e6f756768206861766520686173206265656e20656c65637465642e2054686520696e6e65722076616c7565206d757374206265206578616d696e656420666f726101207468697320707572706f73652e204120604e65775465726d285b5d296020696e64696361746573207468617420736f6d652063616e6469646174657320676f7420746865697220626f6e6420736c617368656420616e645901206e6f6e65207765726520656c65637465642c207768696c73742060456d7074795465726d60206d65616e732074686174206e6f2063616e64696461746573206578697374656420746f20626567696e20776974682e24456d7074795465726d00083501204e6f20286f72206e6f7420656e6f756768292063616e64696461746573206578697374656420666f72207468697320726f756e642e205468697320697320646966666572656e742066726f6dc420604e65775465726d285b5d29602e2053656520746865206465736372697074696f6e206f6620604e65775465726d602e304d656d6265724b69636b656404244163636f756e744964084d012041205b6d656d6265725d20686173206265656e2072656d6f7665642e20546869732073686f756c6420616c7761797320626520666f6c6c6f7765642062792065697468657220604e65775465726d60206f74342060456d7074795465726d602e3c4d656d62657252656e6f756e63656404244163636f756e74496404a82041205b6d656d6265725d206861732072656e6f756e6365642074686569722063616e6469646163792e34566f7465725265706f727465640c244163636f756e744964244163636f756e74496410626f6f6c080901204120766f74657220776173207265706f7274656420776974682074686520746865207265706f7274206265696e67207375636365737366756c206f72206e6f742e6c205b766f7465722c207265706f727465722c20737563636573735d183443616e646964616379426f6e643042616c616e63654f663c543e400080c6a47e8d030000000000000000000028566f74696e67426f6e643042616c616e63654f663c543e4000407a10f35a000000000000000000000038446573697265644d656d626572730c753332100d00000000404465736972656452756e6e65727355700c753332100700000000305465726d4475726174696f6e38543a3a426c6f636b4e756d626572108013030000204d6f64756c654964384c6f636b4964656e74696669657220706872656c656374004430556e61626c65546f566f746504c42043616e6e6f7420766f7465207768656e206e6f2063616e64696461746573206f72206d656d626572732065786973742e1c4e6f566f7465730498204d75737420766f746520666f72206174206c65617374206f6e652063616e6469646174652e30546f6f4d616e79566f74657304882043616e6e6f7420766f7465206d6f7265207468616e2063616e646964617465732e504d6178696d756d566f7465734578636565646564049c2043616e6e6f7420766f7465206d6f7265207468616e206d6178696d756d20616c6c6f7765642e284c6f7742616c616e636504c82043616e6e6f7420766f74652077697468207374616b65206c657373207468616e206d696e696d756d2062616c616e63652e3c556e61626c65546f506179426f6e64047c20566f7465722063616e206e6f742070617920766f74696e6720626f6e642e2c4d7573744265566f7465720444204d757374206265206120766f7465722e285265706f727453656c6604502043616e6e6f74207265706f72742073656c662e4c4475706c69636174656443616e6469646174650484204475706c6963617465642063616e646964617465207375626d697373696f6e2e304d656d6265725375626d6974048c204d656d6265722063616e6e6f742072652d7375626d69742063616e6469646163792e3052756e6e65725375626d6974048c2052756e6e65722063616e6e6f742072652d7375626d69742063616e6469646163792e68496e73756666696369656e7443616e64696461746546756e647304982043616e64696461746520646f6573206e6f74206861766520656e6f7567682066756e64732e244e6f744d656d6265720438204e6f742061206d656d6265722e54496e76616c696443616e646964617465436f756e7404e4205468652070726f766964656420636f756e74206f66206e756d626572206f662063616e6469646174657320697320696e636f72726563742e40496e76616c6964566f7465436f756e7404d0205468652070726f766964656420636f756e74206f66206e756d626572206f6620766f74657320697320696e636f72726563742e44496e76616c696452656e6f756e63696e67040101205468652072656e6f756e63696e67206f726967696e2070726573656e74656420612077726f6e67206052656e6f756e63696e676020706172616d657465722e48496e76616c69645265706c6163656d656e740401012050726564696374696f6e20726567617264696e67207265706c6163656d656e74206166746572206d656d6265722072656d6f76616c2069732077726f6e672e4c546563686e6963616c4d656d62657273686970014c496e7374616e6365314d656d62657273686970081c4d656d626572730100445665633c543a3a4163636f756e7449643e040004c8205468652063757272656e74206d656d626572736869702c2073746f72656420617320616e206f726465726564205665632e145072696d65000030543a3a4163636f756e744964040004a4205468652063757272656e74207072696d65206d656d6265722c206966206f6e65206578697374732e011c286164645f6d656d626572040c77686f30543a3a4163636f756e7449640c7c204164642061206d656d626572206077686f6020746f20746865207365742e00a0204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a4164644f726967696e602e3472656d6f76655f6d656d626572040c77686f30543a3a4163636f756e7449640c902052656d6f76652061206d656d626572206077686f602066726f6d20746865207365742e00ac204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a52656d6f76654f726967696e602e2c737761705f6d656d626572081872656d6f766530543a3a4163636f756e7449640c61646430543a3a4163636f756e74496414c02053776170206f7574206f6e65206d656d626572206072656d6f76656020666f7220616e6f746865722060616464602e00a4204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a537761704f726967696e602e001101205072696d65206d656d62657273686970206973202a6e6f742a207061737365642066726f6d206072656d6f76656020746f2060616464602c20696620657874616e742e3472657365745f6d656d62657273041c6d656d62657273445665633c543a3a4163636f756e7449643e105901204368616e676520746865206d656d6265727368697020746f2061206e6577207365742c20646973726567617264696e6720746865206578697374696e67206d656d626572736869702e204265206e69636520616e646c207061737320606d656d6265727360207072652d736f727465642e00a8204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a52657365744f726967696e602e286368616e67655f6b6579040c6e657730543a3a4163636f756e74496414d82053776170206f7574207468652073656e64696e67206d656d62657220666f7220736f6d65206f74686572206b657920606e6577602e00f4204d6179206f6e6c792062652063616c6c65642066726f6d20605369676e656460206f726967696e206f6620612063757272656e74206d656d6265722e002101205072696d65206d656d62657273686970206973207061737365642066726f6d20746865206f726967696e206163636f756e7420746f20606e6577602c20696620657874616e742e247365745f7072696d65040c77686f30543a3a4163636f756e7449640cc02053657420746865207072696d65206d656d6265722e204d75737420626520612063757272656e74206d656d6265722e00a8204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a5072696d654f726967696e602e2c636c6561725f7072696d65000c982052656d6f766520746865207072696d65206d656d626572206966206974206578697374732e00a8204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a5072696d654f726967696e602e01182c4d656d62657241646465640004e42054686520676976656e206d656d626572207761732061646465643b2073656520746865207472616e73616374696f6e20666f722077686f2e344d656d62657252656d6f7665640004ec2054686520676976656e206d656d626572207761732072656d6f7665643b2073656520746865207472616e73616374696f6e20666f722077686f2e384d656d62657273537761707065640004dc2054776f206d656d62657273207765726520737761707065643b2073656520746865207472616e73616374696f6e20666f722077686f2e304d656d6265727352657365740004190120546865206d656d62657273686970207761732072657365743b2073656520746865207472616e73616374696f6e20666f722077686f20746865206e6577207365742069732e284b65794368616e676564000488204f6e65206f6620746865206d656d6265727327206b657973206368616e6765642e1444756d6d7904bc73705f7374643a3a6d61726b65723a3a5068616e746f6d446174613c284163636f756e7449642c204576656e74293e0470205068616e746f6d206d656d6265722c206e6576657220757365642e00003c46696e616c697479547261636b65720001042866696e616c5f68696e74041068696e745c436f6d706163743c543a3a426c6f636b4e756d6265723e08f42048696e7420746861742074686520617574686f72206f66207468697320626c6f636b207468696e6b732074686520626573742066696e616c697a65646c20626c6f636b2069732074686520676976656e206e756d6265722e00082857696e646f7753697a6538543a3a426c6f636b4e756d626572106500000004190120546865206e756d626572206f6620726563656e742073616d706c657320746f206b6565702066726f6d207468697320636861696e2e2044656661756c74206973203130312e345265706f72744c6174656e637938543a3a426c6f636b4e756d62657210e8030000041d01205468652064656c617920616674657220776869636820706f696e74207468696e6773206265636f6d6520737573706963696f75732e2044656661756c7420697320313030302e0838416c72656164795570646174656404c82046696e616c2068696e74206d7573742062652075706461746564206f6e6c79206f6e636520696e2074686520626c6f636b1c42616448696e7404902046696e616c697a6564206865696768742061626f766520626c6f636b206e756d6265721c4772616e647061013c4772616e64706146696e616c6974791814537461746501006c53746f72656453746174653c543a3a426c6f636b4e756d6265723e04000490205374617465206f66207468652063757272656e7420617574686f72697479207365742e3450656e64696e674368616e676500008c53746f72656450656e64696e674368616e67653c543a3a426c6f636b4e756d6265723e040004c42050656e64696e67206368616e67653a20287369676e616c65642061742c207363686564756c6564206368616e6765292e284e657874466f72636564000038543a3a426c6f636b4e756d626572040004bc206e65787420626c6f636b206e756d6265722077686572652077652063616e20666f7263652061206368616e67652e1c5374616c6c656400008028543a3a426c6f636b4e756d6265722c20543a3a426c6f636b4e756d626572290400049020607472756560206966207765206172652063757272656e746c79207374616c6c65642e3043757272656e7453657449640100145365744964200000000000000000085d0120546865206e756d626572206f66206368616e6765732028626f746820696e207465726d73206f66206b65797320616e6420756e6465726c79696e672065636f6e6f6d696320726573706f6e736962696c697469657329c420696e20746865202273657422206f66204772616e6470612076616c696461746f72732066726f6d2067656e657369732e30536574496453657373696f6e0001051453657449643053657373696f6e496e6465780004001059012041206d617070696e672066726f6d206772616e6470612073657420494420746f2074686520696e646578206f6620746865202a6d6f737420726563656e742a2073657373696f6e20666f722077686963682069747368206d656d62657273207765726520726573706f6e7369626c652e00b82054574f582d4e4f54453a2060536574496460206973206e6f7420756e646572207573657220636f6e74726f6c2e010c4c7265706f72745f65717569766f636174696f6e084865717569766f636174696f6e5f70726f6f66a845717569766f636174696f6e50726f6f663c543a3a486173682c20543a3a426c6f636b4e756d6265723e3c6b65795f6f776e65725f70726f6f6640543a3a4b65794f776e657250726f6f66100d01205265706f727420766f7465722065717569766f636174696f6e2f6d69736265686176696f722e2054686973206d6574686f642077696c6c2076657269667920746865f82065717569766f636174696f6e2070726f6f6620616e642076616c69646174652074686520676976656e206b6579206f776e6572736869702070726f6f66fc20616761696e73742074686520657874726163746564206f6666656e6465722e20496620626f7468206172652076616c69642c20746865206f6666656e6365482077696c6c206265207265706f727465642e707265706f72745f65717569766f636174696f6e5f756e7369676e6564084865717569766f636174696f6e5f70726f6f66a845717569766f636174696f6e50726f6f663c543a3a486173682c20543a3a426c6f636b4e756d6265723e3c6b65795f6f776e65725f70726f6f6640543a3a4b65794f776e657250726f6f66240d01205265706f727420766f7465722065717569766f636174696f6e2f6d69736265686176696f722e2054686973206d6574686f642077696c6c2076657269667920746865f82065717569766f636174696f6e2070726f6f6620616e642076616c69646174652074686520676976656e206b6579206f776e6572736869702070726f6f66fc20616761696e73742074686520657874726163746564206f6666656e6465722e20496620626f7468206172652076616c69642c20746865206f6666656e6365482077696c6c206265207265706f727465642e00110120546869732065787472696e736963206d7573742062652063616c6c656420756e7369676e656420616e642069742069732065787065637465642074686174206f6e6c79190120626c6f636b20617574686f72732077696c6c2063616c6c206974202876616c69646174656420696e206056616c6964617465556e7369676e656460292c206173207375636819012069662074686520626c6f636b20617574686f7220697320646566696e65642069742077696c6c20626520646566696e6564206173207468652065717569766f636174696f6e28207265706f727465722e306e6f74655f7374616c6c6564081464656c617938543a3a426c6f636b4e756d6265726c626573745f66696e616c697a65645f626c6f636b5f6e756d62657238543a3a426c6f636b4e756d6265721c1d01204e6f74652074686174207468652063757272656e7420617574686f7269747920736574206f6620746865204752414e4450412066696e616c69747920676164676574206861732901207374616c6c65642e20546869732077696c6c2074726967676572206120666f7263656420617574686f7269747920736574206368616e67652061742074686520626567696e6e696e672101206f6620746865206e6578742073657373696f6e2c20746f20626520656e6163746564206064656c61796020626c6f636b7320616674657220746861742e205468652064656c617915012073686f756c64206265206869676820656e6f75676820746f20736166656c7920617373756d6520746861742074686520626c6f636b207369676e616c6c696e6720746865290120666f72636564206368616e67652077696c6c206e6f742062652072652d6f726765642028652e672e203130303020626c6f636b73292e20546865204752414e44504120766f7465727329012077696c6c20737461727420746865206e657720617574686f7269747920736574207573696e672074686520676976656e2066696e616c697a656420626c6f636b20617320626173652e5c204f6e6c792063616c6c61626c6520627920726f6f742e010c384e6577417574686f7269746965730434417574686f726974794c69737404d0204e657720617574686f726974792073657420686173206265656e206170706c6965642e205b617574686f726974795f7365745d1850617573656400049c2043757272656e7420617574686f726974792073657420686173206265656e207061757365642e1c526573756d65640004a02043757272656e7420617574686f726974792073657420686173206265656e20726573756d65642e001c2c50617573654661696c656408090120417474656d707420746f207369676e616c204752414e445041207061757365207768656e2074686520617574686f72697479207365742069736e2774206c697665a8202865697468657220706175736564206f7220616c72656164792070656e64696e67207061757365292e30526573756d654661696c656408150120417474656d707420746f207369676e616c204752414e44504120726573756d65207768656e2074686520617574686f72697479207365742069736e277420706175736564a42028656974686572206c697665206f7220616c72656164792070656e64696e6720726573756d65292e344368616e676550656e64696e6704ec20417474656d707420746f207369676e616c204752414e445041206368616e67652077697468206f6e6520616c72656164792070656e64696e672e1c546f6f536f6f6e04c02043616e6e6f74207369676e616c20666f72636564206368616e676520736f20736f6f6e206166746572206c6173742e60496e76616c69644b65794f776e65727368697050726f6f660435012041206b6579206f776e6572736869702070726f6f662070726f76696465642061732070617274206f6620616e2065717569766f636174696f6e207265706f727420697320696e76616c69642e60496e76616c696445717569766f636174696f6e50726f6f6604350120416e2065717569766f636174696f6e2070726f6f662070726f76696465642061732070617274206f6620616e2065717569766f636174696f6e207265706f727420697320696e76616c69642e584475706c69636174654f6666656e63655265706f7274041901204120676976656e2065717569766f636174696f6e207265706f72742069732076616c69642062757420616c72656164792070726576696f75736c79207265706f727465642e20547265617375727901205472656173757279143450726f706f73616c436f756e7401003450726f706f73616c496e646578100000000004a4204e756d626572206f662070726f706f73616c7320746861742068617665206265656e206d6164652e2450726f706f73616c730001053450726f706f73616c496e6465789050726f706f73616c3c543a3a4163636f756e7449642c2042616c616e63654f663c543e3e000400047c2050726f706f73616c7320746861742068617665206265656e206d6164652e24417070726f76616c730100485665633c50726f706f73616c496e6465783e040004f82050726f706f73616c20696e646963657320746861742068617665206265656e20617070726f76656420627574206e6f742079657420617761726465642e10546970730001051c543a3a48617368f04f70656e5469703c543a3a4163636f756e7449642c2042616c616e63654f663c543e2c20543a3a426c6f636b4e756d6265722c20543a3a486173683e0004000c59012054697073207468617420617265206e6f742079657420636f6d706c657465642e204b65796564206279207468652068617368206f66206028726561736f6e2c2077686f29602066726f6d207468652076616c75652e3d012054686973206861732074686520696e73656375726520656e756d657261626c6520686173682066756e6374696f6e2073696e636520746865206b657920697473656c6620697320616c7265616479802067756172616e7465656420746f20626520612073656375726520686173682e1c526561736f6e730001061c543a3a486173681c5665633c75383e0004000849012053696d706c6520707265696d616765206c6f6f6b75702066726f6d2074686520726561736f6e2773206861736820746f20746865206f726967696e616c20646174612e20416761696e2c2068617320616e610120696e73656375726520656e756d657261626c6520686173682073696e636520746865206b65792069732067756172616e7465656420746f2062652074686520726573756c74206f6620612073656375726520686173682e01203470726f706f73655f7370656e64081476616c756554436f6d706163743c42616c616e63654f663c543e3e2c62656e65666963696172798c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365242d012050757420666f727761726420612073756767657374696f6e20666f72207370656e64696e672e2041206465706f7369742070726f706f7274696f6e616c20746f207468652076616c7565350120697320726573657276656420616e6420736c6173686564206966207468652070726f706f73616c2069732072656a65637465642e2049742069732072657475726e6564206f6e636520746865542070726f706f73616c20697320617761726465642e002c2023203c7765696768743e4c202d20436f6d706c65786974793a204f283129b4202d20446252656164733a206050726f706f73616c436f756e74602c20606f726967696e206163636f756e7460ec202d2044625772697465733a206050726f706f73616c436f756e74602c206050726f706f73616c73602c20606f726967696e206163636f756e7460302023203c2f7765696768743e3c72656a6563745f70726f706f73616c042c70726f706f73616c5f696458436f6d706163743c50726f706f73616c496e6465783e24fc2052656a65637420612070726f706f736564207370656e642e20546865206f726967696e616c206465706f7369742077696c6c20626520736c61736865642e00ac204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a52656a6563744f726967696e602e002c2023203c7765696768743e4c202d20436f6d706c65786974793a204f283129d0202d20446252656164733a206050726f706f73616c73602c206072656a65637465642070726f706f736572206163636f756e7460d4202d2044625772697465733a206050726f706f73616c73602c206072656a65637465642070726f706f736572206163636f756e7460302023203c2f7765696768743e40617070726f76655f70726f706f73616c042c70726f706f73616c5f696458436f6d706163743c50726f706f73616c496e6465783e285d0120417070726f766520612070726f706f73616c2e2041742061206c617465722074696d652c207468652070726f706f73616c2077696c6c20626520616c6c6f636174656420746f207468652062656e6566696369617279ac20616e6420746865206f726967696e616c206465706f7369742077696c6c2062652072657475726e65642e00b0204d6179206f6e6c792062652063616c6c65642066726f6d2060543a3a417070726f76654f726967696e602e002c2023203c7765696768743e50202d20436f6d706c65786974793a204f2831292e90202d20446252656164733a206050726f706f73616c73602c2060417070726f76616c73605c202d20446257726974653a2060417070726f76616c7360302023203c2f7765696768743e387265706f72745f617765736f6d650818726561736f6e1c5665633c75383e0c77686f30543a3a4163636f756e7449644c5d01205265706f727420736f6d657468696e672060726561736f6e60207468617420646573657276657320612074697020616e6420636c61696d20616e79206576656e7475616c207468652066696e6465722773206665652e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005501205061796d656e743a20605469705265706f72744465706f73697442617365602077696c6c2062652072657365727665642066726f6d20746865206f726967696e206163636f756e742c2061732077656c6c206173d420605469705265706f72744465706f736974506572427974656020666f722065616368206279746520696e2060726561736f6e602e006101202d2060726561736f6e603a2054686520726561736f6e20666f722c206f7220746865207468696e6720746861742064657365727665732c20746865207469703b2067656e6572616c6c7920746869732077696c6c2062655c20202061205554462d382d656e636f6465642055524c2eec202d206077686f603a20546865206163636f756e742077686963682073686f756c6420626520637265646974656420666f7220746865207469702e007820456d69747320604e657754697060206966207375636365737366756c2e002c2023203c7765696768743ecc202d20436f6d706c65786974793a20604f2852296020776865726520605260206c656e677468206f662060726561736f6e602e942020202d20656e636f64696e6720616e642068617368696e67206f662027726561736f6e27c4202d20446252656164733a2060526561736f6e73602c206054697073602c206077686f206163636f756e742064617461609c202d2044625772697465733a206054697073602c206077686f206163636f756e74206461746160302023203c2f7765696768743e2c726574726163745f7469700410686173681c543a3a486173684c550120526574726163742061207072696f72207469702d7265706f72742066726f6d20607265706f72745f617765736f6d65602c20616e642063616e63656c207468652070726f63657373206f662074697070696e672e00e0204966207375636365737366756c2c20746865206f726967696e616c206465706f7369742077696c6c20626520756e72657365727665642e00510120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642074686520746970206964656e746966696564206279206068617368604501206d7573742068617665206265656e207265706f7274656420627920746865207369676e696e67206163636f756e74207468726f75676820607265706f72745f617765736f6d65602028616e64206e6f7450207468726f75676820607469705f6e657760292e006501202d206068617368603a20546865206964656e74697479206f6620746865206f70656e2074697020666f722077686963682061207469702076616c7565206973206465636c617265642e205468697320697320666f726d656461012020206173207468652068617368206f6620746865207475706c65206f6620746865206f726967696e616c207469702060726561736f6e6020616e64207468652062656e6566696369617279206163636f756e742049442e009020456d697473206054697052657472616374656460206966207375636365737366756c2e002c2023203c7765696768743e54202d20436f6d706c65786974793a20604f28312960dc2020202d20446570656e6473206f6e20746865206c656e677468206f662060543a3a48617368602077686963682069732066697865642e90202d20446252656164733a206054697073602c20606f726967696e206163636f756e7460c0202d2044625772697465733a2060526561736f6e73602c206054697073602c20606f726967696e206163636f756e7460302023203c2f7765696768743e1c7469705f6e65770c18726561736f6e1c5665633c75383e0c77686f30543a3a4163636f756e744964247469705f76616c75653042616c616e63654f663c543e58f4204769766520612074697020666f7220736f6d657468696e67206e65773b206e6f2066696e6465722773206665652077696c6c2062652074616b656e2e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e6420746865207369676e696e67206163636f756e74206d757374206265206174206d656d626572206f662074686520605469707065727360207365742e006101202d2060726561736f6e603a2054686520726561736f6e20666f722c206f7220746865207468696e6720746861742064657365727665732c20746865207469703b2067656e6572616c6c7920746869732077696c6c2062655c20202061205554462d382d656e636f6465642055524c2eec202d206077686f603a20546865206163636f756e742077686963682073686f756c6420626520637265646974656420666f7220746865207469702e5101202d20607469705f76616c7565603a2054686520616d6f756e74206f66207469702074686174207468652073656e64657220776f756c64206c696b6520746f20676976652e20546865206d656469616e20746970d820202076616c7565206f662061637469766520746970706572732077696c6c20626520676976656e20746f20746865206077686f602e007820456d69747320604e657754697060206966207375636365737366756c2e002c2023203c7765696768743e5501202d20436f6d706c65786974793a20604f2852202b2054296020776865726520605260206c656e677468206f662060726561736f6e602c2060546020697320746865206e756d626572206f6620746970706572732ec02020202d20604f285429603a206465636f64696e6720605469707065726020766563206f66206c656e6774682060546009012020202020605460206973206368617267656420617320757070657220626f756e6420676976656e2062792060436f6e7461696e734c656e677468426f756e64602e0d0120202020205468652061637475616c20636f737420646570656e6473206f6e2074686520696d706c656d656e746174696f6e206f662060543a3a54697070657273602ee42020202d20604f285229603a2068617368696e6720616e6420656e636f64696e67206f6620726561736f6e206f66206c656e6774682060526080202d20446252656164733a206054697070657273602c2060526561736f6e736078202d2044625772697465733a2060526561736f6e73602c20605469707360302023203c2f7765696768743e0c7469700810686173681c543a3a48617368247469705f76616c75653042616c616e63654f663c543e64b4204465636c6172652061207469702076616c756520666f7220616e20616c72656164792d6f70656e207469702e00550120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e6420746865207369676e696e67206163636f756e74206d757374206265206174206d656d626572206f662074686520605469707065727360207365742e006501202d206068617368603a20546865206964656e74697479206f6620746865206f70656e2074697020666f722077686963682061207469702076616c7565206973206465636c617265642e205468697320697320666f726d656461012020206173207468652068617368206f6620746865207475706c65206f66207468652068617368206f6620746865206f726967696e616c207469702060726561736f6e6020616e64207468652062656e6566696369617279382020206163636f756e742049442e5101202d20607469705f76616c7565603a2054686520616d6f756e74206f66207469702074686174207468652073656e64657220776f756c64206c696b6520746f20676976652e20546865206d656469616e20746970d820202076616c7565206f662061637469766520746970706572732077696c6c20626520676976656e20746f20746865206077686f602e00650120456d6974732060546970436c6f73696e676020696620746865207468726573686f6c64206f66207469707065727320686173206265656e207265616368656420616e642074686520636f756e74646f776e20706572696f64342068617320737461727465642e002c2023203c7765696768743ee4202d20436f6d706c65786974793a20604f285429602077686572652060546020697320746865206e756d626572206f6620746970706572732e15012020206465636f64696e6720605469707065726020766563206f66206c656e677468206054602c20696e736572742074697020616e6420636865636b20636c6f73696e672c0101202020605460206973206368617267656420617320757070657220626f756e6420676976656e2062792060436f6e7461696e734c656e677468426f756e64602e05012020205468652061637475616c20636f737420646570656e6473206f6e2074686520696d706c656d656e746174696f6e206f662060543a3a54697070657273602e00610120202041637475616c6c792077656967687420636f756c64206265206c6f77657220617320697420646570656e6473206f6e20686f77206d616e7920746970732061726520696e20604f70656e5469706020627574206974d4202020697320776569676874656420617320696620616c6d6f73742066756c6c20692e65206f66206c656e6774682060542d31602e74202d20446252656164733a206054697070657273602c206054697073604c202d2044625772697465733a20605469707360302023203c2f7765696768743e24636c6f73655f7469700410686173681c543a3a48617368446020436c6f736520616e64207061796f75742061207469702e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e0019012054686520746970206964656e74696669656420627920606861736860206d75737420686176652066696e69736865642069747320636f756e74646f776e20706572696f642e006501202d206068617368603a20546865206964656e74697479206f6620746865206f70656e2074697020666f722077686963682061207469702076616c7565206973206465636c617265642e205468697320697320666f726d656461012020206173207468652068617368206f6620746865207475706c65206f6620746865206f726967696e616c207469702060726561736f6e6020616e64207468652062656e6566696369617279206163636f756e742049442e002c2023203c7765696768743ee4202d20436f6d706c65786974793a20604f285429602077686572652060546020697320746865206e756d626572206f6620746970706572732e9c2020206465636f64696e6720605469707065726020766563206f66206c656e677468206054602e0101202020605460206973206368617267656420617320757070657220626f756e6420676976656e2062792060436f6e7461696e734c656e677468426f756e64602e05012020205468652061637475616c20636f737420646570656e6473206f6e2074686520696d706c656d656e746174696f6e206f662060543a3a54697070657273602eac202d20446252656164733a206054697073602c206054697070657273602c20607469702066696e64657260dc202d2044625772697465733a2060526561736f6e73602c206054697073602c206054697070657273602c20607469702066696e64657260302023203c2f7765696768743e012c2050726f706f736564043450726f706f73616c496e646578047c204e65772070726f706f73616c2e205b70726f706f73616c5f696e6465785d205370656e64696e67041c42616c616e6365043501205765206861766520656e6465642061207370656e6420706572696f6420616e642077696c6c206e6f7720616c6c6f636174652066756e64732e205b6275646765745f72656d61696e696e675d1c417761726465640c3450726f706f73616c496e6465781c42616c616e6365244163636f756e74496404150120536f6d652066756e64732068617665206265656e20616c6c6f63617465642e205b70726f706f73616c5f696e6465782c2061776172642c2062656e65666963696172795d2052656a6563746564083450726f706f73616c496e6465781c42616c616e6365041d0120412070726f706f73616c207761732072656a65637465643b2066756e6473207765726520736c61736865642e205b70726f706f73616c5f696e6465782c20736c61736865645d144275726e74041c42616c616e636504a820536f6d65206f66206f75722066756e64732068617665206265656e206275726e742e205b6275726e5d20526f6c6c6f766572041c42616c616e6365047d01205370656e64696e67206861732066696e69736865643b20746869732069732074686520616d6f756e74207468617420726f6c6c73206f76657220756e74696c206e657874207370656e642e205b6275646765745f72656d61696e696e675d1c4465706f736974041c42616c616e636504a820536f6d652066756e64732068617665206265656e206465706f73697465642e205b6465706f7369745d184e657754697004104861736804c42041206e6577207469702073756767657374696f6e20686173206265656e206f70656e65642e205b7469705f686173685d28546970436c6f73696e670410486173680409012041207469702073756767657374696f6e206861732072656163686564207468726573686f6c6420616e6420697320636c6f73696e672e205b7469705f686173685d24546970436c6f7365640c1048617368244163636f756e7449641c42616c616e636504e82041207469702073756767657374696f6e20686173206265656e20636c6f7365642e205b7469705f686173682c2077686f2c207061796f75745d3054697052657472616374656404104861736804c02041207469702073756767657374696f6e20686173206265656e207265747261637465642e205b7469705f686173685d243050726f706f73616c426f6e641c5065726d696c6c1050c30000085501204672616374696f6e206f6620612070726f706f73616c27732076616c756520746861742073686f756c6420626520626f6e64656420696e206f7264657220746f20706c616365207468652070726f706f73616c2e110120416e2061636365707465642070726f706f73616c2067657473207468657365206261636b2e20412072656a65637465642070726f706f73616c20646f6573206e6f742e4c50726f706f73616c426f6e644d696e696d756d3042616c616e63654f663c543e4000407a10f35a00000000000000000000044901204d696e696d756d20616d6f756e74206f662066756e647320746861742073686f756c6420626520706c6163656420696e2061206465706f73697420666f72206d616b696e6720612070726f706f73616c2e2c5370656e64506572696f6438543a3a426c6f636b4e756d6265721080700000048820506572696f64206265747765656e2073756363657373697665207370656e64732e104275726e1c5065726d696c6c1020a107000411012050657263656e74616765206f662073706172652066756e64732028696620616e7929207468617420617265206275726e7420706572207370656e6420706572696f642e30546970436f756e74646f776e38543a3a426c6f636b4e756d62657210807000000445012054686520706572696f6420666f722077686963682061207469702072656d61696e73206f70656e20616674657220697320686173206163686965766564207468726573686f6c6420746970706572732e3454697046696e646572734665651c50657263656e7404140431012054686520616d6f756e74206f66207468652066696e616c2074697020776869636820676f657320746f20746865206f726967696e616c207265706f72746572206f6620746865207469702e505469705265706f72744465706f736974426173653042616c616e63654f663c543e4000407a10f35a0000000000000000000004d42054686520616d6f756e742068656c64206f6e206465706f73697420666f7220706c6163696e67206120746970207265706f72742e5c5469705265706f72744465706f736974506572427974653042616c616e63654f663c543e400010a5d4e800000000000000000000000409012054686520616d6f756e742068656c64206f6e206465706f7369742070657220627974652077697468696e2074686520746970207265706f727420726561736f6e2e204d6f64756c654964204d6f64756c6549642070792f7472737279041901205468652074726561737572792773206d6f64756c652069642c207573656420666f72206465726976696e672069747320736f7665726569676e206163636f756e742049442e2070496e73756666696369656e7450726f706f7365727342616c616e6365047c2050726f706f73657227732062616c616e636520697320746f6f206c6f772e50496e76616c696450726f706f73616c496e646578046c204e6f2070726f706f73616c206174207468617420696e6465782e30526561736f6e546f6f42696704882054686520726561736f6e20676976656e206973206a75737420746f6f206269672e30416c72656164794b6e6f776e048c20546865207469702077617320616c726561647920666f756e642f737461727465642e28556e6b6e6f776e54697004642054686520746970206861736820697320756e6b6e6f776e2e244e6f7446696e64657204210120546865206163636f756e7420617474656d7074696e6720746f20726574726163742074686520746970206973206e6f74207468652066696e646572206f6620746865207469702e245374696c6c4f70656e042d0120546865207469702063616e6e6f7420626520636c61696d65642f636c6f736564206265636175736520746865726520617265206e6f7420656e6f7567682074697070657273207965742e245072656d617475726504350120546865207469702063616e6e6f7420626520636c61696d65642f636c6f73656420626563617573652069742773207374696c6c20696e2074686520636f756e74646f776e20706572696f642e24436f6e7472616374730124436f6e747261637473143c43757272656e745363686564756c650100205363686564756c6535020000000020a107000000000020a107000000000020a107000000000020a107000000000020a107000000000020a107000000000020a1070000000000e0f7050400000000e024370500000000e0f705040000000020a107000000000020a107000000000080f0fa020000000000e1f505000000000400000000000100100000000040000000200000000000080004942043757272656e7420636f7374207363686564756c6520666f7220636f6e7472616374732e305072697374696e65436f64650001062c436f6465486173683c543e1c5665633c75383e0004000465012041206d617070696e672066726f6d20616e206f726967696e616c20636f6465206861736820746f20746865206f726967696e616c20636f64652c20756e746f756368656420627920696e737472756d656e746174696f6e2e2c436f646553746f726167650001062c436f6465486173683c543e587761736d3a3a5072656661625761736d4d6f64756c650004000465012041206d617070696e67206265747765656e20616e206f726967696e616c20636f6465206861736820616e6420696e737472756d656e746564207761736d20636f64652c20726561647920666f7220657865637574696f6e2e384163636f756e74436f756e74657201000c753634200000000000000000045420546865207375627472696520636f756e7465722e38436f6e7472616374496e666f4f6600010530543a3a4163636f756e7449643c436f6e7472616374496e666f3c543e0004000ca82054686520636f6465206173736f6369617465642077697468206120676976656e206163636f756e742e00d02054574f582d4e4f54453a20534146452073696e636520604163636f756e7449646020697320612073656375726520686173682e01143c7570646174655f7363686564756c6504207363686564756c65205363686564756c650cb4205570646174657320746865207363686564756c6520666f72206d65746572696e6720636f6e7472616374732e000d0120546865207363686564756c65206d7573742068617665206120677265617465722076657273696f6e207468616e207468652073746f726564207363686564756c652e207075745f636f64650410636f64651c5665633c75383e085d012053746f7265732074686520676976656e2062696e617279205761736d20636f646520696e746f2074686520636861696e27732073746f7261676520616e642072657475726e73206974732060636f646568617368602ed420596f752063616e20696e7374616e746961746520636f6e747261637473206f6e6c7920776974682073746f72656420636f64652e1063616c6c1010646573748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651476616c756554436f6d706163743c42616c616e63654f663c543e3e246761735f6c696d697430436f6d706163743c4761733e10646174611c5665633c75383e1c0901204d616b657320612063616c6c20746f20616e206163636f756e742c206f7074696f6e616c6c79207472616e7366657272696e6720736f6d652062616c616e63652e002901202a20496620746865206163636f756e74206973206120736d6172742d636f6e7472616374206163636f756e742c20746865206173736f63696174656420636f64652077696c6c206265b020657865637574656420616e6420616e792076616c75652077696c6c206265207472616e736665727265642e1901202a20496620746865206163636f756e74206973206120726567756c6172206163636f756e742c20616e792076616c75652077696c6c206265207472616e736665727265642e4901202a204966206e6f206163636f756e742065786973747320616e64207468652063616c6c2076616c7565206973206e6f74206c657373207468616e20606578697374656e7469616c5f6465706f736974602c1501206120726567756c6172206163636f756e742077696c6c206265206372656174656420616e6420616e792076616c75652077696c6c206265207472616e736665727265642e2c696e7374616e74696174651024656e646f776d656e7454436f6d706163743c42616c616e63654f663c543e3e246761735f6c696d697430436f6d706163743c4761733e24636f64655f686173682c436f6465486173683c543e10646174611c5665633c75383e28bd0120496e7374616e7469617465732061206e657720636f6e74726163742066726f6d207468652060636f646568617368602067656e65726174656420627920607075745f636f6465602c206f7074696f6e616c6c79207472616e7366657272696e6720736f6d652062616c616e63652e009820496e7374616e74696174696f6e20697320657865637574656420617320666f6c6c6f77733a004101202d205468652064657374696e6174696f6e206164647265737320697320636f6d7075746564206261736564206f6e207468652073656e64657220616e642068617368206f662074686520636f64652e0501202d2054686520736d6172742d636f6e7472616374206163636f756e7420697320637265617465642061742074686520636f6d707574656420616464726573732e6d01202d20546865206063746f725f636f64656020697320657865637574656420696e2074686520636f6e74657874206f6620746865206e65776c792d63726561746564206163636f756e742e204275666665722072657475726e65645d0120202061667465722074686520657865637574696f6e206973207361766564206173207468652060636f646560206f6620746865206163636f756e742e205468617420636f64652077696c6c20626520696e766f6b6564a820202075706f6e20616e792063616c6c2072656365697665642062792074686973206163636f756e742e7c202d2054686520636f6e747261637420697320696e697469616c697a65642e3c636c61696d5f73757263686172676508106465737430543a3a4163636f756e744964286175785f73656e646572504f7074696f6e3c543a3a4163636f756e7449643e14710120416c6c6f777320626c6f636b2070726f64756365727320746f20636c61696d206120736d616c6c2072657761726420666f72206576696374696e67206120636f6e74726163742e204966206120626c6f636b2070726f64756365721501206661696c7320746f20646f20736f2c206120726567756c61722075736572732077696c6c20626520616c6c6f77656420746f20636c61696d20746865207265776172642e00390120496620636f6e7472616374206973206e6f742065766963746564206173206120726573756c74206f6620746869732063616c6c2c206e6f20616374696f6e73206172652074616b656e20616e64ac207468652073656e646572206973206e6f7420656c696769626c6520666f7220746865207265776172642e011830496e7374616e74696174656408244163636f756e744964244163636f756e74496404250120436f6e7472616374206465706c6f7965642062792061646472657373206174207468652073706563696669656420616464726573732e205b6f776e65722c20636f6e74726163745d1c4576696374656408244163636f756e74496410626f6f6c1ce420436f6e747261637420686173206265656e206576696374656420616e64206973206e6f7720696e20746f6d6273746f6e652073746174652e58205b636f6e74726163742c20746f6d6273746f6e655d042024202320506172616d73000d01202d2060636f6e7472616374603a20604163636f756e744964603a20546865206163636f756e74204944206f6620746865206576696374656420636f6e74726163742e3501202d2060746f6d6273746f6e65603a2060626f6f6c603a205472756520696620746865206576696374656420636f6e7472616374206c65667420626568696e64206120746f6d6273746f6e652e20526573746f72656410244163636f756e744964244163636f756e74496410486173681c42616c616e636524c020526573746f726174696f6e20666f72206120636f6e747261637420686173206265656e207375636365737366756c2ea4205b646f6e6f722c20646573742c20636f64655f686173682c2072656e745f616c6c6f77616e63655d042024202320506172616d7300f4202d2060646f6e6f72603a20604163636f756e744964603a204163636f756e74204944206f662074686520726573746f72696e6720636f6e7472616374ec202d206064657374603a20604163636f756e744964603a204163636f756e74204944206f662074686520726573746f72656420636f6e7472616374e8202d2060636f64655f68617368603a206048617368603a20436f64652068617368206f662074686520726573746f72656420636f6e74726163741901202d206072656e745f616c6c6f77616e63653a206042616c616e6365603a2052656e7420616c6c6f77616e6365206f662074686520726573746f72656420636f6e747261637428436f646553746f72656404104861736808b820436f646520776974682074686520737065636966696564206861736820686173206265656e2073746f7265642e30205b636f64655f686173685d3c5363686564756c6555706461746564040c75333204c820547269676765726564207768656e207468652063757272656e74205b7363686564756c655d20697320757064617465642e44436f6e7472616374457865637574696f6e08244163636f756e7449641c5665633c75383e08090120416e206576656e74206465706f73697465642075706f6e20657865637574696f6e206f66206120636f6e74726163742066726f6d20746865206163636f756e742e40205b6163636f756e742c20646174615d204c5369676e6564436c61696d48616e646963617038543a3a426c6f636b4e756d626572100200000010e0204e756d626572206f6620626c6f636b2064656c617920616e2065787472696e73696320636c61696d20737572636861726765206861732e000d01205768656e20636c61696d207375726368617267652069732063616c6c656420627920616e2065787472696e736963207468652072656e7420697320636865636b65646820666f722063757272656e745f626c6f636b202d2064656c617940546f6d6273746f6e654465706f7369743042616c616e63654f663c543e4000a0acb903000000000000000000000004d420546865206d696e696d756d20616d6f756e7420726571756972656420746f2067656e6572617465206120746f6d6273746f6e652e4453746f7261676553697a654f66667365740c753332100800000018710120412073697a65206f666673657420666f7220616e20636f6e74726163742e2041206a7573742063726561746564206163636f756e74207769746820756e746f75636865642073746f726167652077696c6c20686176652074686174e0206d756368206f662073746f726167652066726f6d20746865207065727370656374697665206f66207468652073746174652072656e742e006101205468697320697320612073696d706c652077617920746f20656e73757265207468617420636f6e747261637473207769746820656d7074792073746f72616765206576656e7475616c6c79206765742064656c657465646501206279206d616b696e67207468656d207061792072656e742e2054686973206372656174657320616e20696e63656e7469766520746f2072656d6f7665207468656d206561726c7920696e206f7264657220746f2073617665182072656e742e2c52656e74427974654665653042616c616e63654f663c543e4000286bee000000000000000000000000043501205072696365206f6620612062797465206f662073746f7261676520706572206f6e6520626c6f636b20696e74657276616c2e2053686f756c642062652067726561746572207468616e20302e4452656e744465706f7369744f66667365743042616c616e63654f663c543e400010a5d4e800000000000000000000001c05012054686520616d6f756e74206f662066756e6473206120636f6e74726163742073686f756c64206465706f73697420696e206f7264657220746f206f6666736574582074686520636f7374206f66206f6e6520627974652e006901204c6574277320737570706f736520746865206465706f73697420697320312c303030204255202862616c616e636520756e697473292f6279746520616e64207468652072656e7420697320312042552f627974652f6461792c5901207468656e206120636f6e7472616374207769746820312c3030302c3030302042552074686174207573657320312c303030206279746573206f662073746f7261676520776f756c6420706179206e6f2072656e742e4d0120427574206966207468652062616c616e6365207265647563656420746f203530302c30303020425520616e64207468652073746f7261676520737461796564207468652073616d6520617420312c3030302c78207468656e20697420776f756c6420706179203530302042552f6461792e3c5375726368617267655265776172643042616c616e63654f663c543e40005cb2ec22000000000000000000000008e4205265776172642074686174206973207265636569766564206279207468652070617274792077686f736520746f75636820686173206c65646820746f2072656d6f76616c206f66206120636f6e74726163742e204d617844657074680c753332102000000008310120546865206d6178696d756d206e657374696e67206c6576656c206f6620612063616c6c2f696e7374616e746961746520737461636b2e204120726561736f6e61626c652064656661756c74382076616c7565206973203130302e304d617856616c756553697a650c753332100040000004390120546865206d6178696d756d2073697a65206f6620612073746f726167652076616c756520696e2062797465732e204120726561736f6e61626c652064656661756c74206973203136204b69422e4858496e76616c69645363686564756c6556657273696f6e0405012041206e6577207363686564756c65206d7573742068617665206120677265617465722076657273696f6e207468616e207468652063757272656e74206f6e652e54496e76616c6964537572636861726765436c61696d04550120416e206f726967696e206d757374206265207369676e6564206f7220696e686572656e7420616e6420617578696c696172792073656e646572206f6e6c792070726f7669646564206f6e20696e686572656e742e54496e76616c6964536f75726365436f6e747261637404dc2043616e6e6f7420726573746f72652066726f6d206e6f6e6578697374696e67206f7220746f6d6273746f6e6520636f6e74726163742e68496e76616c696444657374696e6174696f6e436f6e747261637404c42043616e6e6f7420726573746f726520746f206e6f6e6578697374696e67206f7220616c69766520636f6e74726163742e40496e76616c6964546f6d6273746f6e65046020546f6d6273746f6e657320646f6e2774206d617463682e54496e76616c6964436f6e74726163744f726967696e04bc20416e206f726967696e20547269654964207772697474656e20696e207468652063757272656e7420626c6f636b2e204f75744f6647617304bc2054686520657865637574656420636f6e7472616374206578686175737465642069747320676173206c696d69742e504f7574707574427566666572546f6f536d616c6c04050120546865206f75747075742062756666657220737570706c69656420746f206120636f6e7472616374204150492063616c6c2077617320746f6f20736d616c6c2e6442656c6f7753756273697374656e63655468726573686f6c6410210120506572666f726d696e672074686520726571756573746564207472616e7366657220776f756c6420686176652062726f756768742074686520636f6e74726163742062656c6f773d01207468652073756273697374656e6365207468726573686f6c642e204e6f207472616e7366657220697320616c6c6f77656420746f20646f207468697320696e206f7264657220746f20616c6c6f77450120666f72206120746f6d6273746f6e6520746f20626520637265617465642e2055736520607365616c5f7465726d696e6174656020746f2072656d6f7665206120636f6e747261637420776974686f757470206c656176696e67206120746f6d6273746f6e6520626568696e642e504e6577436f6e74726163744e6f7446756e64656408390120546865206e65776c79206372656174656420636f6e74726163742069732062656c6f77207468652073756273697374656e6365207468726573686f6c6420616674657220657865637574696e6721012069747320636f6e74727563746f722e204e6f20636f6e7472616374732061726520616c6c6f77656420746f2065786973742062656c6f772074686174207468726573686f6c642e385472616e736665724661696c65640c250120506572666f726d696e672074686520726571756573746564207472616e73666572206661696c656420666f72206120726561736f6e206f726967696e6174696e6720696e2074686531012063686f73656e2063757272656e637920696d706c656d656e746174696f6e206f66207468652072756e74696d652e204d6f73742070726f6261626c79207468652062616c616e63652069738c20746f6f206c6f77206f72206c6f636b732061726520706c61636564206f6e2069742e4c4d617843616c6c44657074685265616368656408250120506572666f726d696e6720612063616c6c207761732064656e6965642062656361757365207468652063616c6c696e67206465707468207265616368656420746865206c696d697498206f6620776861742069732073706563696669656420696e20746865207363686564756c652e2c4e6f7443616c6c61626c650831012054686520636f6e74726163742074686174207761732063616c6c656420697320656974686572206e6f20636f6e747261637420617420616c6c20286120706c61696e206163636f756e74294c206f72206973206120746f6d6273746f6e652e30436f6465546f6f4c617267650455012054686520636f646520737570706c69656420746f20607075745f636f646560206578636565647320746865206c696d69742073706563696669656420696e207468652063757272656e74207363686564756c652e30436f64654e6f74466f756e6404c8204e6f20636f646520636f756c6420626520666f756e642061742074686520737570706c69656420636f646520686173682e2c4f75744f66426f756e6473042901204120627566666572206f757473696465206f662073616e64626f78206d656d6f7279207761732070617373656420746f206120636f6e7472616374204150492066756e6374696f6e2e384465636f64696e674661696c6564042d0120496e7075742070617373656420746f206120636f6e7472616374204150492066756e6374696f6e206661696c656420746f206465636f646520617320657870656374656420747970652e3c436f6e747261637454726170706564048c20436f6e7472616374207472617070656420647572696e6720657865637574696f6e2e105375646f01105375646f040c4b6579010030543a3a4163636f756e74496480000000000000000000000000000000000000000000000000000000000000000004842054686520604163636f756e74496460206f6620746865207375646f206b65792e0110107375646f041063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e2839012041757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c20776974682060526f6f7460206f726967696e2e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e60202d204f6e6520444220777269746520286576656e74292ec8202d20576569676874206f662064657269766174697665206063616c6c6020657865637574696f6e202b2031302c3030302e302023203c2f7765696768743e547375646f5f756e636865636b65645f776569676874081063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e1c5f776569676874185765696768742839012041757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c20776974682060526f6f7460206f726967696e2e310120546869732066756e6374696f6e20646f6573206e6f7420636865636b2074686520776569676874206f66207468652063616c6c2c20616e6420696e737465616420616c6c6f777320746865b4205375646f207573657220746f20737065636966792074686520776569676874206f66207468652063616c6c2e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292ed0202d2054686520776569676874206f6620746869732063616c6c20697320646566696e6564206279207468652063616c6c65722e302023203c2f7765696768743e1c7365745f6b6579040c6e65778c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263652475012041757468656e74696361746573207468652063757272656e74207375646f206b657920616e6420736574732074686520676976656e204163636f756e7449642028606e6577602920617320746865206e6577207375646f206b65792e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e44202d204f6e65204442206368616e67652e302023203c2f7765696768743e1c7375646f5f6173080c77686f8c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e2c51012041757468656e7469636174657320746865207375646f206b657920616e64206469737061746368657320612066756e6374696f6e2063616c6c207769746820605369676e656460206f726967696e2066726f6d44206120676976656e206163636f756e742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e002c2023203c7765696768743e20202d204f2831292e64202d204c696d697465642073746f726167652072656164732e60202d204f6e6520444220777269746520286576656e74292ec8202d20576569676874206f662064657269766174697665206063616c6c6020657865637574696f6e202b2031302c3030302e302023203c2f7765696768743e010c14537564696404384469737061746368526573756c7404842041207375646f206a75737420746f6f6b20706c6163652e205b726573756c745d284b65794368616e67656404244163636f756e74496404f820546865205b7375646f65725d206a757374207377697463686564206964656e746974793b20746865206f6c64206b657920697320737570706c6965642e285375646f4173446f6e650410626f6f6c04842041207375646f206a75737420746f6f6b20706c6163652e205b726573756c745d00042c526571756972655375646f04802053656e646572206d75737420626520746865205375646f206163636f756e7420496d4f6e6c696e650120496d4f6e6c696e6510384865617274626561744166746572010038543a3a426c6f636b4e756d62657210000000001831012054686520626c6f636b206e756d6265722061667465722077686963682069742773206f6b20746f2073656e64206865617274626561747320696e2063757272656e742073657373696f6e2e0011012041742074686520626567696e6e696e67206f6620656163682073657373696f6e20776520736574207468697320746f20612076616c756520746861742073686f756c64d02066616c6c20726f7567686c7920696e20746865206d6964646c65206f66207468652073657373696f6e206475726174696f6e2e010120546865206964656120697320746f206669727374207761697420666f72207468652076616c696461746f727320746f2070726f64756365206120626c6f636b390120696e207468652063757272656e742073657373696f6e2c20736f20746861742074686520686561727462656174206c61746572206f6e2077696c6c206e6f74206265206e65636573736172792e104b65797301004c5665633c543a3a417574686f7269747949643e040004d0205468652063757272656e7420736574206f66206b6579732074686174206d61792069737375652061206865617274626561742e485265636569766564486561727462656174730002053053657373696f6e496e6465782441757468496e6465781c5665633c75383e05040008f020466f7220656163682073657373696f6e20696e6465782c207765206b6565702061206d617070696e67206f66206041757468496e6465786020746f8020606f6666636861696e3a3a4f70617175654e6574776f726b5374617465602e38417574686f726564426c6f636b730102053053657373696f6e496e64657838543a3a56616c696461746f7249640c75333205100000000008150120466f7220656163682073657373696f6e20696e6465782c207765206b6565702061206d617070696e67206f662060543a3a56616c696461746f7249646020746f20746865c8206e756d626572206f6620626c6f636b7320617574686f7265642062792074686520676976656e20617574686f726974792e0104246865617274626561740824686561727462656174644865617274626561743c543a3a426c6f636b4e756d6265723e285f7369676e6174757265bc3c543a3a417574686f7269747949642061732052756e74696d654170705075626c69633e3a3a5369676e6174757265282c2023203c7765696768743e2101202d20436f6d706c65786974793a20604f284b202b20452960207768657265204b206973206c656e677468206f6620604b6579736020616e642045206973206c656e677468206f66b4202020604865617274626561742e6e6574776f726b5f73746174652e65787465726e616c5f6164647265737360008c2020202d20604f284b29603a206465636f64696e67206f66206c656e67746820604b60b02020202d20604f284529603a206465636f64696e672f656e636f64696e67206f66206c656e677468206045603d01202d20446252656164733a2070616c6c65745f73657373696f6e206056616c696461746f7273602c2070616c6c65745f73657373696f6e206043757272656e74496e646578602c20604b657973602c5c202020605265636569766564486561727462656174736084202d2044625772697465733a206052656365697665644865617274626561747360302023203c2f7765696768743e010c444865617274626561745265636569766564042c417574686f72697479496404fc2041206e657720686561727462656174207761732072656365697665642066726f6d2060417574686f72697479496460205b617574686f726974795f69645d1c416c6c476f6f640004d42041742074686520656e64206f66207468652073657373696f6e2c206e6f206f6666656e63652077617320636f6d6d69747465642e2c536f6d654f66666c696e6504605665633c4964656e74696669636174696f6e5475706c653e0435012041742074686520656e64206f66207468652073657373696f6e2c206174206c65617374206f6e652076616c696461746f722077617320666f756e6420746f206265205b6f66666c696e655d2e000828496e76616c69644b65790464204e6f6e206578697374656e74207075626c6963206b65792e4c4475706c6963617465644865617274626561740458204475706c696361746564206865617274626561742e48417574686f72697479446973636f76657279000100000000204f6666656e63657301204f6666656e636573101c5265706f727473000105345265706f727449644f663c543ed04f6666656e636544657461696c733c543a3a4163636f756e7449642c20543a3a4964656e74696669636174696f6e5475706c653e00040004490120546865207072696d61727920737472756374757265207468617420686f6c647320616c6c206f6666656e6365207265636f726473206b65796564206279207265706f7274206964656e746966696572732e4044656665727265644f6666656e6365730100645665633c44656665727265644f6666656e63654f663c543e3e0400086501204465666572726564207265706f72747320746861742068617665206265656e2072656a656374656420627920746865206f6666656e63652068616e646c657220616e64206e65656420746f206265207375626d6974746564442061742061206c617465722074696d652e58436f6e63757272656e745265706f727473496e646578010205104b696e64384f706171756554696d65536c6f74485665633c5265706f727449644f663c543e3e050400042901204120766563746f72206f66207265706f727473206f66207468652073616d65206b696e6420746861742068617070656e6564206174207468652073616d652074696d6520736c6f742e485265706f72747342794b696e64496e646578010105104b696e641c5665633c75383e00040018110120456e756d65726174657320616c6c207265706f727473206f662061206b696e6420616c6f6e672077697468207468652074696d6520746865792068617070656e65642e00bc20416c6c207265706f7274732061726520736f72746564206279207468652074696d65206f66206f6666656e63652e004901204e6f74652074686174207468652061637475616c2074797065206f662074686973206d617070696e6720697320605665633c75383e602c207468697320697320626563617573652076616c756573206f66690120646966666572656e7420747970657320617265206e6f7420737570706f7274656420617420746865206d6f6d656e7420736f2077652061726520646f696e6720746865206d616e75616c2073657269616c697a6174696f6e2e010001041c4f6666656e63650c104b696e64384f706171756554696d65536c6f7410626f6f6c10550120546865726520697320616e206f6666656e6365207265706f72746564206f662074686520676976656e20606b696e64602068617070656e656420617420746865206073657373696f6e5f696e6465786020616e644d0120286b696e642d7370656369666963292074696d6520736c6f742e2054686973206576656e74206973206e6f74206465706f736974656420666f72206475706c696361746520736c61736865732e206c6173741d0120656c656d656e7420696e64696361746573206f6620746865206f6666656e636520776173206170706c69656420287472756529206f7220717565756564202866616c736529206c205b6b696e642c2074696d65736c6f742c206170706c6965645d2e000028486973746f726963616c00000000006052616e646f6d6e657373436f6c6c656374697665466c6970016052616e646f6d6e657373436f6c6c656374697665466c6970043852616e646f6d4d6174657269616c0100305665633c543a3a486173683e04000c610120536572696573206f6620626c6f636b20686561646572732066726f6d20746865206c61737420383120626c6f636b73207468617420616374732061732072616e646f6d2073656564206d6174657269616c2e2054686973610120697320617272616e67656420617320612072696e672062756666657220776974682060626c6f636b5f6e756d626572202520383160206265696e672074686520696e64657820696e746f20746865206056656360206f664420746865206f6c6465737420686173682e0100000000204964656e7469747901204964656e7469747910284964656e746974794f6600010530543a3a4163636f756e74496468526567697374726174696f6e3c42616c616e63654f663c543e3e0004000c210120496e666f726d6174696f6e20746861742069732070657274696e656e7420746f206964656e746966792074686520656e7469747920626568696e6420616e206163636f756e742e00c02054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e1c53757065724f6600010230543a3a4163636f756e7449645028543a3a4163636f756e7449642c204461746129000400086101205468652073757065722d6964656e74697479206f6620616e20616c7465726e6174697665202273756222206964656e7469747920746f676574686572207769746820697473206e616d652c2077697468696e2074686174510120636f6e746578742e20496620746865206163636f756e74206973206e6f7420736f6d65206f74686572206163636f756e742773207375622d6964656e746974792c207468656e206a75737420604e6f6e65602e18537562734f6601010530543a3a4163636f756e744964842842616c616e63654f663c543e2c205665633c543a3a4163636f756e7449643e290044000000000000000000000000000000000014b820416c7465726e6174697665202273756222206964656e746974696573206f662074686973206163636f756e742e001d0120546865206669727374206974656d20697320746865206465706f7369742c20746865207365636f6e64206973206120766563746f72206f6620746865206163636f756e74732e00c02054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e28526567697374726172730100d85665633c4f7074696f6e3c526567697374726172496e666f3c42616c616e63654f663c543e2c20543a3a4163636f756e7449643e3e3e0400104d012054686520736574206f6620726567697374726172732e204e6f7420657870656374656420746f206765742076657279206269672061732063616e206f6e6c79206265206164646564207468726f7567682061a8207370656369616c206f726967696e20286c696b656c79206120636f756e63696c206d6f74696f6e292e0029012054686520696e64657820696e746f20746869732063616e206265206361737420746f2060526567697374726172496e6465786020746f2067657420612076616c69642076616c75652e013c346164645f726567697374726172041c6163636f756e7430543a3a4163636f756e744964347c2041646420612072656769737472617220746f207468652073797374656d2e00010120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652060543a3a5265676973747261724f726967696e602e00ac202d20606163636f756e74603a20746865206163636f756e74206f6620746865207265676973747261722e009820456d6974732060526567697374726172416464656460206966207375636365737366756c2e002c2023203c7765696768743e2901202d20604f2852296020776865726520605260207265676973747261722d636f756e742028676f7665726e616e63652d626f756e64656420616e6420636f64652d626f756e646564292e9c202d204f6e652073746f72616765206d75746174696f6e2028636f64656320604f28522960292e34202d204f6e65206576656e742e302023203c2f7765696768743e307365745f6964656e746974790410696e666f304964656e74697479496e666f4c2d012053657420616e206163636f756e742773206964656e7469747920696e666f726d6174696f6e20616e6420726573657276652074686520617070726f707269617465206465706f7369742e00590120496620746865206163636f756e7420616c726561647920686173206964656e7469747920696e666f726d6174696f6e2c20746865206465706f7369742069732074616b656e2061732070617274207061796d656e745420666f7220746865206e6577206465706f7369742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e0090202d2060696e666f603a20546865206964656e7469747920696e666f726d6174696f6e2e008c20456d69747320604964656e7469747953657460206966207375636365737366756c2e002c2023203c7765696768743e48202d20604f2858202b205827202b2052296021012020202d20776865726520605860206164646974696f6e616c2d6669656c642d636f756e7420286465706f7369742d626f756e64656420616e6420636f64652d626f756e64656429e42020202d20776865726520605260206a756467656d656e74732d636f756e7420287265676973747261722d636f756e742d626f756e6465642984202d204f6e652062616c616e63652072657365727665206f7065726174696f6e2e2501202d204f6e652073746f72616765206d75746174696f6e2028636f6465632d7265616420604f285827202b205229602c20636f6465632d777269746520604f2858202b20522960292e34202d204f6e65206576656e742e302023203c2f7765696768743e207365745f73756273041073756273645665633c28543a3a4163636f756e7449642c2044617461293e54902053657420746865207375622d6163636f756e7473206f66207468652073656e6465722e005901205061796d656e743a20416e79206167677265676174652062616c616e63652072657365727665642062792070726576696f757320607365745f73756273602063616c6c732077696c6c2062652072657475726e6564310120616e6420616e20616d6f756e7420605375624163636f756e744465706f736974602077696c6c20626520726573657276656420666f722065616368206974656d20696e206073756273602e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061207265676973746572656428206964656e746974792e00b4202d206073756273603a20546865206964656e74697479277320286e657729207375622d6163636f756e74732e002c2023203c7765696768743e34202d20604f2850202b20532960e82020202d20776865726520605060206f6c642d737562732d636f756e742028686172642d20616e64206465706f7369742d626f756e646564292ed82020202d2077686572652060536020737562732d636f756e742028686172642d20616e64206465706f7369742d626f756e646564292e88202d204174206d6f7374206f6e652062616c616e6365206f7065726174696f6e732e18202d2044423ae02020202d206050202b2053602073746f72616765206d75746174696f6e732028636f64656320636f6d706c657869747920604f2831296029c02020202d204f6e652073746f7261676520726561642028636f64656320636f6d706c657869747920604f28502960292ec42020202d204f6e652073746f726167652077726974652028636f64656320636f6d706c657869747920604f28532960292ed42020202d204f6e652073746f726167652d6578697374732028604964656e746974794f663a3a636f6e7461696e735f6b657960292e302023203c2f7765696768743e38636c6561725f6964656e7469747900483d0120436c65617220616e206163636f756e742773206964656e7469747920696e666f20616e6420616c6c207375622d6163636f756e747320616e642072657475726e20616c6c206465706f736974732e00f0205061796d656e743a20416c6c2072657365727665642062616c616e636573206f6e20746865206163636f756e74206172652072657475726e65642e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061207265676973746572656428206964656e746974792e009c20456d69747320604964656e74697479436c656172656460206966207375636365737366756c2e002c2023203c7765696768743e44202d20604f2852202b2053202b20582960d02020202d20776865726520605260207265676973747261722d636f756e742028676f7665726e616e63652d626f756e646564292ed82020202d2077686572652060536020737562732d636f756e742028686172642d20616e64206465706f7369742d626f756e646564292e25012020202d20776865726520605860206164646974696f6e616c2d6669656c642d636f756e7420286465706f7369742d626f756e64656420616e6420636f64652d626f756e646564292e8c202d204f6e652062616c616e63652d756e72657365727665206f7065726174696f6e2ecc202d206032602073746f7261676520726561647320616e64206053202b2032602073746f726167652064656c6574696f6e732e34202d204f6e65206576656e742e302023203c2f7765696768743e44726571756573745f6a756467656d656e7408247265675f696e6465785c436f6d706163743c526567697374726172496e6465783e1c6d61785f66656554436f6d706163743c42616c616e63654f663c543e3e5c9820526571756573742061206a756467656d656e742066726f6d2061207265676973747261722e005901205061796d656e743a204174206d6f737420606d61785f666565602077696c6c20626520726573657276656420666f72207061796d656e7420746f2074686520726567697374726172206966206a756467656d656e741c20676976656e2e00390120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061542072656769737465726564206964656e746974792e002101202d20607265675f696e646578603a2054686520696e646578206f6620746865207265676973747261722077686f7365206a756467656d656e74206973207265717565737465642e5901202d20606d61785f666565603a20546865206d6178696d756d206665652074686174206d617920626520706169642e20546869732073686f756c64206a757374206265206175746f2d706f70756c617465642061733a0034206060606e6f636f6d70696c65bc2053656c663a3a7265676973747261727328292e676574287265675f696e646578292e756e7772617028292e666565102060606000a820456d69747320604a756467656d656e7452657175657374656460206966207375636365737366756c2e002c2023203c7765696768743e38202d20604f2852202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2ebc202d2053746f726167653a2031207265616420604f285229602c2031206d757461746520604f2858202b205229602e34202d204f6e65206576656e742e302023203c2f7765696768743e3863616e63656c5f7265717565737404247265675f696e64657838526567697374726172496e646578446c2043616e63656c20612070726576696f757320726571756573742e00fc205061796d656e743a20412070726576696f75736c79207265736572766564206465706f7369742069732072657475726e6564206f6e20737563636573732e00390120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652061542072656769737465726564206964656e746974792e004901202d20607265675f696e646578603a2054686520696e646578206f6620746865207265676973747261722077686f7365206a756467656d656e74206973206e6f206c6f6e676572207265717565737465642e00b020456d69747320604a756467656d656e74556e72657175657374656460206966207375636365737366756c2e002c2023203c7765696768743e38202d20604f2852202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2e8c202d204f6e652073746f72616765206d75746174696f6e20604f2852202b205829602e30202d204f6e65206576656e74302023203c2f7765696768743e1c7365745f6665650814696e6465785c436f6d706163743c526567697374726172496e6465783e0c66656554436f6d706163743c42616c616e63654f663c543e3e341d0120536574207468652066656520726571756972656420666f722061206a756467656d656e7420746f206265207265717565737465642066726f6d2061207265676973747261722e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74a4206f6620746865207265676973747261722077686f736520696e6465782069732060696e646578602e00f8202d2060696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f73652066656520697320746f206265207365742e58202d2060666565603a20746865206e6577206665652e002c2023203c7765696768743e28202d20604f285229602e7c202d204f6e652073746f72616765206d75746174696f6e20604f285229602ee8202d2042656e63686d61726b3a20372e333135202b2052202a20302e33323920c2b57320286d696e207371756172657320616e616c7973697329302023203c2f7765696768743e387365745f6163636f756e745f69640814696e6465785c436f6d706163743c526567697374726172496e6465783e0c6e657730543a3a4163636f756e74496434c0204368616e676520746865206163636f756e74206173736f63696174656420776974682061207265676973747261722e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74a4206f6620746865207265676973747261722077686f736520696e6465782069732060696e646578602e00f8202d2060696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f73652066656520697320746f206265207365742e74202d20606e6577603a20746865206e6577206163636f756e742049442e002c2023203c7765696768743e28202d20604f285229602e7c202d204f6e652073746f72616765206d75746174696f6e20604f285229602ee4202d2042656e63686d61726b3a20382e383233202b2052202a20302e333220c2b57320286d696e207371756172657320616e616c7973697329302023203c2f7765696768743e287365745f6669656c64730814696e6465785c436f6d706163743c526567697374726172496e6465783e186669656c6473384964656e746974794669656c647334ac2053657420746865206669656c6420696e666f726d6174696f6e20666f722061207265676973747261722e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74a4206f6620746865207265676973747261722077686f736520696e6465782069732060696e646578602e00f8202d2060696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f73652066656520697320746f206265207365742e1101202d20606669656c6473603a20746865206669656c64732074686174207468652072656769737472617220636f6e6365726e73207468656d73656c76657320776974682e002c2023203c7765696768743e28202d20604f285229602e7c202d204f6e652073746f72616765206d75746174696f6e20604f285229602ee8202d2042656e63686d61726b3a20372e343634202b2052202a20302e33323520c2b57320286d696e207371756172657320616e616c7973697329302023203c2f7765696768743e4470726f766964655f6a756467656d656e740c247265675f696e6465785c436f6d706163743c526567697374726172496e6465783e187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365246a756467656d656e745c4a756467656d656e743c42616c616e63654f663c543e3e4cbc2050726f766964652061206a756467656d656e7420666f7220616e206163636f756e742773206964656e746974792e00590120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420626520746865206163636f756e74b4206f6620746865207265676973747261722077686f736520696e64657820697320607265675f696e646578602e002501202d20607265675f696e646578603a2074686520696e646578206f6620746865207265676973747261722077686f7365206a756467656d656e74206973206265696e67206d6164652e5901202d2060746172676574603a20746865206163636f756e742077686f7365206964656e7469747920746865206a756467656d656e742069732075706f6e2e2054686973206d75737420626520616e206163636f756e74782020207769746820612072656769737465726564206964656e746974792e4d01202d20606a756467656d656e74603a20746865206a756467656d656e74206f662074686520726567697374726172206f6620696e64657820607265675f696e646578602061626f75742060746172676574602e009820456d69747320604a756467656d656e74476976656e60206966207375636365737366756c2e002c2023203c7765696768743e38202d20604f2852202b205829602e88202d204f6e652062616c616e63652d7472616e73666572206f7065726174696f6e2e98202d20557020746f206f6e65206163636f756e742d6c6f6f6b7570206f7065726174696f6e2ebc202d2053746f726167653a2031207265616420604f285229602c2031206d757461746520604f2852202b205829602e34202d204f6e65206576656e742e302023203c2f7765696768743e346b696c6c5f6964656e7469747904187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263654c45012052656d6f766520616e206163636f756e742773206964656e7469747920616e64207375622d6163636f756e7420696e666f726d6174696f6e20616e6420736c61736820746865206465706f736974732e006501205061796d656e743a2052657365727665642062616c616e6365732066726f6d20607365745f737562736020616e6420607365745f6964656e74697479602061726520736c617368656420616e642068616e646c656420627949012060536c617368602e20566572696669636174696f6e2072657175657374206465706f7369747320617265206e6f742072657475726e65643b20746865792073686f756c642062652063616e63656c6c656484206d616e75616c6c79207573696e67206063616e63656c5f72657175657374602e00fc20546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206d617463682060543a3a466f7263654f726967696e602e005901202d2060746172676574603a20746865206163636f756e742077686f7365206964656e7469747920746865206a756467656d656e742069732075706f6e2e2054686973206d75737420626520616e206163636f756e74782020207769746820612072656769737465726564206964656e746974792e009820456d69747320604964656e746974794b696c6c656460206966207375636365737366756c2e002c2023203c7765696768743e48202d20604f2852202b2053202b205829602e84202d204f6e652062616c616e63652d72657365727665206f7065726174696f6e2e74202d206053202b2032602073746f72616765206d75746174696f6e732e34202d204f6e65206576656e742e302023203c2f7765696768743e1c6164645f737562080c7375628c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365106461746110446174611cb0204164642074686520676976656e206163636f756e7420746f207468652073656e646572277320737562732e006101205061796d656e743a2042616c616e636520726573657276656420627920612070726576696f757320607365745f73756273602063616c6c20666f72206f6e65207375622077696c6c2062652072657061747269617465643c20746f207468652073656e6465722e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d7573742068617665206120726567697374657265645c20737562206964656e74697479206f662060737562602e2872656e616d655f737562080c7375628c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651064617461104461746110d020416c74657220746865206173736f636961746564206e616d65206f662074686520676976656e207375622d6163636f756e742e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d7573742068617665206120726567697374657265645c20737562206964656e74697479206f662060737562602e2872656d6f76655f737562040c7375628c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651cc42052656d6f76652074686520676976656e206163636f756e742066726f6d207468652073656e646572277320737562732e006101205061796d656e743a2042616c616e636520726573657276656420627920612070726576696f757320607365745f73756273602063616c6c20666f72206f6e65207375622077696c6c2062652072657061747269617465643c20746f207468652073656e6465722e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d7573742068617665206120726567697374657265645c20737562206964656e74697479206f662060737562602e20717569745f7375620028902052656d6f7665207468652073656e6465722061732061207375622d6163636f756e742e006101205061796d656e743a2042616c616e636520726573657276656420627920612070726576696f757320607365745f73756273602063616c6c20666f72206f6e65207375622077696c6c206265207265706174726961746564b820746f207468652073656e64657220282a6e6f742a20746865206f726967696e616c206465706f7369746f72292e00650120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d757374206861766520612072656769737465726564402073757065722d6964656e746974792e004901204e4f54453a20546869732073686f756c64206e6f74206e6f726d616c6c7920626520757365642c206275742069732070726f766964656420696e207468652063617365207468617420746865206e6f6e2d150120636f6e74726f6c6c6572206f6620616e206163636f756e74206973206d616c6963696f75736c7920726567697374657265642061732061207375622d6163636f756e742e01282c4964656e7469747953657404244163636f756e7449640409012041206e616d652077617320736574206f72207265736574202877686963682077696c6c2072656d6f766520616c6c206a756467656d656e7473292e205b77686f5d3c4964656e74697479436c656172656408244163636f756e7449641c42616c616e6365040d012041206e616d652077617320636c65617265642c20616e642074686520676976656e2062616c616e63652072657475726e65642e205b77686f2c206465706f7369745d384964656e746974794b696c6c656408244163636f756e7449641c42616c616e63650405012041206e616d65207761732072656d6f76656420616e642074686520676976656e2062616c616e636520736c61736865642e205b77686f2c206465706f7369745d484a756467656d656e7452657175657374656408244163636f756e74496438526567697374726172496e64657804fc2041206a756467656d656e74207761732061736b65642066726f6d2061207265676973747261722e205b77686f2c207265676973747261725f696e6465785d504a756467656d656e74556e72657175657374656408244163636f756e74496438526567697374726172496e64657804e82041206a756467656d656e74207265717565737420776173207265747261637465642e205b77686f2c207265676973747261725f696e6465785d384a756467656d656e74476976656e08244163636f756e74496438526567697374726172496e6465780401012041206a756467656d656e742077617320676976656e2062792061207265676973747261722e205b7461726765742c207265676973747261725f696e6465785d3852656769737472617241646465640438526567697374726172496e64657804a4204120726567697374726172207761732061646465642e205b7265676973747261725f696e6465785d405375624964656e7469747941646465640c244163636f756e744964244163636f756e7449641c42616c616e6365044d012041207375622d6964656e746974792077617320616464656420746f20616e206964656e7469747920616e6420746865206465706f73697420706169642e205b7375622c206d61696e2c206465706f7369745d485375624964656e7469747952656d6f7665640c244163636f756e744964244163636f756e7449641c42616c616e6365080d012041207375622d6964656e74697479207761732072656d6f7665642066726f6d20616e206964656e7469747920616e6420746865206465706f7369742066726565642e54205b7375622c206d61696e2c206465706f7369745d485375624964656e746974795265766f6b65640c244163636f756e744964244163636f756e7449641c42616c616e6365081d012041207375622d6964656e746974792077617320636c65617265642c20616e642074686520676976656e206465706f7369742072657061747269617465642066726f6d207468652101206d61696e206964656e74697479206163636f756e7420746f20746865207375622d6964656e74697479206163636f756e742e205b7375622c206d61696e2c206465706f7369745d183042617369634465706f7369743042616c616e63654f663c543e400080c6a47e8d0300000000000000000004d82054686520616d6f756e742068656c64206f6e206465706f73697420666f7220612072656769737465726564206964656e746974792e304669656c644465706f7369743042616c616e63654f663c543e4000a031a95fe300000000000000000000042d012054686520616d6f756e742068656c64206f6e206465706f73697420706572206164646974696f6e616c206669656c6420666f7220612072656769737465726564206964656e746974792e445375624163636f756e744465706f7369743042616c616e63654f663c543e400080f420e6b5000000000000000000000c65012054686520616d6f756e742068656c64206f6e206465706f73697420666f7220612072656769737465726564207375626163636f756e742e20546869732073686f756c64206163636f756e7420666f7220746865206661637471012074686174206f6e652073746f72616765206974656d27732076616c75652077696c6c20696e637265617365206279207468652073697a65206f6620616e206163636f756e742049442c20616e642074686572652077696c6c206265290120616e6f746865722074726965206974656d2077686f73652076616c7565206973207468652073697a65206f6620616e206163636f756e7420494420706c75732033322062797465732e384d61785375624163636f756e74730c7533321064000000040d0120546865206d6178696d756d206e756d626572206f66207375622d6163636f756e747320616c6c6f77656420706572206964656e746966696564206163636f756e742e4c4d61784164646974696f6e616c4669656c64730c7533321064000000086501204d6178696d756d206e756d626572206f66206164646974696f6e616c206669656c64732074686174206d61792062652073746f72656420696e20616e2049442e204e656564656420746f20626f756e642074686520492f4fe020726571756972656420746f2061636365737320616e206964656e746974792c206275742063616e2062652070726574747920686967682e344d6178526567697374726172730c7533321014000000085101204d61786d696d756d206e756d626572206f66207265676973747261727320616c6c6f77656420696e207468652073797374656d2e204e656564656420746f20626f756e642074686520636f6d706c65786974797c206f662c20652e672e2c207570646174696e67206a756467656d656e74732e4048546f6f4d616e795375624163636f756e7473046020546f6f206d616e7920737562732d6163636f756e74732e204e6f74466f756e640454204163636f756e742069736e277420666f756e642e204e6f744e616d65640454204163636f756e742069736e2774206e616d65642e28456d707479496e646578043420456d70747920696e6465782e284665654368616e676564044020466565206973206368616e6765642e284e6f4964656e74697479044c204e6f206964656e7469747920666f756e642e3c537469636b794a756467656d656e74044820537469636b79206a756467656d656e742e384a756467656d656e74476976656e0444204a756467656d656e7420676976656e2e40496e76616c69644a756467656d656e74044c20496e76616c6964206a756467656d656e742e30496e76616c6964496e64657804582054686520696e64657820697320696e76616c69642e34496e76616c6964546172676574045c205468652074617267657420697320696e76616c69642e34546f6f4d616e794669656c6473047020546f6f206d616e79206164646974696f6e616c206669656c64732e44546f6f4d616e795265676973747261727304ec204d6178696d756d20616d6f756e74206f66207265676973747261727320726561636865642e2043616e6e6f742061646420616e79206d6f72652e38416c7265616479436c61696d65640474204163636f756e7420494420697320616c7265616479206e616d65642e184e6f7453756204742053656e646572206973206e6f742061207375622d6163636f756e742e204e6f744f776e6564048c205375622d6163636f756e742069736e2774206f776e65642062792073656e6465722e1c536f6369657479011c536f6369657479401c466f756e646572000030543a3a4163636f756e7449640400044820546865206669727374206d656d6265722e1452756c657300001c543a3a48617368040008510120412068617368206f66207468652072756c6573206f66207468697320736f636965747920636f6e6365726e696e67206d656d626572736869702e2043616e206f6e6c7920626520736574206f6e636520616e6454206f6e6c792062792074686520666f756e6465722e2843616e6469646174657301009c5665633c4269643c543a3a4163636f756e7449642c2042616c616e63654f663c542c20493e3e3e0400043901205468652063757272656e7420736574206f662063616e646964617465733b206269646465727320746861742061726520617474656d7074696e6720746f206265636f6d65206d656d626572732e4c53757370656e64656443616e6469646174657300010530543a3a4163636f756e744964e42842616c616e63654f663c542c20493e2c204269644b696e643c543a3a4163636f756e7449642c2042616c616e63654f663c542c20493e3e2900040004842054686520736574206f662073757370656e6465642063616e646964617465732e0c506f7401003c42616c616e63654f663c542c20493e400000000000000000000000000000000004410120416d6f756e74206f66206f7572206163636f756e742062616c616e63652074686174206973207370656369666963616c6c7920666f7220746865206e65787420726f756e642773206269642873292e1048656164000030543a3a4163636f756e744964040004e820546865206d6f7374207072696d6172792066726f6d20746865206d6f737420726563656e746c7920617070726f766564206d656d626572732e1c4d656d626572730100445665633c543a3a4163636f756e7449643e04000494205468652063757272656e7420736574206f66206d656d626572732c206f7264657265642e4053757370656e6465644d656d6265727301010530543a3a4163636f756e74496410626f6f6c00040004782054686520736574206f662073757370656e646564206d656d626572732e104269647301009c5665633c4269643c543a3a4163636f756e7449642c2042616c616e63654f663c542c20493e3e3e040004e8205468652063757272656e7420626964732c2073746f726564206f726465726564206279207468652076616c7565206f6620746865206269642e20566f756368696e6700010530543a3a4163636f756e74496438566f756368696e6753746174757300040004e4204d656d626572732063757272656e746c7920766f756368696e67206f722062616e6e65642066726f6d20766f756368696e6720616761696e1c5061796f75747301010530543a3a4163636f756e744964985665633c28543a3a426c6f636b4e756d6265722c2042616c616e63654f663c542c20493e293e000400044d012050656e64696e67207061796f7574733b206f72646572656420627920626c6f636b206e756d6265722c20776974682074686520616d6f756e7420746861742073686f756c642062652070616964206f75742e1c537472696b657301010530543a3a4163636f756e7449642c537472696b65436f756e7400100000000004dc20546865206f6e676f696e67206e756d626572206f66206c6f73696e6720766f746573206361737420627920746865206d656d6265722e14566f74657300020530543a3a4163636f756e74496430543a3a4163636f756e74496410566f746505040004d020446f75626c65206d61702066726f6d2043616e646964617465202d3e20566f746572202d3e20284d617962652920566f74652e20446566656e646572000030543a3a4163636f756e744964040004c42054686520646566656e64696e67206d656d6265722063757272656e746c79206265696e67206368616c6c656e6765642e34446566656e646572566f74657300010530543a3a4163636f756e74496410566f7465000400046020566f74657320666f722074686520646566656e6465722e284d61784d656d6265727301000c753332100000000004dc20546865206d6178206e756d626572206f66206d656d6265727320666f722074686520736f6369657479206174206f6e652074696d652e01300c626964041476616c75653c42616c616e63654f663c542c20493e84e020412075736572206f757473696465206f662074686520736f63696574792063616e206d616b6520612062696420666f7220656e7472792e003901205061796d656e743a206043616e6469646174654465706f736974602077696c6c20626520726573657276656420666f72206d616b696e672061206269642e2049742069732072657475726e6564f0207768656e2074686520626964206265636f6d65732061206d656d6265722c206f7220696620746865206269642063616c6c732060756e626964602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a5901202d206076616c7565603a2041206f6e652074696d65207061796d656e74207468652062696420776f756c64206c696b6520746f2072656365697665207768656e206a6f696e696e672074686520736f63696574792e002c2023203c7765696768743e5501204b65793a204220286c656e206f662062696473292c204320286c656e206f662063616e64696461746573292c204d20286c656e206f66206d656d62657273292c2058202862616c616e636520726573657276652944202d2053746f726167652052656164733aec20092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e6465642063616e6469646174652e204f283129e020092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e646564206d656d6265722e204f283129dc20092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e7420626964732e204f284229f420092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e742063616e646964617465732e204f284329c820092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c206d656d626572732e204f284d2948202d2053746f72616765205772697465733a810120092d204f6e652073746f72616765206d757461746520746f206164642061206e65772062696420746f2074686520766563746f72204f2842292028544f444f3a20706f737369626c65206f7074696d697a6174696f6e20772f207265616429010120092d20557020746f206f6e652073746f726167652072656d6f76616c206966206269642e6c656e2829203e204d41585f4249445f434f554e542e204f2831295c202d204e6f7461626c6520436f6d7075746174696f6e3a2d0120092d204f2842202b2043202b206c6f67204d292073656172636820746f20636865636b2075736572206973206e6f7420616c726561647920612070617274206f6620736f63696574792ec420092d204f286c6f672042292073656172636820746f20696e7365727420746865206e65772062696420736f727465642e78202d2045787465726e616c204d6f64756c65204f7065726174696f6e733a9c20092d204f6e652062616c616e63652072657365727665206f7065726174696f6e2e204f285829210120092d20557020746f206f6e652062616c616e636520756e72657365727665206f7065726174696f6e20696620626964732e6c656e2829203e204d41585f4249445f434f554e542e28202d204576656e74733a6820092d204f6e65206576656e7420666f72206e6577206269642efc20092d20557020746f206f6e65206576656e7420666f72204175746f556e626964206966206269642e6c656e2829203e204d41585f4249445f434f554e542e00c420546f74616c20436f6d706c65786974793a204f284d202b2042202b2043202b206c6f674d202b206c6f6742202b205829302023203c2f7765696768743e14756e626964040c706f730c7533324cd82041206269646465722063616e2072656d6f76652074686569722062696420666f7220656e74727920696e746f20736f63696574792e010120427920646f696e6720736f2c20746865792077696c6c20686176652074686569722063616e646964617465206465706f7369742072657475726e6564206f728420746865792077696c6c20756e766f75636820746865697220766f75636865722e00fc205061796d656e743a2054686520626964206465706f73697420697320756e7265736572766564206966207468652075736572206d6164652061206269642e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206269646465722e003020506172616d65746572733a1901202d2060706f73603a20506f736974696f6e20696e207468652060426964736020766563746f72206f6620746865206269642077686f2077616e747320746f20756e6269642e002c2023203c7765696768743eb0204b65793a204220286c656e206f662062696473292c2058202862616c616e636520756e72657365727665290d01202d204f6e652073746f72616765207265616420616e6420777269746520746f20726574726965766520616e64207570646174652074686520626964732e204f2842294501202d20456974686572206f6e6520756e726573657276652062616c616e636520616374696f6e204f285829206f72206f6e6520766f756368696e672073746f726167652072656d6f76616c2e204f28312934202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2842202b205829302023203c2f7765696768743e14766f7563680c0c77686f30543a3a4163636f756e7449641476616c75653c42616c616e63654f663c542c20493e0c7469703c42616c616e63654f663c542c20493eb045012041732061206d656d6265722c20766f75636820666f7220736f6d656f6e6520746f206a6f696e20736f636965747920627920706c6163696e67206120626964206f6e20746865697220626568616c662e005501205468657265206973206e6f206465706f73697420726571756972656420746f20766f75636820666f722061206e6577206269642c206275742061206d656d6265722063616e206f6e6c7920766f75636820666f725d01206f6e652062696420617420612074696d652e2049662074686520626964206265636f6d657320612073757370656e6465642063616e64696461746520616e6420756c74696d6174656c792072656a65637465642062794101207468652073757370656e73696f6e206a756467656d656e74206f726967696e2c20746865206d656d6265722077696c6c2062652062616e6e65642066726f6d20766f756368696e6720616761696e2e005901204173206120766f756368696e67206d656d6265722c20796f752063616e20636c61696d206120746970206966207468652063616e6469646174652069732061636365707465642e2054686973207469702077696c6c51012062652070616964206173206120706f7274696f6e206f66207468652072657761726420746865206d656d6265722077696c6c207265636569766520666f72206a6f696e696e672074686520736f63696574792e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d6265722e003020506172616d65746572733acc202d206077686f603a2054686520757365722077686f20796f7520776f756c64206c696b6520746f20766f75636820666f722e5101202d206076616c7565603a2054686520746f74616c2072657761726420746f2062652070616964206265747765656e20796f7520616e64207468652063616e6469646174652069662074686579206265636f6d65642061206d656d62657220696e2074686520736f63696574792e4901202d2060746970603a20596f757220637574206f662074686520746f74616c206076616c756560207061796f7574207768656e207468652063616e64696461746520697320696e64756374656420696e746f15012074686520736f63696574792e2054697073206c6172676572207468616e206076616c7565602077696c6c206265207361747572617465642075706f6e207061796f75742e002c2023203c7765696768743e0101204b65793a204220286c656e206f662062696473292c204320286c656e206f662063616e64696461746573292c204d20286c656e206f66206d656d626572732944202d2053746f726167652052656164733ac820092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c206d656d626572732e204f284d29090120092d204f6e652073746f72616765207265616420746f20636865636b206d656d626572206973206e6f7420616c726561647920766f756368696e672e204f283129ec20092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e6465642063616e6469646174652e204f283129e020092d204f6e652073746f72616765207265616420746f20636865636b20666f722073757370656e646564206d656d6265722e204f283129dc20092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e7420626964732e204f284229f420092d204f6e652073746f72616765207265616420746f20726574726965766520616c6c2063757272656e742063616e646964617465732e204f28432948202d2053746f72616765205772697465733a0d0120092d204f6e652073746f7261676520777269746520746f20696e7365727420766f756368696e672073746174757320746f20746865206d656d6265722e204f283129810120092d204f6e652073746f72616765206d757461746520746f206164642061206e65772062696420746f2074686520766563746f72204f2842292028544f444f3a20706f737369626c65206f7074696d697a6174696f6e20772f207265616429010120092d20557020746f206f6e652073746f726167652072656d6f76616c206966206269642e6c656e2829203e204d41585f4249445f434f554e542e204f2831295c202d204e6f7461626c6520436f6d7075746174696f6e3ac020092d204f286c6f67204d292073656172636820746f20636865636b2073656e6465722069732061206d656d6265722e2d0120092d204f2842202b2043202b206c6f67204d292073656172636820746f20636865636b2075736572206973206e6f7420616c726561647920612070617274206f6620736f63696574792ec420092d204f286c6f672042292073656172636820746f20696e7365727420746865206e65772062696420736f727465642e78202d2045787465726e616c204d6f64756c65204f7065726174696f6e733a9c20092d204f6e652062616c616e63652072657365727665206f7065726174696f6e2e204f285829210120092d20557020746f206f6e652062616c616e636520756e72657365727665206f7065726174696f6e20696620626964732e6c656e2829203e204d41585f4249445f434f554e542e28202d204576656e74733a6020092d204f6e65206576656e7420666f7220766f7563682efc20092d20557020746f206f6e65206576656e7420666f72204175746f556e626964206966206269642e6c656e2829203e204d41585f4249445f434f554e542e00c420546f74616c20436f6d706c65786974793a204f284d202b2042202b2043202b206c6f674d202b206c6f6742202b205829302023203c2f7765696768743e1c756e766f756368040c706f730c753332442d01204173206120766f756368696e67206d656d6265722c20756e766f7563682061206269642e2054686973206f6e6c7920776f726b73207768696c6520766f7563686564207573657220697394206f6e6c792061206269646465722028616e64206e6f7420612063616e646964617465292e00290120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206120766f756368696e67206d656d6265722e003020506172616d65746572733a2d01202d2060706f73603a20506f736974696f6e20696e207468652060426964736020766563746f72206f6620746865206269642077686f2073686f756c6420626520756e766f75636865642e002c2023203c7765696768743e54204b65793a204220286c656e206f662062696473290901202d204f6e652073746f726167652072656164204f28312920746f20636865636b20746865207369676e6572206973206120766f756368696e67206d656d6265722eec202d204f6e652073746f72616765206d757461746520746f20726574726965766520616e64207570646174652074686520626964732e204f28422994202d204f6e6520766f756368696e672073746f726167652072656d6f76616c2e204f28312934202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f284229302023203c2f7765696768743e10766f7465082463616e6469646174658c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263651c617070726f766510626f6f6c4c882041732061206d656d6265722c20766f7465206f6e20612063616e6469646174652e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d6265722e003020506172616d65746572733a0d01202d206063616e646964617465603a205468652063616e646964617465207468617420746865206d656d62657220776f756c64206c696b6520746f20626964206f6e2ef4202d2060617070726f7665603a204120626f6f6c65616e2077686963682073617973206966207468652063616e6469646174652073686f756c64206265d82020202020202020202020202020617070726f766564202860747275656029206f722072656a656374656420286066616c736560292e002c2023203c7765696768743ebc204b65793a204320286c656e206f662063616e64696461746573292c204d20286c656e206f66206d656d62657273291d01202d204f6e652073746f726167652072656164204f284d2920616e64204f286c6f67204d292073656172636820746f20636865636b20757365722069732061206d656d6265722e58202d204f6e65206163636f756e74206c6f6f6b75702e2d01202d204f6e652073746f726167652072656164204f28432920616e64204f2843292073656172636820746f20636865636b2074686174207573657220697320612063616e6469646174652ebc202d204f6e652073746f7261676520777269746520746f2061646420766f746520746f20766f7465732e204f28312934202d204f6e65206576656e742e008820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b204329302023203c2f7765696768743e34646566656e6465725f766f7465041c617070726f766510626f6f6c408c2041732061206d656d6265722c20766f7465206f6e2074686520646566656e6465722e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d6265722e003020506172616d65746572733af4202d2060617070726f7665603a204120626f6f6c65616e2077686963682073617973206966207468652063616e6469646174652073686f756c64206265a420617070726f766564202860747275656029206f722072656a656374656420286066616c736560292e002c2023203c7765696768743e68202d204b65793a204d20286c656e206f66206d656d62657273291d01202d204f6e652073746f726167652072656164204f284d2920616e64204f286c6f67204d292073656172636820746f20636865636b20757365722069732061206d656d6265722ebc202d204f6e652073746f7261676520777269746520746f2061646420766f746520746f20766f7465732e204f28312934202d204f6e65206576656e742e007820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d29302023203c2f7765696768743e187061796f757400504501205472616e7366657220746865206669727374206d617475726564207061796f757420666f72207468652073656e64657220616e642072656d6f76652069742066726f6d20746865207265636f7264732e006901204e4f54453a20546869732065787472696e736963206e6565647320746f2062652063616c6c6564206d756c7469706c652074696d657320746f20636c61696d206d756c7469706c65206d617475726564207061796f7574732e002101205061796d656e743a20546865206d656d6265722077696c6c20726563656976652061207061796d656e7420657175616c20746f207468656972206669727374206d61747572656478207061796f757420746f20746865697220667265652062616c616e63652e00150120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e642061206d656d62657220776974684c207061796f7574732072656d61696e696e672e002c2023203c7765696768743e1d01204b65793a204d20286c656e206f66206d656d62657273292c205020286e756d626572206f66207061796f75747320666f72206120706172746963756c6172206d656d626572292501202d204f6e652073746f726167652072656164204f284d2920616e64204f286c6f67204d292073656172636820746f20636865636b207369676e65722069732061206d656d6265722ee4202d204f6e652073746f726167652072656164204f28502920746f2067657420616c6c207061796f75747320666f722061206d656d6265722ee4202d204f6e652073746f726167652072656164204f28312920746f20676574207468652063757272656e7420626c6f636b206e756d6265722e8c202d204f6e652063757272656e6379207472616e736665722063616c6c2e204f2858291101202d204f6e652073746f72616765207772697465206f722072656d6f76616c20746f2075706461746520746865206d656d6265722773207061796f7574732e204f285029009820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b2050202b205829302023203c2f7765696768743e14666f756e640c1c666f756e64657230543a3a4163636f756e7449642c6d61785f6d656d626572730c7533321472756c65731c5665633c75383e4c4c20466f756e642074686520736f63696574792e00f0205468697320697320646f6e65206173206120646973637265746520616374696f6e20696e206f7264657220746f20616c6c6f7720666f72207468651901206d6f64756c6520746f20626520696e636c7564656420696e746f20612072756e6e696e6720636861696e20616e642063616e206f6e6c7920626520646f6e65206f6e63652e001d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d20746865205f466f756e6465725365744f726967696e5f2e003020506172616d65746572733a1901202d2060666f756e64657260202d20546865206669727374206d656d62657220616e642068656164206f6620746865206e65776c7920666f756e64656420736f63696574792e1501202d20606d61785f6d656d6265727360202d2054686520696e697469616c206d6178206e756d626572206f66206d656d6265727320666f722074686520736f63696574792ef4202d206072756c657360202d205468652072756c6573206f66207468697320736f636965747920636f6e6365726e696e67206d656d626572736869702e002c2023203c7765696768743ee0202d2054776f2073746f72616765206d75746174657320746f207365742060486561646020616e642060466f756e646572602e204f283129f4202d204f6e652073746f7261676520777269746520746f2061646420746865206669727374206d656d62657220746f20736f63696574792e204f28312934202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f283129302023203c2f7765696768743e1c756e666f756e6400348c20416e6e756c2074686520666f756e64696e67206f662074686520736f63696574792e005d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205369676e65642c20616e6420746865207369676e696e67206163636f756e74206d75737420626520626f74685901207468652060466f756e6465726020616e6420746865206048656164602e205468697320696d706c6965732074686174206974206d6179206f6e6c7920626520646f6e65207768656e207468657265206973206f6e6520206d656d6265722e002c2023203c7765696768743e68202d2054776f2073746f72616765207265616473204f2831292e78202d20466f75722073746f726167652072656d6f76616c73204f2831292e34202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f283129302023203c2f7765696768743e586a756467655f73757370656e6465645f6d656d626572080c77686f30543a3a4163636f756e7449641c666f726769766510626f6f6c6c2d0120416c6c6f772073757370656e73696f6e206a756467656d656e74206f726967696e20746f206d616b65206a756467656d656e74206f6e20612073757370656e646564206d656d6265722e00590120496620612073757370656e646564206d656d62657220697320666f72676976656e2c2077652073696d706c7920616464207468656d206261636b2061732061206d656d6265722c206e6f7420616666656374696e67cc20616e79206f6620746865206578697374696e672073746f72616765206974656d7320666f722074686174206d656d6265722e00490120496620612073757370656e646564206d656d6265722069732072656a65637465642c2072656d6f766520616c6c206173736f6369617465642073746f72616765206974656d732c20696e636c7564696e670101207468656972207061796f7574732c20616e642072656d6f766520616e7920766f7563686564206269647320746865792063757272656e746c7920686176652e00410120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d20746865205f53757370656e73696f6e4a756467656d656e744f726967696e5f2e003020506172616d65746572733ab4202d206077686f60202d205468652073757370656e646564206d656d62657220746f206265206a75646765642e3501202d2060666f726769766560202d204120626f6f6c65616e20726570726573656e74696e672077686574686572207468652073757370656e73696f6e206a756467656d656e74206f726967696e2501202020202020202020202020202020666f726769766573202860747275656029206f722072656a6563747320286066616c7365602920612073757370656e646564206d656d6265722e002c2023203c7765696768743ea4204b65793a204220286c656e206f662062696473292c204d20286c656e206f66206d656d6265727329f8202d204f6e652073746f72616765207265616420746f20636865636b206077686f6020697320612073757370656e646564206d656d6265722e204f2831297101202d20557020746f206f6e652073746f72616765207772697465204f284d292077697468204f286c6f67204d292062696e6172792073656172636820746f206164642061206d656d626572206261636b20746f20736f63696574792ef8202d20557020746f20332073746f726167652072656d6f76616c73204f28312920746f20636c65616e20757020612072656d6f766564206d656d6265722e4501202d20557020746f206f6e652073746f72616765207772697465204f2842292077697468204f2842292073656172636820746f2072656d6f766520766f7563686564206269642066726f6d20626964732ed4202d20557020746f206f6e65206164646974696f6e616c206576656e7420696620756e766f7563682074616b657320706c6163652e70202d204f6e652073746f726167652072656d6f76616c2e204f2831297c202d204f6e65206576656e7420666f7220746865206a756467656d656e742e008820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b204229302023203c2f7765696768743e646a756467655f73757370656e6465645f63616e646964617465080c77686f30543a3a4163636f756e744964246a756467656d656e74244a756467656d656e74a0350120416c6c6f772073757370656e646564206a756467656d656e74206f726967696e20746f206d616b65206a756467656d656e74206f6e20612073757370656e6465642063616e6469646174652e005d0120496620746865206a756467656d656e742069732060417070726f7665602c20776520616464207468656d20746f20736f63696574792061732061206d656d62657220776974682074686520617070726f70726961746574207061796d656e7420666f72206a6f696e696e6720736f63696574792e00550120496620746865206a756467656d656e74206973206052656a656374602c2077652065697468657220736c61736820746865206465706f736974206f6620746865206269642c20676976696e67206974206261636b110120746f2074686520736f63696574792074726561737572792c206f722077652062616e2074686520766f75636865722066726f6d20766f756368696e6720616761696e2e005d0120496620746865206a756467656d656e7420697320605265626964602c20776520707574207468652063616e646964617465206261636b20696e207468652062696420706f6f6c20616e64206c6574207468656d20676f94207468726f7567682074686520696e64756374696f6e2070726f6365737320616761696e2e00410120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d20746865205f53757370656e73696f6e4a756467656d656e744f726967696e5f2e003020506172616d65746572733ac0202d206077686f60202d205468652073757370656e6465642063616e64696461746520746f206265206a75646765642ec4202d20606a756467656d656e7460202d2060417070726f7665602c206052656a656374602c206f7220605265626964602e002c2023203c7765696768743ef4204b65793a204220286c656e206f662062696473292c204d20286c656e206f66206d656d62657273292c2058202862616c616e636520616374696f6e29f0202d204f6e652073746f72616765207265616420746f20636865636b206077686f6020697320612073757370656e6465642063616e6469646174652ec8202d204f6e652073746f726167652072656d6f76616c206f66207468652073757370656e6465642063616e6469646174652e40202d20417070726f7665204c6f676963150120092d204f6e652073746f72616765207265616420746f206765742074686520617661696c61626c6520706f7420746f2070617920757365727320776974682e204f283129dc20092d204f6e652073746f7261676520777269746520746f207570646174652074686520617661696c61626c6520706f742e204f283129e820092d204f6e652073746f72616765207265616420746f20676574207468652063757272656e7420626c6f636b206e756d6265722e204f283129b420092d204f6e652073746f72616765207265616420746f2067657420616c6c206d656d626572732e204f284d29a020092d20557020746f206f6e6520756e726573657276652063757272656e637920616374696f6e2eb020092d20557020746f2074776f206e65772073746f726167652077726974657320746f207061796f7574732e4d0120092d20557020746f206f6e652073746f726167652077726974652077697468204f286c6f67204d292062696e6172792073656172636820746f206164642061206d656d62657220746f20736f63696574792e3c202d2052656a656374204c6f676963dc20092d20557020746f206f6e6520726570617472696174652072657365727665642063757272656e637920616374696f6e2e204f2858292d0120092d20557020746f206f6e652073746f7261676520777269746520746f2062616e2074686520766f756368696e67206d656d6265722066726f6d20766f756368696e6720616761696e2e38202d205265626964204c6f676963410120092d2053746f72616765206d75746174652077697468204f286c6f672042292062696e6172792073656172636820746f20706c616365207468652075736572206261636b20696e746f20626964732ed4202d20557020746f206f6e65206164646974696f6e616c206576656e7420696620756e766f7563682074616b657320706c6163652e5c202d204f6e652073746f726167652072656d6f76616c2e7c202d204f6e65206576656e7420666f7220746865206a756467656d656e742e009820546f74616c20436f6d706c65786974793a204f284d202b206c6f674d202b2042202b205829302023203c2f7765696768743e3c7365745f6d61785f6d656d62657273040c6d61780c753332381d0120416c6c6f777320726f6f74206f726967696e20746f206368616e676520746865206d6178696d756d206e756d626572206f66206d656d6265727320696e20736f63696574792eb4204d6178206d656d6265727368697020636f756e74206d7573742062652067726561746572207468616e20312e00dc20546865206469737061746368206f726967696e20666f7220746869732063616c6c206d7573742062652066726f6d205f524f4f545f2e003020506172616d65746572733ae4202d20606d617860202d20546865206d6178696d756d206e756d626572206f66206d656d6265727320666f722074686520736f63696574792e002c2023203c7765696768743eb0202d204f6e652073746f7261676520777269746520746f2075706461746520746865206d61782e204f28312934202d204f6e65206576656e742e005c20546f74616c20436f6d706c65786974793a204f283129302023203c2f7765696768743e01401c466f756e64656404244163636f756e74496404e02054686520736f636965747920697320666f756e6465642062792074686520676976656e206964656e746974792e205b666f756e6465725d0c42696408244163636f756e7449641c42616c616e63650861012041206d656d6265727368697020626964206a7573742068617070656e65642e2054686520676976656e206163636f756e74206973207468652063616e646964617465277320494420616e64207468656972206f666665729420697320746865207365636f6e642e205b63616e6469646174655f69642c206f666665725d14566f7563680c244163636f756e7449641c42616c616e6365244163636f756e7449640861012041206d656d6265727368697020626964206a7573742068617070656e656420627920766f756368696e672e2054686520676976656e206163636f756e74206973207468652063616e646964617465277320494420616e647101207468656972206f6666657220697320746865207365636f6e642e2054686520766f756368696e67207061727479206973207468652074686972642e205b63616e6469646174655f69642c206f666665722c20766f756368696e675d244175746f556e62696404244163636f756e7449640411012041205b63616e6469646174655d207761732064726f70706564202864756520746f20616e20657863657373206f66206269647320696e207468652073797374656d292e14556e62696404244163636f756e74496404b82041205b63616e6469646174655d207761732064726f70706564202862792074686569722072657175657374292e1c556e766f75636804244163636f756e7449640401012041205b63616e6469646174655d207761732064726f70706564202862792072657175657374206f662077686f20766f756368656420666f72207468656d292e20496e64756374656408244163636f756e744964385665633c4163636f756e7449643e08590120412067726f7570206f662063616e646964617465732068617665206265656e20696e6475637465642e205468652062617463682773207072696d617279206973207468652066697273742076616c75652c20746865cc20626174636820696e2066756c6c20697320746865207365636f6e642e205b7072696d6172792c2063616e646964617465735d6053757370656e6465644d656d6265724a756467656d656e7408244163636f756e74496410626f6f6c04c820412073757370656e646564206d656d62657220686173206265656e206a75646765642e205b77686f2c206a75646765645d4843616e64696461746553757370656e64656404244163636f756e74496404842041205b63616e6469646174655d20686173206265656e2073757370656e6465643c4d656d62657253757370656e64656404244163636f756e74496404782041205b6d656d6265725d20686173206265656e2073757370656e646564284368616c6c656e67656404244163636f756e744964047c2041205b6d656d6265725d20686173206265656e206368616c6c656e67656410566f74650c244163636f756e744964244163636f756e74496410626f6f6c04c0204120766f746520686173206265656e20706c61636564205b63616e6469646174652c20766f7465722c20766f74655d30446566656e646572566f746508244163636f756e74496410626f6f6c04f0204120766f746520686173206265656e20706c6163656420666f72206120646566656e64696e67206d656d626572205b766f7465722c20766f74655d344e65774d61784d656d62657273040c75333204982041206e6577205b6d61785d206d656d62657220636f756e7420686173206265656e2073657424556e666f756e64656404244163636f756e744964048020536f636965747920697320756e666f756e6465642e205b666f756e6465725d1c4465706f736974041c42616c616e636504f020536f6d652066756e64732077657265206465706f736974656420696e746f2074686520736f6369657479206163636f756e742e205b76616c75655d1c4043616e6469646174654465706f7369743c42616c616e63654f663c542c20493e400080c6a47e8d0300000000000000000004fc20546865206d696e696d756d20616d6f756e74206f662061206465706f73697420726571756972656420666f7220612062696420746f206265206d6164652e4857726f6e6753696465446564756374696f6e3c42616c616e63654f663c542c20493e400080f420e6b5000000000000000000000855012054686520616d6f756e74206f662074686520756e70616964207265776172642074686174206765747320646564756374656420696e207468652063617365207468617420656974686572206120736b6570746963c020646f65736e277420766f7465206f7220736f6d656f6e6520766f74657320696e207468652077726f6e67207761792e284d6178537472696b65730c753332100a00000008750120546865206e756d626572206f662074696d65732061206d656d626572206d617920766f7465207468652077726f6e672077617920286f72206e6f7420617420616c6c2c207768656e207468657920617265206120736b65707469632978206265666f72652074686579206265636f6d652073757370656e6465642e2c506572696f645370656e643c42616c616e63654f663c542c20493e400000c52ebca2b1000000000000000000042d012054686520616d6f756e74206f6620696e63656e7469766520706169642077697468696e206561636820706572696f642e20446f65736e277420696e636c75646520566f7465725469702e38526f746174696f6e506572696f6438543a3a426c6f636b4e756d626572100077010004110120546865206e756d626572206f6620626c6f636b73206265747765656e2063616e6469646174652f6d656d6265727368697020726f746174696f6e20706572696f64732e3c4368616c6c656e6765506572696f6438543a3a426c6f636b4e756d626572108013030004d020546865206e756d626572206f6620626c6f636b73206265747765656e206d656d62657273686970206368616c6c656e6765732e204d6f64756c654964204d6f64756c6549642070792f736f63696504682054686520736f636965746965732773206d6f64756c65206964482c426164506f736974696f6e049020416e20696e636f727265637420706f736974696f6e207761732070726f76696465642e244e6f744d656d62657204582055736572206973206e6f742061206d656d6265722e34416c72656164794d656d6265720468205573657220697320616c72656164792061206d656d6265722e2453757370656e646564044c20557365722069732073757370656e6465642e304e6f7453757370656e646564045c2055736572206973206e6f742073757370656e6465642e204e6f5061796f7574044c204e6f7468696e6720746f207061796f75742e38416c7265616479466f756e646564046420536f636965747920616c726561647920666f756e6465642e3c496e73756666696369656e74506f74049c204e6f7420656e6f75676820696e20706f7420746f206163636570742063616e6469646174652e3c416c7265616479566f756368696e6704e8204d656d62657220697320616c726561647920766f756368696e67206f722062616e6e65642066726f6d20766f756368696e6720616761696e2e2c4e6f74566f756368696e670460204d656d626572206973206e6f7420766f756368696e672e104865616404942043616e6e6f742072656d6f7665207468652068656164206f662074686520636861696e2e1c466f756e646572046c2043616e6e6f742072656d6f76652074686520666f756e6465722e28416c7265616479426964047420557365722068617320616c7265616479206d6164652061206269642e40416c726561647943616e6469646174650474205573657220697320616c726561647920612063616e6469646174652e304e6f7443616e64696461746504642055736572206973206e6f7420612063616e6469646174652e284d61784d656d62657273048420546f6f206d616e79206d656d6265727320696e2074686520736f63696574792e284e6f74466f756e646572047c205468652063616c6c6572206973206e6f742074686520666f756e6465722e1c4e6f74486561640470205468652063616c6c6572206973206e6f742074686520686561642e205265636f7665727901205265636f766572790c2c5265636f76657261626c6500010530543a3a4163636f756e744964e85265636f76657279436f6e6669673c543a3a426c6f636b4e756d6265722c2042616c616e63654f663c543e2c20543a3a4163636f756e7449643e0004000409012054686520736574206f66207265636f76657261626c65206163636f756e747320616e64207468656972207265636f7665727920636f6e66696775726174696f6e2e404163746976655265636f76657269657300020530543a3a4163636f756e74496430543a3a4163636f756e744964e84163746976655265636f766572793c543a3a426c6f636b4e756d6265722c2042616c616e63654f663c543e2c20543a3a4163636f756e7449643e050400106820416374697665207265636f7665727920617474656d7074732e001501204669727374206163636f756e7420697320746865206163636f756e7420746f206265207265636f76657265642c20616e6420746865207365636f6e64206163636f756e74ac20697320746865207573657220747279696e6720746f207265636f76657220746865206163636f756e742e1450726f787900010230543a3a4163636f756e74496430543a3a4163636f756e7449640004000c9020546865206c697374206f6620616c6c6f7765642070726f7879206163636f756e74732e00f8204d61702066726f6d2074686520757365722077686f2063616e2061636365737320697420746f20746865207265636f7665726564206163636f756e742e01243061735f7265636f7665726564081c6163636f756e7430543a3a4163636f756e7449641063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e34a42053656e6420612063616c6c207468726f7567682061207265636f7665726564206163636f756e742e00150120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207265676973746572656420746fe82062652061626c6520746f206d616b652063616c6c73206f6e20626568616c66206f6620746865207265636f7665726564206163636f756e742e003020506172616d65746572733a2501202d20606163636f756e74603a20546865207265636f7665726564206163636f756e7420796f752077616e7420746f206d616b6520612063616c6c206f6e2d626568616c662d6f662e0101202d206063616c6c603a205468652063616c6c20796f752077616e7420746f206d616b65207769746820746865207265636f7665726564206163636f756e742e002c2023203c7765696768743e94202d2054686520776569676874206f6620746865206063616c6c60202b2031302c3030302e0901202d204f6e652073746f72616765206c6f6f6b757020746f20636865636b206163636f756e74206973207265636f7665726564206279206077686f602e204f283129302023203c2f7765696768743e347365745f7265636f766572656408106c6f737430543a3a4163636f756e7449641c7265736375657230543a3a4163636f756e744964341d0120416c6c6f7720524f4f5420746f2062797061737320746865207265636f766572792070726f6365737320616e642073657420616e20612072657363756572206163636f756e747420666f722061206c6f7374206163636f756e74206469726563746c792e00c820546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f524f4f545f2e003020506172616d65746572733ab8202d20606c6f7374603a2054686520226c6f7374206163636f756e742220746f206265207265636f76657265642e1d01202d206072657363756572603a20546865202272657363756572206163636f756e74222077686963682063616e2063616c6c20617320746865206c6f7374206163636f756e742e002c2023203c7765696768743e64202d204f6e652073746f72616765207772697465204f28312930202d204f6e65206576656e74302023203c2f7765696768743e3c6372656174655f7265636f766572790c1c667269656e6473445665633c543a3a4163636f756e7449643e247468726573686f6c640c7531363064656c61795f706572696f6438543a3a426c6f636b4e756d6265726c5d01204372656174652061207265636f7665727920636f6e66696775726174696f6e20666f7220796f7572206163636f756e742e2054686973206d616b657320796f7572206163636f756e74207265636f76657261626c652e003101205061796d656e743a2060436f6e6669674465706f7369744261736560202b2060467269656e644465706f736974466163746f7260202a20235f6f665f667269656e64732062616c616e636549012077696c6c20626520726573657276656420666f722073746f72696e6720746865207265636f7665727920636f6e66696775726174696f6e2e2054686973206465706f7369742069732072657475726e6564bc20696e2066756c6c207768656e2074686520757365722063616c6c73206072656d6f76655f7265636f76657279602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a2501202d2060667269656e6473603a2041206c697374206f6620667269656e647320796f7520747275737420746f20766f75636820666f72207265636f7665727920617474656d7074732ed420202053686f756c64206265206f72646572656420616e6420636f6e7461696e206e6f206475706c69636174652076616c7565732e3101202d20607468726573686f6c64603a20546865206e756d626572206f6620667269656e64732074686174206d75737420766f75636820666f722061207265636f7665727920617474656d70741d012020206265666f726520746865206163636f756e742063616e206265207265636f76657265642e2053686f756c64206265206c657373207468616e206f7220657175616c20746f94202020746865206c656e677468206f6620746865206c697374206f6620667269656e64732e3d01202d206064656c61795f706572696f64603a20546865206e756d626572206f6620626c6f636b732061667465722061207265636f7665727920617474656d707420697320696e697469616c697a6564e820202074686174206e6565647320746f2070617373206265666f726520746865206163636f756e742063616e206265207265636f76657265642e002c2023203c7765696768743e68202d204b65793a204620286c656e206f6620667269656e6473292d01202d204f6e652073746f72616765207265616420746f20636865636b2074686174206163636f756e74206973206e6f7420616c7265616479207265636f76657261626c652e204f2831292eec202d204120636865636b20746861742074686520667269656e6473206c69737420697320736f7274656420616e6420756e697175652e204f2846299c202d204f6e652063757272656e63792072657365727665206f7065726174696f6e2e204f2858299c202d204f6e652073746f726167652077726974652e204f2831292e20436f646563204f2846292e34202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205829302023203c2f7765696768743e44696e6974696174655f7265636f76657279041c6163636f756e7430543a3a4163636f756e74496458ec20496e697469617465207468652070726f6365737320666f72207265636f766572696e672061207265636f76657261626c65206163636f756e742e001d01205061796d656e743a20605265636f766572794465706f736974602062616c616e63652077696c6c20626520726573657276656420666f7220696e6974696174696e67207468652501207265636f766572792070726f636573732e2054686973206465706f7369742077696c6c20616c7761797320626520726570617472696174656420746f20746865206163636f756e74b820747279696e6720746f206265207265636f76657265642e205365652060636c6f73655f7265636f76657279602e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a1501202d20606163636f756e74603a20546865206c6f7374206163636f756e74207468617420796f752077616e7420746f207265636f7665722e2054686973206163636f756e7401012020206e6565647320746f206265207265636f76657261626c652028692e652e20686176652061207265636f7665727920636f6e66696775726174696f6e292e002c2023203c7765696768743ef8202d204f6e652073746f72616765207265616420746f20636865636b2074686174206163636f756e74206973207265636f76657261626c652e204f2846295101202d204f6e652073746f72616765207265616420746f20636865636b20746861742074686973207265636f766572792070726f63657373206861736e277420616c726561647920737461727465642e204f2831299c202d204f6e652063757272656e63792072657365727665206f7065726174696f6e2e204f285829e4202d204f6e652073746f72616765207265616420746f20676574207468652063757272656e7420626c6f636b206e756d6265722e204f2831296c202d204f6e652073746f726167652077726974652e204f2831292e34202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205829302023203c2f7765696768743e38766f7563685f7265636f7665727908106c6f737430543a3a4163636f756e7449641c7265736375657230543a3a4163636f756e74496464290120416c6c6f7720612022667269656e6422206f662061207265636f76657261626c65206163636f756e7420746f20766f75636820666f7220616e20616374697665207265636f76657279682070726f6365737320666f722074686174206163636f756e742e00290120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d75737420626520612022667269656e64227420666f7220746865207265636f76657261626c65206163636f756e742e003020506172616d65746572733ad4202d20606c6f7374603a20546865206c6f7374206163636f756e74207468617420796f752077616e7420746f207265636f7665722e1101202d206072657363756572603a20546865206163636f756e7420747279696e6720746f2072657363756520746865206c6f7374206163636f756e74207468617420796f755420202077616e7420746f20766f75636820666f722e0025012054686520636f6d62696e6174696f6e206f662074686573652074776f20706172616d6574657273206d75737420706f696e7420746f20616e20616374697665207265636f76657279242070726f636573732e002c2023203c7765696768743efc204b65793a204620286c656e206f6620667269656e647320696e20636f6e666967292c205620286c656e206f6620766f756368696e6720667269656e6473291d01202d204f6e652073746f72616765207265616420746f2067657420746865207265636f7665727920636f6e66696775726174696f6e2e204f2831292c20436f646563204f2846292101202d204f6e652073746f72616765207265616420746f206765742074686520616374697665207265636f766572792070726f636573732e204f2831292c20436f646563204f285629ec202d204f6e652062696e6172792073656172636820746f20636f6e6669726d2063616c6c6572206973206120667269656e642e204f286c6f6746291d01202d204f6e652062696e6172792073656172636820746f20636f6e6669726d2063616c6c657220686173206e6f7420616c726561647920766f75636865642e204f286c6f6756299c202d204f6e652073746f726167652077726974652e204f2831292c20436f646563204f2856292e34202d204f6e65206576656e742e00a420546f74616c20436f6d706c65786974793a204f2846202b206c6f6746202b2056202b206c6f675629302023203c2f7765696768743e38636c61696d5f7265636f76657279041c6163636f756e7430543a3a4163636f756e74496450f420416c6c6f772061207375636365737366756c207265736375657220746f20636c61696d207468656972207265636f7665726564206163636f756e742e002d0120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d7573742062652061202272657363756572221d012077686f20686173207375636365737366756c6c7920636f6d706c6574656420746865206163636f756e74207265636f766572792070726f636573733a20636f6c6c6563746564310120607468726573686f6c6460206f72206d6f726520766f75636865732c20776169746564206064656c61795f706572696f646020626c6f636b732073696e636520696e6974696174696f6e2e003020506172616d65746572733a2d01202d20606163636f756e74603a20546865206c6f7374206163636f756e74207468617420796f752077616e7420746f20636c61696d20686173206265656e207375636365737366756c6c79502020207265636f766572656420627920796f752e002c2023203c7765696768743efc204b65793a204620286c656e206f6620667269656e647320696e20636f6e666967292c205620286c656e206f6620766f756368696e6720667269656e6473291d01202d204f6e652073746f72616765207265616420746f2067657420746865207265636f7665727920636f6e66696775726174696f6e2e204f2831292c20436f646563204f2846292101202d204f6e652073746f72616765207265616420746f206765742074686520616374697665207265636f766572792070726f636573732e204f2831292c20436f646563204f285629e4202d204f6e652073746f72616765207265616420746f20676574207468652063757272656e7420626c6f636b206e756d6265722e204f2831299c202d204f6e652073746f726167652077726974652e204f2831292c20436f646563204f2856292e34202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205629302023203c2f7765696768743e38636c6f73655f7265636f76657279041c7265736375657230543a3a4163636f756e7449645015012041732074686520636f6e74726f6c6c6572206f662061207265636f76657261626c65206163636f756e742c20636c6f736520616e20616374697665207265636f76657279682070726f6365737320666f7220796f7572206163636f756e742e002101205061796d656e743a2042792063616c6c696e6720746869732066756e6374696f6e2c20746865207265636f76657261626c65206163636f756e742077696c6c2072656365697665f820746865207265636f76657279206465706f73697420605265636f766572794465706f7369746020706c616365642062792074686520726573637565722e00050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d7573742062652061f0207265636f76657261626c65206163636f756e74207769746820616e20616374697665207265636f766572792070726f6365737320666f722069742e003020506172616d65746572733a1101202d206072657363756572603a20546865206163636f756e7420747279696e6720746f207265736375652074686973207265636f76657261626c65206163636f756e742e002c2023203c7765696768743e84204b65793a205620286c656e206f6620766f756368696e6720667269656e6473293d01202d204f6e652073746f7261676520726561642f72656d6f766520746f206765742074686520616374697665207265636f766572792070726f636573732e204f2831292c20436f646563204f285629c0202d204f6e652062616c616e63652063616c6c20746f20726570617472696174652072657365727665642e204f28582934202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2856202b205829302023203c2f7765696768743e3c72656d6f76655f7265636f7665727900545d012052656d6f766520746865207265636f766572792070726f6365737320666f7220796f7572206163636f756e742e205265636f7665726564206163636f756e747320617265207374696c6c2061636365737369626c652e001501204e4f54453a205468652075736572206d757374206d616b65207375726520746f2063616c6c2060636c6f73655f7265636f7665727960206f6e20616c6c206163746976650901207265636f7665727920617474656d707473206265666f72652063616c6c696e6720746869732066756e6374696f6e20656c73652069742077696c6c206661696c2e002501205061796d656e743a2042792063616c6c696e6720746869732066756e6374696f6e20746865207265636f76657261626c65206163636f756e742077696c6c20756e7265736572766598207468656972207265636f7665727920636f6e66696775726174696f6e206465706f7369742ef4202860436f6e6669674465706f7369744261736560202b2060467269656e644465706f736974466163746f7260202a20235f6f665f667269656e64732900050120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64206d7573742062652061e4207265636f76657261626c65206163636f756e742028692e652e206861732061207265636f7665727920636f6e66696775726174696f6e292e002c2023203c7765696768743e60204b65793a204620286c656e206f6620667269656e6473292901202d204f6e652073746f72616765207265616420746f206765742074686520707265666978206974657261746f7220666f7220616374697665207265636f7665726965732e204f2831293901202d204f6e652073746f7261676520726561642f72656d6f766520746f2067657420746865207265636f7665727920636f6e66696775726174696f6e2e204f2831292c20436f646563204f2846299c202d204f6e652062616c616e63652063616c6c20746f20756e72657365727665642e204f28582934202d204f6e65206576656e742e006c20546f74616c20436f6d706c65786974793a204f2846202b205829302023203c2f7765696768743e4063616e63656c5f7265636f7665726564041c6163636f756e7430543a3a4163636f756e7449642ce02043616e63656c20746865206162696c69747920746f20757365206061735f7265636f76657265646020666f7220606163636f756e74602e00150120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207265676973746572656420746fe82062652061626c6520746f206d616b652063616c6c73206f6e20626568616c66206f6620746865207265636f7665726564206163636f756e742e003020506172616d65746572733a1901202d20606163636f756e74603a20546865207265636f7665726564206163636f756e7420796f75206172652061626c6520746f2063616c6c206f6e2d626568616c662d6f662e002c2023203c7765696768743e1101202d204f6e652073746f72616765206d75746174696f6e20746f20636865636b206163636f756e74206973207265636f7665726564206279206077686f602e204f283129302023203c2f7765696768743e01183c5265636f766572794372656174656404244163636f756e74496404d42041207265636f766572792070726f6365737320686173206265656e2073657420757020666f7220616e205b6163636f756e745d2e445265636f76657279496e6974696174656408244163636f756e744964244163636f756e744964082d012041207265636f766572792070726f6365737320686173206265656e20696e6974696174656420666f72206c6f7374206163636f756e742062792072657363756572206163636f756e742e40205b6c6f73742c20726573637565725d3c5265636f76657279566f75636865640c244163636f756e744964244163636f756e744964244163636f756e744964085d012041207265636f766572792070726f6365737320666f72206c6f7374206163636f756e742062792072657363756572206163636f756e7420686173206265656e20766f756368656420666f722062792073656e6465722e60205b6c6f73742c20726573637565722c2073656e6465725d385265636f76657279436c6f73656408244163636f756e744964244163636f756e7449640821012041207265636f766572792070726f6365737320666f72206c6f7374206163636f756e742062792072657363756572206163636f756e7420686173206265656e20636c6f7365642e40205b6c6f73742c20726573637565725d404163636f756e745265636f766572656408244163636f756e744964244163636f756e744964080501204c6f7374206163636f756e7420686173206265656e207375636365737366756c6c79207265636f76657265642062792072657363756572206163636f756e742e40205b6c6f73742c20726573637565725d3c5265636f7665727952656d6f76656404244163636f756e74496404d82041207265636f766572792070726f6365737320686173206265656e2072656d6f76656420666f7220616e205b6163636f756e745d2e1044436f6e6669674465706f736974426173653042616c616e63654f663c543e4000406352bfc60100000000000000000004550120546865206261736520616d6f756e74206f662063757272656e6379206e656564656420746f207265736572766520666f72206372656174696e672061207265636f7665727920636f6e66696775726174696f6e2e4c467269656e644465706f736974466163746f723042616c616e63654f663c543e4000203d88792d000000000000000000000469012054686520616d6f756e74206f662063757272656e6379206e656564656420706572206164646974696f6e616c2075736572207768656e206372656174696e672061207265636f7665727920636f6e66696775726174696f6e2e284d6178467269656e64730c753136080900040d0120546865206d6178696d756d20616d6f756e74206f6620667269656e647320616c6c6f77656420696e2061207265636f7665727920636f6e66696775726174696f6e2e3c5265636f766572794465706f7369743042616c616e63654f663c543e4000406352bfc601000000000000000000041d0120546865206261736520616d6f756e74206f662063757272656e6379206e656564656420746f207265736572766520666f72207374617274696e672061207265636f766572792e40284e6f74416c6c6f77656404f42055736572206973206e6f7420616c6c6f77656420746f206d616b6520612063616c6c206f6e20626568616c66206f662074686973206163636f756e74345a65726f5468726573686f6c640490205468726573686f6c64206d7573742062652067726561746572207468616e207a65726f404e6f74456e6f756768467269656e647304d420467269656e6473206c697374206d7573742062652067726561746572207468616e207a65726f20616e64207468726573686f6c64284d6178467269656e647304ac20467269656e6473206c697374206d757374206265206c657373207468616e206d617820667269656e6473244e6f74536f7274656404cc20467269656e6473206c697374206d75737420626520736f7274656420616e642066726565206f66206475706c696361746573384e6f745265636f76657261626c6504a02054686973206163636f756e74206973206e6f742073657420757020666f72207265636f7665727948416c72656164795265636f76657261626c6504b02054686973206163636f756e7420697320616c72656164792073657420757020666f72207265636f7665727938416c72656164795374617274656404e02041207265636f766572792070726f636573732068617320616c7265616479207374617274656420666f722074686973206163636f756e74284e6f745374617274656404d02041207265636f766572792070726f6365737320686173206e6f74207374617274656420666f7220746869732072657363756572244e6f74467269656e6404ac2054686973206163636f756e74206973206e6f74206120667269656e642077686f2063616e20766f7563682c44656c6179506572696f64041d012054686520667269656e64206d757374207761697420756e74696c207468652064656c617920706572696f6420746f20766f75636820666f722074686973207265636f7665727938416c7265616479566f756368656404c0205468697320757365722068617320616c726561647920766f756368656420666f722074686973207265636f76657279245468726573686f6c6404ec20546865207468726573686f6c6420666f72207265636f766572696e672074686973206163636f756e7420686173206e6f74206265656e206d65742c5374696c6c41637469766504010120546865726520617265207374696c6c20616374697665207265636f7665727920617474656d7074732074686174206e65656420746f20626520636c6f736564204f766572666c6f77049c2054686572652077617320616e206f766572666c6f7720696e20612063616c63756c6174696f6e30416c726561647950726f787904b02054686973206163636f756e7420697320616c72656164792073657420757020666f72207265636f766572791c56657374696e67011c56657374696e67041c56657374696e6700010230543a3a4163636f756e744964a456657374696e67496e666f3c42616c616e63654f663c543e2c20543a3a426c6f636b4e756d6265723e00040004d820496e666f726d6174696f6e20726567617264696e67207468652076657374696e67206f66206120676976656e206163636f756e742e011010766573740044bc20556e6c6f636b20616e79207665737465642066756e6473206f66207468652073656e646572206163636f756e742e00610120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e64207468652073656e646572206d75737420686176652066756e6473207374696c6c68206c6f636b656420756e6465722074686973206d6f64756c652e00d420456d69747320656974686572206056657374696e67436f6d706c6574656460206f72206056657374696e6755706461746564602e002c2023203c7765696768743e28202d20604f283129602e78202d2044625765696768743a20322052656164732c203220577269746573fc20202020202d2052656164733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c205b53656e646572204163636f756e745d010120202020202d205772697465733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c205b53656e646572204163636f756e745d34202d2042656e63686d61726b3aec20202020202d20556e6c6f636b65643a2034382e3736202b202e303438202a206c20c2b57320286d696e2073717561726520616e616c7973697329e420202020202d204c6f636b65643a2034342e3433202b202e323834202a206c20c2b57320286d696e2073717561726520616e616c7973697329ad01202d205573696e6720353020c2b5732066697865642e20417373756d696e67206c657373207468616e203530206c6f636b73206f6e20616e7920757365722c20656c7365207765206d61792077616e7420666163746f7220696e206e756d626572206f66206c6f636b732e302023203c2f7765696768743e28766573745f6f7468657204187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f757263654cbc20556e6c6f636b20616e79207665737465642066756e6473206f662061206074617267657460206163636f756e742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005501202d2060746172676574603a20546865206163636f756e742077686f7365207665737465642066756e64732073686f756c6420626520756e6c6f636b65642e204d75737420686176652066756e6473207374696c6c68206c6f636b656420756e6465722074686973206d6f64756c652e00d420456d69747320656974686572206056657374696e67436f6d706c6574656460206f72206056657374696e6755706461746564602e002c2023203c7765696768743e28202d20604f283129602e78202d2044625765696768743a20332052656164732c203320577269746573f420202020202d2052656164733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c20546172676574204163636f756e74f820202020202d205772697465733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c20546172676574204163636f756e7434202d2042656e63686d61726b3ae820202020202d20556e6c6f636b65643a2034342e33202b202e323934202a206c20c2b57320286d696e2073717561726520616e616c7973697329e420202020202d204c6f636b65643a2034382e3136202b202e313033202a206c20c2b57320286d696e2073717561726520616e616c7973697329ad01202d205573696e6720353020c2b5732066697865642e20417373756d696e67206c657373207468616e203530206c6f636b73206f6e20616e7920757365722c20656c7365207765206d61792077616e7420666163746f7220696e206e756d626572206f66206c6f636b732e302023203c2f7765696768743e3c7665737465645f7472616e7366657208187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365207363686564756c65a456657374696e67496e666f3c42616c616e63654f663c543e2c20543a3a426c6f636b4e756d6265723e486820437265617465206120766573746564207472616e736665722e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e001501202d2060746172676574603a20546865206163636f756e7420746861742073686f756c64206265207472616e7366657272656420746865207665737465642066756e64732e0101202d2060616d6f756e74603a2054686520616d6f756e74206f662066756e647320746f207472616e7366657220616e642077696c6c206265207665737465642ef4202d20607363686564756c65603a205468652076657374696e67207363686564756c6520617474616368656420746f20746865207472616e736665722e006020456d697473206056657374696e6743726561746564602e002c2023203c7765696768743e28202d20604f283129602e78202d2044625765696768743a20332052656164732c2033205772697465733d0120202020202d2052656164733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c20546172676574204163636f756e742c205b53656e646572204163636f756e745d410120202020202d205772697465733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c20546172676574204163636f756e742c205b53656e646572204163636f756e745de0202d2042656e63686d61726b3a203130302e33202b202e333635202a206c20c2b57320286d696e2073717561726520616e616c7973697329b101202d205573696e672031303020c2b5732066697865642e20417373756d696e67206c657373207468616e203530206c6f636b73206f6e20616e7920757365722c20656c7365207765206d61792077616e7420666163746f7220696e206e756d626572206f66206c6f636b732e302023203c2f7765696768743e54666f7263655f7665737465645f7472616e736665720c18736f757263658c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365187461726765748c3c543a3a4c6f6f6b7570206173205374617469634c6f6f6b75703e3a3a536f75726365207363686564756c65a456657374696e67496e666f3c42616c616e63654f663c543e2c20543a3a426c6f636b4e756d6265723e4c6420466f726365206120766573746564207472616e736665722e00c820546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f526f6f745f2e00ec202d2060736f75726365603a20546865206163636f756e742077686f73652066756e64732073686f756c64206265207472616e736665727265642e1501202d2060746172676574603a20546865206163636f756e7420746861742073686f756c64206265207472616e7366657272656420746865207665737465642066756e64732e0101202d2060616d6f756e74603a2054686520616d6f756e74206f662066756e647320746f207472616e7366657220616e642077696c6c206265207665737465642ef4202d20607363686564756c65603a205468652076657374696e67207363686564756c6520617474616368656420746f20746865207472616e736665722e006020456d697473206056657374696e6743726561746564602e002c2023203c7765696768743e28202d20604f283129602e78202d2044625765696768743a20342052656164732c203420577269746573350120202020202d2052656164733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c20546172676574204163636f756e742c20536f75726365204163636f756e74390120202020202d205772697465733a2056657374696e672053746f726167652c2042616c616e636573204c6f636b732c20546172676574204163636f756e742c20536f75726365204163636f756e74e0202d2042656e63686d61726b3a203130302e33202b202e333635202a206c20c2b57320286d696e2073717561726520616e616c7973697329b101202d205573696e672031303020c2b5732066697865642e20417373756d696e67206c657373207468616e203530206c6f636b73206f6e20616e7920757365722c20656c7365207765206d61792077616e7420666163746f7220696e206e756d626572206f66206c6f636b732e302023203c2f7765696768743e01083856657374696e675570646174656408244163636f756e7449641c42616c616e63650c59012054686520616d6f756e742076657374656420686173206265656e20757064617465642e205468697320636f756c6420696e646963617465206d6f72652066756e64732061726520617661696c61626c652e205468651d012062616c616e636520676976656e2069732074686520616d6f756e74207768696368206973206c65667420756e7665737465642028616e642074687573206c6f636b6564292e2050205b6163636f756e742c20756e7665737465645d4056657374696e67436f6d706c6574656404244163636f756e74496404150120416e205b6163636f756e745d20686173206265636f6d652066756c6c79207665737465642e204e6f20667572746865722076657374696e672063616e2068617070656e2e04444d696e5665737465645472616e736665723042616c616e63654f663c543e400000c16ff28623000000000000000000041d0120546865206d696e696d756d20616d6f756e7420746f206265207472616e7366657272656420746f206372656174652061206e65772076657374696e67207363686564756c652e0c284e6f7456657374696e67048820546865206163636f756e7420676976656e206973206e6f742076657374696e672e5c4578697374696e6756657374696e675363686564756c65045d0120416e206578697374696e672076657374696e67207363686564756c6520616c72656164792065786973747320666f722074686973206163636f756e7420746861742063616e6e6f7420626520636c6f6262657265642e24416d6f756e744c6f7704090120416d6f756e74206265696e67207472616e7366657272656420697320746f6f206c6f7720746f2063726561746520612076657374696e67207363686564756c652e245363686564756c657201245363686564756c65720c184167656e646101010538543a3a426c6f636b4e756d6265726d015665633c4f7074696f6e3c5363686564756c65643c3c542061732054726169743e3a3a43616c6c2c20543a3a426c6f636b4e756d6265722c20543a3a0a50616c6c6574734f726967696e2c20543a3a4163636f756e7449643e3e3e000400044d01204974656d7320746f2062652065786563757465642c20696e64657865642062792074686520626c6f636b206e756d626572207468617420746865792073686f756c64206265206578656375746564206f6e2e184c6f6f6b75700001051c5665633c75383e6c5461736b416464726573733c543a3a426c6f636b4e756d6265723e000400040101204c6f6f6b75702066726f6d206964656e7469747920746f2074686520626c6f636b206e756d62657220616e6420696e646578206f6620746865207461736b2e3853746f7261676556657273696f6e01002052656c656173657304000c7c2053746f726167652076657273696f6e206f66207468652070616c6c65742e0098204e6577206e6574776f726b732073746172742077697468206c6173742076657273696f6e2e0118207363686564756c6510107768656e38543a3a426c6f636b4e756d626572386d617962655f706572696f646963a04f7074696f6e3c7363686564756c653a3a506572696f643c543a3a426c6f636b4e756d6265723e3e207072696f72697479487363686564756c653a3a5072696f726974791063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e287420416e6f6e796d6f75736c79207363686564756c652061207461736b2e002c2023203c7765696768743ea0202d2053203d204e756d626572206f6620616c7265616479207363686564756c65642063616c6c7390202d2042617365205765696768743a2032322e3239202b202e313236202a205320c2b57334202d204442205765696768743a4c20202020202d20526561643a204167656e64615020202020202d2057726974653a204167656e64613d01202d2057696c6c20757365206261736520776569676874206f662032352077686963682073686f756c6420626520676f6f6420666f7220757020746f203330207363686564756c65642063616c6c73302023203c2f7765696768743e1863616e63656c08107768656e38543a3a426c6f636b4e756d62657214696e6465780c75333228982043616e63656c20616e20616e6f6e796d6f75736c79207363686564756c6564207461736b2e002c2023203c7765696768743ea0202d2053203d204e756d626572206f6620616c7265616479207363686564756c65642063616c6c7394202d2042617365205765696768743a2032322e3135202b20322e383639202a205320c2b57334202d204442205765696768743a4c20202020202d20526561643a204167656e64617020202020202d2057726974653a204167656e64612c204c6f6f6b75704101202d2057696c6c20757365206261736520776569676874206f66203130302077686963682073686f756c6420626520676f6f6420666f7220757020746f203330207363686564756c65642063616c6c73302023203c2f7765696768743e387363686564756c655f6e616d6564140869641c5665633c75383e107768656e38543a3a426c6f636b4e756d626572386d617962655f706572696f646963a04f7074696f6e3c7363686564756c653a3a506572696f643c543a3a426c6f636b4e756d6265723e3e207072696f72697479487363686564756c653a3a5072696f726974791063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e285c205363686564756c652061206e616d6564207461736b2e002c2023203c7765696768743ea0202d2053203d204e756d626572206f6620616c7265616479207363686564756c65642063616c6c738c202d2042617365205765696768743a2032392e36202b202e313539202a205320c2b57334202d204442205765696768743a6c20202020202d20526561643a204167656e64612c204c6f6f6b75707020202020202d2057726974653a204167656e64612c204c6f6f6b75704d01202d2057696c6c20757365206261736520776569676874206f662033352077686963682073686f756c6420626520676f6f6420666f72206d6f7265207468616e203330207363686564756c65642063616c6c73302023203c2f7765696768743e3063616e63656c5f6e616d6564040869641c5665633c75383e287c2043616e63656c2061206e616d6564207363686564756c6564207461736b2e002c2023203c7765696768743ea0202d2053203d204e756d626572206f6620616c7265616479207363686564756c65642063616c6c7394202d2042617365205765696768743a2032342e3931202b20322e393037202a205320c2b57334202d204442205765696768743a6c20202020202d20526561643a204167656e64612c204c6f6f6b75707020202020202d2057726974653a204167656e64612c204c6f6f6b75704101202d2057696c6c20757365206261736520776569676874206f66203130302077686963682073686f756c6420626520676f6f6420666f7220757020746f203330207363686564756c65642063616c6c73302023203c2f7765696768743e387363686564756c655f61667465721014616674657238543a3a426c6f636b4e756d626572386d617962655f706572696f646963a04f7074696f6e3c7363686564756c653a3a506572696f643c543a3a426c6f636b4e756d6265723e3e207072696f72697479487363686564756c653a3a5072696f726974791063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e14ac20416e6f6e796d6f75736c79207363686564756c652061207461736b20616674657220612064656c61792e002c2023203c7765696768743e582053616d65206173205b607363686564756c65605d2e302023203c2f7765696768743e507363686564756c655f6e616d65645f6166746572140869641c5665633c75383e14616674657238543a3a426c6f636b4e756d626572386d617962655f706572696f646963a04f7074696f6e3c7363686564756c653a3a506572696f643c543a3a426c6f636b4e756d6265723e3e207072696f72697479487363686564756c653a3a5072696f726974791063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e1494205363686564756c652061206e616d6564207461736b20616674657220612064656c61792e002c2023203c7765696768743e702053616d65206173205b607363686564756c655f6e616d6564605d2e302023203c2f7765696768743e010c245363686564756c6564082c426c6f636b4e756d6265720c753332048c205363686564756c656420736f6d65207461736b2e205b7768656e2c20696e6465785d2043616e63656c6564082c426c6f636b4e756d6265720c75333204882043616e63656c656420736f6d65207461736b2e205b7768656e2c20696e6465785d28446973706174636865640c605461736b416464726573733c426c6f636b4e756d6265723e3c4f7074696f6e3c5665633c75383e3e384469737061746368526573756c7404a4204469737061746368656420736f6d65207461736b2e205b7461736b2c2069642c20726573756c745d000c404661696c6564546f5363686564756c650468204661696c656420746f207363686564756c6520612063616c6c384661696c6564546f43616e63656c0488204661696c656420746f2063616e63656c2061207363686564756c65642063616c6c5c546172676574426c6f636b4e756d626572496e5061737404a820476976656e2074617267657420626c6f636b206e756d62657220697320696e2074686520706173742e1450726f7879011450726f7879081c50726f7869657301010530543a3a4163636f756e7449644501285665633c50726f7879446566696e6974696f6e3c543a3a4163636f756e7449642c20543a3a50726f7879547970652c20543a3a426c6f636b4e756d6265723e3e2c0a2042616c616e63654f663c543e29004400000000000000000000000000000000000845012054686520736574206f66206163636f756e742070726f786965732e204d61707320746865206163636f756e74207768696368206861732064656c65676174656420746f20746865206163636f756e7473210120776869636820617265206265696e672064656c65676174656420746f2c20746f67657468657220776974682074686520616d6f756e742068656c64206f6e206465706f7369742e34416e6e6f756e63656d656e747301010530543a3a4163636f756e7449643d01285665633c416e6e6f756e63656d656e743c543a3a4163636f756e7449642c2043616c6c486173684f663c543e2c20543a3a426c6f636b4e756d6265723e3e2c0a2042616c616e63654f663c543e290044000000000000000000000000000000000004ac2054686520616e6e6f756e63656d656e7473206d616465206279207468652070726f787920286b6579292e01281470726f78790c107265616c30543a3a4163636f756e74496440666f7263655f70726f78795f74797065504f7074696f6e3c543a3a50726f7879547970653e1063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e3c51012044697370617463682074686520676976656e206063616c6c602066726f6d20616e206163636f756e742074686174207468652073656e64657220697320617574686f726973656420666f72207468726f7567683420606164645f70726f7879602e00ac2052656d6f76657320616e7920636f72726573706f6e64696e6720616e6e6f756e63656d656e742873292e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a1101202d20607265616c603a20546865206163636f756e742074686174207468652070726f78792077696c6c206d616b6520612063616c6c206f6e20626568616c66206f662e6501202d2060666f7263655f70726f78795f74797065603a2053706563696679207468652065786163742070726f7879207479706520746f206265207573656420616e6420636865636b656420666f7220746869732063616c6c2ed4202d206063616c6c603a205468652063616c6c20746f206265206d6164652062792074686520607265616c60206163636f756e742e002c2023203c7765696768743e01012057656967687420697320612066756e6374696f6e206f6620746865206e756d626572206f662070726f7869657320746865207573657220686173202850292e302023203c2f7765696768743e246164645f70726f78790c2064656c656761746530543a3a4163636f756e7449642870726f78795f7479706530543a3a50726f7879547970651464656c617938543a3a426c6f636b4e756d6265722c490120526567697374657220612070726f7879206163636f756e7420666f72207468652073656e64657220746861742069732061626c6520746f206d616b652063616c6c73206f6e2069747320626568616c662e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a1501202d206070726f7879603a20546865206163636f756e74207468617420746865206063616c6c65726020776f756c64206c696b6520746f206d616b6520612070726f78792e0101202d206070726f78795f74797065603a20546865207065726d697373696f6e7320616c6c6f77656420666f7220746869732070726f7879206163636f756e742e002c2023203c7765696768743e01012057656967687420697320612066756e6374696f6e206f6620746865206e756d626572206f662070726f7869657320746865207573657220686173202850292e302023203c2f7765696768743e3072656d6f76655f70726f78790c2064656c656761746530543a3a4163636f756e7449642870726f78795f7479706530543a3a50726f7879547970651464656c617938543a3a426c6f636b4e756d6265722cac20556e726567697374657220612070726f7879206163636f756e7420666f72207468652073656e6465722e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a2901202d206070726f7879603a20546865206163636f756e74207468617420746865206063616c6c65726020776f756c64206c696b6520746f2072656d6f766520617320612070726f78792e4501202d206070726f78795f74797065603a20546865207065726d697373696f6e732063757272656e746c7920656e61626c656420666f72207468652072656d6f7665642070726f7879206163636f756e742e002c2023203c7765696768743e01012057656967687420697320612066756e6374696f6e206f6620746865206e756d626572206f662070726f7869657320746865207573657220686173202850292e302023203c2f7765696768743e3872656d6f76655f70726f786965730028b820556e726567697374657220616c6c2070726f7879206163636f756e747320666f72207468652073656e6465722e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901205741524e494e473a2054686973206d61792062652063616c6c6564206f6e206163636f756e747320637265617465642062792060616e6f6e796d6f7573602c20686f776576657220696620646f6e652c207468656e5d012074686520756e726573657276656420666565732077696c6c20626520696e61636365737369626c652e202a2a416c6c2061636365737320746f2074686973206163636f756e742077696c6c206265206c6f73742e2a2a002c2023203c7765696768743e01012057656967687420697320612066756e6374696f6e206f6620746865206e756d626572206f662070726f7869657320746865207573657220686173202850292e302023203c2f7765696768743e24616e6f6e796d6f75730c2870726f78795f7479706530543a3a50726f7879547970651464656c617938543a3a426c6f636b4e756d62657214696e6465780c7531365c3d0120537061776e2061206672657368206e6577206163636f756e7420746861742069732067756172616e7465656420746f206265206f746865727769736520696e61636365737369626c652c20616e64010120696e697469616c697a65206974207769746820612070726f7879206f66206070726f78795f747970656020666f7220606f726967696e602073656e6465722e0070205265717569726573206120605369676e656460206f726967696e2e005501202d206070726f78795f74797065603a205468652074797065206f66207468652070726f78792074686174207468652073656e6465722077696c6c2062652072656769737465726564206173206f766572207468655101206e6577206163636f756e742e20546869732077696c6c20616c6d6f737420616c7761797320626520746865206d6f7374207065726d697373697665206050726f7879547970656020706f737369626c6520746f7c20616c6c6f7720666f72206d6178696d756d20666c65786962696c6974792e5501202d2060696e646578603a204120646973616d626967756174696f6e20696e6465782c20696e206361736520746869732069732063616c6c6564206d756c7469706c652074696d657320696e207468652073616d656101207472616e73616374696f6e2028652e672e207769746820607574696c6974793a3a626174636860292e20556e6c65737320796f75277265207573696e67206062617463686020796f752070726f6261626c79206a757374442077616e7420746f20757365206030602e5101202d206064656c6179603a2054686520616e6e6f756e63656d656e7420706572696f64207265717569726564206f662074686520696e697469616c2070726f78792e2057696c6c2067656e6572616c6c7920626518207a65726f2e005501204661696c73207769746820604475706c69636174656020696620746869732068617320616c7265616479206265656e2063616c6c656420696e2074686973207472616e73616374696f6e2c2066726f6d207468659c2073616d652073656e6465722c2077697468207468652073616d6520706172616d65746572732e00e8204661696c732069662074686572652061726520696e73756666696369656e742066756e647320746f2070617920666f72206465706f7369742e002c2023203c7765696768743e01012057656967687420697320612066756e6374696f6e206f6620746865206e756d626572206f662070726f7869657320746865207573657220686173202850292e302023203c2f7765696768743e9020544f444f3a204d69676874206265206f76657220636f756e74696e6720312072656164386b696c6c5f616e6f6e796d6f7573141c737061776e657230543a3a4163636f756e7449642870726f78795f7479706530543a3a50726f78795479706514696e6465780c753136186865696768745c436f6d706163743c543a3a426c6f636b4e756d6265723e246578745f696e64657830436f6d706163743c7533323e50b82052656d6f76657320612070726576696f75736c7920737061776e656420616e6f6e796d6f75732070726f78792e004d01205741524e494e473a202a2a416c6c2061636365737320746f2074686973206163636f756e742077696c6c206265206c6f73742e2a2a20416e792066756e64732068656c6420696e2069742077696c6c2062653820696e61636365737369626c652e005d01205265717569726573206120605369676e656460206f726967696e2c20616e64207468652073656e646572206163636f756e74206d7573742068617665206265656e206372656174656420627920612063616c6c20746fac2060616e6f6e796d6f757360207769746820636f72726573706f6e64696e6720706172616d65746572732e005101202d2060737061776e6572603a20546865206163636f756e742074686174206f726967696e616c6c792063616c6c65642060616e6f6e796d6f75736020746f206372656174652074686973206163636f756e742e5101202d2060696e646578603a2054686520646973616d626967756174696f6e20696e646578206f726967696e616c6c792070617373656420746f2060616e6f6e796d6f7573602e2050726f6261626c79206030602e0501202d206070726f78795f74797065603a205468652070726f78792074797065206f726967696e616c6c792070617373656420746f2060616e6f6e796d6f7573602e4101202d2060686569676874603a2054686520686569676874206f662074686520636861696e207768656e207468652063616c6c20746f2060616e6f6e796d6f757360207761732070726f6365737365642e4d01202d20606578745f696e646578603a205468652065787472696e73696320696e64657820696e207768696368207468652063616c6c20746f2060616e6f6e796d6f757360207761732070726f6365737365642e004d01204661696c73207769746820604e6f5065726d697373696f6e6020696e2063617365207468652063616c6c6572206973206e6f7420612070726576696f75736c79206372656174656420616e6f6e796d6f7573f4206163636f756e742077686f73652060616e6f6e796d6f7573602063616c6c2068617320636f72726573706f6e64696e6720706172616d65746572732e002c2023203c7765696768743e01012057656967687420697320612066756e6374696f6e206f6620746865206e756d626572206f662070726f7869657320746865207573657220686173202850292e302023203c2f7765696768743e20616e6e6f756e636508107265616c30543a3a4163636f756e7449642463616c6c5f686173683443616c6c486173684f663c543e540901205075626c697368207468652068617368206f6620612070726f78792d63616c6c20746861742077696c6c206265206d61646520696e20746865206675747572652e0061012054686973206d7573742062652063616c6c656420736f6d65206e756d626572206f6620626c6f636b73206265666f72652074686520636f72726573706f6e64696e67206070726f78796020697320617474656d707465642901206966207468652064656c6179206173736f6369617465642077697468207468652070726f78792072656c6174696f6e736869702069732067726561746572207468616e207a65726f2e001501204e6f206d6f7265207468616e20604d617850656e64696e676020616e6e6f756e63656d656e7473206d6179206265206d61646520617420616e79206f6e652074696d652e000d0120546869732077696c6c2074616b652061206465706f736974206f662060416e6e6f756e63656d656e744465706f736974466163746f72602061732077656c6c2061731d012060416e6e6f756e63656d656e744465706f736974426173656020696620746865726520617265206e6f206f746865722070656e64696e6720616e6e6f756e63656d656e74732e00290120546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f20616e6420612070726f7879206f6620607265616c602e003020506172616d65746572733a1101202d20607265616c603a20546865206163636f756e742074686174207468652070726f78792077696c6c206d616b6520612063616c6c206f6e20626568616c66206f662e1901202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f206265206d6164652062792074686520607265616c60206163636f756e742e002c2023203c7765696768743e642057656967687420697320612066756e6374696f6e206f663a9c202d20413a20746865206e756d626572206f6620616e6e6f756e63656d656e7473206d6164652ea4202d20503a20746865206e756d626572206f662070726f78696573207468652075736572206861732e302023203c2f7765696768743e4c72656d6f76655f616e6e6f756e63656d656e7408107265616c30543a3a4163636f756e7449642463616c6c5f686173683443616c6c486173684f663c543e40742052656d6f7665206120676976656e20616e6e6f756e63656d656e742e005d01204d61792062652063616c6c656420627920612070726f7879206163636f756e7420746f2072656d6f766520612063616c6c20746865792070726576696f75736c7920616e6e6f756e63656420616e642072657475726e3420746865206465706f7369742e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a1101202d20607265616c603a20546865206163636f756e742074686174207468652070726f78792077696c6c206d616b6520612063616c6c206f6e20626568616c66206f662e1901202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f206265206d6164652062792074686520607265616c60206163636f756e742e002c2023203c7765696768743e642057656967687420697320612066756e6374696f6e206f663a9c202d20413a20746865206e756d626572206f6620616e6e6f756e63656d656e7473206d6164652ea4202d20503a20746865206e756d626572206f662070726f78696573207468652075736572206861732e302023203c2f7765696768743e4c72656a6563745f616e6e6f756e63656d656e74082064656c656761746530543a3a4163636f756e7449642463616c6c5f686173683443616c6c486173684f663c543e40b42052656d6f76652074686520676976656e20616e6e6f756e63656d656e74206f6620612064656c65676174652e006501204d61792062652063616c6c6564206279206120746172676574202870726f7869656429206163636f756e7420746f2072656d6f766520612063616c6c2074686174206f6e65206f662074686569722064656c656761746573290120286064656c656761746560292068617320616e6e6f756e63656420746865792077616e7420746f20657865637574652e20546865206465706f7369742069732072657475726e65642e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733af8202d206064656c6567617465603a20546865206163636f756e7420746861742070726576696f75736c7920616e6e6f756e636564207468652063616c6c2ec0202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f206265206d6164652e002c2023203c7765696768743e642057656967687420697320612066756e6374696f6e206f663a9c202d20413a20746865206e756d626572206f6620616e6e6f756e63656d656e7473206d6164652ea4202d20503a20746865206e756d626572206f662070726f78696573207468652075736572206861732e302023203c2f7765696768743e3c70726f78795f616e6e6f756e636564102064656c656761746530543a3a4163636f756e744964107265616c30543a3a4163636f756e74496440666f7263655f70726f78795f74797065504f7074696f6e3c543a3a50726f7879547970653e1063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e4451012044697370617463682074686520676976656e206063616c6c602066726f6d20616e206163636f756e742074686174207468652073656e64657220697320617574686f726973656420666f72207468726f7567683420606164645f70726f7879602e00ac2052656d6f76657320616e7920636f72726573706f6e64696e6720616e6e6f756e63656d656e742873292e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e003020506172616d65746572733a1101202d20607265616c603a20546865206163636f756e742074686174207468652070726f78792077696c6c206d616b6520612063616c6c206f6e20626568616c66206f662e6501202d2060666f7263655f70726f78795f74797065603a2053706563696679207468652065786163742070726f7879207479706520746f206265207573656420616e6420636865636b656420666f7220746869732063616c6c2ed4202d206063616c6c603a205468652063616c6c20746f206265206d6164652062792074686520607265616c60206163636f756e742e002c2023203c7765696768743e642057656967687420697320612066756e6374696f6e206f663a9c202d20413a20746865206e756d626572206f6620616e6e6f756e63656d656e7473206d6164652ea4202d20503a20746865206e756d626572206f662070726f78696573207468652075736572206861732e302023203c2f7765696768743e010c3450726f7879457865637574656404384469737061746368526573756c7404e420412070726f78792077617320657865637574656420636f72726563746c792c20776974682074686520676976656e205b726573756c745d2e40416e6f6e796d6f75734372656174656410244163636f756e744964244163636f756e7449642450726f7879547970650c75313608ec20416e6f6e796d6f7573206163636f756e7420686173206265656e2063726561746564206279206e65772070726f7879207769746820676976656e610120646973616d626967756174696f6e20696e64657820616e642070726f787920747970652e205b616e6f6e796d6f75732c2077686f2c2070726f78795f747970652c20646973616d626967756174696f6e5f696e6465785d24416e6e6f756e6365640c244163636f756e744964244163636f756e744964104861736804490120416e20616e6e6f756e63656d656e742077617320706c6163656420746f206d616b6520612063616c6c20696e20746865206675747572652e205b7265616c2c2070726f78792c2063616c6c5f686173685d184050726f78794465706f736974426173653042616c616e63654f663c543e4000f09e544c390000000000000000000004110120546865206261736520616d6f756e74206f662063757272656e6379206e656564656420746f207265736572766520666f72206372656174696e6720612070726f78792e4850726f78794465706f736974466163746f723042616c616e63654f663c543e400060aa7714b40000000000000000000004bc2054686520616d6f756e74206f662063757272656e6379206e6565646564207065722070726f78792061646465642e284d617850726f786965730c75313608200004f020546865206d6178696d756d20616d6f756e74206f662070726f7869657320616c6c6f77656420666f7220612073696e676c65206163636f756e742e284d617850656e64696e670c7533321020000000047820604d617850656e64696e6760206d6574616461746120736861646f772e5c416e6e6f756e63656d656e744465706f736974426173653042616c616e63654f663c543e4000f09e544c390000000000000000000004ac2060416e6e6f756e63656d656e744465706f7369744261736560206d6574616461746120736861646f772e64416e6e6f756e63656d656e744465706f736974466163746f723042616c616e63654f663c543e4000c054ef28680100000000000000000004b42060416e6e6f756e63656d656e744465706f736974466163746f7260206d6574616461746120736861646f772e1c1c546f6f4d616e790425012054686572652061726520746f6f206d616e792070726f786965732072656769737465726564206f7220746f6f206d616e7920616e6e6f756e63656d656e74732070656e64696e672e204e6f74466f756e6404782050726f787920726567697374726174696f6e206e6f7420666f756e642e204e6f7450726f787904d02053656e646572206973206e6f7420612070726f7879206f6620746865206163636f756e7420746f2062652070726f786965642e2c556e70726f787961626c6504250120412063616c6c20776869636820697320696e636f6d70617469626c652077697468207468652070726f7879207479706527732066696c7465722077617320617474656d707465642e244475706c69636174650470204163636f756e7420697320616c726561647920612070726f78792e304e6f5065726d697373696f6e0419012043616c6c206d6179206e6f74206265206d6164652062792070726f78792062656361757365206974206d617920657363616c617465206974732070726976696c656765732e2c556e616e6e6f756e63656404d420416e6e6f756e63656d656e742c206966206d61646520617420616c6c2c20776173206d61646520746f6f20726563656e746c792e204d756c746973696701204d756c746973696708244d756c74697369677300020530543a3a4163636f756e744964205b75383b2033325dd04d756c74697369673c543a3a426c6f636b4e756d6265722c2042616c616e63654f663c543e2c20543a3a4163636f756e7449643e02040004942054686520736574206f66206f70656e206d756c7469736967206f7065726174696f6e732e1443616c6c73000106205b75383b2033325da0284f706171756543616c6c2c20543a3a4163636f756e7449642c2042616c616e63654f663c543e290004000001105061735f6d756c74695f7468726573686f6c645f3108446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e1063616c6c5c426f783c3c542061732054726169743e3a3a43616c6c3e44550120496d6d6564696174656c792064697370617463682061206d756c74692d7369676e61747572652063616c6c207573696e6720612073696e676c6520617070726f76616c2066726f6d207468652063616c6c65722e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e004101202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f206172652070617274206f66207468650501206d756c74692d7369676e61747572652c2062757420646f206e6f7420706172746963697061746520696e2074686520617070726f76616c2070726f636573732e8c202d206063616c6c603a205468652063616c6c20746f2062652065786563757465642e00bc20526573756c74206973206571756976616c656e7420746f20746865206469737061746368656420726573756c742e002c2023203c7765696768743e1d01204f285a202b204329207768657265205a20697320746865206c656e677468206f66207468652063616c6c20616e6420432069747320657865637574696f6e207765696768742e80202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d94202d2042617365205765696768743a2033332e3732202b20302e303032202a205a20c2b57348202d204442205765696768743a204e6f6e654c202d20506c75732043616c6c20576569676874302023203c2f7765696768743e2061735f6d756c746918247468726573686f6c640c753136446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e3c6d617962655f74696d65706f696e74844f7074696f6e3c54696d65706f696e743c543a3a426c6f636b4e756d6265723e3e1063616c6c284f706171756543616c6c2873746f72655f63616c6c10626f6f6c286d61785f77656967687418576569676874cc590120526567697374657220617070726f76616c20666f72206120646973706174636820746f206265206d6164652066726f6d20612064657465726d696e697374696320636f6d706f73697465206163636f756e74206966fc20617070726f766564206279206120746f74616c206f6620607468726573686f6c64202d203160206f6620606f746865725f7369676e61746f72696573602e00b42049662074686572652061726520656e6f7567682c207468656e206469737061746368207468652063616c6c2e003101205061796d656e743a20604465706f73697442617365602077696c6c20626520726573657276656420696620746869732069732074686520666972737420617070726f76616c2c20706c7573410120607468726573686f6c64602074696d657320604465706f736974466163746f72602e2049742069732072657475726e6564206f6e636520746869732064697370617463682068617070656e73206f72382069732063616e63656c6c65642e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901202d20607468726573686f6c64603a2054686520746f74616c206e756d626572206f6620617070726f76616c7320666f722074686973206469737061746368206265666f72652069742069732065786563757465642e4501202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f2063616e20617070726f76652074686973702064697370617463682e204d6179206e6f7420626520656d7074792e5d01202d20606d617962655f74696d65706f696e74603a20496620746869732069732074686520666972737420617070726f76616c2c207468656e2074686973206d75737420626520604e6f6e65602e2049662069742069735501206e6f742074686520666972737420617070726f76616c2c207468656e206974206d7573742062652060536f6d65602c2077697468207468652074696d65706f696e742028626c6f636b206e756d62657220616e64d8207472616e73616374696f6e20696e64657829206f662074686520666972737420617070726f76616c207472616e73616374696f6e2e8c202d206063616c6c603a205468652063616c6c20746f2062652065786563757465642e002101204e4f54453a20556e6c6573732074686973206973207468652066696e616c20617070726f76616c2c20796f752077696c6c2067656e6572616c6c792077616e7420746f207573651d012060617070726f76655f61735f6d756c74696020696e73746561642c2073696e6365206974206f6e6c7920726571756972657320612068617368206f66207468652063616c6c2e005d0120526573756c74206973206571756976616c656e7420746f20746865206469737061746368656420726573756c7420696620607468726573686f6c64602069732065786163746c79206031602e204f74686572776973655901206f6e20737563636573732c20726573756c7420697320604f6b6020616e642074686520726573756c742066726f6d2074686520696e746572696f722063616c6c2c206966206974207761732065786563757465642ce0206d617920626520666f756e6420696e20746865206465706f736974656420604d756c7469736967457865637574656460206576656e742e002c2023203c7765696768743e54202d20604f2853202b205a202b2043616c6c29602ed0202d20557020746f206f6e652062616c616e63652d72657365727665206f7220756e72657365727665206f7065726174696f6e2e4101202d204f6e6520706173737468726f756768206f7065726174696f6e2c206f6e6520696e736572742c20626f746820604f285329602077686572652060536020697320746865206e756d626572206f6649012020207369676e61746f726965732e206053602069732063617070656420627920604d61785369676e61746f72696573602c207769746820776569676874206265696e672070726f706f7274696f6e616c2e2501202d204f6e652063616c6c20656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285a296020776865726520605a602069732074782d6c656e2ec0202d204f6e6520656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285329602ed8202d20557020746f206f6e652062696e6172792073656172636820616e6420696e736572742028604f286c6f6753202b20532960292efc202d20492f4f3a2031207265616420604f285329602c20757020746f2031206d757461746520604f285329602e20557020746f206f6e652072656d6f76652e34202d204f6e65206576656e742e70202d2054686520776569676874206f6620746865206063616c6c602e3101202d2053746f726167653a20696e7365727473206f6e65206974656d2c2076616c75652073697a6520626f756e64656420627920604d61785369676e61746f72696573602c20776974682061902020206465706f7369742074616b656e20666f7220697473206c69666574696d65206f66b4202020604465706f73697442617365202b207468726573686f6c64202a204465706f736974466163746f72602e80202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3c202d2042617365205765696768743ae020202020202d204372656174653a2020202020202020202034312e3839202b20302e313138202a2053202b202e303032202a205a20c2b573e020202020202d2043726561746520772f2053746f72653a2035332e3537202b20302e313139202a2053202b202e303033202a205a20c2b573e020202020202d20417070726f76653a20202020202020202033312e3339202b20302e313336202a2053202b202e303032202a205a20c2b573e020202020202d20436f6d706c6574653a202020202020202033392e3934202b20302e323620202a2053202b202e303032202a205a20c2b57334202d204442205765696768743a250120202020202d2052656164733a204d756c74697369672053746f726167652c205b43616c6c6572204163636f756e745d2c2043616c6c7320286966206073746f72655f63616c6c6029290120202020202d205772697465733a204d756c74697369672053746f726167652c205b43616c6c6572204163636f756e745d2c2043616c6c7320286966206073746f72655f63616c6c60294c202d20506c75732043616c6c20576569676874302023203c2f7765696768743e40617070726f76655f61735f6d756c746914247468726573686f6c640c753136446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e3c6d617962655f74696d65706f696e74844f7074696f6e3c54696d65706f696e743c543a3a426c6f636b4e756d6265723e3e2463616c6c5f68617368205b75383b2033325d286d61785f776569676874185765696768749c590120526567697374657220617070726f76616c20666f72206120646973706174636820746f206265206d6164652066726f6d20612064657465726d696e697374696320636f6d706f73697465206163636f756e74206966fc20617070726f766564206279206120746f74616c206f6620607468726573686f6c64202d203160206f6620606f746865725f7369676e61746f72696573602e003101205061796d656e743a20604465706f73697442617365602077696c6c20626520726573657276656420696620746869732069732074686520666972737420617070726f76616c2c20706c7573410120607468726573686f6c64602074696d657320604465706f736974466163746f72602e2049742069732072657475726e6564206f6e636520746869732064697370617463682068617070656e73206f72382069732063616e63656c6c65642e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901202d20607468726573686f6c64603a2054686520746f74616c206e756d626572206f6620617070726f76616c7320666f722074686973206469737061746368206265666f72652069742069732065786563757465642e4501202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f2063616e20617070726f76652074686973702064697370617463682e204d6179206e6f7420626520656d7074792e5d01202d20606d617962655f74696d65706f696e74603a20496620746869732069732074686520666972737420617070726f76616c2c207468656e2074686973206d75737420626520604e6f6e65602e2049662069742069735501206e6f742074686520666972737420617070726f76616c2c207468656e206974206d7573742062652060536f6d65602c2077697468207468652074696d65706f696e742028626c6f636b206e756d62657220616e64d8207472616e73616374696f6e20696e64657829206f662074686520666972737420617070726f76616c207472616e73616374696f6e2ed0202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f2062652065786563757465642e003901204e4f54453a2049662074686973206973207468652066696e616c20617070726f76616c2c20796f752077696c6c2077616e7420746f20757365206061735f6d756c74696020696e73746561642e002c2023203c7765696768743e28202d20604f285329602ed0202d20557020746f206f6e652062616c616e63652d72657365727665206f7220756e72657365727665206f7065726174696f6e2e4101202d204f6e6520706173737468726f756768206f7065726174696f6e2c206f6e6520696e736572742c20626f746820604f285329602077686572652060536020697320746865206e756d626572206f6649012020207369676e61746f726965732e206053602069732063617070656420627920604d61785369676e61746f72696573602c207769746820776569676874206265696e672070726f706f7274696f6e616c2ec0202d204f6e6520656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285329602ed8202d20557020746f206f6e652062696e6172792073656172636820616e6420696e736572742028604f286c6f6753202b20532960292efc202d20492f4f3a2031207265616420604f285329602c20757020746f2031206d757461746520604f285329602e20557020746f206f6e652072656d6f76652e34202d204f6e65206576656e742e3101202d2053746f726167653a20696e7365727473206f6e65206974656d2c2076616c75652073697a6520626f756e64656420627920604d61785369676e61746f72696573602c20776974682061902020206465706f7369742074616b656e20666f7220697473206c69666574696d65206f66b4202020604465706f73697442617365202b207468726573686f6c64202a204465706f736974466163746f72602e8c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3c202d2042617365205765696768743a8020202020202d204372656174653a2034342e3731202b20302e303838202a20538420202020202d20417070726f76653a2033312e3438202b20302e313136202a205334202d204442205765696768743abc20202020202d20526561643a204d756c74697369672053746f726167652c205b43616c6c6572204163636f756e745dc020202020202d2057726974653a204d756c74697369672053746f726167652c205b43616c6c6572204163636f756e745d302023203c2f7765696768743e3c63616e63656c5f61735f6d756c746910247468726573686f6c640c753136446f746865725f7369676e61746f72696573445665633c543a3a4163636f756e7449643e2474696d65706f696e746454696d65706f696e743c543a3a426c6f636b4e756d6265723e2463616c6c5f68617368205b75383b2033325d6c59012043616e63656c2061207072652d6578697374696e672c206f6e2d676f696e67206d756c7469736967207472616e73616374696f6e2e20416e79206465706f7369742072657365727665642070726576696f75736c79c820666f722074686973206f7065726174696f6e2077696c6c20626520756e7265736572766564206f6e20737563636573732e00d020546865206469737061746368206f726967696e20666f7220746869732063616c6c206d757374206265205f5369676e65645f2e005901202d20607468726573686f6c64603a2054686520746f74616c206e756d626572206f6620617070726f76616c7320666f722074686973206469737061746368206265666f72652069742069732065786563757465642e4501202d20606f746865725f7369676e61746f72696573603a20546865206163636f756e747320286f74686572207468616e207468652073656e646572292077686f2063616e20617070726f76652074686973702064697370617463682e204d6179206e6f7420626520656d7074792e6101202d206074696d65706f696e74603a205468652074696d65706f696e742028626c6f636b206e756d62657220616e64207472616e73616374696f6e20696e64657829206f662074686520666972737420617070726f76616c7c207472616e73616374696f6e20666f7220746869732064697370617463682ed0202d206063616c6c5f68617368603a205468652068617368206f66207468652063616c6c20746f2062652065786563757465642e002c2023203c7765696768743e28202d20604f285329602ed0202d20557020746f206f6e652062616c616e63652d72657365727665206f7220756e72657365727665206f7065726174696f6e2e4101202d204f6e6520706173737468726f756768206f7065726174696f6e2c206f6e6520696e736572742c20626f746820604f285329602077686572652060536020697320746865206e756d626572206f6649012020207369676e61746f726965732e206053602069732063617070656420627920604d61785369676e61746f72696573602c207769746820776569676874206265696e672070726f706f7274696f6e616c2ec0202d204f6e6520656e636f6465202620686173682c20626f7468206f6620636f6d706c657869747920604f285329602e34202d204f6e65206576656e742e88202d20492f4f3a2031207265616420604f285329602c206f6e652072656d6f76652e74202d2053746f726167653a2072656d6f766573206f6e65206974656d2e8c202d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d84202d2042617365205765696768743a2033362e3037202b20302e313234202a205334202d204442205765696768743a190120202020202d20526561643a204d756c74697369672053746f726167652c205b43616c6c6572204163636f756e745d2c20526566756e64204163636f756e742c2043616c6c731d0120202020202d2057726974653a204d756c74697369672053746f726167652c205b43616c6c6572204163636f756e745d2c20526566756e64204163636f756e742c2043616c6c73302023203c2f7765696768743e01102c4e65774d756c74697369670c244163636f756e744964244163636f756e7449642043616c6c486173680415012041206e6577206d756c7469736967206f7065726174696f6e2068617320626567756e2e205b617070726f76696e672c206d756c74697369672c2063616c6c5f686173685d404d756c7469736967417070726f76616c10244163636f756e7449645854696d65706f696e743c426c6f636b4e756d6265723e244163636f756e7449642043616c6c48617368047d012041206d756c7469736967206f7065726174696f6e20686173206265656e20617070726f76656420627920736f6d656f6e652e205b617070726f76696e672c2074696d65706f696e742c206d756c74697369672c2063616c6c5f686173685d404d756c7469736967457865637574656414244163636f756e7449645854696d65706f696e743c426c6f636b4e756d6265723e244163636f756e7449642043616c6c48617368384469737061746368526573756c740451012041206d756c7469736967206f7065726174696f6e20686173206265656e2065786563757465642e205b617070726f76696e672c2074696d65706f696e742c206d756c74697369672c2063616c6c5f686173685d444d756c746973696743616e63656c6c656410244163636f756e7449645854696d65706f696e743c426c6f636b4e756d6265723e244163636f756e7449642043616c6c486173680459012041206d756c7469736967206f7065726174696f6e20686173206265656e2063616e63656c6c65642e205b63616e63656c6c696e672c2074696d65706f696e742c206d756c74697369672c2063616c6c5f686173685d0038404d696e696d756d5468726573686f6c640480205468726573686f6c64206d7573742062652032206f7220677265617465722e3c416c7265616479417070726f76656404b02043616c6c20697320616c726561647920617070726f7665642062792074686973207369676e61746f72792e444e6f417070726f76616c734e656564656404a02043616c6c20646f65736e2774206e65656420616e7920286d6f72652920617070726f76616c732e44546f6f4665775369676e61746f7269657304ac2054686572652061726520746f6f20666577207369676e61746f7269657320696e20746865206c6973742e48546f6f4d616e795369676e61746f7269657304b02054686572652061726520746f6f206d616e79207369676e61746f7269657320696e20746865206c6973742e545369676e61746f726965734f75744f664f7264657204110120546865207369676e61746f7269657320776572652070726f7669646564206f7574206f66206f726465723b20746865792073686f756c64206265206f7264657265642e4c53656e646572496e5369676e61746f72696573041101205468652073656e6465722077617320636f6e7461696e656420696e20746865206f74686572207369676e61746f726965733b2069742073686f756c646e27742062652e204e6f74466f756e6404e0204d756c7469736967206f7065726174696f6e206e6f7420666f756e64207768656e20617474656d7074696e6720746f2063616e63656c2e204e6f744f776e6572043101204f6e6c7920746865206163636f756e742074686174206f726967696e616c6c79206372656174656420746865206d756c74697369672069732061626c6520746f2063616e63656c2069742e2c4e6f54696d65706f696e74042101204e6f2074696d65706f696e742077617320676976656e2c2079657420746865206d756c7469736967206f7065726174696f6e20697320616c726561647920756e6465727761792e3857726f6e6754696d65706f696e74043101204120646966666572656e742074696d65706f696e742077617320676976656e20746f20746865206d756c7469736967206f7065726174696f6e207468617420697320756e6465727761792e4c556e657870656374656454696d65706f696e7404f820412074696d65706f696e742077617320676976656e2c20796574206e6f206d756c7469736967206f7065726174696f6e20697320756e6465727761792e30576569676874546f6f4c6f7704d420546865206d6178696d756d2077656967687420696e666f726d6174696f6e2070726f76696465642077617320746f6f206c6f772e34416c726561647953746f72656404a420546865206461746120746f2062652073746f72656420697320616c72656164792073746f7265642e041c40436865636b5370656356657273696f6e38436865636b547856657273696f6e30436865636b47656e6573697338436865636b4d6f7274616c69747928436865636b4e6f6e63652c436865636b576569676874604368617267655472616e73616374696f6e5061796d656e74';
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v11/Metadata.spec", ["require", "exports", "types/src/create/index", "metadata/src/util/testUtil", "metadata/src/v11/static", "./static-substrate.json"], function (require, exports, create_24, testUtil_2, static_13, static_substrate_json_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_13 = __importDefault(static_13);
    static_substrate_json_2 = __importDefault(static_substrate_json_2);
    describe('MetadataV11 (substrate)', () => {
        const registry = new create_24.TypeRegistry();
        testUtil_2.decodeLatestSubstrate(registry, 11, static_13.default, static_substrate_json_2.default);
        testUtil_2.toLatest(registry, 11, static_13.default);
        testUtil_2.defaultValues(registry, static_13.default);
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v12/Metadata.spec", ["require", "exports", "types/src/create/index", "metadata/src/util/testUtil", "metadata/src/v12/static", "./static-substrate.json"], function (require, exports, create_25, testUtil_3, static_14, static_substrate_json_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_14 = __importDefault(static_14);
    static_substrate_json_3 = __importDefault(static_substrate_json_3);
    describe('MetadataV12 (substrate)', () => {
        const registry = new create_25.TypeRegistry();
        testUtil_3.decodeLatestSubstrate(registry, 12, static_14.default, static_substrate_json_3.default);
        testUtil_3.toLatest(registry, 12, static_14.default);
        testUtil_3.defaultValues(registry, static_14.default);
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v9/static", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = '';
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("metadata/src/v9/Metadata.spec", ["require", "exports", "types/src/create/index", "metadata/src/util/testUtil", "metadata/src/v9/static", "./static-substrate.json"], function (require, exports, create_26, testUtil_4, static_15, static_substrate_json_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_15 = __importDefault(static_15);
    static_substrate_json_4 = __importDefault(static_substrate_json_4);
    describe('MetadataV9 (substrate)', () => {
        const registry = new create_26.TypeRegistry();
        testUtil_4.decodeLatestSubstrate(registry, 9, static_15.default, static_substrate_json_4.default);
        testUtil_4.toLatest(registry, 9, static_15.default);
        testUtil_4.defaultValues(registry, static_15.default);
    });
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/cached.spec", ["require", "exports", "@polkadot/keyring/testingPairs", "rpc-provider/src/mock/index", "types/src/create/index", "rpc-core/src/index"], function (require, exports, testingPairs_6, mock_5, create_27, _8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Cached Observables', () => {
        const registry = new create_27.TypeRegistry();
        let rpc;
        const keyring = testingPairs_6.createTestPairs();
        beforeEach(() => {
            rpc = new _8.RpcCore('123', registry, new mock_5.MockProvider(registry));
        });
        it('creates a single observable for subscriptions (multiple calls)', () => {
            const observable1 = rpc.state.subscribeStorage([123]);
            const observable2 = rpc.state.subscribeStorage([123]);
            expect(observable2).toBe(observable1);
        });
        it('creates a single observable for subscriptions (multiple calls, no arguments)', () => {
            const observable1 = rpc.chain.subscribeNewHeads();
            const observable2 = rpc.chain.subscribeNewHeads();
            expect(observable2).toBe(observable1);
        });
        it('creates a single observable (multiple calls, different arguments that should be cached together)', () => {
            const observable1 = rpc.state.subscribeStorage([keyring.alice.address]);
            const observable2 = rpc.state.subscribeStorage([registry.createType('AccountId', keyring.alice.address)]);
            expect(observable2).toBe(observable1);
        });
        it('creates multiple observables for different values', () => {
            const observable1 = rpc.chain.getBlockHash(123);
            const observable2 = rpc.chain.getBlockHash(456);
            expect(observable2).not.toBe(observable1);
        });
        it('subscribes to the same one if within the period (unbsub delay)', (done) => {
            const observable1 = rpc.chain.subscribeNewHeads();
            const sub1 = observable1.subscribe();
            sub1.unsubscribe();
            setTimeout(() => {
                const observable2 = rpc.chain.subscribeNewHeads();
                const sub2 = observable2.subscribe();
                expect(observable1).toBe(observable2);
                sub2.unsubscribe();
                done();
            }, 500);
        });
        it('clears cache if there are no more subscribers', (done) => {
            const observable1 = rpc.chain.subscribeNewHeads();
            const observable2 = rpc.chain.subscribeNewHeads();
            const sub1 = observable1.subscribe();
            const sub2 = observable2.subscribe();
            expect(observable1).toBe(observable2);
            sub1.unsubscribe();
            sub2.unsubscribe();
            setTimeout(() => {
                // No more subscribers, now create a new observable
                const observable3 = rpc.chain.subscribeNewHeads();
                expect(observable3).not.toBe(observable1);
                done();
            }, 3500);
        });
        it('creates different observables for different methods but same arguments', () => {
            // params do not match here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            const observable1 = rpc.chain.subscribeNewHeads([123]);
            const observable2 = rpc.state.subscribeStorage([123]);
            expect(observable2).not.toBe(observable1);
        });
        it('creates single observables for subsequent one-shots', () => {
            const observable1 = rpc.chain.getBlockHash(123);
            const observable2 = rpc.chain.getBlockHash(123);
            expect(observable2).toBe(observable1);
        });
        it('creates multiple observables for subsequent one-shots delayed', (done) => {
            const observable1 = rpc.chain.getBlockHash(123);
            const sub = observable1.subscribe(() => {
                sub.unsubscribe();
            });
            expect(rpc.chain.getBlockHash(123)).toBe(observable1);
            setTimeout(() => {
                expect(rpc.chain.getBlockHash(123)).not.toBe(observable1);
                done();
            }, 3500);
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/index.spec", ["require", "exports", "rpc-provider/src/mock/index", "types/src/create/index", "@polkadot/util", "rpc-core/src/index"], function (require, exports, mock_6, create_28, util_219, _9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Api', () => {
        const registry = new create_28.TypeRegistry();
        it('requires a provider with a send method', () => {
            expect(() => new _9.RpcCore('234', registry, {})).toThrow(/Expected Provider/);
        });
        it('allows for the definition of user RPCs', () => {
            const rpc = new _9.RpcCore('567', registry, new mock_6.MockProvider(registry), {
                testing: {
                    foo: {
                        description: 'foo',
                        params: [{ name: 'bar', type: 'u32' }],
                        type: 'Balance'
                    }
                }
            });
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            expect(util_219.isFunction(rpc.testing.foo)).toBe(true);
            expect(rpc.sections.includes('testing')).toBe(true);
            expect(rpc.mapping.get('testing_foo')).toEqual({
                description: 'foo',
                isSubscription: false,
                jsonrpc: 'testing_foo',
                method: 'foo',
                params: [{
                        name: 'bar',
                        type: 'u32'
                    }],
                section: 'testing',
                type: 'Balance'
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/methodSend.spec", ["require", "exports", "types/src/create/index", "rpc-core/src/index"], function (require, exports, create_29, _10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('methodSend', () => {
        const registry = new create_29.TypeRegistry();
        let rpc;
        let methods;
        let provider;
        beforeEach(() => {
            methods = {
                blah: {
                    description: 'test',
                    params: [
                        { name: 'foo', type: 'Bytes' }
                    ],
                    type: 'Bytes'
                },
                bleh: {
                    description: 'test',
                    params: [],
                    type: 'Bytes'
                }
            };
            provider = {
                send: jest.fn((method, params) => {
                    return Promise.resolve(params[0]);
                })
            };
            rpc = new _10.RpcCore('987', registry, provider);
        });
        it('checks for mismatched parameters', (done) => {
            // private method
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            const method = rpc._createMethodSend('test', 'bleh', methods.bleh);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            method(1).subscribe(() => undefined, (error) => {
                expect(error.message).toMatch(/parameters, 1 found instead/);
                done();
            });
        });
        it('calls the provider with the correct parameters', (done) => {
            // private method
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            const method = rpc._createMethodSend('test', 'blah', methods.blah);
            // Args are length-prefixed, because it's a Bytes
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            method(new Uint8Array([2 << 2, 0x12, 0x34])).subscribe(() => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                expect(provider.send).toHaveBeenCalledWith('test_blah', ['0x1234']);
                done();
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/replay.spec", ["require", "exports", "rpc-provider/src/mock/index", "types/src/create/index", "@polkadot/x-rxjs", "rpc-core/src/index"], function (require, exports, mock_7, create_30, x_rxjs_64, _11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('replay', () => {
        const registry = new create_30.TypeRegistry();
        let rpc;
        beforeEach(() => {
            rpc = new _11.RpcCore('653', registry, new mock_7.MockProvider(registry));
        });
        it('subscribes via the rpc section', (done) => {
            // we don't honor types or number of params here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            rpc.chain.getBlockHash = jest.fn(() => x_rxjs_64.of(1));
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
            rpc.chain.getBlockHash(123, false).subscribe(() => {
                expect(
                // eslint-disable-next-line @typescript-eslint/unbound-method
                rpc.chain.getBlockHash).toHaveBeenCalledWith(123, false);
                done();
            });
        });
        it('returns the observable value', (done) => {
            rpc.system.chain().subscribe((value) => {
                if (value) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
                    expect(value.toString()).toEqual('mockChain'); // Defined in MockProvider
                    done();
                }
            });
        });
        it('replay(1) works as expected', (done) => {
            const observable = rpc.system.chain();
            let a;
            observable.subscribe((value) => { a = value; });
            setTimeout(() => {
                // Subscribe again to the same observable, it should fire value immediately
                observable.subscribe((value) => {
                    expect(value).toEqual(a);
                    done();
                });
            }, 1000);
        });
        it('unsubscribes as required', (done) => {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            rpc.provider.unsubscribe = jest.fn();
            const subscription = rpc.chain.subscribeNewHeads().subscribe(() => {
                subscription.unsubscribe();
                // There's a promise inside .unsubscribe(), wait a bit (> 2s)
                setTimeout(() => {
                    // eslint-disable-next-line @typescript-eslint/unbound-method
                    expect(rpc.provider.unsubscribe).toHaveBeenCalled();
                    done();
                }, 3500);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-core/src/util/drr.spec", ["require", "exports", "@polkadot/x-rxjs", "rpc-core/src/util/index"], function (require, exports, x_rxjs_65, _12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('drr', () => {
        it('should not fire twice the same value', (done) => {
            let count = 0;
            x_rxjs_65.of(1, 1).pipe(_12.drr()).subscribe(() => { ++count; });
            setTimeout(() => {
                expect(count).toBe(1);
                done();
            }, 50);
        });
        it('should be a ReplaySubject(1)', (done) => {
            const obs = x_rxjs_65.timer(0, 100).pipe(_12.drr()); // Starts at 0, increments every 100ms
            obs.subscribe(); // Fire the observable
            // Subscribe another time after some time, i.e. after the observable has fired
            setTimeout(() => {
                obs.subscribe((value) => {
                    expect(value > 1).toBe(true);
                    done();
                });
            }, 500);
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/coder/decodeResponse.spec", ["require", "exports", "rpc-provider/src/coder/index"], function (require, exports, _13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('decodeResponse', () => {
        let coder;
        beforeEach(() => {
            coder = new _13.RpcCoder();
        });
        it('expects a non-empty input object', () => {
            expect(() => coder.decodeResponse(undefined)).toThrow(/Empty response/);
        });
        it('expects a valid jsonrpc field', () => {
            expect(() => coder.decodeResponse({})).toThrow(/Invalid jsonrpc/);
        });
        it('expects a valid id field', () => {
            expect(() => coder.decodeResponse({ jsonrpc: '2.0' })).toThrow(/Invalid id/);
        });
        it('expects a valid result field', () => {
            expect(() => coder.decodeResponse({ id: 1, jsonrpc: '2.0' })).toThrow(/No result/);
        });
        it('throws any error found', () => {
            expect(() => coder.decodeResponse({ error: { code: 123, message: 'test error' }, id: 1, jsonrpc: '2.0' })).toThrow(/123: test error/);
        });
        it('throws any error found, with data', () => {
            expect(() => coder.decodeResponse({ error: { code: 123, data: 'Error("Some random error description")', message: 'test error' }, id: 1, jsonrpc: '2.0' })).toThrow(/123: test error: Some random error description/);
        });
        it('allows for number subscription ids', () => {
            expect(coder.decodeResponse({ id: 1, jsonrpc: '2.0', method: 'test', params: { result: 'test result', subscription: 1 } })).toEqual('test result');
        });
        it('allows for string subscription ids', () => {
            expect(coder.decodeResponse({ id: 1, jsonrpc: '2.0', method: 'test', params: { result: 'test result', subscription: 'abc' } })).toEqual('test result');
        });
        it('returns the result', () => {
            expect(coder.decodeResponse({ id: 1, jsonrpc: '2.0', result: 'some result' })).toEqual('some result');
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/coder/encodeJson.spec", ["require", "exports", "rpc-provider/src/coder/index"], function (require, exports, _14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('encodeJson', () => {
        let coder;
        beforeEach(() => {
            coder = new _14.RpcCoder();
        });
        it('encodes a valid JsonRPC JSON string', () => {
            expect(coder.encodeJson('method', 'params')).toEqual('{"id":1,"jsonrpc":"2.0","method":"method","params":"params"}');
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/coder/encodeObject.spec", ["require", "exports", "rpc-provider/src/coder/index"], function (require, exports, _15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('encodeObject', () => {
        let coder;
        beforeEach(() => {
            coder = new _15.RpcCoder();
        });
        it('starts with id === 0 (nothing sent)', () => {
            expect(coder.getId()).toEqual(0);
        });
        it('encodes a valid JsonRPC object', () => {
            expect(coder.encodeObject('method', ['a', 'b'])).toEqual({
                id: 1,
                jsonrpc: '2.0',
                method: 'method',
                params: ['a', 'b']
            });
            expect(coder.getId()).toEqual(1);
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/test/mockHttp", ["require", "exports", "nock"], function (require, exports, nock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mockHttp = exports.TEST_HTTP_URL = void 0;
    nock_1 = __importDefault(nock_1);
    const TEST_HTTP_URL = 'http://localhost:9944';
    exports.TEST_HTTP_URL = TEST_HTTP_URL;
    function mockHttp(requests) {
        nock_1.default.cleanAll();
        return requests.reduce((scope, request) => {
            return scope
                .post('/')
                .reply(request.code || 200, (uri, body) => {
                scope.body = scope.body || {};
                scope.body[request.method] = body;
                return Object.assign({ id: body.id, jsonrpc: '2.0' }, request.reply || {});
            });
        }, nock_1.default(TEST_HTTP_URL));
    }
    exports.mockHttp = mockHttp;
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/http/index.spec", ["require", "exports", "rpc-provider/test/mockHttp", "rpc-provider/src/http/index"], function (require, exports, mockHttp_1, _16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Http', () => {
        let http;
        beforeEach(() => {
            http = new _16.HttpProvider(mockHttp_1.TEST_HTTP_URL);
        });
        it('requires an http:// prefixed endpoint', () => {
            expect(() => new _16.HttpProvider('ws://')).toThrow(/with 'http/);
        });
        it('allows https:// endpoints', () => {
            expect(() => new _16.HttpProvider('https://')).not.toThrow();
        });
        it('allows custom headers', () => {
            expect(() => new _16.HttpProvider('https://', { foo: 'bar' })).not.toThrow();
        });
        it('always returns isConnected true', () => {
            expect(http.isConnected).toEqual(true);
        });
        it('does not (yet) support subscribe', () => {
            return http.subscribe('', '', [], (cb) => {
                expect(cb).toEqual(expect.anything());
            }).catch((error) => {
                expect(error.message).toMatch(/does not have subscriptions/);
            });
        });
        it('does not (yet) support unsubscribe', () => {
            return http.unsubscribe('', '', 0).catch((error) => {
                expect(error.message).toMatch(/does not have subscriptions/);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/http/send.spec", ["require", "exports", "rpc-provider/test/mockHttp", "rpc-provider/src/http/index"], function (require, exports, mockHttp_2, _17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('send', () => {
        let http;
        let mock;
        beforeEach(() => {
            http = new _17.HttpProvider(mockHttp_2.TEST_HTTP_URL);
        });
        afterEach(() => {
            if (mock) {
                mock.done();
            }
        });
        it('passes the body through correctly', () => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            mock = mockHttp_2.mockHttp([{
                    method: 'test_body',
                    reply: {
                        result: 'ok'
                    }
                }]);
            return http
                .send('test_body', ['param'])
                .then(() => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                expect(mock.body.test_body).toEqual({
                    id: 1,
                    jsonrpc: '2.0',
                    method: 'test_body',
                    params: ['param']
                });
            });
        });
        it('throws error when !response.ok', () => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            mock = mockHttp_2.mockHttp([{
                    code: 500,
                    method: 'test_error'
                }]);
            return http
                .send('test_error', [])
                .catch((error) => {
                expect(error.message).toMatch(/\[500\]: Internal Server/);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/http/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/mock/on.spec", ["require", "exports", "types/src/create/index", "rpc-provider/src/mock/index"], function (require, exports, create_31, _18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('on', () => {
        const registry = new create_31.TypeRegistry();
        let mock;
        beforeEach(() => {
            mock = new _18.MockProvider(registry);
        });
        it('it emits both connected and disconnected events', (done) => {
            const events = { connected: false, disconnected: false };
            const handler = (type) => {
                mock.on(type, () => {
                    events[type] = true;
                    if (Object.values(events).filter((value) => value).length === 2) {
                        done();
                    }
                });
            };
            handler('connected');
            handler('disconnected');
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/mock/send.spec", ["require", "exports", "types/src/create/index", "rpc-provider/src/mock/index"], function (require, exports, create_32, _19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('send', () => {
        const registry = new create_32.TypeRegistry();
        let mock;
        beforeEach(() => {
            mock = new _19.MockProvider(registry);
        });
        it('fails on non-supported methods', () => {
            return mock
                .send('something_invalid', [])
                .catch((error) => {
                expect(error.message).toMatch(/Invalid method/);
            });
        });
        it('returns values for mocked requests', () => {
            return mock
                .send('system_name', [])
                .then((result) => {
                expect(result).toBe('mockClient');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/mock/subscribe.spec", ["require", "exports", "types/src/create/index", "rpc-provider/src/mock/index"], function (require, exports, create_33, _20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('subscribe', () => {
        const registry = new create_33.TypeRegistry();
        let mock;
        beforeEach(() => {
            mock = new _20.MockProvider(registry);
        });
        it('fails on unknown methods', () => {
            return mock
                .subscribe('test', 'test_notFound')
                .catch((error) => {
                expect(error.message).toMatch(/Invalid method 'test_notFound'/);
            });
        });
        it('returns a subscription id', () => {
            return mock
                .subscribe('chain_newHead', 'chain_subscribeNewHead', () => undefined)
                .then((id) => {
                expect(id).toEqual(1);
            });
        });
        it('calls back with the last known value', (done) => {
            mock.isUpdating = false;
            mock.subscriptions.chain_subscribeNewHead.lastValue = 'testValue';
            return mock.subscribe('chain_newHead', 'chain_subscribeNewHead', (_, value) => {
                expect(value).toEqual('testValue');
                done();
            });
        });
        it('calls back with new headers', (done) => {
            return mock.subscribe('chain_newHead', 'chain_subscribeNewHead', (_, header) => {
                if (header.number === 4) {
                    done();
                }
            });
        });
        it('handles errors withing callbacks gracefully', (done) => {
            let hasThrown = false;
            return mock.subscribe('chain_newHead', 'chain_subscribeNewHead', (_, header) => {
                if (!hasThrown) {
                    hasThrown = true;
                    throw new Error('testing');
                }
                if (header.number === 3) {
                    done();
                }
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/mock/unsubscribe.spec", ["require", "exports", "types/src/create/index", "rpc-provider/src/mock/index"], function (require, exports, create_34, _21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('unsubscribe', () => {
        const registry = new create_34.TypeRegistry();
        let mock;
        let id;
        beforeEach(() => {
            mock = new _21.MockProvider(registry);
            return mock
                .subscribe('chain_newHead', 'chain_subscribeNewHead', () => undefined)
                .then((_id) => {
                id = _id;
            });
        });
        it('fails on unknown ids', () => {
            return mock
                .unsubscribe('chain_newHead', 'chain_subscribeNewHead', 5)
                .catch((error) => {
                expect(error.message).toMatch(/Unable to find/);
                return false;
            });
        });
        it('unsubscribes successfully', () => {
            return mock.unsubscribe('chain_newHead', 'chain_subscribeNewHead', id);
        });
        it('fails on double unsubscribe', () => {
            return mock.unsubscribe('chain_newHead', 'chain_subscribeNewHead', id)
                .then(() => mock.unsubscribe('chain_newHead', 'chain_subscribeNewHead', id))
                .catch((error) => {
                expect(error.message).toMatch(/Unable to find/);
                return false;
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/test/mockWs", ["require", "exports", "mock-socket"], function (require, exports, mock_socket_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mockWs = exports.TEST_WS_URL = void 0;
    const TEST_WS_URL = 'ws://localhost:9955';
    exports.TEST_WS_URL = TEST_WS_URL;
    global.WebSocket = mock_socket_1.WebSocket;
    // should be JSONRPC def return
    function createError({ error: { code, message }, id }) {
        return {
            error: {
                code,
                message
            },
            id,
            jsonrpc: '2.0'
        };
    }
    // should be JSONRPC def return
    function createReply({ id, reply: { result } }) {
        return {
            id,
            jsonrpc: '2.0',
            result
        };
    }
    // scope definition returned
    function mockWs(requests, wsUrl = TEST_WS_URL) {
        const server = new mock_socket_1.Server(wsUrl);
        let requestCount = 0;
        const scope = {
            body: {},
            done: () => {
                server.stop(() => {
                    // ignore
                });
            },
            requests: 0,
            server
        };
        server.on('connection', (socket) => {
            // FIXME This whole any mess is a mess
            socket.on('message', (body) => {
                const request = requests[requestCount];
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
                const response = request.error
                    ? createError(request)
                    : createReply(request);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
                scope.body[request.method] = body;
                requestCount++;
                socket.send(JSON.stringify(response));
            });
        });
        return scope;
    }
    exports.mockWs = mockWs;
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/connect.spec", ["require", "exports", "rpc-provider/test/mockWs", "rpc-provider/src/ws/index"], function (require, exports, mockWs_1, _22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function sleepMs(ms = 0) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    describe('onConnect', () => {
        let mocks;
        beforeEach(() => {
            jest.setTimeout(30000);
            mocks = [mockWs_1.mockWs([])];
        });
        afterEach(() => {
            jest.setTimeout(5000);
            mocks.forEach((m) => {
                if (m) {
                    m.done();
                }
            });
        });
        it('Does not connect when autoConnect is false', () => {
            const provider = new _22.WsProvider(mockWs_1.TEST_WS_URL, 0);
            expect(provider.isConnected).toBe(false);
        });
        it('Does connect when autoConnect is true', async () => {
            const provider = new _22.WsProvider(mockWs_1.TEST_WS_URL, 1);
            await sleepMs(100); // Hack to give the provider time to connect
            expect(provider.isConnected).toBe(true);
        });
        it('Creates a new WebSocket instance by calling the connect() method', async () => {
            const provider = new _22.WsProvider(mockWs_1.TEST_WS_URL, false);
            expect(provider.isConnected).toBe(false);
            expect(mocks[0].server.clients().length).toBe(0);
            await provider.connect();
            await sleepMs(100); // Hack to give the provider time to connect
            expect(provider.isConnected).toBe(true);
            expect(mocks[0].server.clients().length).toBe(1);
        });
        it('Connects to first endpoint when an array is given', async () => {
            const provider = new _22.WsProvider([mockWs_1.TEST_WS_URL], 1);
            await provider.connect();
            await sleepMs(100); // Hack to give the provider time to connect
            expect(provider.isConnected).toBe(true);
        });
        it('Connects to the second endpoint when the first is unreachable', async () => {
            /* eslint-disable @typescript-eslint/no-empty-function */
            jest.spyOn(console, 'error').mockImplementation(() => { });
            const endpoints = ['ws://localhost:9956', mockWs_1.TEST_WS_URL];
            const provider = new _22.WsProvider(endpoints, 1);
            await sleepMs(100); // Hack to give the provider time to connect
            expect(provider.isConnected).toBe(true);
        });
        it('Connects to the second endpoint when the first is dropped', async () => {
            const endpoints = [mockWs_1.TEST_WS_URL, 'ws://localhost:9957'];
            mocks.push(mockWs_1.mockWs([], endpoints[1]));
            const provider = new _22.WsProvider(endpoints, 1);
            await sleepMs(100); // Hack to give the provider time to connect
            // Check that first server is connected
            expect(mocks[0].server.clients().length).toBe(1);
            expect(mocks[1].server.clients().length).toBe(0);
            // Close connection from first server
            mocks[0].server.clients()[0].close();
            await sleepMs(100);
            // Check that second server is connected
            expect(mocks[1].server.clients().length).toBe(1);
            expect(provider.isConnected).toBe(true);
        });
        it('Round-robin of endpoints on WsProvider', async () => {
            const rounds = 5;
            const endpoints = [
                mockWs_1.TEST_WS_URL,
                'ws://localhost:9956',
                'ws://localhost:9957',
                'ws://invalid:9956',
                'ws://localhost:9958'
            ];
            mocks.push(mockWs_1.mockWs([], endpoints[1]));
            mocks.push(mockWs_1.mockWs([], endpoints[2]));
            mocks.push(mockWs_1.mockWs([], endpoints[4]));
            const mockNext = [
                mocks[1],
                mocks[2],
                mocks[3],
                mocks[0]
            ];
            const provider = new _22.WsProvider(endpoints, 1);
            for (let round = 0; round < rounds; round++) {
                for (let index = 0; index < mocks.length; index++) {
                    await sleepMs(100); // Hack to give the provider time to connect
                    // Check that first server is connected and the next one isn't
                    expect(mocks[index].server.clients().length).toBe(1);
                    expect(mockNext[index].server.clients().length).toBe(0);
                    expect(provider.isConnected).toBe(true);
                    // Close connection from first server
                    mocks[index].server.clients()[0].close();
                }
            }
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/index.spec", ["require", "exports", "rpc-provider/test/mockWs", "rpc-provider/src/ws/index"], function (require, exports, mockWs_2, _23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let ws;
    let mock;
    function createWs(requests, autoConnect = 1000) {
        mock = mockWs_2.mockWs(requests);
        ws = new _23.WsProvider(mockWs_2.TEST_WS_URL, autoConnect);
        return ws;
    }
    describe('Ws', () => {
        afterEach(() => {
            if (mock) {
                mock.done();
            }
        });
        it('returns the connected state', () => {
            expect(createWs([]).isConnected).toEqual(false);
        });
        it('allows you to initialize the provider with custom headers', () => {
            expect(() => new _23.WsProvider(mockWs_2.TEST_WS_URL, 1000, { foo: 'bar' })).not.toThrow();
        });
    });
    describe('Endpoint Parsing', () => {
        it('Succeeds when WsProvider endpoint is a valid string', () => {
            /* eslint-disable no-new */
            new _23.WsProvider(mockWs_2.TEST_WS_URL, 0);
        });
        it('Throws when WsProvider endpoint is an invalid string', () => {
            expect(() => {
                /* eslint-disable no-new */
                new _23.WsProvider('http://127.0.0.1:9955', 0);
            }).toThrowError(/^Endpoint should start with /);
        });
        it('Succeeds when WsProvider endpoint is a valid array', () => {
            const endpoints = ['ws://127.0.0.1:9955', 'wss://testnet.io:9944', 'ws://mychain.com:9933'];
            /* eslint-disable no-new */
            new _23.WsProvider(endpoints, 0);
        });
        it('Throws when WsProvider endpoint is an empty array', () => {
            const endpoints = [];
            expect(() => {
                /* eslint-disable no-new */
                new _23.WsProvider(endpoints, 0);
            }).toThrowError('WsProvider requires at least one Endpoint');
        });
        it('Throws when WsProvider endpoint is an invalid array', () => {
            const endpoints = ['ws://127.0.0.1:9955', 'http://bad.co:9944', 'ws://mychain.com:9933'];
            expect(() => {
                /* eslint-disable no-new */
                new _23.WsProvider(endpoints, 0);
            }).toThrowError(/^Endpoint should start with /);
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/send.spec", ["require", "exports", "rpc-provider/test/mockWs", "rpc-provider/src/ws/index"], function (require, exports, mockWs_3, _24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let provider;
    let mock;
    function createMock(requests) {
        mock = mockWs_3.mockWs(requests);
    }
    function createWs(autoConnect = 1000) {
        provider = new _24.WsProvider(mockWs_3.TEST_WS_URL, autoConnect);
        return provider.isReady;
    }
    describe('send', () => {
        let globalWs;
        beforeEach(() => {
            globalWs = global.WebSocket;
        });
        afterEach(() => {
            global.WebSocket = globalWs;
            if (mock) {
                mock.done();
            }
        });
        it('handles internal errors', () => {
            createMock([{
                    id: 1,
                    method: 'test_body',
                    reply: {
                        result: 'ok'
                    }
                }]);
            return createWs().then((ws) => ws
                .send('test_encoding', [{ error: 'send error' }])
                .catch((error) => {
                expect(error.message).toEqual('send error');
            }));
        });
        it('passes the body through correctly', () => {
            createMock([{
                    id: 1,
                    method: 'test_body',
                    reply: {
                        result: 'ok'
                    }
                }]);
            return createWs().then((ws) => ws
                .send('test_body', ['param'])
                .then(() => {
                expect(
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                mock.body.test_body).toEqual('{"id":1,"jsonrpc":"2.0","method":"test_body","params":["param"]}');
            }));
        });
        it('throws error when !response.ok', () => {
            createMock([{
                    error: {
                        code: 666,
                        message: 'error'
                    },
                    id: 1
                }]);
            return createWs().then((ws) => ws
                .send('test_error', [])
                .catch((error) => {
                expect(error.message).toMatch(/666: error/);
            }));
        });
        it('adds subscriptions', () => {
            createMock([{
                    id: 1,
                    method: 'test_sub',
                    reply: {
                        result: 1
                    }
                }]);
            return createWs().then((ws) => ws
                .send('test_sub', [])
                .then((id) => {
                expect(id).toEqual(1);
            }));
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/state.spec", ["require", "exports", "rpc-provider/src/ws/index"], function (require, exports, _25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('state', () => {
        it('requires an ws:// prefixed endpoint', () => {
            expect(() => new _25.WsProvider('http://', 0)).toThrow(/with 'ws/);
        });
        it('allows wss:// endpoints', () => {
            expect(() => new _25.WsProvider('wss://', 0)).not.toThrow();
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/subscribe.spec", ["require", "exports", "rpc-provider/test/mockWs", "rpc-provider/src/ws/index"], function (require, exports, mockWs_4, _26) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let ws;
    let mock;
    function createMock(requests) {
        mock = mockWs_4.mockWs(requests);
    }
    function createWs(autoConnect = 1000) {
        ws = new _26.WsProvider(mockWs_4.TEST_WS_URL, autoConnect);
        return ws.isReady;
    }
    describe('subscribe', () => {
        let globalWs;
        beforeEach(() => {
            globalWs = global.WebSocket;
        });
        afterEach(() => {
            global.WebSocket = globalWs;
            if (mock) {
                mock.done();
            }
        });
        it('adds subscriptions', () => {
            createMock([{
                    id: 1,
                    method: 'test_sub',
                    reply: {
                        result: 1
                    }
                }]);
            return createWs().then((ws) => ws
                .subscribe('type', 'test_sub', [], (cb) => {
                expect(cb).toEqual(expect.anything());
            })
                .then((id) => {
                expect(id).toEqual(1);
            }));
        });
    });
});
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("rpc-provider/src/ws/unsubscribe.spec", ["require", "exports", "rpc-provider/test/mockWs", "rpc-provider/src/ws/index"], function (require, exports, mockWs_5, _27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let ws;
    let mock;
    function createMock(requests) {
        mock = mockWs_5.mockWs(requests);
    }
    function createWs(autoConnect = 1000) {
        ws = new _27.WsProvider(mockWs_5.TEST_WS_URL, autoConnect);
        return ws.isReady;
    }
    describe('subscribe', () => {
        let globalWs;
        beforeEach(() => {
            globalWs = global.WebSocket;
        });
        afterEach(() => {
            global.WebSocket = globalWs;
            if (mock) {
                mock.done();
            }
        });
        it('removes subscriptions', () => {
            createMock([
                {
                    id: 1,
                    method: 'subscribe_test',
                    reply: {
                        result: 1
                    }
                },
                {
                    id: 2,
                    method: 'unsubscribe_test',
                    reply: {
                        result: true
                    }
                }
            ]);
            return createWs().then((ws) => ws
                .subscribe('test', 'subscribe_test', [], (cb) => {
                expect(cb).toEqual(expect.anything());
            })
                .then((id) => {
                return ws.unsubscribe('test', 'subscribe_test', id);
            }));
        });
        it('fails when sub not found', () => {
            createMock([{
                    id: 1,
                    method: 'subscribe_test',
                    reply: {
                        result: 1
                    }
                }]);
            return createWs().then((ws) => ws
                .subscribe('test', 'subscribe_test', [], (cb) => {
                expect(cb).toEqual(expect.anything());
            })
                .then(() => {
                return ws.unsubscribe('test', 'subscribe_test', 111);
            })
                .then((result) => {
                expect(result).toBe(false);
            }));
        });
    });
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/extractChain", ["require", "exports", "process", "yargs", "api/src/index"], function (require, exports, process_1, yargs_1, api_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.main = void 0;
    process_1 = __importDefault(process_1);
    yargs_1 = __importDefault(yargs_1);
    /** @internal */
    async function run(ws) {
        const provider = new api_9.WsProvider(ws);
        const api = await api_9.ApiPromise.create({ provider });
        const [chain, props] = await Promise.all([
            api.rpc.system.chain(),
            api.rpc.system.properties()
        ]);
        // output the chain info, for easy re-use
        console.error(`// Generated via 'yarn run chain:info ${ws}'\n\nexport default {\n  chain: '${chain.toString()}',\n  genesisHash: '${api.genesisHash.toHex()}',\n  specVersion: ${api.runtimeVersion.specVersion.toNumber()},\n  ss58Format: ${props.ss58Format.unwrapOr(42).toString()},\n  tokenDecimals: ${props.tokenDecimals.unwrapOr(0).toString()},\n  tokenSymbol: '${props.tokenSymbol.unwrapOr('UNIT').toString()}',\n  metaCalls: '${Buffer.from(api.runtimeMetadata.asCallsOnly.toU8a()).toString('base64')}'\n};`);
        // show any missing types
        api.runtimeMetadata.getUniqTypes(false);
    }
    function main() {
        // retrieve and parse arguments - we do this globally, since this is a single command
        const { ws } = yargs_1.default
            .usage('Usage: [options]')
            .wrap(120)
            .strict()
            .options({
            ws: {
                default: 'ws://127.0.0.1:9944',
                description: 'The API endpoint to connect to, e.g. wss://kusama-rpc.polkadot.io',
                required: true,
                type: 'string'
            }
        }).argv;
        run(ws)
            .then(() => {
            process_1.default.exit(0);
        })
            .catch((error) => {
            console.error('FATAL:', error.message);
            process_1.default.exit(-1);
        });
    }
    exports.main = main;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/class", ["require", "exports", "types/src/codec/index", "@polkadot/util"], function (require, exports, codec_6, util_220) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCompactEncodable = void 0;
    /** @internal */
    function isCompactEncodable(Child) {
        return util_220.isChildClass(codec_6.UInt, Child);
    }
    exports.isCompactEncodable = isCompactEncodable;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/file", ["require", "exports", "fs", "path"], function (require, exports, fs_3, path_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readTemplate = exports.writeFile = void 0;
    fs_3 = __importDefault(fs_3);
    path_3 = __importDefault(path_3);
    function writeFile(dest, generator, noLog) {
        !noLog && console.log(`${dest}\n\tGenerating`);
        let generated = generator();
        while (generated.includes('\n\n\n')) {
            generated = generated.replace(/\n\n\n/g, '\n\n');
        }
        !noLog && console.log('\tWriting');
        fs_3.default.writeFileSync(dest, generated, { flag: 'w' });
        !noLog && console.log('');
    }
    exports.writeFile = writeFile;
    function readTemplate(template) {
        return fs_3.default.readFileSync(path_3.default.join(__dirname, `../templates/${template}.hbs`)).toString();
    }
    exports.readTemplate = readTemplate;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/imports", ["require", "exports", "types/src/codec/index", "types/src/create/index", "types/src/create/types", "types/src/extrinsic/index", "types/src/generic/index", "types/src/primitive/index"], function (require, exports, codecClasses, create_35, types_119, extrinsicClasses, genericClasses, primitiveClasses) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createImports = exports.setImports = void 0;
    codecClasses = __importStar(codecClasses);
    extrinsicClasses = __importStar(extrinsicClasses);
    genericClasses = __importStar(genericClasses);
    primitiveClasses = __importStar(primitiveClasses);
    // Maps the types as found to the source location. This is used to generate the
    // imports in the output file, dep-duped and sorted
    /** @internal */
    function setImports(allDefs, imports, types) {
        const { codecTypes, extrinsicTypes, genericTypes, ignoredTypes, localTypes, metadataTypes, primitiveTypes, typesTypes } = imports;
        types.forEach((type) => {
            if (ignoredTypes.includes(type)) {
                // do nothing
            }
            else if (['AnyNumber', 'CallFunction', 'Codec', 'IExtrinsic', 'ITuple'].includes(type)) {
                typesTypes[type] = true;
            }
            else if (type === 'Metadata') {
                metadataTypes[type] = true;
            }
            else if (codecClasses[type]) {
                codecTypes[type] = true;
            }
            else if (extrinsicClasses[type]) {
                extrinsicTypes[type] = true;
            }
            else if (genericClasses[type]) {
                genericTypes[type] = true;
            }
            else if (primitiveClasses[type]) {
                primitiveTypes[type] = true;
            }
            else if (type.includes('<') || type.includes('(') || (type.includes('[') && !type.includes('|'))) {
                // If the type is a bit special (tuple, fixed u8, nested type...), then we
                // need to parse it with `getTypeDef`. We skip the case where type ~ [a | b | c ... , ... , ... w | y | z ]
                // since that represents a tuple's similar types, which are covered in the next block
                const typeDef = create_35.getTypeDef(type);
                setImports(allDefs, imports, [types_119.TypeDefInfo[typeDef.info]]);
                // TypeDef.sub is a `TypeDef | TypeDef[]`
                if (Array.isArray(typeDef.sub)) {
                    typeDef.sub.forEach((subType) => setImports(allDefs, imports, [subType.type]));
                }
                else if (typeDef.sub && (typeDef.info !== types_119.TypeDefInfo.VecFixed || typeDef.sub.type !== 'u8')) {
                    // typeDef.sub is a TypeDef in this case
                    setImports(allDefs, imports, [typeDef.sub.type]);
                }
            }
            else if (type.includes('[') && type.includes('|')) {
                // We split the types
                const splitTypes = /\[\s?(.+?)\s?\]/.exec(type)[1].split(/\s?\|\s?/);
                setImports(allDefs, imports, splitTypes);
            }
            else {
                // find this module inside the exports from the rest
                const [moduleName] = Object.entries(allDefs).find(([, { types }]) => Object.keys(types).includes(type)) || [null];
                if (moduleName) {
                    localTypes[moduleName][type] = true;
                }
            }
        });
    }
    exports.setImports = setImports;
    // Create an Imports object, can be pre-filled with `ignoredTypes`
    /** @internal */
    function createImports(importDefinitions, { types } = { types: {} }) {
        const definitions = {};
        const typeToModule = {};
        Object.entries(importDefinitions).forEach(([packagePath, packageDef]) => {
            Object.entries(packageDef).forEach(([name, moduleDef]) => {
                const fullName = `${packagePath}/${name}`;
                definitions[fullName] = moduleDef;
                Object.keys(moduleDef.types).forEach((type) => {
                    if (typeToModule[type]) {
                        console.warn(`\t\tWARN: Overwriting duplicated type '${type}' ${typeToModule[type]} -> ${fullName}`);
                    }
                    typeToModule[type] = fullName;
                });
            });
        });
        return {
            codecTypes: {},
            definitions,
            extrinsicTypes: {},
            genericTypes: {},
            ignoredTypes: Object.keys(types),
            localTypes: Object.keys(definitions).reduce((local, mod) => {
                local[mod] = {};
                return local;
            }, {}),
            metadataTypes: {},
            primitiveTypes: {},
            typeToModule,
            typesTypes: {}
        };
    }
    exports.createImports = createImports;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/formatting", ["require", "exports", "handlebars", "types/src/create/index", "types/src/create/types", "@polkadot/util", "typegen/src/util/file", "typegen/src/util/imports"], function (require, exports, handlebars_1, create_36, types_120, util_221, file_1, imports_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatType = exports.exportType = exports.exportInterface = exports.HEADER = void 0;
    handlebars_1 = __importDefault(handlebars_1);
    const NO_CODEC = ['Tuple', 'VecFixed'];
    exports.HEADER = (type) => `// Auto-generated via \`yarn polkadot-types-from-${type}\`, do not edit\n/* eslint-disable */\n\n`;
    handlebars_1.default.registerPartial({
        footer: handlebars_1.default.compile(file_1.readTemplate('footer')),
        header: handlebars_1.default.compile(file_1.readTemplate('header'))
    });
    handlebars_1.default.registerHelper({
        imports() {
            const { imports, types } = this;
            const defs = [
                {
                    file: '@polkadot/metadata',
                    types: Object.keys(imports.metadataTypes)
                },
                {
                    file: '@polkadot/types',
                    types: [
                        ...Object.keys(imports.codecTypes).filter((name) => !NO_CODEC.includes(name)),
                        ...Object.keys(imports.extrinsicTypes),
                        ...Object.keys(imports.genericTypes),
                        ...Object.keys(imports.primitiveTypes)
                    ]
                },
                {
                    file: '@polkadot/types/types',
                    types: Object.keys(imports.typesTypes)
                },
                ...types
            ];
            return defs.reduce((result, { file, types }) => {
                return types.length
                    ? `${result}import type { ${types.sort().join(', ')} } from '${file}';\n`
                    : result;
            }, '');
        },
        trim(options) {
            return options.fn(this).trim();
        },
        upper(options) {
            return options.fn(this).toUpperCase();
        }
    });
    // helper to generate a `export interface <Name> extends <Base> {<Body>}
    /** @internal */
    function exportInterface(name = '', base, body = '') {
        // * @description extends [[${base}]]
        const doc = `/** @name ${name} */\n`;
        return `${doc}export interface ${name} extends ${base} {${body.length ? '\n' : ''}${body}}`;
    }
    exports.exportInterface = exportInterface;
    // helper to create an `export type <Name> = <Base>`
    // but since we don't want type alias (TS doesn't preserve names) we use
    // interface here.
    /** @internal */
    function exportType(name = '', base) {
        return exportInterface(name, base);
    }
    exports.exportType = exportType;
    /**
     * Given the inner `K` & `V`, return a `BTreeMap<K, V>`  string
     */
    /** @internal */
    function formatBTreeMap(key, val) {
        return `BTreeMap<${key}, ${val}>`;
    }
    /**
     * Given the inner `V`, return a `BTreeSet<V>`  string
     */
    /** @internal */
    function formatBTreeSet(val) {
        return `BTreeSet<${val}>`;
    }
    /**
     * Given the inner `T`, return a `Compact<T>` string
     */
    /** @internal */
    function formatCompact(inner) {
        return create_36.paramsNotation('Compact', inner);
    }
    /**
     * Simple return
     */
    /** @internal */
    function formatDoNoConstruct() {
        return 'DoNotConstruct';
    }
    /**
     * Given the inner `K` & `V`, return a `BTreeMap<K, V>`  string
     */
    /** @internal */
    function formatHashMap(key, val) {
        return `HashMap<${key}, ${val}>`;
    }
    /**
     * Given the inner `T`, return a `Vec<T>` string
     */
    /** @internal */
    function formatLinkage(inner) {
        return create_36.paramsNotation('Linkage', inner);
    }
    /**
     * Given the inner `O` & `E`, return a `Result<O, E>`  string
     */
    /** @internal */
    function formatResult(innerOk, innerError) {
        return `Result<${innerOk}, ${innerError}>`;
    }
    /**
     * Given the inner `T`, return a `Option<T>` string
     */
    /** @internal */
    function formatOption(inner) {
        return create_36.paramsNotation('Option', inner);
    }
    /**
     * Given the inners `T[]`, return a `ITuple<...T>` string
     */
    /** @internal */
    function formatTuple(inners) {
        return create_36.paramsNotation('ITuple', `[${inners.join(', ')}]`);
    }
    /**
     * Given the inner `T`, return a `Vec<T>` string
     */
    /** @internal */
    function formatVec(inner) {
        return create_36.paramsNotation('Vec', inner);
    }
    /**
     * Correctly format a given type
     */
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/ban-types
    function formatType(definitions, type, imports) {
        let typeDef;
        if (util_221.isString(type)) {
            const _type = type.toString();
            // If type is "unorthodox" (i.e. `{ something: any }` for an Enum input or `[a | b | c, d | e | f]` for a Tuple's similar types),
            // we return it as-is
            if (/(^{.+:.+})|^\([^,]+\)|^\(.+\)\[\]|^\[.+\]/.exec(_type) && !/\[\w+;\w+\]/.exec(_type)) {
                return _type;
            }
            typeDef = create_36.getTypeDef(type);
        }
        else {
            typeDef = type;
        }
        imports_1.setImports(definitions, imports, [typeDef.type]);
        // FIXME Swap to Record<TypeDefInfo, fn> to check all types
        switch (typeDef.info) {
            case types_120.TypeDefInfo.Compact: {
                imports_1.setImports(definitions, imports, ['Compact']);
                return formatCompact(formatType(definitions, typeDef.sub.type, imports));
            }
            case types_120.TypeDefInfo.DoNotConstruct: {
                imports_1.setImports(definitions, imports, ['DoNotConstruct']);
                return formatDoNoConstruct();
            }
            case types_120.TypeDefInfo.Option: {
                imports_1.setImports(definitions, imports, ['Option']);
                return formatOption(formatType(definitions, typeDef.sub.type, imports));
            }
            case types_120.TypeDefInfo.Plain: {
                return typeDef.type;
            }
            case types_120.TypeDefInfo.Vec: {
                imports_1.setImports(definitions, imports, ['Vec']);
                return formatVec(formatType(definitions, typeDef.sub.type, imports));
            }
            case types_120.TypeDefInfo.Tuple: {
                imports_1.setImports(definitions, imports, ['ITuple']);
                // `(a,b)` gets transformed into `ITuple<[a, b]>`
                return formatTuple((typeDef.sub.map((sub) => formatType(definitions, sub.type, imports))));
            }
            case types_120.TypeDefInfo.VecFixed: {
                const type = typeDef.sub.type;
                if (type === 'u8') {
                    imports_1.setImports(definitions, imports, ['U8aFixed']);
                    return 'U8aFixed';
                }
                imports_1.setImports(definitions, imports, ['Vec']);
                return formatVec(formatType(definitions, type, imports));
            }
            case types_120.TypeDefInfo.BTreeMap: {
                imports_1.setImports(definitions, imports, ['BTreeMap']);
                const [keyDef, valDef] = typeDef.sub;
                return formatBTreeMap(formatType(definitions, keyDef.type, imports), formatType(definitions, valDef.type, imports));
            }
            case types_120.TypeDefInfo.BTreeSet: {
                imports_1.setImports(definitions, imports, ['BTreeSet']);
                const valDef = typeDef.sub;
                return formatBTreeSet(formatType(definitions, valDef.type, imports));
            }
            case types_120.TypeDefInfo.HashMap: {
                imports_1.setImports(definitions, imports, ['HashMap']);
                const [keyDef, valDef] = typeDef.sub;
                return formatHashMap(formatType(definitions, keyDef.type, imports), formatType(definitions, valDef.type, imports));
            }
            case types_120.TypeDefInfo.Linkage: {
                const type = typeDef.sub.type;
                imports_1.setImports(definitions, imports, ['Linkage']);
                return formatLinkage(formatType(definitions, type, imports));
            }
            case types_120.TypeDefInfo.Result: {
                imports_1.setImports(definitions, imports, ['Result']);
                const [okDef, errorDef] = typeDef.sub;
                return formatResult(formatType(definitions, okDef.type, imports), formatType(definitions, errorDef.type, imports));
            }
            default: {
                throw new Error(`Cannot format ${JSON.stringify(type)}`);
            }
        }
    }
    exports.formatType = formatType;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/derived", ["require", "exports", "types/src/codec/index", "types/src/codec/AbstractInt", "types/src/create/index", "types/src/create/types", "types/src/generic/index", "types/src/interfaces/democracy/definitions", "types/src/primitive/index", "types/src/primitive/index", "@polkadot/util", "typegen/src/util/class", "typegen/src/util/formatting", "typegen/src/util/imports"], function (require, exports, codec_7, AbstractInt_3, create_37, types_121, generic_2, definitions_52, primitive_4, primitiveClasses, util_222, class_1, formatting_1, imports_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSimilarTypes = exports.getDerivedTypes = void 0;
    primitiveClasses = __importStar(primitiveClasses);
    function arrayToStrType(arr) {
        return `${arr.map((c) => `'${c}'`).join(' | ')}`;
    }
    const voteConvictions = arrayToStrType(definitions_52.AllConvictions);
    // From `T`, generate `Compact<T>, Option<T>, Vec<T>`
    /** @internal */
    function getDerivedTypes(registry, definitions, type, primitiveName, imports) {
        // `primitiveName` represents the actual primitive type our type is mapped to
        const isCompact = class_1.isCompactEncodable(primitiveClasses[primitiveName] || create_37.ClassOfUnsafe(registry, type));
        const def = create_37.getTypeDef(type);
        imports_2.setImports(definitions, imports, ['Option', 'Vec', isCompact ? 'Compact' : '']);
        const types = [
            {
                info: types_121.TypeDefInfo.Option,
                sub: def,
                type
            },
            {
                info: types_121.TypeDefInfo.Vec,
                sub: def,
                type
            }
        ];
        if (isCompact) {
            types.unshift({
                info: types_121.TypeDefInfo.Compact,
                sub: def,
                type
            });
        }
        const result = types.map((t) => formatting_1.formatType(definitions, t, imports)).map((t) => `'${t}': ${t};`);
        result.unshift(`${type}: ${type};`);
        return result;
    }
    exports.getDerivedTypes = getDerivedTypes;
    // Make types a little bit more flexible
    // - if param instanceof AbstractInt, then param: u64 | Uint8array | AnyNumber
    // etc
    /** @internal */
    function getSimilarTypes(registry, definitions, _type, imports) {
        const typeParts = _type.split('::');
        const type = typeParts[typeParts.length - 1];
        const possibleTypes = [formatting_1.formatType(definitions, type, imports)];
        if (type === 'Extrinsic') {
            imports_2.setImports(definitions, imports, ['IExtrinsic']);
            return ['IExtrinsic'];
        }
        else if (type === 'StorageKey') {
            // TODO We can do better
            return ['StorageKey', 'string', 'Uint8Array', 'any'];
        }
        else if (type === '()') {
            return ['null'];
        }
        const Clazz = create_37.ClassOfUnsafe(registry, type);
        if (util_222.isChildClass(codec_7.Vec, Clazz)) {
            const vecDef = create_37.getTypeDef(type);
            const subDef = (vecDef.sub);
            // this could be that we define a Vec type and refer to it by name
            if (subDef) {
                if (subDef.info === types_121.TypeDefInfo.Plain) {
                    possibleTypes.push(`(${getSimilarTypes(registry, definitions, subDef.type, imports).join(' | ')})[]`);
                }
                else if (subDef.info === types_121.TypeDefInfo.Tuple) {
                    const subs = subDef.sub.map(({ type }) => getSimilarTypes(registry, definitions, type, imports).join(' | '));
                    possibleTypes.push(`([${subs.join(', ')}])[]`);
                }
                else {
                    throw new Error(`Unhandled subtype in Vec, ${JSON.stringify(subDef)}`);
                }
            }
        }
        else if (util_222.isChildClass(codec_7.Enum, Clazz)) {
            const e = new Clazz(registry);
            if (e.isBasic) {
                possibleTypes.push(arrayToStrType(e.defKeys), 'number');
            }
            else {
                // TODO We don't really want any here, these should be expanded
                possibleTypes.push(...e.defKeys.map((key) => `{ ${key}: any }`), 'string');
            }
            possibleTypes.push('Uint8Array');
        }
        else if (util_222.isChildClass(AbstractInt_3.AbstractInt, Clazz) || util_222.isChildClass(codec_7.Compact, Clazz)) {
            possibleTypes.push('AnyNumber', 'Uint8Array');
        }
        else if (util_222.isChildClass(generic_2.GenericLookupSource, Clazz)) {
            possibleTypes.push('Address', 'AccountId', 'AccountIndex', 'LookupSource', 'string', 'Uint8Array');
        }
        else if (util_222.isChildClass(generic_2.GenericAccountId, Clazz)) {
            possibleTypes.push('string', 'Uint8Array');
        }
        else if (util_222.isChildClass(registry.createClass('bool'), Clazz)) {
            possibleTypes.push('boolean', 'Uint8Array');
        }
        else if (util_222.isChildClass(primitive_4.Null, Clazz)) {
            possibleTypes.push('null');
        }
        else if (util_222.isChildClass(codec_7.Struct, Clazz)) {
            const s = new Clazz(registry);
            const obj = s.defKeys.map((key) => `${key}?: any`).join('; ');
            possibleTypes.push(`{ ${obj} }`, 'string', 'Uint8Array');
        }
        else if (util_222.isChildClass(codec_7.Option, Clazz)) {
            // TODO inspect container
            possibleTypes.push('null', 'object', 'string', 'Uint8Array');
        }
        else if (util_222.isChildClass(generic_2.GenericVote, Clazz)) {
            possibleTypes.push(`{ aye: boolean; conviction?: ${voteConvictions} | number }`, 'boolean', 'string', 'Uint8Array');
        }
        else if (util_222.isChildClass(Uint8Array, Clazz)) {
            possibleTypes.push('string', 'Uint8Array');
        }
        else if (util_222.isChildClass(String, Clazz)) {
            possibleTypes.push('string');
        }
        else if (util_222.isChildClass(codec_7.Tuple, Clazz)) {
            const tupDef = create_37.getTypeDef(type);
            const subDef = tupDef.sub;
            // this could be that we define a Tuple type and refer to it by name
            if (Array.isArray(subDef)) {
                const subs = subDef.map(({ type }) => getSimilarTypes(registry, definitions, type, imports).join(' | '));
                possibleTypes.push(`[${subs.join(', ')}]`);
            }
        }
        return [...new Set(possibleTypes)];
    }
    exports.getSimilarTypes = getSimilarTypes;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/docs", ["require", "exports", "handlebars", "typegen/src/util/file"], function (require, exports, handlebars_2, file_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    handlebars_2 = __importDefault(handlebars_2);
    handlebars_2.default.registerPartial({
        docs: handlebars_2.default.compile(file_2.readTemplate('docs'))
    });
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/register", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.registerDefinitions = void 0;
    function registerDefinitions(registry, extras) {
        Object.values(extras).forEach((def) => {
            Object.values(def).forEach(({ types }) => {
                registry.register(types);
            });
        });
    }
    exports.registerDefinitions = registerDefinitions;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/index", ["require", "exports", "typegen/src/util/derived", "typegen/src/util/docs", "typegen/src/util/file", "typegen/src/util/formatting", "typegen/src/util/imports", "typegen/src/util/register"], function (require, exports, derived_1, docs_1, file_3, formatting_2, imports_3, register_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compareName = void 0;
    __exportStar(derived_1, exports);
    __exportStar(docs_1, exports);
    __exportStar(file_3, exports);
    __exportStar(formatting_2, exports);
    __exportStar(imports_3, exports);
    __exportStar(register_1, exports);
    exports.compareName = (a, b) => a.name.toString().localeCompare(b.name.toString());
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/consts", ["require", "exports", "handlebars", "metadata/src/Metadata", "metadata/src/static", "types/src/create/index", "types/src/interfaces/definitions", "@polkadot/util", "typegen/src/util/index"], function (require, exports, handlebars_3, Metadata_10, static_16, create_38, defaultDefs, util_223, util_224) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultConsts = void 0;
    handlebars_3 = __importDefault(handlebars_3);
    static_16 = __importDefault(static_16);
    defaultDefs = __importStar(defaultDefs);
    const template = util_224.readTemplate('consts');
    const generateForMetaTemplate = handlebars_3.default.compile(template);
    /** @internal */
    function generateForMeta(meta, dest, extraTypes, isStrict) {
        util_224.writeFile(dest, () => {
            const allTypes = { '@polkadot/types/interfaces': defaultDefs, ...extraTypes };
            const imports = util_224.createImports(allTypes);
            const allDefs = Object.entries(allTypes).reduce((defs, [path, obj]) => {
                return Object.entries(obj).reduce((defs, [key, value]) => ({ ...defs, [`${path}/${key}`]: value }), defs);
            }, {});
            const modules = meta.asLatest.modules
                .sort(util_224.compareName)
                .filter((mod) => mod.constants.length > 0)
                .map(({ constants, name }) => {
                if (!isStrict) {
                    util_224.setImports(allDefs, imports, ['Codec']);
                }
                const items = constants
                    .sort(util_224.compareName)
                    .map(({ documentation, name, type }) => {
                    const returnType = util_224.formatType(allDefs, type.toString(), imports);
                    util_224.setImports(allDefs, imports, [returnType]);
                    return {
                        docs: documentation,
                        name: util_223.stringCamelCase(name),
                        type: returnType
                    };
                });
                return {
                    items,
                    name: util_223.stringCamelCase(name)
                };
            });
            const types = [
                ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                    file: packagePath,
                    types: Object.keys(imports.localTypes[packagePath])
                })),
                {
                    file: '@polkadot/api/types',
                    types: ['ApiTypes']
                }
            ];
            return generateForMetaTemplate({
                headerType: 'chain',
                imports,
                isStrict,
                modules,
                types
            });
        });
    }
    // Call `generateForMeta()` with current static metadata
    /** @internal */
    function generateDefaultConsts(dest = 'packages/api/src/augment/consts.ts', data = static_16.default, extraTypes = {}, isStrict = false) {
        const registry = new create_38.TypeRegistry();
        util_224.registerDefinitions(registry, extraTypes);
        const metadata = new Metadata_10.Metadata(registry, data);
        registry.setMetadata(metadata);
        return generateForMeta(metadata, dest, extraTypes, isStrict);
    }
    exports.generateDefaultConsts = generateDefaultConsts;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/errors", ["require", "exports", "handlebars", "metadata/src/Metadata", "metadata/src/static", "types/src/create/index", "@polkadot/util", "typegen/src/util/index"], function (require, exports, handlebars_4, Metadata_11, static_17, create_39, util_225, util_226) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultErrors = void 0;
    handlebars_4 = __importDefault(handlebars_4);
    static_17 = __importDefault(static_17);
    const template = util_226.readTemplate('errors');
    const generateForMetaTemplate = handlebars_4.default.compile(template);
    /** @internal */
    function generateForMeta(meta, dest, isStrict) {
        util_226.writeFile(dest, () => {
            const imports = util_226.createImports({});
            const modules = meta.asLatest.modules
                .sort(util_226.compareName)
                .filter((mod) => mod.errors.length > 0)
                .map(({ errors, name }) => ({
                items: errors
                    .sort(util_226.compareName)
                    .map(({ documentation, name }) => ({
                    docs: documentation,
                    name: name.toString()
                })),
                name: util_225.stringCamelCase(name)
            }));
            const types = [
                {
                    file: '@polkadot/api/types',
                    types: ['ApiTypes']
                }
            ];
            return generateForMetaTemplate({
                headerType: 'chain',
                imports,
                isStrict,
                modules,
                types
            });
        });
    }
    // Call `generateForMeta()` with current static metadata
    /** @internal */
    function generateDefaultErrors(dest = 'packages/api/src/augment/errors.ts', data = static_17.default, isStrict = false) {
        const registry = new create_39.TypeRegistry();
        const metadata = new Metadata_11.Metadata(registry, data);
        registry.setMetadata(metadata);
        return generateForMeta(metadata, dest, isStrict);
    }
    exports.generateDefaultErrors = generateDefaultErrors;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/events", ["require", "exports", "handlebars", "metadata/src/Metadata", "metadata/src/static", "types/src/create/index", "types/src/interfaces/definitions", "@polkadot/util", "typegen/src/util/index"], function (require, exports, handlebars_5, Metadata_12, static_18, create_40, defaultDefs, util_227, util_228) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultEvents = void 0;
    handlebars_5 = __importDefault(handlebars_5);
    static_18 = __importDefault(static_18);
    defaultDefs = __importStar(defaultDefs);
    const template = util_228.readTemplate('events');
    const generateForMetaTemplate = handlebars_5.default.compile(template);
    /** @internal */
    function generateForMeta(meta, dest, extraTypes, isStrict) {
        util_228.writeFile(dest, () => {
            const allTypes = { '@polkadot/types/interfaces': defaultDefs, ...extraTypes };
            const imports = util_228.createImports(allTypes);
            const allDefs = Object.entries(allTypes).reduce((defs, [path, obj]) => {
                return Object.entries(obj).reduce((defs, [key, value]) => ({ ...defs, [`${path}/${key}`]: value }), defs);
            }, {});
            const modules = meta.asLatest.modules
                .sort(util_228.compareName)
                .filter((mod) => mod.events.isSome)
                .map(({ events, name }) => ({
                items: events
                    .unwrap()
                    .sort(util_228.compareName)
                    .map(({ args, documentation, name }) => {
                    const types = args.map((type) => util_228.formatType(allDefs, type.toString(), imports));
                    util_228.setImports(allDefs, imports, types);
                    return {
                        docs: documentation,
                        name: name.toString(),
                        type: types.join(', ')
                    };
                }),
                name: util_227.stringCamelCase(name)
            }));
            const types = [
                ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                    file: packagePath,
                    types: Object.keys(imports.localTypes[packagePath])
                })),
                {
                    file: '@polkadot/api/types',
                    types: ['ApiTypes']
                }
            ];
            return generateForMetaTemplate({
                headerType: 'chain',
                imports,
                isStrict,
                modules,
                types
            });
        });
    }
    // Call `generateForMeta()` with current static metadata
    /** @internal */
    function generateDefaultEvents(dest = 'packages/api/src/augment/events.ts', data = static_18.default, extraTypes = {}, isStrict = false) {
        const registry = new create_40.TypeRegistry();
        util_228.registerDefinitions(registry, extraTypes);
        const metadata = new Metadata_12.Metadata(registry, data);
        registry.setMetadata(metadata);
        return generateForMeta(metadata, dest, extraTypes, isStrict);
    }
    exports.generateDefaultEvents = generateDefaultEvents;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/interfaceRegistry", ["require", "exports", "handlebars", "types/src/codec/index", "types/src/create/index", "types/src/interfaces/definitions", "types/src/primitive/index", "typegen/src/util/index"], function (require, exports, handlebars_6, codec_8, create_41, defaultDefinitions, defaultPrimitives, util_229) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultInterface = exports.generateInterfaceTypes = void 0;
    handlebars_6 = __importDefault(handlebars_6);
    defaultDefinitions = __importStar(defaultDefinitions);
    defaultPrimitives = __importStar(defaultPrimitives);
    const primitiveClasses = {
        ...defaultPrimitives,
        Json: codec_8.Json,
        Raw: codec_8.Raw
    };
    const template = util_229.readTemplate('interfaceRegistry');
    const generateInterfaceTypesTemplate = handlebars_6.default.compile(template);
    /** @internal */
    function generateInterfaceTypes(importDefinitions, dest) {
        const registry = new create_41.TypeRegistry();
        util_229.writeFile(dest, () => {
            Object.entries(importDefinitions).reduce((acc, def) => Object.assign(acc, def), {});
            const imports = util_229.createImports(importDefinitions);
            const definitions = imports.definitions;
            const items = [];
            // first we create imports for our known classes from the API
            Object
                .keys(primitiveClasses)
                .filter((name) => !name.includes('Generic'))
                .forEach((primitiveName) => {
                util_229.setImports(definitions, imports, [primitiveName]);
                items.push(...util_229.getDerivedTypes(registry, definitions, primitiveName, primitiveName, imports));
            });
            const existingTypes = {};
            // ensure we have everything registered since we will get the definition
            // form the available types (so any unknown should show after this)
            Object.values(definitions).forEach(({ types }) => {
                registry.register(types);
            });
            // create imports for everything that we have available
            Object.values(definitions).forEach(({ types }) => {
                util_229.setImports(definitions, imports, Object.keys(types));
                const uniqueTypes = Object.keys(types).filter((type) => !existingTypes[type]);
                uniqueTypes.forEach((type) => {
                    existingTypes[type] = true;
                    items.push(...util_229.getDerivedTypes(registry, definitions, type, types[type], imports));
                });
            });
            const types = [
                ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                    file: packagePath,
                    types: Object.keys(imports.localTypes[packagePath])
                }))
            ];
            return generateInterfaceTypesTemplate({
                headerType: 'defs',
                imports,
                items,
                types
            });
        });
    }
    exports.generateInterfaceTypes = generateInterfaceTypes;
    // Generate `packages/types/src/interfaceRegistry.ts`, the registry of all interfaces
    function generateDefaultInterface() {
        generateInterfaceTypes({ '@polkadot/types/interfaces': defaultDefinitions }, 'packages/types/src/augment/registry.ts');
    }
    exports.generateDefaultInterface = generateDefaultInterface;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/query", ["require", "exports", "handlebars", "metadata/src/Metadata", "metadata/src/static", "types/src/create/index", "types/src/interfaces/definitions", "types/src/primitive/StorageKey", "@polkadot/util", "typegen/src/util/index"], function (require, exports, handlebars_7, Metadata_13, static_19, create_42, defaultDefs, StorageKey_4, util_230, util_231) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultQuery = void 0;
    handlebars_7 = __importDefault(handlebars_7);
    static_19 = __importDefault(static_19);
    defaultDefs = __importStar(defaultDefs);
    // From a storage entry metadata, we return [args, returnType]
    /** @internal */
    function entrySignature(allDefs, registry, storageEntry, imports) {
        const outputType = StorageKey_4.unwrapStorageType(storageEntry.type, storageEntry.modifier.isOptional);
        if (storageEntry.type.isPlain) {
            util_231.setImports(allDefs, imports, [storageEntry.type.asPlain.toString()]);
            return ['', '', util_231.formatType(allDefs, outputType, imports)];
        }
        else if (storageEntry.type.isMap) {
            // Find similar types of the `key` type
            const similarTypes = util_231.getSimilarTypes(registry, allDefs, storageEntry.type.asMap.key.toString(), imports);
            util_231.setImports(allDefs, imports, [
                ...similarTypes,
                storageEntry.type.asMap.value.toString()
            ]);
            return [
                util_231.formatType(allDefs, storageEntry.type.asMap.key.toString(), imports),
                `arg: ${similarTypes.join(' | ')}`,
                util_231.formatType(allDefs, outputType, imports)
            ];
        }
        else if (storageEntry.type.isDoubleMap) {
            // Find similar types of `key1` and `key2` types
            const similarTypes1 = util_231.getSimilarTypes(registry, allDefs, storageEntry.type.asDoubleMap.key1.toString(), imports);
            const similarTypes2 = util_231.getSimilarTypes(registry, allDefs, storageEntry.type.asDoubleMap.key2.toString(), imports);
            util_231.setImports(allDefs, imports, [
                ...similarTypes1,
                ...similarTypes2,
                storageEntry.type.asDoubleMap.value.toString()
            ]);
            const key1Types = similarTypes1.join(' | ');
            const key2Types = similarTypes2.join(' | ');
            return [
                [util_231.formatType(allDefs, storageEntry.type.asDoubleMap.key1.toString(), imports), util_231.formatType(allDefs, storageEntry.type.asDoubleMap.key2.toString(), imports)].join(', '),
                `key1: ${key1Types}, key2: ${key2Types}`,
                util_231.formatType(allDefs, outputType, imports)
            ];
        }
        throw new Error(`entryArgs: Cannot parse args of entry ${storageEntry.name.toString()}`);
    }
    const template = util_231.readTemplate('query');
    const generateForMetaTemplate = handlebars_7.default.compile(template);
    /** @internal */
    function generateForMeta(registry, meta, dest, extraTypes, isStrict) {
        util_231.writeFile(dest, () => {
            const allTypes = { '@polkadot/types/interfaces': defaultDefs, ...extraTypes };
            const imports = util_231.createImports(allTypes);
            const allDefs = Object.entries(allTypes).reduce((defs, [path, obj]) => {
                return Object.entries(obj).reduce((defs, [key, value]) => ({ ...defs, [`${path}/${key}`]: value }), defs);
            }, {});
            const modules = meta.asLatest.modules
                .sort(util_231.compareName)
                .filter((mod) => !mod.storage.isNone)
                .map(({ name, storage }) => {
                const items = storage.unwrap().items
                    .sort(util_231.compareName)
                    .map((storageEntry) => {
                    const [args, params, returnType] = entrySignature(allDefs, registry, storageEntry, imports);
                    let entryType = 'AugmentedQuery';
                    if (storageEntry.type.isDoubleMap) {
                        entryType = `${entryType}DoubleMap`;
                    }
                    return {
                        args,
                        docs: storageEntry.documentation,
                        entryType,
                        name: util_230.stringCamelCase(storageEntry.name),
                        params,
                        returnType
                    };
                });
                return {
                    items,
                    name: util_230.stringCamelCase(name)
                };
            });
            imports.typesTypes.Observable = true;
            const types = [
                ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                    file: packagePath,
                    types: Object.keys(imports.localTypes[packagePath])
                })),
                {
                    file: '@polkadot/api/types',
                    types: ['ApiTypes']
                }
            ];
            return generateForMetaTemplate({
                headerType: 'chain',
                imports,
                isStrict,
                modules,
                types
            });
        });
    }
    // Call `generateForMeta()` with current static metadata
    /** @internal */
    function generateDefaultQuery(dest = 'packages/api/src/augment/query.ts', data = static_19.default, extraTypes = {}, isStrict = false) {
        const registry = new create_42.TypeRegistry();
        util_231.registerDefinitions(registry, extraTypes);
        const metadata = new Metadata_13.Metadata(registry, data);
        registry.setMetadata(metadata);
        return generateForMeta(registry, metadata, dest, extraTypes, isStrict);
    }
    exports.generateDefaultQuery = generateDefaultQuery;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/rpc", ["require", "exports", "handlebars", "types/src/create/index", "types/src/interfaces/definitions", "typegen/src/util/index"], function (require, exports, handlebars_8, create_43, defaultDefinitions, util_232) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultRpc = exports.generateRpcTypes = void 0;
    handlebars_8 = __importDefault(handlebars_8);
    defaultDefinitions = __importStar(defaultDefinitions);
    const StorageKeyTye = 'StorageKey | string | Uint8Array | any';
    const template = util_232.readTemplate('rpc');
    const generateRpcTypesTemplate = handlebars_8.default.compile(template);
    /** @internal */
    function generateRpcTypes(registry, importDefinitions, dest, extraTypes = {}) {
        util_232.writeFile(dest, () => {
            const allTypes = { '@polkadot/types/interfaces': importDefinitions, ...extraTypes };
            const imports = util_232.createImports(allTypes);
            const definitions = imports.definitions;
            const allDefs = Object.entries(allTypes).reduce((defs, [path, obj]) => {
                return Object.entries(obj).reduce((defs, [key, value]) => ({ ...defs, [`${path}/${key}`]: value }), defs);
            }, {});
            const rpcKeys = Object
                .keys(definitions)
                .filter((key) => Object.keys(definitions[key].rpc || {}).length !== 0)
                .sort();
            const additional = {};
            const modules = rpcKeys.map((sectionFullName) => {
                const rpc = definitions[sectionFullName].rpc;
                const section = sectionFullName.split('/').pop();
                const allMethods = Object.keys(rpc).sort().map((methodName) => {
                    const def = rpc[methodName];
                    let args;
                    let type;
                    let generic;
                    // These are too hard to type with generics, do manual overrides
                    if (section === 'state') {
                        util_232.setImports(allDefs, imports, ['Codec', 'Hash', 'StorageKey', 'Vec']);
                        if (methodName === 'getStorage') {
                            generic = 'T = Codec';
                            args = [`key: ${StorageKeyTye}, block?: Hash | Uint8Array | string`];
                            type = 'T';
                        }
                        else if (methodName === 'queryStorage') {
                            generic = 'T = Codec[]';
                            args = [`keys: Vec<StorageKey> | (${StorageKeyTye})[], fromBlock?: Hash | Uint8Array | string, toBlock?: Hash | Uint8Array | string`];
                            type = '[Hash, T][]';
                        }
                        else if (methodName === 'queryStorageAt') {
                            generic = 'T = Codec[]';
                            args = [`keys: Vec<StorageKey> | (${StorageKeyTye})[], at?: Hash | Uint8Array | string`];
                            type = 'T';
                        }
                        else if (methodName === 'subscribeStorage') {
                            generic = 'T = Codec[]';
                            args = [`keys?: Vec<StorageKey> | (${StorageKeyTye})[]`];
                            type = 'T';
                        }
                    }
                    if (args === undefined) {
                        util_232.setImports(allDefs, imports, [def.type]);
                        args = def.params.map((param) => {
                            const similarTypes = util_232.getSimilarTypes(registry, definitions, param.type, imports);
                            util_232.setImports(allDefs, imports, [param.type, ...similarTypes]);
                            return `${param.name}${param.isOptional ? '?' : ''}: ${similarTypes.join(' | ')}`;
                        });
                        type = util_232.formatType(allDefs, def.type, imports);
                        generic = '';
                    }
                    const item = {
                        args: args.join(', '),
                        docs: [def.description],
                        generic,
                        name: methodName,
                        type
                    };
                    if (def.aliasSection) {
                        if (!additional[def.aliasSection]) {
                            additional[def.aliasSection] = {
                                items: [],
                                name: def.aliasSection
                            };
                        }
                        additional[def.aliasSection].items.push(item);
                        return null;
                    }
                    return item;
                }).filter((item) => !!item);
                return {
                    items: allMethods,
                    name: section || 'unknown'
                };
            }).concat(...Object.values(additional)).sort((a, b) => a.name.localeCompare(b.name));
            imports.typesTypes.Observable = true;
            const types = [
                ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                    file: packagePath,
                    types: Object.keys(imports.localTypes[packagePath])
                }))
            ];
            return generateRpcTypesTemplate({
                headerType: 'chain',
                imports,
                modules,
                types
            });
        });
    }
    exports.generateRpcTypes = generateRpcTypes;
    function generateDefaultRpc(dest = 'packages/api/src/augment/rpc.ts', extraTypes = {}) {
        const registry = new create_43.TypeRegistry();
        util_232.registerDefinitions(registry, extraTypes);
        generateRpcTypes(registry, defaultDefinitions, dest, extraTypes);
    }
    exports.generateDefaultRpc = generateDefaultRpc;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/tsDef", ["require", "exports", "handlebars", "path", "types/src/create/index", "types/src/create/types", "types/src/interfaces/definitions", "@polkadot/util", "typegen/src/util/index"], function (require, exports, handlebars_9, path_4, create_44, types_122, defaultDefinitions, util_233, util_234) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultTsDef = exports.generateTsDef = exports.createGetter = void 0;
    handlebars_9 = __importDefault(handlebars_9);
    path_4 = __importDefault(path_4);
    defaultDefinitions = __importStar(defaultDefinitions);
    // helper to generate a `readonly <Name>: <Type>;` getter
    /** @internal */
    function createGetter(definitions, name = '', type, imports) {
        util_234.setImports(definitions, imports, [type]);
        return `  readonly ${name}: ${type};\n`;
    }
    exports.createGetter = createGetter;
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function errorUnhandled(definitions, def, imports) {
        throw new Error(`Generate: ${def.name || ''}: Unhandled type ${types_122.TypeDefInfo[def.info]}`);
    }
    /** @internal */
    function tsExport(definitions, def, imports) {
        return util_234.exportInterface(def.name, util_234.formatType(definitions, def, imports));
    }
    const tsBTreeMap = tsExport;
    const tsBTreeSet = tsExport;
    const tsCompact = tsExport;
    const tsDoNotConstruct = tsExport;
    const tsHashMap = tsExport;
    const tsOption = tsExport;
    const tsPlain = tsExport;
    const tsTuple = tsExport;
    /** @internal */
    function tsEnum(definitions, { name: enumName, sub }, imports) {
        util_234.setImports(definitions, imports, ['Enum']);
        const keys = sub.map(({ info, name = '', type }) => {
            const getter = util_233.stringUpperFirst(util_233.stringCamelCase(name.replace(' ', '_')));
            const isComplexType = [types_122.TypeDefInfo.Tuple, types_122.TypeDefInfo.Vec, types_122.TypeDefInfo.VecFixed].includes(info);
            const asGetter = type === 'Null' || info === types_122.TypeDefInfo.DoNotConstruct
                ? ''
                : createGetter(definitions, `as${getter}`, isComplexType ? util_234.formatType(definitions, type, imports) : type, imports);
            const isGetter = info === types_122.TypeDefInfo.DoNotConstruct
                ? ''
                : createGetter(definitions, `is${getter}`, 'boolean', imports);
            switch (info) {
                case types_122.TypeDefInfo.Compact:
                case types_122.TypeDefInfo.Plain:
                case types_122.TypeDefInfo.Tuple:
                case types_122.TypeDefInfo.Vec:
                case types_122.TypeDefInfo.Option:
                case types_122.TypeDefInfo.VecFixed:
                    return `${isGetter}${asGetter}`;
                case types_122.TypeDefInfo.DoNotConstruct:
                    return '';
                default:
                    throw new Error(`Enum: ${enumName || 'undefined'}: Unhandled type ${types_122.TypeDefInfo[info]}`);
            }
        });
        return util_234.exportInterface(enumName, 'Enum', keys.join(''));
    }
    function tsInt(definitions, def, imports, type = 'Int') {
        util_234.setImports(definitions, imports, [type]);
        return util_234.exportInterface(def.name, type);
    }
    /** @internal */
    function tsResultGetter(definitions, resultName = '', getter, def, imports) {
        const { info, type } = def;
        const asGetter = type === 'Null'
            ? ''
            : createGetter(definitions, `as${getter}`, info === types_122.TypeDefInfo.Tuple ? util_234.formatType(definitions, def, imports) : type, imports);
        const isGetter = createGetter(definitions, `is${getter}`, 'boolean', imports);
        switch (info) {
            case types_122.TypeDefInfo.Plain:
            case types_122.TypeDefInfo.Tuple:
            case types_122.TypeDefInfo.Vec:
            case types_122.TypeDefInfo.Option:
                return `${isGetter}${asGetter}`;
            default:
                throw new Error(`Result: ${resultName}: Unhandled type ${types_122.TypeDefInfo[info]}`);
        }
    }
    /** @internal */
    function tsResult(definitions, def, imports) {
        const [okDef, errorDef] = def.sub;
        const inner = [
            tsResultGetter(definitions, def.name, 'Error', errorDef, imports),
            tsResultGetter(definitions, def.name, 'Ok', okDef, imports)
        ].join('');
        util_234.setImports(definitions, imports, [def.type]);
        return util_234.exportInterface(def.name, util_234.formatType(definitions, def, imports), inner);
    }
    /** @internal */
    function tsSet(definitions, { name: setName, sub }, imports) {
        util_234.setImports(definitions, imports, ['Set']);
        const types = sub.map(({ name }) => {
            util_233.assert(name, 'Invalid TypeDef found, no name specified');
            return createGetter(definitions, `is${name}`, 'boolean', imports);
        });
        return util_234.exportInterface(setName, 'Set', types.join(''));
    }
    /** @internal */
    function tsStruct(definitions, { name: structName, sub }, imports) {
        util_234.setImports(definitions, imports, ['Struct']);
        const keys = sub.map((typedef) => {
            const returnType = util_234.formatType(definitions, typedef, imports);
            return createGetter(definitions, typedef.name, returnType, imports);
        });
        return util_234.exportInterface(structName, 'Struct', keys.join(''));
    }
    /** @internal */
    function tsUInt(definitions, def, imports) {
        return tsInt(definitions, def, imports, 'UInt');
    }
    /** @internal */
    function tsVec(definitions, def, imports) {
        const type = def.sub.type;
        if (def.info === types_122.TypeDefInfo.VecFixed && type === 'u8') {
            util_234.setImports(definitions, imports, ['U8aFixed']);
            return util_234.exportType(def.name, 'U8aFixed');
        }
        return util_234.exportInterface(def.name, util_234.formatType(definitions, def, imports));
    }
    /** @internal */
    function generateInterfaces(definitions, { types }, imports) {
        // handlers are defined externally to use - this means that when we do a
        // `generators[typedef.info](...)` TS will show any unhandled types. Rather
        // we are being explicit in having no handlers where we do not support (yet)
        const generators = {
            [types_122.TypeDefInfo.BTreeMap]: tsBTreeMap,
            [types_122.TypeDefInfo.BTreeSet]: tsBTreeSet,
            [types_122.TypeDefInfo.Compact]: tsCompact,
            [types_122.TypeDefInfo.DoNotConstruct]: tsDoNotConstruct,
            [types_122.TypeDefInfo.Enum]: tsEnum,
            [types_122.TypeDefInfo.HashMap]: tsHashMap,
            [types_122.TypeDefInfo.Int]: tsInt,
            [types_122.TypeDefInfo.Linkage]: errorUnhandled,
            [types_122.TypeDefInfo.Null]: errorUnhandled,
            [types_122.TypeDefInfo.Option]: tsOption,
            [types_122.TypeDefInfo.Plain]: tsPlain,
            [types_122.TypeDefInfo.Result]: tsResult,
            [types_122.TypeDefInfo.Set]: tsSet,
            [types_122.TypeDefInfo.Struct]: tsStruct,
            [types_122.TypeDefInfo.Tuple]: tsTuple,
            [types_122.TypeDefInfo.UInt]: tsUInt,
            [types_122.TypeDefInfo.Vec]: tsVec,
            [types_122.TypeDefInfo.VecFixed]: tsVec
        };
        return Object.entries(types).map(([name, type]) => {
            const def = create_44.getTypeDef(util_233.isString(type) ? type : JSON.stringify(type), { name });
            return [name, generators[def.info](definitions, def, imports)];
        });
    }
    const templateIndex = util_234.readTemplate('tsDef/index');
    const generateTsDefIndexTemplate = handlebars_9.default.compile(templateIndex);
    const templateModuleTypes = util_234.readTemplate('tsDef/moduleTypes');
    const generateTsDefModuleTypesTemplate = handlebars_9.default.compile(templateModuleTypes);
    const templateTypes = util_234.readTemplate('tsDef/types');
    const generateTsDefTypesTemplate = handlebars_9.default.compile(templateTypes);
    /** @internal */
    function generateTsDefFor(importDefinitions, defName, { types }, outputDir) {
        const imports = { ...util_234.createImports(importDefinitions, { types }), interfaces: [] };
        const definitions = imports.definitions;
        const interfaces = generateInterfaces(definitions, { types }, imports);
        const items = interfaces.sort((a, b) => a[0].localeCompare(b[0])).map(([, definition]) => definition);
        const importTypes = [
            ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                file: packagePath,
                types: Object.keys(imports.localTypes[packagePath])
            }))
        ];
        util_234.writeFile(path_4.default.join(outputDir, defName, 'types.ts'), () => generateTsDefModuleTypesTemplate({
            headerType: 'defs',
            imports,
            items,
            name: defName,
            types: importTypes
        }), true);
        util_234.writeFile(path_4.default.join(outputDir, defName, 'index.ts'), () => generateTsDefIndexTemplate({ headerType: 'defs' }), true);
    }
    /** @internal */
    function generateTsDef(importDefinitions, outputDir, generatingPackage) {
        util_234.writeFile(path_4.default.join(outputDir, 'types.ts'), () => {
            const definitions = importDefinitions[generatingPackage];
            Object.entries(definitions).forEach(([defName, obj]) => {
                console.log(`\tExtracting interfaces for ${defName}`);
                generateTsDefFor(importDefinitions, defName, obj, outputDir);
            });
            return generateTsDefTypesTemplate({
                headerType: 'defs',
                items: Object.keys(definitions)
            });
        });
        util_234.writeFile(path_4.default.join(outputDir, 'index.ts'), () => generateTsDefIndexTemplate({ headerType: 'defs' }), true);
    }
    exports.generateTsDef = generateTsDef;
    /** @internal */
    function generateDefaultTsDef() {
        generateTsDef({ '@polkadot/types/interfaces': defaultDefinitions }, 'packages/types/src/interfaces', '@polkadot/types/interfaces');
    }
    exports.generateDefaultTsDef = generateDefaultTsDef;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/tx", ["require", "exports", "handlebars", "metadata/src/Metadata", "metadata/src/static", "types/src/create/index", "types/src/interfaces/definitions", "@polkadot/util", "typegen/src/util/index"], function (require, exports, handlebars_10, Metadata_14, static_20, create_45, defaultDefs, util_235, util_236) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultTx = void 0;
    handlebars_10 = __importDefault(handlebars_10);
    static_20 = __importDefault(static_20);
    defaultDefs = __importStar(defaultDefs);
    const MAPPED_NAMES = {
        new: 'updated'
    };
    function mapName(_name) {
        const name = util_235.stringCamelCase(_name);
        return MAPPED_NAMES[name] || name;
    }
    const template = util_236.readTemplate('tx');
    const generateForMetaTemplate = handlebars_10.default.compile(template);
    /** @internal */
    function generateForMeta(registry, meta, dest, extraTypes, isStrict) {
        util_236.writeFile(dest, () => {
            const allTypes = { '@polkadot/types/interfaces': defaultDefs, ...extraTypes };
            const imports = util_236.createImports(allTypes);
            const allDefs = Object.entries(allTypes).reduce((defs, [path, obj]) => {
                return Object.entries(obj).reduce((defs, [key, value]) => ({ ...defs, [`${path}/${key}`]: value }), defs);
            }, {});
            const modules = meta.asLatest.modules
                .sort(util_236.compareName)
                .filter(({ calls }) => calls.unwrapOr([]).length !== 0)
                .map(({ calls, name }) => {
                util_236.setImports(allDefs, imports, ['Call', 'Extrinsic', 'SubmittableExtrinsic']);
                const items = calls.unwrap()
                    .sort(util_236.compareName)
                    .map(({ args, documentation, name }) => {
                    const params = args
                        .map(({ name, type }) => {
                        const typeStr = type.toString();
                        const similarTypes = util_236.getSimilarTypes(registry, allDefs, typeStr, imports);
                        util_236.setImports(allDefs, imports, [typeStr, ...similarTypes]);
                        return `${mapName(name)}: ${similarTypes.join(' | ')}`;
                    })
                        .join(', ');
                    return {
                        args: args.map(({ type }) => util_236.formatType(allDefs, type.toString(), imports)).join(', '),
                        docs: documentation,
                        name: util_235.stringCamelCase(name),
                        params
                    };
                });
                return {
                    items,
                    name: util_235.stringCamelCase(name)
                };
            });
            const types = [
                ...Object.keys(imports.localTypes).sort().map((packagePath) => ({
                    file: packagePath,
                    types: Object.keys(imports.localTypes[packagePath])
                })),
                {
                    file: '@polkadot/api/types',
                    types: ['ApiTypes', 'SubmittableExtrinsic']
                }
            ];
            return generateForMetaTemplate({
                headerType: 'chain',
                imports,
                isStrict,
                modules,
                types
            });
        });
    }
    // Call `generateForMeta()` with current static metadata
    /** @internal */
    function generateDefaultTx(dest = 'packages/api/src/augment/tx.ts', data = static_20.default, extraTypes = {}, isStrict = false) {
        const registry = new create_45.TypeRegistry();
        util_236.registerDefinitions(registry, extraTypes);
        const metadata = new Metadata_14.Metadata(registry, data);
        registry.setMetadata(metadata);
        return generateForMeta(registry, metadata, dest, extraTypes, isStrict);
    }
    exports.generateDefaultTx = generateDefaultTx;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/generate/index", ["require", "exports", "typegen/src/generate/consts", "typegen/src/generate/errors", "typegen/src/generate/events", "typegen/src/generate/interfaceRegistry", "typegen/src/generate/query", "typegen/src/generate/rpc", "typegen/src/generate/tsDef", "typegen/src/generate/tx"], function (require, exports, consts_2, errors_4, events_5, interfaceRegistry_1, query_2, rpc_3, tsDef_1, tx_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultTx = exports.generateDefaultTsDef = exports.generateDefaultRpc = exports.generateDefaultQuery = exports.generateDefaultInterface = exports.generateDefaultEvents = exports.generateDefaultErrors = exports.generateDefaultConsts = void 0;
    Object.defineProperty(exports, "generateDefaultConsts", { enumerable: true, get: function () { return consts_2.generateDefaultConsts; } });
    Object.defineProperty(exports, "generateDefaultErrors", { enumerable: true, get: function () { return errors_4.generateDefaultErrors; } });
    Object.defineProperty(exports, "generateDefaultEvents", { enumerable: true, get: function () { return events_5.generateDefaultEvents; } });
    Object.defineProperty(exports, "generateDefaultInterface", { enumerable: true, get: function () { return interfaceRegistry_1.generateDefaultInterface; } });
    Object.defineProperty(exports, "generateDefaultQuery", { enumerable: true, get: function () { return query_2.generateDefaultQuery; } });
    Object.defineProperty(exports, "generateDefaultRpc", { enumerable: true, get: function () { return rpc_3.generateDefaultRpc; } });
    Object.defineProperty(exports, "generateDefaultTsDef", { enumerable: true, get: function () { return tsDef_1.generateDefaultTsDef; } });
    Object.defineProperty(exports, "generateDefaultTx", { enumerable: true, get: function () { return tx_1.generateDefaultTx; } });
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/fromChain", ["require", "exports", "path", "yargs", "@polkadot/util", "@polkadot/x-ws", "typegen/src/generate/index", "typegen/src/util/index"], function (require, exports, path_5, yargs_2, util_237, x_ws_2, generate_1, util_238) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.main = void 0;
    path_5 = __importDefault(path_5);
    yargs_2 = __importDefault(yargs_2);
    function generate(metaHex, pkg, output, isStrict) {
        console.log(`Generating from metadata, ${util_237.formatNumber((metaHex.length - 2) / 2)} bytes`);
        const extraTypes = pkg
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            ? { [pkg]: require(path_5.default.join(process.cwd(), output, 'definitions')) }
            : {};
        generate_1.generateDefaultConsts(path_5.default.join(process.cwd(), output, 'augment-api-consts.ts'), metaHex, extraTypes, isStrict);
        generate_1.generateDefaultErrors(path_5.default.join(process.cwd(), output, 'augment-api-errors.ts'), metaHex, isStrict);
        generate_1.generateDefaultEvents(path_5.default.join(process.cwd(), output, 'augment-api-events.ts'), metaHex, extraTypes, isStrict);
        generate_1.generateDefaultQuery(path_5.default.join(process.cwd(), output, 'augment-api-query.ts'), metaHex, extraTypes, isStrict);
        generate_1.generateDefaultRpc(path_5.default.join(process.cwd(), output, 'augment-api-rpc.ts'), extraTypes);
        generate_1.generateDefaultTx(path_5.default.join(process.cwd(), output, 'augment-api-tx.ts'), metaHex, extraTypes, isStrict);
        util_238.writeFile(path_5.default.join(process.cwd(), output, 'augment-api.ts'), () => [
            util_238.HEADER('chain'),
            ...[
                '@polkadot/api/augment/rpc',
                ...['consts', 'errors', 'events', 'query', 'tx', 'rpc'].filter((key) => !!key).map((key) => `./augment-api-${key}`)
            ].map((path) => `import '${path}';\n`)
        ].join(''));
        process.exit(0);
    }
    function main() {
        const { endpoint, output, package: pkg, strict: isStrict } = yargs_2.default.strict().options({
            endpoint: {
                description: 'The endpoint to connect to (e.g. wss://kusama-rpc.polkadot.io) or relative path to a file containing the JSON output of an RPC state_getMetadata call',
                required: true,
                type: 'string'
            },
            output: {
                description: 'The target directory to write the data to',
                required: true,
                type: 'string'
            },
            package: {
                description: 'Optional package in output location (for extra definitions)',
                type: 'string'
            },
            strict: {
                description: 'Turns on strict mode, no output of catch-all generic versions',
                type: 'boolean'
            }
        }).argv;
        if (endpoint.startsWith('wss://') || endpoint.startsWith('ws://')) {
            try {
                const websocket = new x_ws_2.WebSocket(endpoint);
                websocket.onclose = (event) => {
                    console.error(`disconnected, code: '${event.code}' reason: '${event.reason}'`);
                    process.exit(1);
                };
                websocket.onerror = (event) => {
                    console.error(event);
                    process.exit(1);
                };
                websocket.onopen = () => {
                    console.log('connected');
                    websocket.send('{"id":"1","jsonrpc":"2.0","method":"state_getMetadata","params":[]}');
                };
                websocket.onmessage = (message) => {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                    generate(JSON.parse(message.data).result, pkg, output, isStrict);
                };
            }
            catch (error) {
                process.exit(1);
            }
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-member-access
            generate(require(path_5.default.join(process.cwd(), endpoint)).result, pkg, output, isStrict);
        }
    }
    exports.main = main;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/fromDefs", ["require", "exports", "path", "yargs", "types/src/interfaces/definitions", "typegen/src/generate/interfaceRegistry", "typegen/src/generate/tsDef"], function (require, exports, path_6, yargs_3, substrateDefs, interfaceRegistry_2, tsDef_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.main = void 0;
    path_6 = __importDefault(path_6);
    yargs_3 = __importDefault(yargs_3);
    substrateDefs = __importStar(substrateDefs);
    function main() {
        const { input, package: pkg } = yargs_3.default.strict().options({
            input: {
                description: 'The directory to use for the user definitions',
                required: true,
                type: 'string'
            },
            package: {
                description: 'The package name & path to use for the user types',
                required: true,
                type: 'string'
            }
        }).argv;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const userDefs = require(path_6.default.join(process.cwd(), input, 'definitions.ts'));
        const userKeys = Object.keys(userDefs);
        const filteredBase = Object
            .entries(substrateDefs)
            .filter(([key]) => {
            if (userKeys.includes(key)) {
                console.warn(`Override found for ${key} in user types, ignoring in @polkadot/types`);
                return false;
            }
            return true;
        })
            .reduce((defs, [key, value]) => {
            defs[key] = value;
            return defs;
        }, {});
        const allDefs = {
            '@polkadot/types/interfaces': filteredBase,
            [pkg]: userDefs
        };
        tsDef_2.generateTsDef(allDefs, path_6.default.join(process.cwd(), input), pkg);
        interfaceRegistry_2.generateInterfaceTypes(allDefs, path_6.default.join(process.cwd(), input, 'augment-types.ts'));
    }
    exports.main = main;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/index", ["require", "exports", "typegen/src/util/formatting"], function (require, exports, formatting_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatType = void 0;
    Object.defineProperty(exports, "formatType", { enumerable: true, get: function () { return formatting_3.formatType; } });
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/interfacesTs", ["require", "exports", "typegen/src/generate/index"], function (require, exports, generate_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.main = void 0;
    function main() {
        generate_2.generateDefaultInterface();
        generate_2.generateDefaultConsts();
        generate_2.generateDefaultErrors();
        generate_2.generateDefaultEvents();
        generate_2.generateDefaultQuery();
        generate_2.generateDefaultTx();
        generate_2.generateDefaultRpc();
        generate_2.generateDefaultTsDef();
    }
    exports.main = main;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/metadataMd", ["require", "exports", "fs", "metadata/src/index", "metadata/src/static", "types/src/codec/index", "types/src/create/index", "types/src/generic/index", "types/src/interfaces/definitions", "types/src/primitive/StorageKey", "@polkadot/util"], function (require, exports, fs_4, metadata_6, static_21, codec_9, create_46, generic_3, definitions, StorageKey_5, util_239) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.main = void 0;
    fs_4 = __importDefault(fs_4);
    static_21 = __importDefault(static_21);
    definitions = __importStar(definitions);
    const STATIC_TEXT = '\n\n(NOTE: These were generated from a static/snapshot view of a recent Substrate master node. Some items may not be available in older nodes, or in any customized implementations.)';
    const DESC_CONSTANTS = `The following sections contain the module constants, also known as parameter types. These can only be changed as part of a runtime upgrade. On the api, these are exposed via \`api.consts.<module>.<method>\`. ${STATIC_TEXT}`;
    const DESC_EXTRINSICS = `The following sections contain Extrinsics methods are part of the default Substrate runtime. On the api, these are exposed via \`api.tx.<module>.<method>\`. ${STATIC_TEXT}`;
    const DESC_ERRORS = `This page lists the errors that can be encountered in the different modules. ${STATIC_TEXT}`;
    const DESC_EVENTS = `Events are emitted for certain operations on the runtime. The following sections describe the events that are part of the default Substrate runtime. ${STATIC_TEXT}`;
    const DESC_RPC = 'The following sections contain RPC methods that are Remote Calls available by default and allow you to interact with the actual node, query, and submit.';
    const DESC_STORAGE = `The following sections contain Storage methods are part of the default Substrate runtime. On the api, these are exposed via \`api.query.<module>.<method>\`. ${STATIC_TEXT}`;
    /** @internal */
    function documentationVecToMarkdown(docLines, indent = 0) {
        const md = docLines
            .map((docLine) => docLine && docLine.substring(1)) // trim the leading space
            .reduce((md, docLine) => // generate paragraphs
         !docLine.trim().length
            ? `${md}\n\n` // empty line
            : /^[*-]/.test(docLine.trimStart()) && !md.endsWith('\n\n')
                ? `${md}\n\n${docLine}` // line calling for a preceding linebreak
                : `${md}${docLine.replace(/^#{1,3} /, '#### ')} `, '')
            .replace(/#### <weight>/g, '<weight>')
            .replace(/<weight>(.|\n)*?<\/weight>/g, '')
            .replace(/#### Weight:/g, 'Weight:');
        // prefix each line with indentation
        return md && md.split('\n\n').map((line) => `${' '.repeat(indent)}${line}`).join('\n\n');
    }
    function renderPage(page) {
        let md = `---\ntitle: ${page.title}\n---\n\n`;
        if (page.description) {
            md += `${page.description}\n\n`;
        }
        // index
        page.sections.forEach((section) => {
            md += `- **[${util_239.stringCamelCase(section.name)}](#${util_239.stringCamelCase(section.name).toLowerCase()})**\n\n`;
        });
        // contents
        page.sections.forEach((section) => {
            md += '\n___\n\n\n';
            md += section.link
                ? `<h2 id="#${section.link}">${section.name}</h2>\n`
                : `## ${section.name}\n`;
            if (section.description) {
                md += `\n_${section.description}_\n`;
            }
            section.items.forEach((item) => {
                md += ' \n';
                md += item.link
                    ? `<h3 id="#${item.link}">${item.name}</h3>`
                    : `### ${item.name}`;
                Object.keys(item).filter((key) => !['link', 'name'].includes(key)).forEach((bullet) => {
                    md += `\n- **${bullet}**: ${
                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                    item[bullet] instanceof codec_9.Vec
                        ? documentationVecToMarkdown(item[bullet], 2).toString()
                        : item[bullet]}`;
                });
                md += '\n';
            });
        });
        return md;
    }
    function sortByName(a, b) {
        // case insensitive (all-uppercase) sorting
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        return a.name.toString().toUpperCase().localeCompare(b.name.toString().toUpperCase());
    }
    /** @internal */
    function addRpc() {
        const sections = Object
            .keys(definitions)
            .filter((key) => Object.keys(definitions[key].rpc || {}).length !== 0);
        return renderPage({
            description: DESC_RPC,
            sections: sections
                .sort()
                .reduce((all, _sectionName) => {
                const section = definitions[_sectionName];
                Object.keys(section.rpc)
                    .sort()
                    .forEach((methodName) => {
                    const method = section.rpc[methodName];
                    const sectionName = method.aliasSection || _sectionName;
                    const topName = method.aliasSection ? `${_sectionName}/${method.aliasSection}` : _sectionName;
                    let container = all.find(({ name }) => name === topName);
                    if (!container) {
                        container = { items: [], name: topName };
                        all.push(container);
                    }
                    const args = method.params.map(({ isOptional, name, type }) => {
                        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
                        return name + (isOptional ? '?' : '') + ': `' + type + '`';
                    }).join(', ');
                    const type = '`' + method.type + '`';
                    const jsonrpc = (method.endpoint || `${sectionName}_${methodName}`);
                    container.items.push({
                        interface: '`' + `api.rpc.${sectionName}.${methodName}` + '`',
                        jsonrpc: '`' + jsonrpc + '`',
                        // link: jsonrpc,
                        name: `${methodName}(${args}): ${type}`,
                        ...(method.description && { summary: method.description })
                    });
                });
                return all;
            }, []).sort((a, b) => a.name.localeCompare(b.name)),
            title: 'JSON-RPC'
        });
    }
    /** @internal */
    function addConstants(metadata) {
        return renderPage({
            description: DESC_CONSTANTS,
            sections: metadata.modules
                .sort(sortByName)
                .filter((moduleMetadata) => !moduleMetadata.constants.isEmpty)
                .map((moduleMetadata) => {
                const sectionName = util_239.stringLowerFirst(moduleMetadata.name);
                return {
                    items: moduleMetadata.constants
                        .sort(sortByName)
                        .map((func) => {
                        const methodName = util_239.stringCamelCase(func.name);
                        return {
                            interface: '`' + `api.consts.${sectionName}.${methodName}` + '`',
                            name: `${methodName}: ` + '`' + func.type.toString() + '`',
                            ...(func.documentation.length && { summary: func.documentation })
                        };
                    }),
                    name: sectionName
                };
            }),
            title: 'Constants'
        });
    }
    /** @internal */
    function addStorage(metadata) {
        const moduleSections = metadata.modules
            .sort(sortByName)
            .filter((moduleMetadata) => !moduleMetadata.storage.isNone)
            .map((moduleMetadata) => {
            const sectionName = util_239.stringLowerFirst(moduleMetadata.name);
            return {
                items: moduleMetadata.storage.unwrap().items
                    .sort(sortByName)
                    .map((func) => {
                    const arg = func.type.isMap
                        ? ('`' + func.type.asMap.key.toString() + '`')
                        : func.type.isDoubleMap
                            ? ('`' + func.type.asDoubleMap.key1.toString() + ', ' + func.type.asDoubleMap.key2.toString() + '`')
                            : '';
                    const methodName = util_239.stringLowerFirst(func.name);
                    const outputType = StorageKey_5.unwrapStorageType(func.type, func.modifier.isOptional);
                    return {
                        interface: '`' + `api.query.${sectionName}.${methodName}` + '`',
                        name: `${methodName}(${arg}): ` + '`' + outputType + '`',
                        ...(func.documentation.length && { summary: func.documentation })
                    };
                }),
                name: sectionName
            };
        });
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const knownSection = JSON.parse(fs_4.default.readFileSync('docs/substrate/storage-known-section.json', 'utf8'));
        return renderPage({
            description: DESC_STORAGE,
            sections: moduleSections.concat([knownSection]),
            title: 'Storage'
        });
    }
    /** @internal */
    function addExtrinsics(metadata) {
        return renderPage({
            description: DESC_EXTRINSICS,
            sections: metadata.modules
                .sort(sortByName)
                .filter((meta) => !meta.calls.isNone && meta.calls.unwrap().length !== 0)
                .map((meta) => {
                const sectionName = util_239.stringCamelCase(meta.name);
                return {
                    items: meta.calls.unwrap()
                        .sort(sortByName)
                        .map((func) => {
                        const methodName = util_239.stringCamelCase(func.name);
                        const args = generic_3.GenericCall.filterOrigin(func).map(({ name, type }) => `${name.toString()}: ` + '`' + type.toString() + '`').join(', ');
                        return {
                            interface: '`' + `api.tx.${sectionName}.${methodName}` + '`',
                            name: `${methodName}(${args})`,
                            ...(func.documentation.length && { summary: func.documentation })
                        };
                    }),
                    name: sectionName
                };
            }),
            title: 'Extrinsics'
        });
    }
    /** @internal */
    function addEvents(metadata) {
        return renderPage({
            description: DESC_EVENTS,
            sections: metadata.modules
                .sort(sortByName)
                .filter((meta) => !meta.events.isNone && meta.events.unwrap().length !== 0)
                .map((meta) => ({
                items: meta.events.unwrap()
                    .sort(sortByName)
                    .map((func) => {
                    const methodName = func.name.toString();
                    const args = func.args.map((type) => '`' + type.toString() + '`').join(', ');
                    return {
                        name: `${methodName}(${args})`,
                        ...(func.documentation.length && { summary: func.documentation })
                    };
                }),
                name: util_239.stringCamelCase(meta.name)
            })),
            title: 'Events'
        });
    }
    /** @internal */
    function addErrors(metadata) {
        return renderPage({
            description: DESC_ERRORS,
            sections: metadata.modules
                .sort(sortByName)
                .filter((moduleMetadata) => !moduleMetadata.errors.isEmpty)
                .map((moduleMetadata) => ({
                items: moduleMetadata.errors
                    .sort(sortByName)
                    .map((error) => ({
                    name: error.name.toString(),
                    ...(error.documentation.length && { summary: error.documentation })
                })),
                name: util_239.stringLowerFirst(moduleMetadata.name)
            })),
            title: 'Errors'
        });
    }
    /** @internal */
    function writeFile(name, ...chunks) {
        const writeStream = fs_4.default.createWriteStream(name, { encoding: 'utf8', flags: 'w' });
        writeStream.on('finish', () => {
            console.log(`Completed writing ${name}`);
        });
        chunks.forEach((chunk) => {
            writeStream.write(chunk);
        });
        writeStream.end();
    }
    function main() {
        const registry = new create_46.TypeRegistry();
        const metadata = new metadata_6.Metadata(registry, static_21.default);
        registry.setMetadata(metadata);
        const latest = metadata.asLatest;
        writeFile('docs/substrate/rpc.md', addRpc());
        writeFile('docs/substrate/constants.md', addConstants(latest));
        writeFile('docs/substrate/storage.md', addStorage(latest));
        writeFile('docs/substrate/extrinsics.md', addExtrinsics(latest));
        writeFile('docs/substrate/events.md', addEvents(latest));
        writeFile('docs/substrate/errors.md', addErrors(latest));
    }
    exports.main = main;
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/derived.spec", ["require", "exports", "types/src/create/index", "typegen/src/util/derived"], function (require, exports, create_47, derived_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('getSimilarTypes', () => {
        let registry;
        beforeAll(() => {
            registry = new create_47.TypeRegistry();
        });
        it('handles nested Tuples', () => {
            expect(derived_2.getSimilarTypes(registry, {}, '(AccountId, (Balance, u32), u64)', {
                codecTypes: {},
                definitions: {},
                extrinsicTypes: {},
                genericTypes: {},
                ignoredTypes: [],
                localTypes: {},
                metadataTypes: {},
                primitiveTypes: {},
                typeToModule: {},
                typesTypes: {}
            })).toEqual([
                'ITuple<[AccountId, ITuple<[Balance, u32]>, u64]>',
                '[AccountId | string | Uint8Array, ITuple<[Balance, u32]> | [Balance | AnyNumber | Uint8Array, u32 | AnyNumber | Uint8Array], u64 | AnyNumber | Uint8Array]'
            ]);
        });
    });
});
// Copyright 2017-2021 @polkadot/typegen authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("typegen/src/util/formatting.spec", ["require", "exports", "typegen/src/util/formatting"], function (require, exports, formatting_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('formatType', () => {
        it('handles nested Tuples', () => {
            expect(formatting_4.formatType({}, '(AccountId, (Balance, u32), u64)', {
                codecTypes: {},
                definitions: {},
                extrinsicTypes: {},
                genericTypes: {},
                ignoredTypes: [],
                localTypes: {},
                metadataTypes: {},
                primitiveTypes: {},
                typeToModule: {},
                typesTypes: {}
            })).toEqual('ITuple<[AccountId, ITuple<[Balance, u32]>, u64]>');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/classes", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/index.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/interfaces/definitions", "types/src/create/index", "types/src/index.types"], function (require, exports, metadata_7, static_22, definitions, create_48, exported) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_22 = __importDefault(static_22);
    definitions = __importStar(definitions);
    exported = __importStar(exported);
    // NOTE This is not a shortcut to implementing types incorrectly. This is here
    // specifically for the types that _should_ throw in the constrtuctor, i.e
    // `usize` is not allowed (runtime incompat) and `origin` is not passed through
    // to any calls. All other types _must_ pass and allow for empty defaults
    const UNCONSTRUCTABLE = [
        'ExtrinsicPayloadUnknown', 'GenericExtrinsicPayloadUnknown',
        'ExtrinsicUnknown', 'GenericExtrinsicUnknown',
        'DoNotConstruct',
        'MetadataAll',
        'Origin',
        'usize'
    ].map((v) => v.toLowerCase());
    const registry = new create_48.TypeRegistry();
    const metadata = new metadata_7.Metadata(registry, static_22.default);
    registry.setMetadata(metadata);
    function testTypes(type, typeNames) {
        describe(type, () => {
            describe(`${type}:: default creation`, () => {
                typeNames.forEach((name) => {
                    it(`creates an empty ${name}`, () => {
                        const constructFn = () => create_48.createTypeUnsafe(registry, name);
                        if (UNCONSTRUCTABLE.includes(name.toLowerCase())) {
                            expect(constructFn).toThrow();
                        }
                        else {
                            expect(constructFn).not.toThrow();
                        }
                    });
                });
            });
            describe(`${type}:: default creation (empty bytes)`, () => {
                typeNames.forEach((name) => {
                    it(`creates an empty ${name} (from empty bytes)`, () => {
                        const constructFn = () => create_48.createTypeUnsafe(registry, name, [create_48.createTypeUnsafe(registry, 'Bytes')]);
                        if (UNCONSTRUCTABLE.includes(name.toLowerCase())) {
                            expect(constructFn).toThrow();
                        }
                        else {
                            expect(constructFn).not.toThrow();
                        }
                    });
                });
            });
        });
    }
    describe('type creation', () => {
        testTypes('exported', Object.keys(exported));
        Object
            .entries(definitions)
            .forEach(([name, { types }]) => testTypes(`${name} (injected)`, Object.keys(types)));
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/BTreeMap.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_49, primitive_5, _28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_49.TypeRegistry();
    const mockU32TextMap = new Map();
    mockU32TextMap.set(new primitive_5.Text(registry, 'bazzing'), new primitive_5.U32(registry, 69));
    describe('BTreeMap', () => {
        it('decodes null', () => {
            expect(new (_28.BTreeMap.with(primitive_5.Text, primitive_5.U32))(registry, null).toString()).toEqual('{}');
        });
        it('decodes reusing instantiated inputs', () => {
            const key = new primitive_5.Text(registry, 'foo');
            const val = new primitive_5.Text(registry, 'bar');
            expect((new (_28.BTreeMap.with(primitive_5.Text, primitive_5.Text))(registry, new Map([[key, val]]))).eq(new Map([[key, val]]))).toBe(true);
        });
        it('decodes within more complicated types', () => {
            const s = new _28.Struct(registry, {
                placeholder: primitive_5.U32,
                value: 'BTreeMap<Text, U32>'
            });
            s.set('value', new (_28.BTreeMap.with(primitive_5.Text, primitive_5.U32))(registry, mockU32TextMap));
            expect(s.toString()).toBe('{"placeholder":0,"value":{"bazzing":69}}');
        });
        it('throws when it cannot decode', () => {
            expect(() => new (_28.BTreeMap.with(primitive_5.Text, primitive_5.U32))(registry, 'ABC')).toThrowError(/Map: cannot decode type/);
        });
        it('correctly encodes length', () => {
            expect(new (_28.BTreeMap.with(primitive_5.Text, primitive_5.U32))(registry, mockU32TextMap).encodedLength).toEqual(13);
        });
        it('generates sane toRawTypes', () => {
            expect(new (_28.BTreeMap.with(primitive_5.Text, primitive_5.U32))(registry).toRawType()).toBe('BTreeMap<Text,u32>');
            expect(new (_28.BTreeMap.with(primitive_5.Text, primitive_5.Text))(registry).toRawType()).toBe('BTreeMap<Text,Text>');
            expect(new (_28.BTreeMap.with(primitive_5.Text, _28.Struct.with({ a: primitive_5.U32, b: primitive_5.Text })))(registry).toRawType())
                .toBe('BTreeMap<Text,{"a":"u32","b":"Text"}>');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/BTreeSet.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_50, primitive_6, _29) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_50.TypeRegistry();
    const mockU32Set = new Set();
    mockU32Set.add(new primitive_6.U32(registry, 2));
    mockU32Set.add(new primitive_6.U32(registry, 24));
    mockU32Set.add(new primitive_6.U32(registry, 30));
    mockU32Set.add(new primitive_6.U32(registry, 80));
    const mockU32SetString = '[2,24,30,80]';
    const mockU32SetObject = [2, 24, 30, 80];
    const mockU32SetHexString = '0x1002000000180000001e00000050000000';
    const mockU32SetUint8Array = Uint8Array.from([16, 2, 0, 0, 0, 24, 0, 0, 0, 30, 0, 0, 0, 80, 0, 0, 0]);
    describe('BTreeSet', () => {
        describe('decoding', () => {
            const testDecode = (type, input, output) => it(`can decode from ${type}`, () => {
                const s = new _29.BTreeSet(registry, primitive_6.U32, input);
                expect(s.toString()).toBe(output);
            });
            testDecode('Set', mockU32Set, mockU32SetString);
            testDecode('hex', mockU32SetHexString, mockU32SetString);
            testDecode('Uint8Array', mockU32SetUint8Array, mockU32SetString);
            testDecode('Set', mockU32Set, mockU32SetString);
            testDecode('hex', mockU32SetHexString, mockU32SetString);
            testDecode('Uint8Array', mockU32SetUint8Array, mockU32SetString);
        });
        describe('encoding multiple values', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const s = new _29.BTreeSet(registry, primitive_6.U32, mockU32Set);
                expect(s[to]()).toEqual(expected);
            });
            testEncode('toHex', mockU32SetHexString);
            testEncode('toJSON', mockU32SetObject);
            testEncode('toU8a', mockU32SetUint8Array);
            testEncode('toString', mockU32SetString);
        });
        it('decodes null', () => {
            expect(new (_29.BTreeSet.with(primitive_6.U32))(registry, null).toString()).toEqual('[]');
        });
        it('decodes reusing instantiated inputs', () => {
            const foo = new primitive_6.Text(registry, 'bar');
            expect((new _29.BTreeSet(registry, primitive_6.Text, new Set([foo]))).eq(new Set([foo]))).toBe(true);
        });
        it('decodes within more complicated types', () => {
            const s = new _29.Struct(registry, {
                placeholder: primitive_6.U32,
                value: _29.BTreeSet.with(primitive_6.U32)
            });
            s.set('value', new _29.BTreeSet(registry, primitive_6.U32, mockU32Set));
            expect(s.toString()).toBe('{"placeholder":0,"value":[2,24,30,80]}');
        });
        it('throws when it cannot decode', () => {
            expect(() => new (_29.BTreeSet.with(primitive_6.U32))(registry, 'ABC')).toThrowError(/BTreeSet: cannot decode type/);
        });
        it('correctly encodes length', () => {
            expect(new (_29.BTreeSet.with(primitive_6.U32))(registry, mockU32Set).encodedLength).toEqual(17);
        });
        it('generates sane toRawTypes', () => {
            expect(new (_29.BTreeSet.with(primitive_6.U32))(registry).toRawType()).toBe('BTreeSet<u32>');
            expect(new (_29.BTreeSet.with(primitive_6.Text))(registry).toRawType()).toBe('BTreeSet<Text>');
            expect(new (_29.BTreeSet.with(_29.Struct.with({ a: primitive_6.U32, b: primitive_6.Text })))(registry).toRawType())
                .toBe('BTreeSet<{"a":"u32","b":"Text"}>');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Date", ["require", "exports", "bn.js", "@polkadot/util"], function (require, exports, bn_js_15, util_240) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodecDate = void 0;
    bn_js_15 = __importDefault(bn_js_15);
    const BITLENGTH = 64;
    /**
     * @name Date
     * @description
     * A wrapper around seconds/timestamps. Internally the representation only has
     * second precicion (aligning with Rust), so any numbers passed an/out are always
     * per-second. For any encoding/decoding the 1000 multiplier would be applied to
     * get it in line with JavaScript formats. It extends the base JS `Date` object
     * and has all the methods available that are applicable to any `Date`
     * @noInheritDoc
     */
    class CodecDate extends Date {
        constructor(registry, value = 0) {
            super(CodecDate.decodeDate(value));
            this.registry = registry;
        }
        /** @internal */
        static decodeDate(value) {
            if (value instanceof Date) {
                return value;
            }
            else if (util_240.isU8a(value)) {
                value = util_240.u8aToBn(value.subarray(0, BITLENGTH / 8), true);
            }
            else if (util_240.isString(value)) {
                value = new bn_js_15.default(value.toString(), 10, 'le');
            }
            return new Date(util_240.bnToBn(value).toNumber() * 1000);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return BITLENGTH / 8;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.getTime() === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return CodecDate.decodeDate(other).getTime() === this.getTime();
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return BITLENGTH;
        }
        /**
         * @description Returns a BigInt representation of the number
         */
        toBigInt() {
            return BigInt(this.toNumber());
        }
        /**
         * @description Returns the BN representation of the timestamp
         */
        toBn() {
            return new bn_js_15.default(this.toNumber());
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex(isLe = false) {
            return util_240.bnToHex(this.toBn(), {
                bitLength: BITLENGTH,
                isLe,
                isNegative: false
            });
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toISOString();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            // FIXME Return type should be number, but conflicts with Date.toJSON()
            // which returns string
            return this.toNumber();
        }
        /**
         * @description Returns the number representation for the timestamp
         */
        toNumber() {
            return Math.ceil(this.getTime() / 1000);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Moment';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            // only included here since we do not inherit docs
            return super.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        toU8a(isBare) {
            return util_240.bnToU8a(this.toNumber(), BITLENGTH, true);
        }
    }
    exports.CodecDate = CodecDate;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Compact.spec", ["require", "exports", "bn.js", "types/src/create/index", "types/src/primitive/index", "types/src/codec/Date", "types/src/codec/index"], function (require, exports, bn_js_16, create_51, primitive_7, Date_1, _30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_16 = __importDefault(bn_js_16);
    describe('Compact', () => {
        const registry = new create_51.TypeRegistry();
        describe('constructor', () => {
            it('has support for BigInt', () => {
                expect(new _30.Compact(registry, 'u128', 123456789000123456789n).toHuman()).toEqual('123,456,789,000,123,456,789');
            });
            it('has the correct bitLength for constructor values (BlockNumber)', () => {
                expect(new (_30.Compact.with(registry.createClass('BlockNumber')))(registry, 0xfffffff9).bitLength()).toEqual(32);
            });
            it('has the correct encodedLength for constructor values (string BlockNumber)', () => {
                expect(new (_30.Compact.with('BlockNumber'))(registry, 0xfffffff9).encodedLength).toEqual(5);
            });
            it('has the correct encodedLength for constructor values (class BlockNumber)', () => {
                expect(new (_30.Compact.with(registry.createClass('BlockNumber')))(registry, 0xfffffff9).encodedLength).toEqual(5);
            });
            it('has the correct encodedLength for constructor values (u32)', () => {
                expect(new (_30.Compact.with(primitive_7.U32))(registry, 0xffff9).encodedLength).toEqual(4);
            });
            it('constructs properly via Uint8Array as U32', () => {
                expect(new (_30.Compact.with(primitive_7.U32))(registry, new Uint8Array([254, 255, 3, 0])).toNumber()).toEqual(new bn_js_16.default(0xffff).toNumber());
            });
            it('constructs properly via number as Moment', () => {
                expect(new (_30.Compact.with(Date_1.CodecDate))(registry, 1537968546).toString().startsWith('Wed Sep 26 2018') // The time depends on the timezone this test is run in
                ).toBe(true);
            });
        });
        describe('utils', () => {
            it('compares against another Compact', () => {
                expect(new (_30.Compact.with(primitive_7.U32))(registry, 12345).eq(new (_30.Compact.with(primitive_7.U32))(registry, 12345))).toBe(true);
            });
            it('compares against a primitive', () => {
                expect(new (_30.Compact.with(primitive_7.U32))(registry, 12345).eq(12345)).toBe(true);
            });
            it('unwraps to the wrapped value', () => {
                expect(new (_30.Compact.with(primitive_7.U32))(registry, 12345).unwrap() instanceof primitive_7.U32).toBe(true);
            });
            it('has a valid toBn interface', () => {
                expect(new (_30.Compact.with('u128'))(registry, '12345678987654321').toBn().eq(new bn_js_16.default('12345678987654321'))).toBe(true);
            });
            it('has a valid toBigInt interface', () => {
                expect((new (_30.Compact.with('u128'))(registry, 12345678987654321n).toBigInt() + 1n) === 12345678987654322n).toBe(true);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Date.spec", ["require", "exports", "bn.js", "types/src/create/index", "types/src/primitive/index", "types/src/codec/Date"], function (require, exports, bn_js_17, create_52, primitive_8, Date_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_17 = __importDefault(bn_js_17);
    describe('Date', () => {
        const registry = new create_52.TypeRegistry();
        describe('decode', () => {
            const testDecode = (type, input, expected, toJSON = false) => it(`can decode from ${type}`, () => {
                expect(new Date_2.CodecDate(registry, input)[toJSON ? 'toJSON' : 'toISOString']()).toBe(expected);
            });
            testDecode('Date', new Date(1537968546280), '2018-09-26T13:29:06.280Z');
            testDecode('CodecDate', new Date_2.CodecDate(registry, 1234), 1234, true);
            testDecode('number', 1234, 1234, true);
            testDecode('U64', new primitive_8.U64(registry, 69), 69, true);
        });
        describe('encode', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                expect(new Date_2.CodecDate(registry, 421)[to]()).toEqual(expected);
            });
            testEncode('toBigInt', 421n);
            testEncode('toBn', new bn_js_17.default(421));
            testEncode('toJSON', 421);
            testEncode('toISOString', '1970-01-01T00:07:01.000Z');
            testEncode('toNumber', 421);
            testEncode('toU8a', Uint8Array.from([165, 1, 0, 0, 0, 0, 0, 0]));
            it('can encode toString', () => {
                const date = new Date(Date.UTC(1970, 0, 1, 2, 3, 4));
                date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);
                expect(new Date_2.CodecDate(registry, date).toString()).toMatch(/^Thu Jan 01 1970 02:03:04/);
            });
            it('encodes default BE hex', () => {
                expect(new Date_2.CodecDate(registry, 3).toHex()).toEqual('0x0000000000000003');
            });
            it('encodes options LE hex', () => {
                expect(new Date_2.CodecDate(registry, 3).toHex(true)).toEqual('0x0300000000000000');
            });
            it('encodes correctly to BigInt', () => {
                expect(new Date_2.CodecDate(registry, 41).toBigInt() + 1n).toEqual(42n);
            });
        });
        describe('utils', () => {
            it('compares values', () => {
                expect(new Date_2.CodecDate(registry, 123).eq(123)).toBe(true);
            });
            it('compares values (non-match)', () => {
                expect(new Date_2.CodecDate(registry, 123).eq(456)).toBe(false);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Enum.spec", ["require", "exports", "@polkadot/util", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, util_241, create_53, primitive_9, _31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Enum', () => {
        const registry = new create_53.TypeRegistry();
        describe('typed enum (previously EnumType)', () => {
            it('provides a clean toString() (value)', () => {
                expect(new _31.Enum(registry, { Text: primitive_9.Text, U32: primitive_9.U32 }, new Uint8Array([0, 2 << 2, 49, 50])).value.toString()).toEqual('12');
            });
            it('provides a clean toString() (enum)', () => {
                expect(new _31.Enum(registry, { Text: primitive_9.Text, U32: primitive_9.U32 }, new Uint8Array([1, 2 << 2, 49, 50])).toString()).toEqual('{"U32":3289352}');
            });
            it('decodes from a JSON input (lowercase)', () => {
                expect(new _31.Enum(registry, { Text: primitive_9.Text, U32: primitive_9.U32 }, { text: 'some text value' }).value.toString()).toEqual('some text value');
            });
            it('decodes reusing instanciated inputs', () => {
                const foo = new primitive_9.Text(registry, 'bar');
                expect(new _31.Enum(registry, { foo: primitive_9.Text }, { foo }).value).toBe(foo);
                expect(new _31.Enum(registry, { foo: primitive_9.Text }, foo, 0).value).toBe(foo);
                expect(new _31.Enum(registry, { foo: primitive_9.Text }, new _31.Enum(registry, { foo: primitive_9.Text }, { foo })).value).toBe(foo);
            });
            it('decodes from hex', () => {
                expect(new _31.Enum(registry, { Text: primitive_9.Text, U32: primitive_9.U32 }, '0x0134120000').value.toString()).toEqual('4660'); // 0x1234 in decimal
            });
            it('decodes from hex (string types)', () => {
                expect(new _31.Enum(registry, 
                // eslint-disable-next-line sort-keys
                { foo: 'Text', bar: 'u32' }, '0x0134120000').value.toString()).toEqual('4660'); // 0x1234 in decimal
            });
            it('decodes from a JSON input (mixed case)', () => {
                expect(new _31.Enum(registry, { Text: primitive_9.Text, U32: primitive_9.U32 }, { U32: 42 }).value.toString()).toEqual('42');
            });
            it('decodes from JSON string', () => {
                expect(new _31.Enum(registry, { Null: primitive_9.Null, U32: primitive_9.U32 }, 'null').type).toEqual('Null');
            });
            it('has correct isXyz/asXyz (Enum.with)', () => {
                const test = new (_31.Enum.with({ First: primitive_9.Text, Second: primitive_9.U32, Third: primitive_9.U32 }))(registry, { Second: 42 });
                expect(test.isSecond).toEqual(true);
                expect(test.asSecond.toNumber()).toEqual(42);
                expect(() => test.asThird).toThrow(/Cannot convert 'Second' via asThird/);
            });
            it('stringifies with custom types', () => {
                class A extends primitive_9.Null {
                }
                class B extends primitive_9.Null {
                }
                class C extends primitive_9.Null {
                }
                class Test extends _31.Enum {
                    constructor(registry, value, index) {
                        super(registry, {
                            a: A,
                            b: B,
                            c: C
                        }, value, index);
                    }
                }
                expect(new Test(registry).toJSON()).toEqual({ a: null });
            });
            it('creates via with', () => {
                class A extends primitive_9.Null {
                }
                class B extends primitive_9.U32 {
                }
                class C extends primitive_9.Null {
                }
                const Test = _31.Enum.with({ A, B, C });
                expect(new Test(registry).toJSON()).toEqual({ A: null });
                expect(new Test(registry, 1234, 1).toJSON()).toEqual({ B: 1234 });
                expect(new Test(registry, 0x1234, 1).toU8a()).toEqual(new Uint8Array([1, 0x34, 0x12, 0x00, 0x00]));
                expect(new Test(registry, 0x1234, 1).toU8a(true)).toEqual(new Uint8Array([0x34, 0x12, 0x00, 0x00]));
            });
            it('allows accessing the type and value', () => {
                const text = new primitive_9.Text(registry, 'foo');
                const enumType = new _31.Enum(registry, { Text: primitive_9.Text, U32: primitive_9.U32 }, { Text: text });
                expect(enumType.type).toBe('Text');
                expect(enumType.value).toEqual(text);
            });
            describe('utils', () => {
                const DEF = { num: primitive_9.U32, str: primitive_9.Text };
                const u8a = new Uint8Array([1, 3 << 2, 88, 89, 90]);
                const test = new _31.Enum(registry, DEF, u8a);
                it('compares against index', () => {
                    expect(test.eq(1)).toBe(true);
                });
                it('compares against u8a', () => {
                    expect(test.eq(u8a)).toBe(true);
                });
                it('compares against hex', () => {
                    expect(test.eq(util_241.u8aToHex(u8a))).toBe(true);
                });
                it('compares against another enum', () => {
                    expect(test.eq(new _31.Enum(registry, DEF, u8a))).toBe(true);
                });
                it('compares against another object', () => {
                    expect(test.eq({ str: 'XYZ' })).toBe(true);
                });
                it('compares against values', () => {
                    expect(test.eq('XYZ')).toBe(true);
                });
                it('compares basic enum on string', () => {
                    expect(new _31.Enum(registry, ['A', 'B', 'C'], 1).eq('B')).toBe(true);
                });
            });
        });
        describe('string-only construction (old Enum)', () => {
            const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
                const e = new _31.Enum(registry, ['foo', 'bar'], input);
                expect(e.toString()).toBe(expected);
            });
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const e = new _31.Enum(registry, ['Foo', 'Bar'], 1);
                expect(e[to]()).toEqual(expected);
            });
            testDecode('Enum', undefined, 'foo');
            testDecode('Enum', new _31.Enum(registry, ['foo', 'bar'], 1), 'bar');
            testDecode('number', 0, 'foo');
            testDecode('number', 1, 'bar');
            testDecode('string', 'bar', 'bar');
            testDecode('Uint8Array', Uint8Array.from([0]), 'foo');
            testDecode('Uint8Array', Uint8Array.from([1]), 'bar');
            testEncode('toJSON', 'Bar');
            testEncode('toNumber', 1);
            testEncode('toString', 'Bar');
            testEncode('toU8a', Uint8Array.from([1]));
            it('provides a clean toString()', () => {
                expect(new _31.Enum(registry, ['foo', 'bar']).toString()).toEqual('foo');
            });
            it('provides a clean toString() (enum)', () => {
                expect(new _31.Enum(registry, ['foo', 'bar'], new _31.Enum(registry, ['foo', 'bar'], 1)).toNumber()).toEqual(1);
            });
            it('converts to and from Uint8Array', () => {
                expect(new _31.Enum(registry, ['foo', 'bar'], new Uint8Array([1])).toU8a()).toEqual(new Uint8Array([1]));
            });
            it('converts from JSON', () => {
                expect(new _31.Enum(registry, ['foo', 'bar', 'baz', 'gaz', 'jaz'], 4).toNumber()).toEqual(4);
            });
            it('has correct isXyz getters (Enum.with)', () => {
                const test = new (_31.Enum.with(['First', 'Second', 'Third']))(registry, 'Second');
                expect(test.isSecond).toEqual(true);
            });
            describe('utils', () => {
                it('compares against the index value', () => {
                    expect(new _31.Enum(registry, ['foo', 'bar'], 1).eq(1)).toBe(true);
                });
                it('compares against the index value (false)', () => {
                    expect(new _31.Enum(registry, ['foo', 'bar'], 1).eq(0)).toBe(false);
                });
                it('compares against the string value', () => {
                    expect(new _31.Enum(registry, ['foo', 'bar'], 1).eq('bar')).toBe(true);
                });
                it('compares against the string value (false)', () => {
                    expect(new _31.Enum(registry, ['foo', 'bar'], 1).eq('foo')).toBe(false);
                });
                it('has isNone set, with correct index (i.e. no values are used)', () => {
                    const test = new _31.Enum(registry, ['foo', 'bar'], 1);
                    expect(test.isNone).toBe(true);
                    expect(test.index).toEqual(1);
                });
            });
        });
        describe('index construction', () => {
            it('creates enum where index is specified', () => {
                const Test = _31.Enum.with({
                    A: primitive_9.U32,
                    B: primitive_9.U32
                });
                const test = new Test(registry, new primitive_9.U32(registry, 123), 1);
                expect(test.type).toEqual('B');
                expect(test.value.toNumber()).toEqual(123);
            });
            it('creates enum when value is an enum', () => {
                const Test = _31.Enum.with({
                    A: primitive_9.U32,
                    B: primitive_9.U32
                });
                const test = new Test(registry, new Test(registry, 123, 1));
                expect(test.type).toEqual('B');
                expect(test.value.toNumber()).toEqual(123);
            });
            it('creates via enum with nested enums as the value', () => {
                const Nest = _31.Enum.with({
                    C: primitive_9.U32,
                    D: primitive_9.U32
                });
                const Test = _31.Enum.with({
                    A: primitive_9.U32,
                    B: Nest
                });
                const test = new Test(registry, new Nest(registry, 123, 1), 1);
                expect(test.type).toEqual('B');
                expect(test.value.type).toEqual('D');
                expect(test.value.value.toNumber()).toEqual(123);
            });
        });
        describe('toRawType', () => {
            it('has a sane output for basic enums', () => {
                expect(new _31.Enum(registry, ['foo', 'bar']).toRawType()).toEqual(JSON.stringify({ _enum: ['foo', 'bar'] }));
            });
            it('has a sane output for typed enums', () => {
                expect(
                // eslint-disable-next-line sort-keys
                new _31.Enum(registry, { foo: primitive_9.Text, bar: primitive_9.U32 }).toRawType()
                // eslint-disable-next-line sort-keys
                ).toEqual(JSON.stringify({ _enum: { foo: 'Text', bar: 'u32' } }));
            });
            it('re-creates via rawType (c-like)', () => {
                const type = new _31.Enum(registry, ['foo', 'bar']).toRawType();
                expect(registry.createType(type, 1).toString()).toEqual('bar');
            });
            it('re-creates via rawType (types)', () => {
                const type = new _31.Enum(registry, { A: primitive_9.Text, B: primitive_9.U32, C: primitive_9.U32 }).toRawType();
                const value = registry.createType(type, { B: 123 });
                expect(value.isB).toEqual(true);
                expect(value.asB.toNumber()).toEqual(123);
            });
        });
        describe('toHex', () => {
            it('has a proper hex representation & length', () => {
                const Test = _31.Enum.with({
                    A: primitive_9.Text,
                    B: primitive_9.U32
                });
                const test = new Test(registry, 123, 1);
                expect(test.toHex()).toEqual('0x017b000000');
                expect(test.encodedLength).toEqual(1 + 4);
            });
            it('encodes a single entry correctly', () => {
                const Test = _31.Enum.with({ A: 'u32' });
                const test = new Test(registry, 0x44332211, 0);
                expect(test.toHex()).toEqual('0x' +
                    '00' + // index
                    '11223344' // u32 LE encoded
                );
            });
            it('encodes a single entry correctly (with embedded encoding)', () => {
                const Test = _31.Enum.with({ A: 'Address' });
                const test = new Test(registry, registry.createType('AccountId', '0x0001020304050607080910111213141516171819202122232425262728293031'), 0);
                expect(test.toHex()).toEqual('0x' +
                    '00' + // index
                    'ff' + // Address indicating an embedded AccountId
                    '0001020304050607080910111213141516171819202122232425262728293031' // AccountId
                );
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/HashMap.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_54, primitive_10, _32) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_54.TypeRegistry();
    describe('HashMap', () => {
        it('generates sane toRawTypes', () => {
            expect(new (_32.HashMap.with(primitive_10.Text, primitive_10.U32))(registry).toRawType()).toBe('HashMap<Text,u32>');
            expect(new (_32.HashMap.with(primitive_10.Text, primitive_10.Text))(registry).toRawType()).toBe('HashMap<Text,Text>');
            expect(new (_32.HashMap.with(primitive_10.Text, _32.Struct.with({ a: primitive_10.U32, b: primitive_10.Text })))(registry).toRawType())
                .toBe('HashMap<Text,{"a":"u32","b":"Text"}>');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Int.spec", ["require", "exports", "types/src/create/index", "types/src/codec/index"], function (require, exports, create_55, _33) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Int', () => {
        const registry = new create_55.TypeRegistry();
        it('provides a toBigInt interface', () => {
            expect(new _33.Int(registry, -1234).toBigInt()).toEqual(-1234n);
        });
        it('provides a toBn interface', () => {
            expect(new _33.Int(registry, -1234).toBn().toNumber()).toEqual(-1234);
        });
        it('provides a toNumber interface', () => {
            expect(new _33.Int(registry, -1234).toNumber()).toEqual(-1234);
        });
        it('converts to Little Endian from the provided value', () => {
            expect(new _33.Int(registry, -1234).toU8a()).toEqual(new Uint8Array([46, 251, 255, 255, 255, 255, 255, 255]));
        });
        it('converts to Little Endian from the provided value (bitLength)', () => {
            expect(new _33.Int(registry, -1234, 32).toU8a()).toEqual(new Uint8Array([46, 251, 255, 255]));
        });
        it('converts to hex/string', () => {
            const i = new _33.Int(registry, '0x12', 16);
            expect(i.toHex()).toEqual('0x0012');
            expect(i.toString()).toEqual('18');
        });
        it('converts to equivalents', () => {
            const a = new _33.Int(registry, '-123');
            expect(new _33.Int(registry, a).toNumber()).toEqual(-123);
        });
        describe('static with', () => {
            it('allows default toRawType', () => {
                expect(new (_33.Int.with(64))(registry).toRawType()).toEqual('i64');
            });
            it('allows toRawType override', () => {
                expect(new (_33.Int.with(64, 'SomethingElse'))(registry).toRawType()).toEqual('SomethingElse');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Linkage.spec", ["require", "exports", "types/src/create/registry", "types/src/codec/index"], function (require, exports, registry_3, _34) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new registry_3.TypeRegistry();
    describe('Linkage', () => {
        it('decodes with ValidatorPrefs', () => {
            const LINKA = { next: '5GznmRvdi5htUJKnMSWJgJUzSJJXSvWuHRSEdyUbHJZDNcwU', previous: null };
            const PREFS = { commission: '10.00%' };
            // prefs sanity check
            expect(registry.createType('ValidatorPrefs', '0x0284d717').toHuman()).toEqual(PREFS);
            // linkage sanity checks
            expect(new _34.Linkage(registry, 'AccountId', '0x0001da30b68f54f686f586ddb29de12b682dd8bd1404566fb8a8db5dec20aa5b6b36').toHuman()).toEqual(LINKA);
            expect(registry.createType('Linkage<AccountId>', '0x0001da30b68f54f686f586ddb29de12b682dd8bd1404566fb8a8db5dec20aa5b6b36').toHuman()).toEqual(LINKA);
            // actual check
            expect(registry.createType('(ValidatorPrefs, Linkage<AccountId>)', '0x0284d7170001da30b68f54f686f586ddb29de12b682dd8bd1404566fb8a8db5dec20aa5b6b36').toHuman()).toEqual([PREFS, LINKA]);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Map.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_56, primitive_11, _35) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_56.TypeRegistry();
    const mockU32TextMap = new Map();
    mockU32TextMap.set(new primitive_11.Text(registry, 'bazzing'), new primitive_11.U32(registry, 69));
    const mockU32TextMapString = '{"bazzing":69}';
    const mockU32TextMapObject = { bazzing: 69 };
    const mockU32TextMapHexString = '0x041c62617a7a696e6745000000';
    const mockU32TextMapUint8Array = Uint8Array.from([4, 28, 98, 97, 122, 122, 105, 110, 103, 69, 0, 0, 0]);
    const mockU32U32Map = new Map();
    mockU32U32Map.set(new primitive_11.U32(registry, 1), new primitive_11.U32(registry, 2));
    mockU32U32Map.set(new primitive_11.U32(registry, 23), new primitive_11.U32(registry, 24));
    mockU32U32Map.set(new primitive_11.U32(registry, 28), new primitive_11.U32(registry, 30));
    mockU32U32Map.set(new primitive_11.U32(registry, 45), new primitive_11.U32(registry, 80));
    const mockU32U32MapString = '{"1":2,"23":24,"28":30,"45":80}';
    const mockU32U32MapObject = { 1: 2, 23: 24, 28: 30, 45: 80 };
    const mockU32U32MapHexString = '0x10043102000000083233180000000832381e00000008343550000000';
    const mockU32U32MapUint8Array = Uint8Array.from([16, 4, 49, 2, 0, 0, 0, 8, 50, 51, 24, 0, 0, 0, 8, 50, 56, 30, 0, 0, 0, 8, 52, 53, 80, 0, 0, 0]);
    describe('CodecMap', () => {
        describe('decoding', () => {
            const testDecode = (type, input, output) => it(`can decode from ${type}`, () => {
                const s = new _35.CodecMap(registry, primitive_11.Text, primitive_11.U32, input);
                expect(s.toString()).toBe(output);
            });
            testDecode('map', mockU32TextMap, mockU32TextMapString);
            testDecode('hex', mockU32TextMapHexString, mockU32TextMapString);
            testDecode('Uint8Array', mockU32TextMapUint8Array, mockU32TextMapString);
            testDecode('map', mockU32U32Map, mockU32U32MapString);
            testDecode('hex', mockU32U32MapHexString, mockU32U32MapString);
            testDecode('Uint8Array', mockU32U32MapUint8Array, mockU32U32MapString);
        });
        describe('encoding', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const s = new _35.CodecMap(registry, primitive_11.Text, primitive_11.U32, mockU32TextMap, 'BTreeMap');
                expect(s[to]()).toEqual(expected);
            });
            testEncode('toHex', mockU32TextMapHexString);
            testEncode('toJSON', mockU32TextMapObject);
            testEncode('toU8a', mockU32TextMapUint8Array);
            testEncode('toString', mockU32TextMapString);
        });
        describe('encoding muple values', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const s = new _35.CodecMap(registry, primitive_11.Text, primitive_11.U32, mockU32U32Map, 'BTreeMap');
                expect(s[to]()).toEqual(expected);
            });
            testEncode('toHex', mockU32U32MapHexString);
            testEncode('toJSON', mockU32U32MapObject);
            testEncode('toU8a', mockU32U32MapUint8Array);
            testEncode('toString', mockU32U32MapString);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Option.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_57, primitive_12, _36) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_57.TypeRegistry();
    const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
        const o = new _36.Option(registry, primitive_12.Text, input);
        expect(o.toString()).toBe(expected);
        expect(o.isNone).toBe(!expected.length);
    });
    const testEncode = (to, expected) => it(`can encode ${to}`, () => {
        const e = new _36.Option(registry, primitive_12.Text, 'foo');
        expect(e[to]()).toEqual(expected);
    });
    describe('Option', () => {
        it('converts undefined/null to empty', () => {
            expect(new _36.Option(registry, primitive_12.Text, undefined).isNone).toBe(true);
            expect(new _36.Option(registry, primitive_12.Text, null).isNone).toBe(true);
            expect(new _36.Option(registry, primitive_12.Text, 'test').isNone).toBe(false);
        });
        it('converts an option to an option', () => {
            expect(new _36.Option(registry, primitive_12.Text, new _36.Option(registry, primitive_12.Text, 'hello')).toString()).toEqual('hello');
        });
        it('converts an option to an option (strings)', () => {
            expect(new _36.Option(registry, 'Text', new _36.Option(registry, 'Text', 'hello')).toString()).toEqual('hello');
        });
        it('converts correctly from hex with toHex (Bytes)', () => {
            // Option<Bytes> for a parachain head, however, this is effectively an
            // Option<Option<Bytes>> (hence the length, since it is from storage)
            const HEX = '0x210100000000000000000000000000000000000000000000000000000000000000000000000000000000011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce';
            // watch the hex prefix and length
            expect(new _36.Option(registry, primitive_12.Bytes, HEX).toHex().substr(6)).toEqual(HEX.substr(2));
        });
        it('converts correctly from hex with toNumber (U64)', () => {
            const HEX = '0x12345678';
            expect(new _36.Option(registry, primitive_12.U32, HEX).unwrap().toNumber()).toEqual(0x12345678);
        });
        it('decodes reusing instanciated inputs', () => {
            const foo = new primitive_12.Text(registry, 'bar');
            expect((new _36.Option(registry, primitive_12.Text, foo)).value).toBe(foo);
        });
        testDecode('string (with)', 'foo', 'foo');
        testDecode('string (without)', undefined, '');
        testDecode('Uint8Array (with)', Uint8Array.from([1, 12, 102, 111, 111]), 'foo');
        testDecode('Uint8Array (without)', Uint8Array.from([0]), '');
        testEncode('toHex', '0x0c666f6f');
        testEncode('toString', 'foo');
        testEncode('toU8a', Uint8Array.from([1, 12, 102, 111, 111]));
        it('has empty toString() (undefined)', () => {
            expect(new _36.Option(registry, primitive_12.Text).toString()).toEqual('');
        });
        it('has value toString() (provided)', () => {
            expect(new _36.Option(registry, primitive_12.Text, new Uint8Array([1, 4 << 2, 49, 50, 51, 52])).toString()).toEqual('1234');
        });
        it('converts toU8a() with', () => {
            expect(new _36.Option(registry, primitive_12.Text, '1234').toU8a()).toEqual(new Uint8Array([1, 4 << 2, 49, 50, 51, 52]));
        });
        it('converts toU8a() without', () => {
            expect(new _36.Option(registry, primitive_12.Text).toU8a()).toEqual(new Uint8Array([0]));
        });
        describe('utils', () => {
            const test = new _36.Option(registry, primitive_12.Text, '1234');
            it('compares against other option', () => {
                expect(test.eq(new _36.Option(registry, primitive_12.Text, '1234'))).toBe(true);
            });
            it('compares against raw value', () => {
                expect(test.eq('1234')).toBe(true);
            });
            it('unwrapOr to specified if empty', () => {
                expect(new _36.Option(registry, primitive_12.Text).unwrapOr('6789').toString()).toEqual('6789');
            });
            it('unwrapOr to specified if non-empty', () => {
                expect(new _36.Option(registry, primitive_12.Text, '1234').unwrapOr(null)?.toString()).toEqual('1234');
            });
            it('unwrapOrDefault to default if empty', () => {
                expect(new _36.Option(registry, primitive_12.U32).unwrapOrDefault().toNumber()).toEqual(0);
            });
            it('unwrapOrDefault to specified if non-empty', () => {
                expect(new _36.Option(registry, primitive_12.U32, '1234').unwrapOrDefault().toNumber()).toEqual(1234);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Raw.spec", ["require", "exports", "types/src/create/index", "types/src/codec/index"], function (require, exports, create_58, _37) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_58.TypeRegistry();
    const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
        const e = new _37.Raw(registry, input);
        expect(e.toString()).toBe(expected);
    });
    const testEncode = (to, expected) => it(`can encode ${to}`, () => {
        const e = new _37.Raw(registry, [1, 2, 3, 4, 5]);
        expect(e[to]()).toEqual(expected);
    });
    describe('Raw', () => {
        let u8a;
        beforeEach(() => {
            u8a = new _37.Raw(registry, [1, 2, 3, 4, 5]);
        });
        testDecode('Array', [1, 2, 3, 4, 5], '0x0102030405');
        testDecode('hex', '0x0102030405', '0x0102030405');
        testDecode('U8a', new Uint8Array([1, 2, 3, 4, 5]), '0x0102030405');
        testDecode('Uint8Array', Uint8Array.from([1, 2, 3, 4, 5]), '0x0102030405');
        testEncode('toJSON', '0x0102030405');
        testEncode('toHex', '0x0102030405');
        testEncode('toString', '0x0102030405');
        testEncode('toU8a', Uint8Array.from([1, 2, 3, 4, 5]));
        it('contains the length of the elements', () => {
            expect(u8a.length).toEqual(5);
        });
        it('correctly encodes length', () => {
            expect(u8a.encodedLength).toEqual(5);
        });
        it('allows wrapping of a pre-existing instance', () => {
            expect(new _37.Raw(registry, u8a).length).toEqual(5);
        });
        it('implements subarray correctly', () => {
            expect(u8a.subarray(1, 3)).toEqual(Uint8Array.from([2, 3]));
        });
        describe('utils', () => {
            it('compares against other U8a', () => {
                expect(u8a.eq(new Uint8Array([1, 2, 3, 4, 5]))).toBe(true);
            });
            it('compares against other U8a (non-length)', () => {
                expect(u8a.eq(new Uint8Array([1, 2, 3, 4]))).toBe(false);
            });
            it('compares against other U8a (mismatch)', () => {
                expect(u8a.eq(new Uint8Array([1, 2, 3, 4, 6]))).toBe(false);
            });
            it('compares against hex inputs', () => {
                expect(u8a.eq('0x0102030405')).toBe(true);
            });
            it('has valid isAscii', () => {
                expect(u8a.isAscii).toBe(false);
                expect(new _37.Raw(registry, '0x2021222324').isAscii).toBe(true);
            });
            it('has valid toUtf8', () => {
                expect(new _37.Raw(registry, 'Приветствую, ми').toUtf8()).toEqual('Приветствую, ми');
                expect(new _37.Raw(registry, '0xe4bda0e5a5bd').toUtf8()).toEqual('你好');
            });
            it('throws on invalid utf8', () => {
                expect(() => new _37.Raw(registry, '0x7f07b1f87709608bee603bbc79a0dfc29cd315c1351a83aa31adf7458d7d3003').toUtf8()).toThrow(/The character sequence is not a valid Utf8 string/);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Result.spec", ["require", "exports", "@polkadot/util", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, util_242, create_59, primitive_13, _38) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Result', () => {
        const registry = new create_59.TypeRegistry();
        const Type = _38.Result.with({ Error: primitive_13.Text, Ok: primitive_13.u32 });
        it('has a sane toRawType representation', () => {
            expect(new Type(registry).toRawType()).toEqual('Result<u32,Text>');
        });
        it('decodes from a u8a (success)', () => {
            const result = new Type(registry, new Uint8Array([0, 1, 2, 3, 4]));
            expect(result.isOk);
            expect(result.asOk.toU8a()).toEqual(new Uint8Array([1, 2, 3, 4]));
            expect(result.toHex()).toEqual('0x0001020304');
            expect(result.toJSON()).toEqual({
                Ok: 0x04030201
            });
        });
        it('decodes from a u8a (error)', () => {
            const result = new Type(registry, new Uint8Array([1, 4 << 2, 100, 101, 102, 103]));
            expect(result.isError);
            expect(result.asError.toU8a()).toEqual(new Uint8Array([4 << 2, 100, 101, 102, 103]));
            expect(result.toHex()).toEqual('0x011064656667');
            expect(result.toJSON()).toEqual({
                Error: util_242.hexToString('0x64656667')
            });
        });
        it('decodes from a JSON representation', () => {
            const result = new Type(registry, { Error: 'error' });
            expect(result.toHex()).toEqual('0x01146572726f72');
        });
        it('decodes reusing instanciated inputs', () => {
            const foo = new primitive_13.Text(registry, 'bar');
            expect(new _38.Result(registry, primitive_13.Text, primitive_13.Text, { Ok: foo }).asOk).toBe(foo);
        });
        it('returns a proper raw typedef rom a built-in', () => {
            expect(registry.createType('DispatchResult').toRawType()).toEqual('Result<(),DispatchError>');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Set.spec", ["require", "exports", "types/src/create/index", "types/src/codec/index"], function (require, exports, create_60, _39) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // TODO actually import these from definitions, don't re-define here
    const SET_FIELDS = {
        header: 0b00000001,
        body: 0b00000010,
        receipt: 0b00000100,
        messageQueue: 0b00001000,
        justification: 0b00010000
    };
    const SET_ROLES = {
        none: 0b00000000,
        full: 0b00000001,
        light: 0b00000010,
        authority: 0b00000100
    };
    const SET_WITHDRAW = {
        TransactionPayment: 0b00000001,
        Transfer: 0b00000010,
        Reserve: 0b00000100,
        Fee: 0b00001000
    };
    describe('Set', () => {
        const registry = new create_60.TypeRegistry();
        it('constructs via an string[]', () => {
            const set = new _39.CodecSet(registry, SET_ROLES, ['full', 'authority']);
            expect(set.isEmpty).toEqual(false);
            expect(set.toString()).toEqual('[full, authority]');
        });
        it('throws with invalid values', () => {
            expect(() => new _39.CodecSet(registry, SET_ROLES, ['full', 'authority', 'invalid'])).toThrow(/Invalid key 'invalid'/);
        });
        it('throws with add on invalid', () => {
            expect(() => (new _39.CodecSet(registry, SET_ROLES, [])).add('invalid')).toThrow(/Invalid key 'invalid'/);
        });
        it('allows construction via number', () => {
            expect((new _39.CodecSet(registry, SET_WITHDRAW, 15)).eq(['TransactionPayment', 'Transfer', 'Reserve', 'Fee'])).toBe(true);
        });
        it('does not allow invalid number', () => {
            expect(() => new _39.CodecSet(registry, SET_WITHDRAW, 31)).toThrow(/Mismatch decoding '31', computed as '15'/);
        });
        it('hash a valid encoding', () => {
            const set = new _39.CodecSet(registry, SET_FIELDS, ['header', 'body', 'justification']);
            expect(set.toU8a()).toEqual(new Uint8Array([19]));
        });
        describe('utils', () => {
            const set = new _39.CodecSet(registry, SET_ROLES, ['full', 'authority']);
            it('compares against string array', () => {
                expect(set.eq(['authority', 'full'])).toBe(true);
            });
            it('compares against number (encoded)', () => {
                expect(set.eq(SET_ROLES.full | SET_ROLES.authority)).toBe(true);
            });
            it('compares against other sets', () => {
                expect(set.eq(new _39.CodecSet(registry, SET_ROLES, ['authority', 'full']))).toBe(true);
            });
            it('returns false on other values', () => {
                expect(set.eq('full')).toBe(false);
            });
        });
        it('has a sane toRawType representation', () => {
            expect(new _39.CodecSet(registry, { a: 1, b: 2, c: 345 }).toRawType()).toEqual(JSON.stringify({
                _set: { a: 1, b: 2, c: 345 }
            }));
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Struct.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_61, primitive_14, _40) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Struct', () => {
        const registry = new create_61.TypeRegistry();
        describe('decoding', () => {
            const testDecode = (type, input) => it(`can decode from ${type}`, () => {
                const s = new _40.Struct(registry, {
                    foo: primitive_14.Text,
                    bar: primitive_14.U32
                }, input);
                expect([...s.keys()]).toEqual(['foo', 'bar']);
                expect([...s.values()].map((v) => v.toString())).toEqual(['bazzing', '69']);
            });
            testDecode('array', ['bazzing', 69]);
            testDecode('hex', '0x1c62617a7a696e6745000000');
            testDecode('object', { foo: 'bazzing', bar: 69 });
            testDecode('Uint8Array', Uint8Array.from([28, 98, 97, 122, 122, 105, 110, 103, 69, 0, 0, 0]));
        });
        describe('encoding', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const s = new _40.Struct(registry, {
                    foo: primitive_14.Text,
                    bar: primitive_14.U32
                }, { foo: 'bazzing', bar: 69 });
                expect(s[to]()).toEqual(expected);
            });
            testEncode('toHex', '0x1c62617a7a696e6745000000');
            testEncode('toJSON', { foo: 'bazzing', bar: 69 });
            testEncode('toU8a', Uint8Array.from([28, 98, 97, 122, 122, 105, 110, 103, 69, 0, 0, 0]));
            testEncode('toString', '{"foo":"bazzing","bar":69}');
        });
        it('decodes null', () => {
            expect(new (_40.Struct.with({
                txt: primitive_14.Text,
                u32: primitive_14.U32
            }))(registry, null).toString()).toEqual('{}');
        });
        it('decodes reusing instantiated inputs', () => {
            const foo = new primitive_14.Text(registry, 'bar');
            expect((new _40.Struct(registry, { foo: primitive_14.Text }, { foo })).get('foo')).toBe(foo);
        });
        it('decodes a more complicated type', () => {
            const s = new _40.Struct(registry, {
                foo: _40.Vec.with(_40.Struct.with({
                    bar: primitive_14.Text
                }))
            }, { foo: [{ bar: 1 }, { bar: 2 }] });
            expect(s.toString()).toBe('{"foo":[{"bar":"1"},{"bar":"2"}]}');
        });
        it('decodes from a Map input', () => {
            const input = new _40.Struct(registry, {
                a: primitive_14.U32,
                txt: primitive_14.Text
            }, { a: 42, txt: 'fubar' });
            const s = new _40.Struct(registry, {
                txt: primitive_14.Text,
                foo: primitive_14.U32,
                bar: primitive_14.U32
            }, input);
            expect(s.toString()).toEqual('{"txt":"fubar","foo":0,"bar":0}');
        });
        it('decodes from a snake_case input', () => {
            const input = new _40.Struct(registry, {
                snakeCaseA: primitive_14.U32,
                snakeCaseB: primitive_14.Text,
                other: primitive_14.U32
            }, { snake_case_a: 42, snake_case_b: 'fubar', other: 69 });
            expect(input.toString()).toEqual('{"snakeCaseA":42,"snakeCaseB":"fubar","other":69}');
        });
        it('throws when it cannot decode', () => {
            expect(() => new (_40.Struct.with({
                txt: primitive_14.Text,
                u32: primitive_14.U32
            }))(registry, 'ABC')).toThrowError(/Cannot decode value/);
        });
        it('provides a clean toString()', () => {
            expect(new (_40.Struct.with({
                txt: primitive_14.Text,
                u32: primitive_14.U32
            }))(registry, { txt: 'foo', u32: 0x123456 }).toString()).toEqual('{"txt":"foo","u32":1193046}');
        });
        it('provides a clean toString() (string types)', () => {
            expect(new (_40.Struct.with({
                txt: 'Text',
                num: 'u32',
                cls: primitive_14.U32
            }))(registry, { txt: 'foo', num: 0x123456, cls: 123 }).toString()).toEqual('{"txt":"foo","num":1193046,"cls":123}');
        });
        it('exposes the properties on the object', () => {
            const struct = new (_40.Struct.with({
                txt: primitive_14.Text,
                u32: primitive_14.U32
            }))(registry, { txt: 'foo', u32: 0x123456 });
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
            expect(struct.txt.toString()).toEqual('foo');
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
            expect(struct.u32.toNumber()).toEqual(0x123456);
        });
        it('correctly encodes length', () => {
            expect(new (_40.Struct.with({
                txt: primitive_14.Text,
                u32: primitive_14.U32
            }))(registry, { foo: 'bazzing', bar: 69 }).encodedLength).toEqual(5);
        });
        it('exposes the types', () => {
            expect(new _40.Struct(registry, {
                foo: primitive_14.Text,
                bar: primitive_14.Text,
                baz: primitive_14.U32
            }, {
                foo: 'foo',
                bar: 'bar',
                baz: 3
            }).Type).toEqual({
                foo: 'Text',
                bar: 'Text',
                baz: 'u32'
            });
        });
        it('gets the value at a particular index', () => {
            expect(new (_40.Struct.with({
                txt: primitive_14.Text,
                u32: primitive_14.U32
            }))(registry, { txt: 'foo', u32: 1234 })
                .getAtIndex(1)
                .toString()).toEqual('1234');
        });
        describe('utils', () => {
            it('compares against other objects', () => {
                const test = {
                    foo: 'foo',
                    bar: 'bar',
                    baz: 3
                };
                expect(new _40.Struct(registry, {
                    foo: primitive_14.Text,
                    bar: primitive_14.Text,
                    baz: primitive_14.U32
                }, test).eq(test)).toBe(true);
            });
        });
        it('allows toString with large numbers', () => {
            // replicate https://github.com/polkadot-js/api/issues/640
            expect(new _40.Struct(registry, {
                blockNumber: registry.createClass('Option<BlockNumber>')
            }, { blockNumber: '0x0000000010abcdef' }).toString()).toEqual('{"blockNumber":279694831}');
        });
        it('generates sane toRawType', () => {
            expect(new _40.Struct(registry, {
                accountId: 'AccountId',
                balanceCompact: registry.createClass('Compact<Balance>'),
                blockNumber: registry.createClass('BlockNumber'),
                compactNumber: registry.createClass('Compact<BlockNumber>'),
                optionNumber: registry.createClass('Option<BlockNumber>'),
                counter: primitive_14.U32,
                vector: _40.Vec.with('AccountId')
            }).toRawType()).toEqual(JSON.stringify({
                accountId: 'AccountId',
                balanceCompact: 'Compact<Balance>',
                blockNumber: 'BlockNumber',
                compactNumber: 'Compact<BlockNumber>',
                optionNumber: 'Option<BlockNumber>',
                counter: 'u32',
                vector: 'Vec<AccountId>'
            }));
        });
        it('generates sane toRawType (via with)', () => {
            const Type = _40.Struct.with({
                accountId: 'AccountId',
                balance: registry.createClass('Balance')
            });
            expect(new Type(registry).toRawType()).toEqual(JSON.stringify({
                accountId: 'AccountId',
                balance: 'Balance' // Override in Uint
            }));
        });
        describe('toU8a', () => {
            const def = {
                foo: 'Bytes',
                method: 'Bytes',
                bar: 'Option<u32>',
                baz: 'bool'
            };
            const val = {
                foo: '0x4269',
                method: '0x99',
                bar: 1,
                baz: true
            };
            it('generates toU8a with undefined', () => {
                expect(new _40.Struct(registry, def, val).toU8a()).toEqual(new Uint8Array([2 << 2, 0x42, 0x69, 1 << 2, 0x99, 1, 1, 0, 0, 0, 1]));
            });
            it('generates toU8a with true', () => {
                expect(new _40.Struct(registry, def, val).toU8a(true)).toEqual(new Uint8Array([0x42, 0x69, 0x99, 1, 0, 0, 0, 1]));
            });
            it('generates toU8a with { method: true }', () => {
                expect(new _40.Struct(registry, def, val).toU8a({ method: true })).toEqual(new Uint8Array([2 << 2, 0x42, 0x69, 0x99, 1, 1, 0, 0, 0, 1]));
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Tuple.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, metadata_8, static_23, create_62, primitive_15, _41) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_23 = __importDefault(static_23);
    describe('Tuple', () => {
        const registry = new create_62.TypeRegistry();
        let tuple;
        beforeEach(() => {
            tuple = new _41.Tuple(registry, [primitive_15.Text, primitive_15.U32], ['bazzing', 69]);
        });
        describe('decoding', () => {
            const testDecode = (type, input) => it(`can decode from ${type}`, () => {
                const t = new _41.Tuple(registry, [
                    primitive_15.Text,
                    primitive_15.U32
                ], input);
                expect(t.toJSON()).toEqual(['bazzing', 69]);
            });
            testDecode('array', ['bazzing', 69]);
            testDecode('hex', '0x1c62617a7a696e6745000000');
            testDecode('Uint8Array', Uint8Array.from([28, 98, 97, 122, 122, 105, 110, 103, 69, 0, 0, 0]));
            it('decodes reusing instantiated inputs', () => {
                const foo = new primitive_15.Text(registry, 'bar');
                expect((new _41.Tuple(registry, [primitive_15.Text], [foo]))[0]).toBe(foo);
            });
            it('decodes properly from complex types', () => {
                const INPUT = '0xcc0200000000';
                const test = registry.createType('(u32, [u32; 0], u16)', INPUT);
                expect(test.encodedLength).toEqual(4 + 0 + 2);
                expect(test.toHex()).toEqual(INPUT);
            });
        });
        describe('encoding', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                expect(tuple[to]()).toEqual(expected);
            });
            testEncode('toHex', '0x1c62617a7a696e6745000000');
            testEncode('toJSON', ['bazzing', 69]);
            testEncode('toU8a', Uint8Array.from([28, 98, 97, 122, 122, 105, 110, 103, 69, 0, 0, 0]));
            testEncode('toString', '["bazzing",69]');
        });
        it('creates from string types', () => {
            expect(new _41.Tuple(registry, ['Text', 'u32', primitive_15.U32], ['foo', 69, 42]).toString()).toEqual('["foo",69,42]');
        });
        it('creates properly via actual hex string', () => {
            const metadata = new metadata_8.Metadata(registry, static_23.default);
            registry.setMetadata(metadata);
            const test = new (_41.Tuple.with([
                registry.createClass('BlockNumber'), registry.createClass('VoteThreshold')
            ]))(registry, '0x6219000001');
            expect(test[0].toNumber()).toEqual(6498);
            expect(test[1].toNumber()).toEqual(1);
        });
        it('exposes the Types', () => {
            expect(tuple.Types).toEqual(['Text', 'u32']);
        });
        it('exposes the Types (object creation)', () => {
            const test = new _41.Tuple(registry, {
                BlockNumber: registry.createClass('BlockNumber'),
                VoteThreshold: registry.createClass('VoteThreshold')
            }, []);
            expect(test.Types).toEqual(['BlockNumber', 'VoteThreshold']);
        });
        it('exposes filter', () => {
            expect(tuple.filter((v) => v.toJSON() === 69)).toEqual([new primitive_15.U32(registry, 69)]);
        });
        it('exposes map', () => {
            expect(tuple.map((v) => v.toString())).toEqual(['bazzing', '69']);
        });
        describe('utils', () => {
            it('compares against inputs', () => {
                expect(tuple.eq(['bazzing', 69])).toBe(true);
            });
            it('compares against inputs (mismatch)', () => {
                expect(tuple.eq(['bazzing', 72])).toBe(false);
            });
        });
        describe('toRawType', () => {
            it('generates sane value with array types', () => {
                expect(new _41.Tuple(registry, [primitive_15.u128, registry.createClass('BlockNumber')]).toRawType()).toEqual('(u128,BlockNumber)');
            });
            it('generates sane value with object types', () => {
                expect(
                // eslint-disable-next-line sort-keys
                new _41.Tuple(registry, { number: primitive_15.u128, blockNumber: registry.createClass('BlockNumber') }).toRawType()).toEqual('(u128,BlockNumber)');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/U8aFixed.spec", ["require", "exports", "types/src/create/index", "types/src/codec/index"], function (require, exports, create_63, _42) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('U8aFixed', () => {
        const registry = new create_63.TypeRegistry();
        describe('construction', () => {
            it('allows empty values', () => {
                expect(new _42.U8aFixed(registry).toHex()).toEqual('0x0000000000000000000000000000000000000000000000000000000000000000');
            });
            it('allows construction via with', () => {
                expect(new (_42.U8aFixed.with(64))(registry).bitLength()).toEqual(64);
            });
            it('constructs from hex', () => {
                expect(new (_42.U8aFixed.with(32))(registry, '0x01020304').toU8a()).toEqual(new Uint8Array([0x01, 0x02, 0x03, 0x04]));
            });
            it('constructs from number[]', () => {
                expect(new (_42.U8aFixed.with(32))(registry, [0x02, 0x03]).toU8a()).toEqual(new Uint8Array([0x02, 0x03, 0x00, 0x00]));
            });
        });
        describe('utils', () => {
            let u8a;
            beforeEach(() => {
                u8a = new _42.U8aFixed(registry, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 32);
            });
            it('limits the length', () => {
                expect(u8a.length).toEqual(4);
            });
            it('exposes the correct bitLength', () => {
                expect(u8a.bitLength()).toEqual(32);
            });
            it('allows wrapping of a pre-existing instance', () => {
                expect(u8a.toU8a()).toEqual(new Uint8Array([1, 2, 3, 4]));
            });
            it('hash a sane toRawType', () => {
                expect(u8a.toRawType()).toEqual('[u8;4]');
            });
        });
        describe('static with', () => {
            it('allows default toRawType', () => {
                expect(new (_42.U8aFixed.with(64))(registry).toRawType()).toEqual('[u8;8]');
            });
            it('allows toRawType override', () => {
                expect(new (_42.U8aFixed.with(64, 'SomethingElse'))(registry).toRawType()).toEqual('SomethingElse');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/UInt.spec", ["require", "exports", "bn.js", "types/src/create/index", "types/src/codec/index"], function (require, exports, bn_js_18, create_64, _43) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_18 = __importDefault(bn_js_18);
    describe('UInt', () => {
        const registry = new create_64.TypeRegistry();
        it('fails on a number that is too large for the bits specified', () => {
            expect(() => new _43.UInt(registry, '12345678901234567890123456789012345678901234567890', 32)).toThrow('u32: Input too large. Found input with 164 bits, expected 32');
        });
        it('fails on negative numbers', () => {
            expect(() => new _43.UInt(registry, -123, 32)).toThrow('u32: Negative number passed to unsigned type');
        });
        it('allows for construction via BigInt', () => {
            expect(new _43.UInt(registry, 123456789123456789123456789n, 128).toHuman()).toEqual('123,456,789,123,456,789,123,456,789');
        });
        it('provides a toBigInt interface', () => {
            expect(new _43.UInt(registry, 9876543210123456789n).toBigInt()).toEqual(9876543210123456789n);
        });
        it('provides a toBn interface', () => {
            expect(new _43.UInt(registry, 987).toBn().toNumber()).toEqual(987);
        });
        it('provides a toNumber interface', () => {
            expect(new _43.UInt(registry, 4567).toNumber()).toEqual(4567);
        });
        it('has a working toBigInt', () => {
            expect(new _43.UInt(registry, 4567).toBigInt() + BigInt(1)).toEqual(BigInt(4568));
        });
        it('converts to Little Endian from the provided value', () => {
            expect(new _43.UInt(registry, 1234567).toU8a()).toEqual(new Uint8Array([135, 214, 18, 0, 0, 0, 0, 0]));
        });
        it('converts to Little Endian from the provided value (bitLength)', () => {
            expect(new _43.UInt(registry, 1234567, 32).toU8a()).toEqual(new Uint8Array([135, 214, 18, 0]));
        });
        it('converts to hex/string', () => {
            const u = new _43.UInt(registry, '0x12', 16);
            expect(u.toHex()).toEqual('0x0012');
            expect(u.toString()).toEqual('18');
        });
        it('converts to equivalents', () => {
            const a = new _43.UInt(registry, '123');
            expect(new _43.UInt(registry, a).toNumber()).toEqual(123);
        });
        it('converts to JSON representation based on size', () => {
            expect(new _43.UInt(registry, '0x12345678', 32).toJSON()).toEqual(0x12345678);
            expect(new _43.UInt(registry, '0x1234567890', 64).toJSON()).toEqual(78187493520); // '0x0000001234567890');
            expect(new _43.UInt(registry, '0x1234567890abcdef', 64).toJSON()).toEqual('0x1234567890abcdef');
        });
        describe('eq', () => {
            const test = new _43.UInt(registry, 12345);
            it('compares against other BN values', () => {
                expect(test.eq(new bn_js_18.default(12345))).toBe(true);
            });
            it('compares against other number values', () => {
                expect(test.eq(12345)).toBe(true);
            });
            it('compares against hex values', () => {
                expect(test.eq('0x3039')).toBe(true);
            });
        });
        describe('isMax()', () => {
            it('is false where not full', () => {
                expect(new _43.UInt(registry, '0x1234', 32).isMax()).toEqual(false);
                expect(new _43.UInt(registry, '0xffffff', 32).isMax()).toEqual(false);
                expect(new _43.UInt(registry, '0x12345678', 32).isMax()).toEqual(false);
                expect(new _43.UInt(registry, '0xfffffff0', 32).isMax()).toEqual(false);
            });
            it('is true when full', () => {
                expect(new _43.UInt(registry, '0xffffffff', 32).isMax()).toEqual(true);
            });
        });
        describe('static with', () => {
            it('allows default toRawType', () => {
                expect(new (_43.UInt.with(64))(registry).toRawType()).toEqual('u64');
            });
            it('allows toRawType override', () => {
                expect(new (_43.UInt.with(64, 'SomethingElse'))(registry).toRawType()).toEqual('SomethingElse');
            });
            it('has proper toHuman() for PerMill/PerBill/Percent/Balance', () => {
                expect(registry.createType('Perbill', 12340000).toHuman()).toEqual('1.23%');
                expect(registry.createType('Percent', 12).toHuman()).toEqual('12.00%');
                expect(registry.createType('Permill', 16900).toHuman()).toEqual('1.69%');
                expect(registry.createType('Balance', '123456789012345').toHuman()).toEqual('123.4567 Unit');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/Vec.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "types/src/generic/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, metadata_9, static_24, create_65, generic_4, primitive_16, _44) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_24 = __importDefault(static_24);
    const registry = new create_65.TypeRegistry();
    const metadata = new metadata_9.Metadata(registry, static_24.default);
    registry.setMetadata(metadata);
    describe('Vec', () => {
        let vector;
        beforeEach(() => {
            vector = new _44.Vec(registry, primitive_16.Text, ['1', '23', '345', '4567', new primitive_16.Text(registry, '56789')]);
        });
        it('wraps a sequence of values', () => {
            expect(vector.length).toEqual(5); // eslint-disable-line
        });
        it('has a sane representation for toString', () => {
            expect(vector.toString()).toEqual('[1, 23, 345, 4567, 56789]');
        });
        it('encodes with length prefix', () => {
            expect(vector.toU8a()).toEqual(new Uint8Array([
                5 << 2,
                1 << 2, 49,
                2 << 2, 50, 51,
                3 << 2, 51, 52, 53,
                4 << 2, 52, 53, 54, 55,
                5 << 2, 53, 54, 55, 56, 57
            ]));
        });
        it('allows construction via JSON', () => {
            expect(new _44.Vec(registry, primitive_16.Text, ['6', '7']).toJSON()).toEqual(['6', '7']);
        });
        it('allows construction via JSON (string type)', () => {
            expect(new _44.Vec(registry, 'u32', ['6', '7']).toJSON()).toEqual([6, 7]);
        });
        it('exposes the type', () => {
            expect(vector.Type).toEqual('Text');
        });
        it('decodes reusing instantiated inputs', () => {
            const foo = new primitive_16.Text(registry, 'bar');
            expect((new _44.Vec(registry, primitive_16.Text, [foo]))[0]).toBe(foo);
        });
        it('decodes a complex type via construction', () => {
            const test = create_65.createTypeUnsafe(registry, 'Vec<(PropIndex, AccountId)>', [new Uint8Array([
                    4, 10, 0, 0, 0, 209, 114, 167, 76, 218, 76, 134, 89, 18, 195, 43, 160, 168, 10, 87, 174, 105, 171, 174, 65, 14, 92, 203, 89, 222, 232, 78, 47, 68, 50, 219, 79
                ])]);
            const first = test[0];
            expect(first[0].toNumber()).toEqual(10);
            expect(first[1].toString()).toEqual('5GoKvZWG5ZPYL1WUovuHW3zJBWBP5eT8CbqjdRY4Q6iMaQua');
        });
        it('decodes a complex type via construction', () => {
            const INPUT = '0x08cc0200000000ce0200000001';
            const test = create_65.createTypeUnsafe(registry, 'Vec<(u32, [u32; 0], u16)>', [INPUT]);
            expect(test.length).toEqual(2);
            expect(test.toHex()).toEqual(INPUT);
        });
        describe('vector-like functions', () => {
            it('allows retrieval of a specific item', () => {
                expect(vector[2].toString()).toEqual('345');
            });
            it('exposes a working forEach', () => {
                const result = {};
                vector.forEach((e, i) => {
                    result[i] = e.toString();
                });
                expect(result).toEqual({
                    0: '1',
                    1: '23',
                    2: '345',
                    3: '4567',
                    4: '56789'
                });
            });
            it('exposes a working concat', () => {
                expect(vector.concat(new _44.Vec(registry, primitive_16.Text, ['987', '654'])).toString()).toEqual('1,23,345,4567,56789,987,654');
            });
            it('exposes a working filter', () => {
                expect(vector.filter((e, i) => i >= 3).toString()).toEqual('4567,56789');
            });
            it('exposes a working map', () => {
                expect(vector.map((e) => e.toString().substr(0, 1))).toEqual(['1', '2', '3', '4', '5']);
            });
            it('exposes a working reduce', () => {
                expect(vector.reduce((r, e) => `${r}${e.toString()}`, '')).toEqual('123345456756789');
            });
            it('exposes a working indexOf', () => {
                expect(vector.indexOf('1')).toEqual(0);
                expect(vector.indexOf(new primitive_16.Text(registry, '23'))).toEqual(1);
                expect(vector.indexOf('0')).toEqual(-1);
            });
        });
        describe('encode', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                expect(vector[to]()).toEqual(expected);
            });
            testEncode('toHex', '0x1404310832330c3334351034353637143536373839');
            testEncode('toJSON', ['1', '23', '345', '4567', '56789']);
            testEncode('toString', '[1, 23, 345, 4567, 56789]');
            testEncode('toU8a', Uint8Array.from([20, 4, 49, 8, 50, 51, 12, 51, 52, 53, 16, 52, 53, 54, 55, 20, 53, 54, 55, 56, 57]));
        });
        describe('utils', () => {
            const vec = new _44.Vec(registry, primitive_16.Text, ['123', '456']);
            it('compares against codec types', () => {
                expect(vec.eq([new primitive_16.Text(registry, '123'), new primitive_16.Text(registry, '456')])).toBe(true);
            });
            it('compares against codec + primitive types', () => {
                expect(vec.eq(['123', new primitive_16.Text(registry, '456')])).toBe(true);
            });
            it('finds the index of an value', () => {
                const myId = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
                const vec = new _44.Vec(registry, generic_4.GenericAccountId, [
                    '5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw', '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty', '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'
                ]);
                expect(vec.indexOf(myId)).toEqual(2);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/VecAny", ["require", "exports", "types/src/codec/AbstractArray"], function (require, exports, AbstractArray_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VecAny = void 0;
    /**
     * @name VecAny
     * @description
     * This manages codec arrays, assuming that the inputs are already of type Codec. Unlike
     * a vector, this can be used to manage array-like structures with variable arguments of
     * any types
     */
    class VecAny extends AbstractArray_4.AbstractArray {
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            // FIXME This is basically an any type, cannot instantiate via createType
            return 'Vec<Codec>';
        }
    }
    exports.VecAny = VecAny;
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/VecFixed.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/index"], function (require, exports, create_66, primitive_17, _45) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('VecFixed', () => {
        const registry = new create_66.TypeRegistry();
        describe('construction', () => {
            it('constructs via empty', () => {
                expect(new _45.VecFixed(registry, primitive_17.Text, 2).toHex()).toEqual('0x0000');
            });
            it('constructs via Uint8Array', () => {
                expect(new _45.VecFixed(registry, primitive_17.Text, 2, new Uint8Array([0x00, 0x04, 0x31])).toHex()).toEqual('0x000431');
            });
            it('decodes reusing instance inputs', () => {
                const foo = new primitive_17.Text(registry, 'bar');
                expect((new _45.VecFixed(registry, primitive_17.Text, 1, [foo]))[0]).toBe(foo);
            });
        });
        describe('utils', () => {
            let test;
            beforeEach(() => {
                test = new (_45.VecFixed.with(primitive_17.Text, 5))(registry, ['1', '2', '3', undefined, '5']);
            });
            it('has a sane string types', () => {
                expect(test.toRawType()).toEqual('[Text;5]');
                expect(test.Type).toEqual('Text');
            });
            it('has a correct toHex', () => {
                // each entry length 1 << 2, char as hex (0x31 === `1`), one empty
                expect(test.toHex()).toEqual('0x043104320433000435');
            });
            it('has empty Uint8Array when length is 0', () => {
                const test = new (_45.VecFixed.with(primitive_17.Text, 0))(registry);
                expect(test.encodedLength).toEqual(0);
                expect(test.toU8a()).toEqual(new Uint8Array([]));
            });
            it('has equivalent to 1 Uint8Array when length is 1', () => {
                const test = new (_45.VecFixed.with(primitive_17.Text, 1))(registry, ['hello']);
                expect(test.encodedLength).toEqual(1 + 5);
                expect(test.toU8a()).toEqual(new Uint8Array([20, 104, 101, 108, 108, 111]));
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/compareArray.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/utils/index"], function (require, exports, create_67, primitive_18, _46) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('compareArray', () => {
        const registry = new create_67.TypeRegistry();
        const a = [new primitive_18.U32(registry, 123), new primitive_18.U32(registry, 456), new primitive_18.U32(registry, 789)];
        it('returns false when second param is a non-array', () => {
            expect(_46.compareArray(a, 123)).toBe(false);
        });
        it('compares array of codec agains primitive', () => {
            expect(_46.compareArray(a, [123, 456, 789])).toBe(true);
        });
        it('compares array of codec agains codec', () => {
            expect(_46.compareArray(a, [new primitive_18.U32(registry, 123), new primitive_18.U32(registry, 456), new primitive_18.U32(registry, 789)])).toBe(true);
        });
        it('compares primitive against primitive', () => {
            expect(_46.compareArray([123, 456], [123, 456])).toBe(true);
        });
        it('returns false when lengths are not matching', () => {
            expect(_46.compareArray(a, [123])).toBe(false);
        });
        it('returns false when value mismatches', () => {
            expect(_46.compareArray(a, [123, 456, 999])).toBe(false);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/codec/utils/compareMap.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index", "types/src/codec/utils/index"], function (require, exports, create_68, primitive_19, _47) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('compareMap', () => {
        const registry = new create_68.TypeRegistry();
        const a = new Map([
            ['decimals', new primitive_19.U32(registry, 15)],
            ['missing', new primitive_19.U32(registry, 10)],
            ['foobar', new primitive_19.U32(registry, 5)]
        ]);
        const b = new Map([
            ['decimals', 15],
            ['missing', 10],
            ['foobar', 5]
        ]);
        const c = new Map([
            ['decimals', new primitive_19.U32(registry, 15)],
            ['missing', new primitive_19.U32(registry, 10)],
            ['foobar', new primitive_19.U32(registry, 5)]
        ]);
        it('compares Map<string, Codec> against Object', () => {
            expect(_47.compareMap(a, {
                decimals: 15,
                foobar: 5,
                missing: 10
            })).toBe(true);
        });
        it('compares Map<string, any> against entries array', () => {
            expect(_47.compareMap(b, [
                ['missing', 10], ['decimals', 15], ['foobar', 5]
            ])).toBe(true);
        });
        it('compares between 2 maps', () => {
            expect(_47.compareMap(a, b)).toBe(true);
        });
        it('compares between 2 maps (both codec)', () => {
            expect(_47.compareMap(a, c)).toBe(true);
        });
        it('returns false when second param is a non-map, non-array, non-object', () => {
            expect(_47.compareMap(a, 123)).toBe(false);
        });
        it('returns false when second param is a array with non-entries', () => {
            expect(_47.compareMap(a, [123, 456, 789])).toBe(false);
        });
        it('returns false when second param is a array with non-entries (only key)', () => {
            expect(_47.compareMap(a, [[123], [456], [789]])).toBe(false);
        });
        it('returns false when properties are missing', () => {
            expect(_47.compareMap(a, [['decimals', 15], ['wrong', 10], ['foobar', 5]])).toBe(false);
        });
        it('returns false when lengths do not match', () => {
            expect(_47.compareMap(a, [['decimals', 15]])).toBe(false);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/createClass.spec", ["require", "exports", "types/src/types/index", "types/src/create/index"], function (require, exports, types_123, _48) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('createClass', () => {
        const registry = new _48.TypeRegistry();
        it('should memoize from strings', () => {
            const a = _48.createClass(registry, 'BabeWeight');
            const b = _48.createClass(registry, 'BabeWeight');
            expect(a).toBe(b);
        });
        it('should return equivalents for Bytes & Vec<u8>', () => {
            const A = _48.createClass(registry, 'Vec<u8>');
            const B = _48.createClass(registry, 'Bytes');
            expect(new A(registry) instanceof B).toBe(true);
        });
    });
    describe('getTypeClass', () => {
        const registry = new _48.TypeRegistry();
        it('warns on invalid types', () => {
            const spy = jest.spyOn(console, 'warn');
            const typeDef = { info: types_123.TypeDefInfo.Plain, type: 'ABC' };
            _48.getTypeClass(registry, typeDef);
            expect(spy).toHaveBeenCalledWith(expect.anything(), expect.anything(), 'Unable to resolve type ABC, it will fail on construction');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/createType.spec", ["require", "exports", "types/src/codec/index", "types/src/create/index"], function (require, exports, codec_10, _49) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('createType', () => {
        const registry = new _49.TypeRegistry();
        it('allows creation of a H256 (with proper toRawType)', () => {
            expect(registry.createType('H256').toRawType()).toEqual('H256');
            expect(registry.createType('Hash').toRawType()).toEqual('H256');
        });
        it('allows creation of a Fixed64 (with proper toRawType & instance)', () => {
            const f64 = registry.createType('Fixed64');
            expect(f64.toRawType()).toEqual('Fixed64');
            expect(f64.bitLength()).toEqual(64);
            expect(f64.isUnsigned).toBe(false);
            expect(f64 instanceof codec_10.Int).toBe(true);
        });
        it('allows creation of a Struct', () => {
            const raw = '{"balance":"Balance","index":"u32"}';
            const struct = _49.createTypeUnsafe(registry, raw, [{
                    balance: 1234,
                    index: '0x10'
                }]);
            expect(struct.toJSON()).toEqual({
                balance: 1234,
                index: 16
            });
            expect(struct.toRawType()).toEqual(raw);
        });
        it('allows creation of a BTreeMap', () => {
            expect(_49.createTypeUnsafe(registry, 'BTreeMap<Text,u32>', ['0x041c62617a7a696e6745000000']).toString()).toEqual('{"bazzing":69}');
        });
        it('allows creation of a BTreeSet', () => {
            expect(_49.createTypeUnsafe(registry, 'BTreeSet<u32>', ['0x1002000000180000001e00000050000000']).toString()).toEqual('[2,24,30,80]');
        });
        it('allows creation of a Enum (simple)', () => {
            expect(_49.createTypeUnsafe(registry, '{"_enum": ["A", "B", "C"]}', [1]).toJSON()).toEqual('B');
        });
        it('allows creation of a Enum (parametrised)', () => {
            expect(_49.createTypeUnsafe(registry, '{"_enum": {"A": null, "B": "u32", "C": null} }', [1]).toJSON()).toEqual({ B: 0 });
        });
        it('allows creation of a Result', () => {
            expect(_49.createTypeUnsafe(registry, 'Result<u32,Text>', ['0x011064656667']).toJSON()).toEqual({ Error: 'defg' });
        });
        it('allows creation of a Set', () => {
            expect(_49.createTypeUnsafe(registry, '{"_set": { "A": 1, "B": 2, "C": 4, "D": 8, "E": 16, "G": 32, "H": 64, "I": 128 } }', [1 + 4 + 16 + 64]).strings).toEqual(['A', 'C', 'E', 'H']);
        });
        it('allows creation of a Tuple', () => {
            expect(_49.createTypeUnsafe(registry, '(Balance,u32)', [[1234, 5678]]).toJSON()).toEqual([
                1234,
                5678
            ]);
        });
        it('allows creation for a UInt<bitLength>', () => {
            expect(_49.createTypeUnsafe(registry, 'UInt<2048>').toRawType()).toEqual('u2048');
        });
        it('fails creation for a UInt<bitLength> where bitLength is not power of 8', () => {
            expect(() => _49.createTypeUnsafe(registry, 'UInt<20>').toRawType()).toThrow('UInt<20>: Only support for UInt<bitLength>, where length <= 8192 and a power of 8');
        });
        it('fails on creation of DoNotConstruct', () => {
            const Clazz = _49.createClass(registry, 'DoNotConstruct<UnknownSomething>');
            expect(() => new Clazz(registry)).toThrow('Cannot construct unknown type UnknownSomething');
        });
        it('allows creation of a [u8; 8]', () => {
            expect(_49.createTypeUnsafe(registry, '[u8; 8]', [[0x12, 0x00, 0x23, 0x00, 0x45, 0x00, 0x67, 0x00]]).toHex()).toEqual('0x1200230045006700');
        });
        it('allows creation of a [u16; 4]', () => {
            expect(_49.createTypeUnsafe(registry, '[u16; 4]', [[0x1200, 0x2300, 0x4500, 0x6700]]).toU8a()).toEqual(new Uint8Array([0x00, 0x12, 0x00, 0x23, 0x00, 0x45, 0x00, 0x67]));
        });
        describe('instanceof', () => {
            it('instanceof should work (primitive type)', () => {
                const value = registry.createType('Balance', 1234);
                expect(value instanceof registry.createClass('Balance')).toBe(true);
            });
            it('instanceof should work (srml type)', () => {
                const value = registry.createType('Gas', 1234);
                const Gas = registry.createClass('Gas');
                expect(value instanceof Gas).toBe(true);
            });
            it('instanceof should work (complex type)', () => {
                registry.register({
                    TestComplex: {
                        balance: 'Balance',
                        // eslint-disable-next-line sort-keys
                        accountId: 'AccountId',
                        log: '(u64, u32)',
                        // eslint-disable-next-line sort-keys
                        fromSrml: 'Gas'
                    }
                });
                const value = _49.createTypeUnsafe(registry, 'TestComplex', [{
                        accountId: '0x1234567812345678123456781234567812345678123456781234567812345678',
                        balance: 123,
                        fromSrml: 0,
                        log: [456, 789]
                    }]);
                expect(value instanceof _49.createClass(registry, 'TestComplex')).toBe(true);
            });
            it('allows for re-registration of a type', () => {
                const balDef = registry.createType('Balance');
                expect(balDef instanceof registry.createClass('Balance'));
                expect(balDef.bitLength()).toEqual(128);
                registry.register({ Balance: 'u32' });
                const balu32 = registry.createType('Balance');
                expect(balu32 instanceof registry.createClass('Balance'));
                expect(balu32.bitLength()).toEqual(32);
            });
            it('allows for re-registration of a type (affecting derives)', () => {
                registry.register({
                    Balance: 'u128',
                    TestComplex: {
                        balance: 'Balance',
                        // eslint-disable-next-line sort-keys
                        accountId: 'AccountId',
                        log: '(u64, u32)',
                        // eslint-disable-next-line sort-keys
                        fromSrml: 'Gas'
                    }
                });
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const cmpDef = _49.createTypeUnsafe(registry, 'TestComplex');
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
                expect(cmpDef.balance.bitLength()).toEqual(128);
                registry.register({ Balance: 'u32' });
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const cmpu32 = _49.createTypeUnsafe(registry, 'TestComplex');
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
                expect(cmpu32.balance.bitLength()).toEqual(32);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/encodeTypes.spec", ["require", "exports", "types/src/create/encodeTypes", "types/src/create/types"], function (require, exports, encodeTypes_2, types_124) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('encodeTypeDef', () => {
        it('correctly encodes a complex struct', () => {
            expect(JSON.parse(encodeTypes_2.encodeTypeDef({
                info: types_124.TypeDefInfo.Struct,
                sub: [
                    {
                        info: types_124.TypeDefInfo.Plain,
                        name: 'a',
                        type: 'u32'
                    },
                    {
                        info: types_124.TypeDefInfo.Struct,
                        name: 'b',
                        sub: [
                            {
                                info: types_124.TypeDefInfo.Plain,
                                name: 'c',
                                type: 'u32'
                            },
                            {
                                info: types_124.TypeDefInfo.Vec,
                                name: 'd',
                                sub: {
                                    info: types_124.TypeDefInfo.Plain,
                                    type: 'u32'
                                },
                                type: ''
                            }
                        ],
                        type: ''
                    }
                ],
                type: ''
            }))).toEqual({
                a: 'u32',
                b: '{"c":"u32","d":"Vec<u32>"}'
            });
        });
        it('correctly encodes a complex struct (named)', () => {
            expect(JSON.parse(encodeTypes_2.encodeTypeDef({
                info: types_124.TypeDefInfo.Struct,
                sub: [
                    {
                        info: types_124.TypeDefInfo.Plain,
                        name: 'a',
                        type: 'u32'
                    },
                    {
                        info: types_124.TypeDefInfo.Struct,
                        name: 'b',
                        sub: [
                            {
                                info: types_124.TypeDefInfo.Plain,
                                name: 'c',
                                type: 'u32'
                            },
                            {
                                displayName: 'Something',
                                info: types_124.TypeDefInfo.Vec,
                                name: 'd',
                                sub: {
                                    info: types_124.TypeDefInfo.Plain,
                                    type: 'u32'
                                },
                                type: ''
                            }
                        ],
                        type: ''
                    }
                ],
                type: ''
            }))).toEqual({
                a: 'u32',
                b: '{"c":"u32","d":"Something"}'
            });
        });
        it('correctly encodes a complex enum', () => {
            expect(JSON.parse(encodeTypes_2.encodeTypeDef({
                info: types_124.TypeDefInfo.Enum,
                sub: [
                    {
                        info: types_124.TypeDefInfo.Plain,
                        name: 'a',
                        type: 'u32'
                    },
                    {
                        info: types_124.TypeDefInfo.Struct,
                        name: 'b',
                        sub: [
                            {
                                info: types_124.TypeDefInfo.Plain,
                                name: 'c',
                                type: 'u32'
                            },
                            {
                                info: types_124.TypeDefInfo.Vec,
                                name: 'd',
                                sub: {
                                    info: types_124.TypeDefInfo.Plain,
                                    type: 'u32'
                                },
                                type: ''
                            }
                        ],
                        type: ''
                    },
                    {
                        info: types_124.TypeDefInfo.Enum,
                        name: 'f',
                        sub: [
                            {
                                info: types_124.TypeDefInfo.Plain,
                                name: 'g',
                                type: 'Null'
                            },
                            {
                                info: types_124.TypeDefInfo.Plain,
                                name: 'h',
                                type: 'Null'
                            }
                        ],
                        type: ''
                    }
                ],
                type: ''
            }))).toEqual({
                _enum: {
                    a: 'u32',
                    b: '{"c":"u32","d":"Vec<u32>"}',
                    f: '{"_enum":["g","h"]}'
                }
            });
        });
        it('correctly encodes a complex enum (named)', () => {
            expect(JSON.parse(encodeTypes_2.encodeTypeDef({
                info: types_124.TypeDefInfo.Enum,
                sub: [
                    {
                        info: types_124.TypeDefInfo.Plain,
                        name: 'a',
                        type: 'u32'
                    },
                    {
                        displayName: 'Something',
                        info: types_124.TypeDefInfo.Struct,
                        name: 'b',
                        sub: [
                            {
                                info: types_124.TypeDefInfo.Plain,
                                name: 'c',
                                type: 'u32'
                            },
                            {
                                info: types_124.TypeDefInfo.Vec,
                                name: 'd',
                                sub: {
                                    info: types_124.TypeDefInfo.Plain,
                                    type: 'u32'
                                },
                                type: ''
                            }
                        ],
                        type: ''
                    },
                    {
                        displayName: 'Option',
                        info: types_124.TypeDefInfo.Option,
                        name: 'e',
                        sub: {
                            displayName: 'Result',
                            info: types_124.TypeDefInfo.Result,
                            sub: [
                                {
                                    info: types_124.TypeDefInfo.Null,
                                    type: ''
                                },
                                {
                                    info: types_124.TypeDefInfo.Plain,
                                    type: 'u32'
                                }
                            ],
                            type: ''
                        },
                        type: ''
                    }
                ],
                type: ''
            }))).toEqual({
                _enum: {
                    a: 'u32',
                    b: 'Something',
                    e: 'Option<Result<Null, u32>>'
                }
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/getTypeDef.spec", ["require", "exports", "types/src/create/types", "types/src/create/index"], function (require, exports, types_125, _50) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('getTypeDef', () => {
        it('maps empty tuples to empty tuple', () => {
            expect(_50.getTypeDef('()')).toEqual({
                info: types_125.TypeDefInfo.Tuple,
                sub: [],
                type: '()'
            });
        });
        it('properly decodes a BTreeMap<u32, Text>', () => {
            expect(_50.getTypeDef('BTreeMap<u32, Text>')).toEqual({
                info: types_125.TypeDefInfo.BTreeMap,
                sub: [
                    {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'u32'
                    },
                    {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'Text'
                    }
                ],
                type: 'BTreeMap<u32,Text>'
            });
        });
        it('properly decodes a BTreeSet<Text>', () => {
            expect(_50.getTypeDef('BTreeSet<Text>')).toEqual({
                info: types_125.TypeDefInfo.BTreeSet,
                sub: {
                    info: types_125.TypeDefInfo.Plain,
                    type: 'Text'
                },
                type: 'BTreeSet<Text>'
            });
        });
        it('properly decodes a Result<u32, Text>', () => {
            expect(_50.getTypeDef('Result<u32, Text>')).toEqual({
                info: types_125.TypeDefInfo.Result,
                sub: [
                    {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'u32'
                    },
                    {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'Text'
                    }
                ],
                type: 'Result<u32,Text>'
            });
        });
        it('properly decodes a Result<Result<(), u32>, Text>', () => {
            expect(_50.getTypeDef('Result<Result<Null,u32>,Text>')).toEqual({
                info: types_125.TypeDefInfo.Result,
                sub: [
                    {
                        info: types_125.TypeDefInfo.Result,
                        sub: [
                            {
                                info: types_125.TypeDefInfo.Plain,
                                type: 'Null'
                            },
                            {
                                info: types_125.TypeDefInfo.Plain,
                                type: 'u32'
                            }
                        ],
                        type: 'Result<Null,u32>'
                    },
                    {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'Text'
                    }
                ],
                type: 'Result<Result<Null,u32>,Text>'
            });
        });
        it('returns a type structure', () => {
            expect(_50.getTypeDef('(u32, Compact<u32>, Vec<u64>, Option<u128>, (Text,Vec<(Bool,u128)>))')).toEqual({
                info: types_125.TypeDefInfo.Tuple,
                sub: [
                    {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'u32'
                    },
                    {
                        info: types_125.TypeDefInfo.Compact,
                        sub: {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'u32'
                        },
                        type: 'Compact<u32>'
                    },
                    {
                        info: types_125.TypeDefInfo.Vec,
                        sub: {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'u64'
                        },
                        type: 'Vec<u64>'
                    },
                    {
                        info: types_125.TypeDefInfo.Option,
                        sub: {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'u128'
                        },
                        type: 'Option<u128>'
                    },
                    {
                        info: types_125.TypeDefInfo.Tuple,
                        sub: [
                            {
                                info: types_125.TypeDefInfo.Plain,
                                type: 'Text'
                            },
                            {
                                info: types_125.TypeDefInfo.Vec,
                                sub: {
                                    info: types_125.TypeDefInfo.Tuple,
                                    sub: [
                                        {
                                            info: types_125.TypeDefInfo.Plain,
                                            type: 'Bool'
                                        },
                                        {
                                            info: types_125.TypeDefInfo.Plain,
                                            type: 'u128'
                                        }
                                    ],
                                    type: '(Bool,u128)'
                                },
                                type: 'Vec<(Bool,u128)>'
                            }
                        ],
                        type: '(Text,Vec<(Bool,u128)>)'
                    }
                ],
                type: '(u32,Compact<u32>,Vec<u64>,Option<u128>,(Text,Vec<(Bool,u128)>))'
            });
        });
        it('returns a type structure (sanitized)', () => {
            expect(_50.getTypeDef('Vec<(Box<PropIndex>, Proposal,Lookup::Target)>')).toEqual({
                info: types_125.TypeDefInfo.Vec,
                sub: {
                    info: types_125.TypeDefInfo.Tuple,
                    sub: [
                        {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'PropIndex'
                        },
                        {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'Proposal'
                        },
                        {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'LookupTarget'
                        }
                    ],
                    type: '(PropIndex,Proposal,LookupTarget)'
                },
                type: 'Vec<(PropIndex,Proposal,LookupTarget)>'
            });
        });
        it('returns a type structure (actual)', () => {
            expect(_50.getTypeDef('Vec<(PropIndex, Proposal, AccountId)>')).toEqual({
                info: types_125.TypeDefInfo.Vec,
                sub: {
                    info: types_125.TypeDefInfo.Tuple,
                    sub: [
                        {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'PropIndex'
                        },
                        {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'Proposal'
                        },
                        {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'AccountId'
                        }
                    ],
                    type: '(PropIndex,Proposal,AccountId)'
                },
                type: 'Vec<(PropIndex,Proposal,AccountId)>'
            });
        });
        it('returns an actual Struct', () => {
            expect(_50.getTypeDef('{"balance":"Balance","account_id":"AccountId","log":"(u64, Signature)"}')).toEqual({
                info: types_125.TypeDefInfo.Struct,
                sub: [
                    {
                        info: types_125.TypeDefInfo.Plain,
                        name: 'balance',
                        type: 'Balance'
                    },
                    {
                        info: types_125.TypeDefInfo.Plain,
                        name: 'account_id',
                        type: 'AccountId'
                    },
                    {
                        info: types_125.TypeDefInfo.Tuple,
                        name: 'log',
                        sub: [
                            {
                                info: types_125.TypeDefInfo.Plain,
                                type: 'u64'
                            },
                            {
                                info: types_125.TypeDefInfo.Plain,
                                type: 'Signature'
                            }
                        ],
                        type: '(u64,Signature)'
                    }
                ],
                type: '{"balance":"Balance","account_id":"AccountId","log":"(u64,Signature)"}'
            });
        });
        // FIXME - not handled atm
        it.skip('creates a nested fixed vec', () => {
            expect(_50.getTypeDef('[[u8;32];3]')).toEqual({
                ext: {
                    length: 3,
                    type: '[u8;32]'
                },
                info: types_125.TypeDefInfo.VecFixed,
                sub: {
                    ext: {
                        length: 32
                    },
                    info: types_125.TypeDefInfo.VecFixed,
                    sub: {
                        info: types_125.TypeDefInfo.Plain,
                        type: 'u8'
                    },
                    type: '[u8;32]'
                },
                type: '[[u8;32];3]'
            });
        });
        it('creates recursive structures', () => {
            const registry = new _50.TypeRegistry();
            registry.register({
                Recursive: {
                    data: 'Vec<Recursive>'
                }
            });
            const raw = registry.createType('Recursive').toRawType();
            expect(_50.getTypeDef(raw)).toEqual({
                info: types_125.TypeDefInfo.Struct,
                sub: [{
                        info: types_125.TypeDefInfo.Vec,
                        name: 'data',
                        sub: {
                            info: types_125.TypeDefInfo.Plain,
                            type: 'Recursive'
                        },
                        type: 'Vec<Recursive>'
                    }],
                type: '{"data":"Vec<Recursive>"}'
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/registry.spec", ["require", "exports", "@polkadot/util", "@polkadot/util-crypto", "types/src/codec/index", "types/src/primitive/index", "types/src/create/index"], function (require, exports, util_243, util_crypto_16, codec_11, primitive_20, _51) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('TypeRegistry', () => {
        const registry = new _51.TypeRegistry();
        it('handles non exist type', () => {
            expect(registry.get('non-exist')).toBeUndefined();
        });
        it('throws on non-existent via getOrThrow', () => {
            expect(() => registry.getOrThrow('non-exist')).toThrow('type non-exist not found');
            expect(() => registry.getOrThrow('non-exist', 'foo bar blah')).toThrow('foo bar blah');
        });
        it('handles non exist type as Unknown (via getOrUnknown)', () => {
            const Type = registry.getOrUnknown('non-exist');
            expect(Type).toBeDefined();
            // eslint-disable-next-line no-prototype-builtins
            expect(util_243.isChildClass(primitive_20.DoNotConstruct, Type));
        });
        it('can register single type', () => {
            registry.register(primitive_20.Text);
            expect(registry.get('Text')).toBe(primitive_20.Text);
        });
        it('can register type with a different name', () => {
            registry.register('TextRenamed', primitive_20.Text);
            expect(util_243.isChildClass(primitive_20.Text, registry.get('TextRenamed'))).toBe(true);
        });
        describe('object registration', () => {
            it('can register multiple types', () => {
                registry.register({
                    Text: primitive_20.Text,
                    U32Renamed: primitive_20.U32
                });
                expect(util_243.isChildClass(primitive_20.Text, registry.get('Text'))).toBe(true);
                expect(util_243.isChildClass(primitive_20.U32, registry.get('U32Renamed'))).toBe(true);
            });
            it('can register recursive types', () => {
                registry.register({
                    Recursive: {
                        next: 'Option<Recursive>'
                    }
                });
                expect(registry.hasDef('Recursive')).toBe(true);
                expect(registry.hasClass('Recursive')).toBe(false);
                const Recursive = registry.getOrThrow('Recursive');
                expect(registry.hasClass('Recursive')).toBe(true);
                const last = new Recursive(registry, { next: null });
                const first = new Recursive(registry, { next: last });
                expect(first.next.isSome).toBe(true);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                expect(first.next.unwrap().next.isSome).toBe(false);
            });
            it('can register non-embedded recursive types', () => {
                registry.register({
                    Operation: {
                        data: 'OperationData'
                    },
                    OperationData: {
                        ops: 'Vec<Operation>'
                    },
                    Rule: {
                        data: 'RuleData'
                    },
                    RuleData: {
                        ops: 'Vec<Operation>'
                    }
                });
                expect(registry.hasDef('Rule')).toBe(true);
                expect(registry.hasClass('Rule')).toBe(false);
                const Rule = registry.getOrThrow('Rule');
                expect(registry.hasClass('Rule')).toBe(true);
                const instance = new Rule(registry);
                expect(instance.toRawType()).toEqual('{"data":"RuleData"}');
            });
            it('can register cross-referencing types', () => {
                registry.register({
                    A: {
                        next: 'B'
                    },
                    B: {
                        _enum: {
                            End: null,
                            Other: 'A'
                        }
                    }
                });
                const A = registry.getOrThrow('A');
                const B = registry.getOrThrow('B');
                expect(registry.hasClass('Recursive')).toBe(true);
                const last = new B(registry, { End: null });
                const first = new B(registry, { Other: new A(registry, { next: last }) });
                expect(first.isOther).toBe(true);
            });
            it('can create types from string', () => {
                registry.register({
                    U32Renamed: 'u32'
                });
                const Type = registry.getOrThrow('U32Renamed');
                expect(new Type(registry) instanceof primitive_20.U32).toBe(true);
            });
            it('can create structs via definition', () => {
                registry.register({
                    SomeStruct: {
                        bar: 'Text',
                        foo: 'u32'
                    }
                });
                const SomeStruct = registry.getOrThrow('SomeStruct');
                const struct = new SomeStruct(registry, {
                    bar: 'testing',
                    foo: 42
                });
                expect(struct instanceof codec_11.Struct).toBe(true);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                expect(struct.foo.toNumber()).toEqual(42);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                expect(struct.bar.toString()).toEqual('testing');
            });
        });
        it('hashes via blake2 by default', () => {
            expect(registry.hash(util_243.u8aToU8a('abc')).toU8a()).toEqual(new Uint8Array([189, 221, 129, 60, 99, 66, 57, 114, 49, 113, 239, 63, 238, 152, 87, 155, 148, 150, 78, 59, 177, 203, 62, 66, 114, 98, 200, 192, 104, 213, 35, 25]));
        });
        it('hashes via override hasher', () => {
            registry.setHasher(util_crypto_16.keccakAsU8a);
            expect(registry.hash(util_243.u8aToU8a('test value')).toHex()).toEqual('0x2d07364b5c231c56ce63d49430e085ea3033c750688ba532b24029124c26ca5e');
            registry.setHasher();
            expect(registry.hash(util_243.u8aToU8a('abc')).toU8a()).toEqual(new Uint8Array([189, 221, 129, 60, 99, 66, 57, 114, 49, 113, 239, 63, 238, 152, 87, 155, 148, 150, 78, 59, 177, 203, 62, 66, 114, 98, 200, 192, 104, 213, 35, 25]));
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/sanitize.spec", ["require", "exports", "types/src/create/sanitize"], function (require, exports, sanitize_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('sanitize', () => {
        describe('alias', () => {
            const exec = sanitize_3.alias(['String'], 'Text');
            it('replaces all occurrences for types', () => {
                expect(exec('(String,Address,MasterString,String)')).toEqual('(Text,Address,MasterString,Text)');
            });
            it('replaces actual types, but leaves struct names', () => {
                expect(exec('{"system":"String","versionString":"String"}')).toEqual('{"system":"Text","versionString":"Text"}');
            });
            it('handles the preceding correctly', () => {
                // NOTE This type doesn't make sense
                expect(exec('String String (String,[String;32],String)"String<String>')).toEqual('Text Text (Text,[Text;32],Text)"Text<Text>');
            });
            it('handles emdedded Vec/Tuples', () => {
                const ann = sanitize_3.alias(['Announcement'], 'ProxyAnnouncement');
                expect(ann('(Vec<Announcement>,BalanceOf)')).toEqual('(Vec<ProxyAnnouncement>,BalanceOf)');
            });
        });
        describe('removeColons', () => {
            it('removes preceding ::Text -> Text', () => {
                expect(sanitize_3.removeColons()('::Text')).toEqual('Text');
            });
            it('removes middle voting::TallyType -> TallyType', () => {
                expect(sanitize_3.removeColons()('voting::TallyType')).toEqual('TallyType');
            });
            it('removes on embedded values (one)', () => {
                expect(sanitize_3.removeColons()('(T::AccountId, SpanIndex)')).toEqual('(AccountId, SpanIndex)');
            });
            it('removes on embedded values (all)', () => {
                expect(sanitize_3.removeColons()('(T::AccountId, slashing::SpanIndex)')).toEqual('(AccountId, SpanIndex)');
            });
            it('keeps with allowNamespaces', () => {
                expect(sanitize_3.removeColons()('::slashing::SpanIndex', { allowNamespaces: true })).toEqual('slashing::SpanIndex');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/create/typeSplit.spec", ["require", "exports", "types/src/create/index"], function (require, exports, _52) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('typeSplit', () => {
        it('splits simple types into an array', () => {
            expect(_52.typeSplit('Text, u32, u64')).toEqual(['Text', 'u32', 'u64']);
        });
        it('splits nested combinations', () => {
            expect(_52.typeSplit('Text, (u32), Vec<u64>')).toEqual(['Text', '(u32)', 'Vec<u64>']);
        });
        it('keeps nested tuples together', () => {
            expect(_52.typeSplit('Text, (u32, u128), Vec<u64>')).toEqual(['Text', '(u32, u128)', 'Vec<u64>']);
        });
        it('keeps nested vector tuples together', () => {
            expect(_52.typeSplit('Text, (u32, u128), Vec<(u64, u32)>')).toEqual(['Text', '(u32, u128)', 'Vec<(u64, u32)>']);
        });
        it('allows for deep nesting', () => {
            expect(_52.typeSplit('Text, (u32, (u128, u8)), Vec<(u64, (u32, u32))>')).toEqual(['Text', '(u32, (u128, u8))', 'Vec<(u64, (u32, u32))>']);
        });
        it('checks for unclosed vec', () => {
            expect(() => _52.typeSplit('Text, Vec<u64')).toThrow(/Invalid definition/);
        });
        it('checks for unclosed tuple', () => {
            expect(() => _52.typeSplit('Text, (u64, u32')).toThrow(/Invalid definition/);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/ethereum/AccountId.spec", ["require", "exports", "types/src/codec/Raw", "types/src/create/index"], function (require, exports, Raw_8, create_69) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('EthereumAccountId', () => {
        const registry = new create_69.TypeRegistry();
        describe('defaults', () => {
            const id = registry.createType('EthereumAccountId');
            it('has a 20-byte length', () => {
                expect(id).toHaveLength(20);
            });
            it('is empty by default', () => {
                expect(id.isEmpty).toBe(true);
            });
            it('equals the empty address', () => {
                expect(id.eq('0x0000000000000000000000000000000000000000')).toBe(true);
            });
        });
        describe('decoding', () => {
            const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
                const a = registry.createType('EthereumAccountId', input);
                expect(a.toString()).toBe(expected);
            });
            testDecode('AccountId', registry.createType('EthereumAccountId', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887'), '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testDecode('hex', '0x4119b2e6c3cb618f4f0B93ac77f9Beec7ff02887', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testDecode('Raw', new Raw_8.Raw(registry, [
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2
            ]), '0x0102030405060708010201020304050607080102');
            testDecode('Uint8Array', Uint8Array.from([
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2
            ]), '0x0102030405060708010201020304050607080102');
        });
        describe('encoding', () => {
            const testEncode = (to, expected, input = '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887') => it(`can encode ${to}`, () => {
                const a = registry.createType('EthereumAccountId', input);
                expect(a[to]()).toEqual(expected);
            });
            testEncode('toHex', '0x4119b2e6c3cb618f4f0b93ac77f9beec7ff02887');
            testEncode('toJSON', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testEncode('toString', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testEncode('toString', '0x0000000000000000000000000000000000000000', '0x00');
            testEncode('toU8a', Uint8Array.from([
                0x41, 0x19, 0xb2, 0xe6, 0xc3, 0xcb, 0x61, 0x8f, 0x4f, 0x0b,
                0x93, 0xac, 0x77, 0xf9, 0xbe, 0xec, 0x7f, 0xf0, 0x28, 0x87
            ]));
            it('decodes to a non-empty value', () => {
                expect(registry.createType('EthereumAccountId', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887').isEmpty).toBe(false);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/ethereum/LookupSource.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_70) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('EthereumLookupSource', () => {
        const registry = new create_70.TypeRegistry();
        const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
            const a = registry.createType('EthereumLookupSource', input);
            expect(a.toString()).toBe(expected);
        });
        describe('decoding', () => {
            testDecode('Address', registry.createType('EthereumLookupSource', '0x00a329c0648769a73afac7f9381e08fb43dbea72'), '0x00a329c0648769A73afAc7F9381E08FB43dBEA72');
            testDecode('AccountId', registry.createType('EthereumAccountId', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887'), '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testDecode('AccountIndex (mixed prefixes)', registry.createType('EthereumLookupSource', '2jpAFn'), 
            // NOTE Expected address here is encoded with prefix 42, input above with 68
            '25GUyv');
            testDecode('AccountIndex (hex)', registry.createType('AccountIndex', '0x0100'), '25GUyv');
            testDecode('Uint8Array (with prefix 255)', Uint8Array.from([
                255,
                0x41, 0x19, 0xb2, 0xe6, 0xc3, 0xcb, 0x61, 0x8f, 0x4f, 0x0b,
                0x93, 0xac, 0x77, 0xf9, 0xbe, 0xec, 0x7f, 0xf0, 0x28, 0x87
            ]), '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testDecode('Uint8Array (with prefix 1 byte)', Uint8Array.from([1]), 'F7NZ');
            testDecode('Uint8Array (with prefix 2 bytes)', Uint8Array.from([0xfc, 0, 1]), '25GUyv');
            testDecode('Uint8Array (with prefix 4 bytes)', Uint8Array.from([0xfd, 17, 18, 19, 20]), 'Mwz15xP2');
        });
        describe('encoding', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const a = registry.createType('EthereumLookupSource', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
                expect(a[to]()).toEqual(expected);
            });
            testEncode('toHex', '0xff4119b2e6c3cb618f4f0b93ac77f9beec7ff02887');
            testEncode('toString', '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887');
            testEncode('toU8a', Uint8Array.from([
                255,
                0x41, 0x19, 0xb2, 0xe6, 0xc3, 0xcb, 0x61, 0x8f, 0x4f, 0x0b,
                0x93, 0xac, 0x77, 0xf9, 0xbe, 0xec, 0x7f, 0xf0, 0x28, 0x87
            ]));
        });
        describe('utility', () => {
            it('equals on AccountId', () => {
                const addr = '0x4119b2e6c3Cb618F4f0B93ac77f9BeeC7FF02887';
                expect(registry.createType('EthereumLookupSource', addr).eq(addr)).toBe(true);
            });
            it('equals on AccountIndex', () => {
                // see the test below - these are equivalent (with different prefix encoding)
                expect(registry.createType('EthereumLookupSource', '2jpAFn').eq('25GUyv')).toBe(true);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/Extrinsic.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "types/src/extrinsic/index"], function (require, exports, metadata_10, static_25, create_71, _53) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_25 = __importDefault(static_25);
    const registry = new create_71.TypeRegistry();
    const metadata = new metadata_10.Metadata(registry, static_25.default);
    registry.setMetadata(metadata);
    describe('Extrinsic', () => {
        describe('V4', () => {
            it('decodes an actual transaction', () => {
                const extrinsic = new _53.GenericExtrinsic(registry, '0x' +
                    '5d02' + // length
                    '84' + // V4, signing bit set
                    'ff' + // lookup, AccountId of sender follows
                    'fcc4910cb536b4333db4bccb40e2cf6427b4766518e754b91e70c97e4a87dbb3' + // sender
                    '00' + // multisig, type ed25519
                    'd99ffe3e610ad234e1414bda5831395a6df9098bf80b01561ce89a5065ae89d5' + // sig first 32
                    'c10e1619c6c99131b0bea4fb73ef04d07c07770e2ae9df5c325c331769ccb300' + // sig last 32
                    'a90b' + // mortal era
                    '1101' + // nonce, compact 68
                    '0700ac23fc06' + // tip, 0.03 KSM
                    '0600' + // balances.transfer (on Kusama this was 0400, changed here to match metadata)
                    'ff' + // lookup, AccountId of recipient follows
                    '495e1e506f266418af07fa0c5c108dd436f2faa59fe7d9e54403779f5bbd7718' + // recipient
                    '0bc01eb1fc185f' // value, 104.560 KSM
                );
                expect(extrinsic.era.toHuman()).toEqual({ MortalEra: { period: '1,024', phase: '186' } });
                expect(extrinsic.nonce.toNumber()).toEqual(68);
                expect(extrinsic.tip.toHuman()).toEqual('30.0000 mUnit');
                expect(extrinsic.callIndex).toEqual(new Uint8Array([6, 0]));
                expect(extrinsic.args[0].toHex()).toEqual('0xff495e1e506f266418af07fa0c5c108dd436f2faa59fe7d9e54403779f5bbd7718');
                expect(extrinsic.args[1].toHuman()).toEqual('104.5609 Unit');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/ExtrinsicEra.spec", ["require", "exports", "types/src/create/index", "types/src/extrinsic/index"], function (require, exports, create_72, _54) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ExtrinsicEra', () => {
        const registry = new create_72.TypeRegistry();
        it('decodes an Extrinsic Era with immortal', () => {
            const extrinsicEra = new _54.GenericExtrinsicEra(registry, new Uint8Array([0]));
            expect(extrinsicEra.asImmortalEra).toBeDefined();
            expect(extrinsicEra.toJSON()).toEqual({ ImmortalEra: '0x00' });
        });
        it('decodes an Extrinsic Era from u8 as mortal', () => {
            const extrinsicEra = new _54.GenericExtrinsicEra(registry, new Uint8Array([78, 156]));
            expect(extrinsicEra.asMortalEra.period.toNumber()).toEqual(32768);
            expect(extrinsicEra.asMortalEra.phase.toNumber()).toEqual(20000);
        });
        it('decoded from an existing ExtrinsicEra', () => {
            const extrinsicEra = new _54.GenericExtrinsicEra(registry, new _54.GenericExtrinsicEra(registry, new Uint8Array([78, 156])));
            expect(extrinsicEra.asMortalEra.period.toNumber()).toEqual(32768);
            expect(extrinsicEra.asMortalEra.phase.toNumber()).toEqual(20000);
        });
        it('encode an Extrinsic Era from Object with blocknumber & period as mortal instance', () => {
            const extrinsicEra = new _54.GenericExtrinsicEra(registry, { current: 1400, period: 200 });
            expect(extrinsicEra.asMortalEra.period.toNumber()).toEqual(256);
            expect(extrinsicEra.asMortalEra.phase.toNumber()).toEqual(120);
        });
        it('serializes and de-serializes from JSON', () => {
            const extrinsicEra = new _54.GenericExtrinsicEra(registry, new Uint8Array([78, 156]));
            const u8a = extrinsicEra.toU8a();
            const json = extrinsicEra.toJSON();
            expect(u8a).toEqual(new Uint8Array([78, 156]));
            expect(json).toEqual({ MortalEra: '0x4e9c' });
            expect(new _54.GenericExtrinsicEra(registry, json).toU8a()).toEqual(u8a);
        });
        it('creates from an actual valid era', () => {
            const currBlock = 2251519;
            const mortalEra = new _54.GenericExtrinsicEra(registry, '0xc503').asMortalEra;
            expect(mortalEra.period.toNumber()).toEqual(64);
            expect(mortalEra.phase.toNumber()).toEqual(60);
            expect(mortalEra.birth(currBlock)).toEqual(2251516);
            expect(mortalEra.death(currBlock)).toEqual(2251580);
        });
        it('creates for an actual era (2)', () => {
            const mortalEra = new _54.GenericExtrinsicEra(registry, '0x8502').asMortalEra;
            expect(mortalEra.period.toNumber()).toEqual(64);
            expect(mortalEra.phase.toNumber()).toEqual(40);
        });
        it('creates form an actual era (3)', () => {
            const mortalEra = new _54.GenericExtrinsicEra(registry, '0x6502').asMortalEra;
            expect(mortalEra.period.toNumber()).toEqual(64);
            expect(mortalEra.phase.toNumber()).toEqual(38);
        });
        it('creates from an actual era, 100 block hash count', () => {
            const mortalEra = new _54.GenericExtrinsicEra(registry, '0xd607').asMortalEra;
            expect(mortalEra.period.toNumber()).toEqual(128);
            expect(mortalEra.phase.toNumber()).toEqual(125);
        });
        it('creates from a actual 2400 block hash count', () => {
            const mortalEra = new _54.GenericExtrinsicEra(registry, '0x9be3').asMortalEra;
            expect(mortalEra.period.toNumber()).toEqual(4096);
            expect(mortalEra.phase.toNumber()).toEqual(3641);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/ExtrinsicPayload.spec", ["require", "exports", "@polkadot/util", "types/src/create/index", "types/src/extrinsic/index"], function (require, exports, util_244, create_73, _55) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ExtrinsicPayload', () => {
        const registry = new create_73.TypeRegistry();
        const TEST = {
            address: '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE',
            blockHash: '0xde8f69eeb5e065e18c6950ff708d7e551f68dc9bf59a07c52367c0280f805ec7',
            era: '0x0703',
            genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
            method: '0x0600ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9e56c',
            nonce: '0x00001234',
            specVersion: 123,
            tip: '0x00000000000000000000000000005678'
        };
        it('creates and can re-create from itself (U8a)', () => {
            const a = new _55.GenericExtrinsicPayload(registry, TEST, { version: 4 });
            const b = new _55.GenericExtrinsicPayload(registry, a.toU8a(), { version: 4 });
            expect(a).toEqual(b);
        });
        it('creates and can re-create from itself (hex)', () => {
            const a = new _55.GenericExtrinsicPayload(registry, TEST, { version: 4 });
            const b = new _55.GenericExtrinsicPayload(registry, a.toHex(), { version: 4 });
            expect(a).toEqual(b);
        });
        it('handles toU8a(true) correctly', () => {
            expect(util_244.u8aToHex(new _55.GenericExtrinsicPayload(registry, TEST, { version: 4 }).toU8a(true))).toEqual(
            // no method length prefix
            '0x0600ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9e56c0703d148e25901007b000000dcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025bde8f69eeb5e065e18c6950ff708d7e551f68dc9bf59a07c52367c0280f805ec7');
        });
        it('handles toU8a(false) correctly', () => {
            expect(util_244.u8aToHex(new _55.GenericExtrinsicPayload(registry, TEST, { version: 4 }).toU8a())).toEqual(
            // with method length prefix
            '0x940600ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9e56c0703d148e25901007b000000dcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025bde8f69eeb5e065e18c6950ff708d7e551f68dc9bf59a07c52367c0280f805ec7');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/SignerPayload.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "types/src/extrinsic/index"], function (require, exports, metadata_11, static_26, create_74, _56) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_26 = __importDefault(static_26);
    const registry = new create_74.TypeRegistry();
    const metadata = new metadata_11.Metadata(registry, static_26.default);
    registry.setMetadata(metadata);
    describe('SignerPayload', () => {
        const TEST = {
            address: '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE',
            blockHash: '0xde8f69eeb5e065e18c6950ff708d7e551f68dc9bf59a07c52367c0280f805ec7',
            blockNumber: '0x00231d30',
            era: '0x0703',
            genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
            method: '0x0600ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9e56c',
            nonce: '0x00001234',
            signedExtensions: ['CheckNonce', 'CheckWeight'],
            specVersion: '0x00000006',
            tip: '0x00000000000000000000000000005678',
            transactionVersion: '0x00000007',
            version: 4
        };
        it('creates a valid JSON output', () => {
            expect(new _56.GenericSignerPayload(registry, {
                address: '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE',
                blockHash: '0xde8f69eeb5e065e18c6950ff708d7e551f68dc9bf59a07c52367c0280f805ec7',
                blockNumber: '0x231d30',
                era: registry.createType('ExtrinsicEra', { current: 2301232, period: 200 }),
                genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
                method: registry.createType('Call', '0x0600ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9e56c'),
                nonce: 0x1234,
                signedExtensions: ['CheckNonce'],
                tip: 0x5678,
                version: 4
            }).toPayload()).toEqual({
                address: '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFabHE',
                blockHash: '0xde8f69eeb5e065e18c6950ff708d7e551f68dc9bf59a07c52367c0280f805ec7',
                blockNumber: '0x00231d30',
                era: '0x0703',
                genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
                method: '0x0600ffd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9e56c',
                nonce: '0x00001234',
                signedExtensions: ['CheckNonce'],
                specVersion: '0x00000000',
                tip: '0x00000000000000000000000000005678',
                transactionVersion: '0x00000000',
                version: 4
            });
        });
        it('re-constructs from JSON', () => {
            expect(new _56.GenericSignerPayload(registry, {
                ...TEST,
                runtimeVersion: { specVersion: 0x06, transactionVersion: 0x07 }
            }).toPayload()).toEqual(TEST);
        });
        it('re-constructs from itself', () => {
            expect(new _56.GenericSignerPayload(registry, new _56.GenericSignerPayload(registry, {
                ...TEST,
                runtimeVersion: { specVersion: 0x06, transactionVersion: 0x07 }
            })).toPayload()).toEqual(TEST);
        });
        it('can be used as a feed to ExtrinsicPayload', () => {
            const signer = new _56.GenericSignerPayload(registry, TEST).toPayload();
            const payload = registry.createType('ExtrinsicPayload', signer, { version: signer.version });
            expect(payload.era.toHex()).toEqual(TEST.era);
            expect(payload.method.toHex()).toEqual(TEST.method);
            expect(payload.blockHash.toHex()).toEqual(TEST.blockHash);
            expect(payload.nonce.eq(TEST.nonce)).toBe(true);
            expect(payload.tip.eq(TEST.tip)).toBe(true);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/v4/Extrinsic.spec", ["require", "exports", "bn.js", "@polkadot/keyring/testingPairs", "metadata/src/index", "metadata/src/static", "types/src/create/index", "types/src/extrinsic/v4/index"], function (require, exports, bn_js_19, testingPairs_7, metadata_12, static_27, create_75, _57) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_19 = __importDefault(bn_js_19);
    static_27 = __importDefault(static_27);
    const registry = new create_75.TypeRegistry();
    const metadata = new metadata_12.Metadata(registry, static_27.default);
    const keyring = testingPairs_7.createTestPairs({ type: 'ed25519' }, false);
    registry.setMetadata(metadata);
    const tx = metadata_12.decorateExtrinsics(registry, metadata.asLatest, metadata.version);
    describe('ExtrinsicV4', () => {
        it.only('constructs a sane Uint8Array (default)', () => {
            expect(new _57.GenericExtrinsicV4(registry).toU8a()).toEqual(new Uint8Array([
                0, 0,
                0, 0, 0, 0 // fillBlock Perbill
            ]));
        });
        it('creates a unsigned extrinsic', () => {
            expect(new _57.GenericExtrinsicV4(registry, tx.balances.transfer(keyring.bob.publicKey, 6969n)).toHex()).toEqual('0x' +
                '0600' + // balance.transfer
                'ff' +
                'd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9' +
                'e56c');
        });
        it('creates a signed extrinsic', () => {
            expect(new _57.GenericExtrinsicV4(registry, tx.balances.transfer(keyring.bob.publicKey, 6969n)).sign(keyring.alice, {
                blockHash: '0xec7afaf1cca720ce88c1d1b689d81f0583cc15a97d621cf046dd9abf605ef22f',
                genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
                nonce: 1,
                runtimeVersion: {
                    apis: [],
                    authoringVersion: new bn_js_19.default(123),
                    implName: 'test',
                    implVersion: new bn_js_19.default(123),
                    specName: 'test',
                    specVersion: new bn_js_19.default(123),
                    transactionVersion: new bn_js_19.default(123)
                },
                tip: 2
            }).toHex()).toEqual('0x' +
                'ff' +
                'd172a74cda4c865912c32ba0a80a57ae69abae410e5ccb59dee84e2f4432db4f' +
                '00' + // ed25519
                'b8065808da3d11ddb4167afb156eafb51e8104ba792589bb443653a7fab82b90' +
                'c6530e838df06bfc8befcbbcfca7e219350cff865439b815b10b8e64ae1e9b01' +
                '000408' + // era. nonce, tip
                '0600' +
                'ff' +
                'd7568e5f0a7eda67a82691ff379ac4bba4f9c9b859fe779b5d46363b61ad2db9' +
                'e56c');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/extrinsic/v4/ExtrinsicSignature.spec", ["require", "exports", "@polkadot/keyring/testingPairs", "metadata/src/index", "metadata/src/static", "@polkadot/util", "types/src/create/index", "types/src/extrinsic/v4/index"], function (require, exports, testingPairs_8, metadata_13, static_28, util_245, create_76, _58) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_28 = __importDefault(static_28);
    const signOptions = {
        blockHash: '0x1234567890123456789012345678901234567890123456789012345678901234',
        genesisHash: '0x1234567890123456789012345678901234567890123456789012345678901234',
        nonce: '0x69',
        runtimeVersion: {
            apis: [],
            authoringVersion: util_245.BN_ZERO,
            implName: String('test'),
            implVersion: util_245.BN_ZERO,
            specName: String('test'),
            specVersion: util_245.BN_ZERO,
            transactionVersion: util_245.BN_ZERO
        }
    };
    describe('ExtrinsicSignatureV4', () => {
        const pairs = testingPairs_8.createTestPairs({ type: 'ed25519' });
        it('encodes to a sane Uint8Array (default)', () => {
            const registry = new create_76.TypeRegistry();
            const u8a = new Uint8Array([
                // signer as an AccountIndex
                0x09,
                // signature type
                0x01,
                // signature
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                // extra stuff
                0x00,
                0x04,
                0x08 // tip, compact
            ]);
            expect(new _58.GenericExtrinsicSignatureV4(registry, u8a, { isSigned: true }).toU8a()).toEqual(u8a);
        });
        it('fake signs default', () => {
            const registry = new create_76.TypeRegistry();
            const metadata = new metadata_13.Metadata(registry, static_28.default);
            registry.setMetadata(metadata);
            expect(new _58.GenericExtrinsicSignatureV4(registry, undefined).signFake(registry.createType('Call'), pairs.alice.address, signOptions).toHex()).toEqual('0x' +
                'ff' +
                'd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d' +
                '01' +
                '4242424242424242424242424242424242424242424242424242424242424242' +
                '4242424242424242424242424242424242424242424242424242424242424242' +
                '00a50100');
        });
        it('fake signs default', () => {
            const registry = new create_76.TypeRegistry();
            const metadata = new metadata_13.Metadata(registry, static_28.default);
            registry.setMetadata(metadata);
            registry.register({
                Address: 'AccountId',
                ExtrinsicSignature: 'AnySignature'
            });
            expect(new _58.GenericExtrinsicSignatureV4(registry, undefined).signFake(registry.createType('Call'), pairs.alice.address, signOptions).toHex()).toEqual('0x' +
                // Address = AccountId
                // 'ff' +
                'd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d' +
                // This is a prefix-less signature, anySignture as opposed to Multi above
                // '01' +
                '4242424242424242424242424242424242424242424242424242424242424242' +
                '4242424242424242424242424242424242424242424242424242424242424242' +
                '00a50100');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/AccountId.spec", ["require", "exports", "types/src/codec/Raw", "types/src/create/index", "../json/AccountIdVec.001.json"], function (require, exports, Raw_9, create_77, AccountIdVec_001_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    AccountIdVec_001_json_1 = __importDefault(AccountIdVec_001_json_1);
    describe('AccountId', () => {
        const registry = new create_77.TypeRegistry();
        describe('defaults', () => {
            const id = registry.createType('AccountId');
            it('has a 32-byte length', () => {
                expect(id).toHaveLength(32);
            });
            it('is empty by default', () => {
                expect(id.isEmpty).toBe(true);
            });
            it('equals the empty address', () => {
                expect(id.eq('5C4hrfjw9DjXZTzV3MwzrrAr9P1MJhSrvWGWqi1eSuyUpnhM')).toBe(true);
            });
            it('allows decoding from null', () => {
                expect(registry.createType('AccountId', null).eq('5C4hrfjw9DjXZTzV3MwzrrAr9P1MJhSrvWGWqi1eSuyUpnhM')).toBe(true);
            });
        });
        describe('decoding', () => {
            const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
                const a = registry.createType('AccountId', input);
                expect(a.toString()).toBe(expected);
            });
            it('fails with non-32-byte lengths', () => {
                expect(() => registry.createType('AccountId', '0x1234')).toThrow(/Invalid AccountId provided, expected 32 bytes/);
            });
            testDecode('AccountId', registry.createType('AccountId', '0x0102030405060708010203040506070801020304050607080102030405060708'), '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('hex', '0x0102030405060708010203040506070801020304050607080102030405060708', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('string', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('Raw', new Raw_9.Raw(registry, [
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8
            ]), '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('Uint8Array', Uint8Array.from([
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8
            ]), '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
        });
        describe('encoding', () => {
            const testEncode = (to, expected, input = '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF') => it(`can encode ${to}`, () => {
                const a = registry.createType('AccountId', input);
                expect(a[to]()).toEqual(expected);
            });
            testEncode('toHex', '0x0102030405060708010203040506070801020304050607080102030405060708');
            testEncode('toJSON', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testEncode('toString', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testEncode('toString', '5C4hrfjw9DjXZTzV3MwzrrAr9P1MJhSrvWGWqi1eSuyUpnhM', '0x0000000000000000000000000000000000000000000000000000000000000000');
            testEncode('toU8a', Uint8Array.from([
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8
            ]));
            it('decodes to a non-empty value', () => {
                expect(registry.createType('AccountId', '7qT1BvpawNbqb3BZaBTMFMMAKrpJKLPf1LmEHR1JyarWJdMX').isEmpty).toBe(false);
            });
        });
        describe('storage decoding', () => {
            it('has the correct entries', () => {
                registry.setChainProperties(registry.createType('ChainProperties', {
                    ss58Format: 68
                }));
                const data = registry.createType('StorageData', AccountIdVec_001_json_1.default.params.result.changes[0][1]);
                const list = registry.createType('Vec<AccountId>', data).map((accountId) => accountId.toString());
                expect(list).toEqual([
                    '7qVJujLF3EDbZt5WfQXWvueFedMS4Vfk2Hb4GyR8jwksTLup',
                    '7pHyqeYaJjJPgxQgCXoS2EZMhBhtpm6BLCqQ4jJZTQB2kMhw',
                    '7pYLWV6PTUmLTMQfHmmuBwBNLkhcKhRAnkM36CSJtjat9ACb',
                    '7qT1BvpawNbqb3BZaBTMFMMAKrpJKLPf1LmEHR1JyarWJdMX',
                    '7rADc9JW5EUGFPWLjPMipH4c3bJ2GyAUedmqQHiaGucWVrsT',
                    '7oK5KRH6jt4p8auipnru9ptqeuRwbLMHA2tgCViZzhmW4Lox',
                    '7ndAVsHvonnzTg4AvRhpraNCKj9g4CGQXKoLrgkTZ91Na6PE',
                    '7oL7VfXgLA8L3pJJwi11v3sBYc1b5R3tLrweHwzMNxgEpjxP'
                ]);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/AccountIndex.spec", ["require", "exports", "bn.js", "types/src/create/index", "types/src/generic/index"], function (require, exports, bn_js_20, create_78, _59) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_20 = __importDefault(bn_js_20);
    describe('AccountIndex', () => {
        const registry = new create_78.TypeRegistry();
        it('creates a BN representation', () => {
            expect(registry.createType('AccountIndex', new Uint8Array([17, 18, 19, 20])).toNumber()).toEqual(336794129);
        });
        it('creates from BigInt', () => {
            expect(registry.createType('AccountIndex', 336794129n).toNumber()).toEqual(336794129);
        });
        it('creates a BN representation (from ss-58)', () => {
            expect(registry.createType('AccountIndex', 'Mwz15xP2').toNumber()).toEqual(336794129);
        });
        it('constructs 2-byte from number', () => {
            expect(registry.createType('AccountIndex', 256 * 1).toString()).toEqual('25GUyv');
        });
        it('constructs from number', () => {
            expect(registry.createType('AccountIndex', new bn_js_20.default(336794129)).toString()).toEqual('Mwz15xP2');
        });
        it('compares ss-58 values', () => {
            expect(registry.createType('AccountIndex', 256 * 1).eq('25GUyv')).toBe(true);
        });
        it('compares numbers', () => {
            expect(registry.createType('AccountIndex', '2jpAFn').eq(256 * 1)).toBe(true);
        });
        describe('calcLength', () => {
            const testLength = (value, length) => {
                expect(_59.GenericAccountIndex.calcLength(value)).toEqual(length);
            };
            it('returns 1 for <= 0xef', () => {
                testLength(0xef, 1);
            });
            it('returns 2 for > 0xef', () => {
                testLength(0xf0, 2);
            });
            it('returns 4 bytes for 32-bit inputs', () => {
                testLength(0xffeeddcc, 4);
            });
            it('returns 8 bytes for larger inputs', () => {
                testLength(0x122334455, 8);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Block.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "../json/SignedBlock.003.00.json", "types/src/generic/Block"], function (require, exports, metadata_14, static_29, create_79, SignedBlock_003_00_json_1, Block_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_29 = __importDefault(static_29);
    SignedBlock_003_00_json_1 = __importDefault(SignedBlock_003_00_json_1);
    const registry = new create_79.TypeRegistry();
    const metadata = new metadata_14.Metadata(registry, static_29.default);
    registry.setMetadata(metadata);
    describe('Block', () => {
        it('has a valid toRawType', () => {
            expect(new Block_2.GenericBlock(registry).toRawType()).toEqual(
            // each of the containing structures have been stringified on their own
            JSON.stringify({
                header: 'Header',
                extrinsics: 'Vec<Extrinsic>'
            }));
        });
        it('re-encodes digest items correctly', () => {
            const digest = new Block_2.GenericBlock(registry, SignedBlock_003_00_json_1.default.result.block).header.digest;
            expect(digest.logs[0].toHex()).toEqual(SignedBlock_003_00_json_1.default.result.block.header.digest.logs[0]);
            expect(digest.logs[1].toHex()).toEqual(SignedBlock_003_00_json_1.default.result.block.header.digest.logs[1]);
        });
    });
});
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Call.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "types/src/generic/index"], function (require, exports, metadata_15, static_30, create_80, _60) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_30 = __importDefault(static_30);
    const registry = new create_80.TypeRegistry();
    const metadata = new metadata_15.Metadata(registry, static_30.default);
    registry.setMetadata(metadata);
    describe('Call', () => {
        it('handles decoding correctly (bare)', () => {
            expect(new _60.GenericCall(registry, {
                args: [],
                callIndex: [6, 1] // balances.setBalance
            }).toU8a()).toEqual(new Uint8Array([6, 1, 0, 0, 0]));
        });
        it('handles creation from a hex value properly', () => {
            expect(new _60.GenericCall(registry, '0x0601').toU8a()).toEqual(new Uint8Array([6, 1, 0, 0, 0])); // balances.setBalance
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/ConsensusEngineId.spec", ["require", "exports", "types/src/generic/ConsensusEngineId"], function (require, exports, ConsensusEngineId_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ConsensusEngineId', () => {
        it('creates a valid id for aura', () => {
            expect(ConsensusEngineId_2.GenericConsensusEngineId.stringToId('FRNK')).toEqual(ConsensusEngineId_2.CID_GRPA);
            expect(ConsensusEngineId_2.GenericConsensusEngineId.stringToId('aura')).toEqual(ConsensusEngineId_2.CID_AURA);
        });
        it('reverses an id to string for babe', () => {
            expect(ConsensusEngineId_2.GenericConsensusEngineId.idToString(ConsensusEngineId_2.CID_BABE)).toEqual('BABE');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/LookupSource.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_81) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('LookupSource', () => {
        const registry = new create_81.TypeRegistry();
        const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
            const a = registry.createType('Address', input);
            expect(a.toString()).toBe(expected);
        });
        describe('utility', () => {
            it('equals on AccountId', () => {
                const addr = '5DkQbYAExs3M2sZgT1Ec3mKfZnAQCL4Dt9beTCknkCUn5jzo';
                expect(registry.createType('LookupSource', addr).eq(addr)).toBe(true);
            });
            it('equals on AccountIndex', () => {
                // see the test below - these are equivalent (with different prefix encoding)
                expect(registry.createType('LookupSource', '2jpAFn').eq('25GUyv')).toBe(true);
            });
        });
        describe('decoding', () => {
            testDecode('Address', registry.createType('LookupSource', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF'), '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('AccountId', registry.createType('AccountId', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF'), '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('AccountIndex (mixed prefixes)', registry.createType('LookupSource', '2jpAFn'), 
            // NOTE Expected adress here is encoded with prefix 42, input above with 68
            '25GUyv');
            testDecode('AccountIndex (hex)', registry.createType('AccountIndex', '0x0100'), '25GUyv');
            testDecode('Array', [
                255,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8
            ], '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('Uint8Array (with prefix 255)', Uint8Array.from([
                255,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8
            ]), '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testDecode('Uint8Array (with prefix 1 byte)', Uint8Array.from([1]), 'F7NZ');
            testDecode('Uint8Array (with prefix 2 bytes)', Uint8Array.from([0xfc, 0, 1]), '25GUyv');
            testDecode('Uint8Array (with prefix 4 bytes)', Uint8Array.from([0xfd, 17, 18, 19, 20]), 'Mwz15xP2');
            // FIXME The specification allows for 8 byte addresses, however since AccountIndex is u32 internally
            // (and defined that way in thd efault Substrate),this does not actually work since it is 8 bytes,
            // instead of 4 bytes max u32 length
            // testDecode(
            //   'Uint8Array (with prefix 8 bytes)',
            //   Uint8Array.from([0xfe, 17, 18, 19, 20, 21, 22, 23, 24]),
            //   '3N5RJXxM5fLd4h'
            // );
        });
        describe('encoding', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                const a = registry.createType('Address', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
                expect(a[to]()).toEqual(expected);
            });
            testEncode('toHex', '0xff0102030405060708010203040506070801020304050607080102030405060708');
            testEncode('toString', '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF');
            testEncode('toU8a', Uint8Array.from([
                255,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
                1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8
            ]));
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/generic/Vote.spec", ["require", "exports", "types/src/create/index", "types/src/generic/index"], function (require, exports, create_82, _61) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('GenericVote', () => {
        const registry = new create_82.TypeRegistry();
        describe('construction', () => {
            it('constructs via boolean true', () => {
                expect(new _61.GenericVote(registry, true).toU8a()).toEqual(new Uint8Array([128]));
                expect(new _61.GenericVote(registry, true).isAye).toBe(true);
                expect(new _61.GenericVote(registry, true).isNay).toBe(false);
            });
            it('constructs via boolean false', () => {
                expect(new _61.GenericVote(registry, false).toU8a()).toEqual(new Uint8Array([0]));
                expect(new _61.GenericVote(registry, false).isNay).toBe(true);
                expect(new _61.GenericVote(registry, false).isAye).toBe(false);
            });
            it('constructs via undefined', () => {
                expect(new _61.GenericVote(registry).isNay).toBe(true);
            });
            it('has isYay for positive', () => {
                // eslint-disable-next-line no-new-wrappers
                expect(new _61.GenericVote(registry, true).isAye).toBe(true);
            });
            it('has isNay for negative', () => {
                // eslint-disable-next-line no-new-wrappers
                expect(new _61.GenericVote(registry, false).isNay).toBe(true);
            });
            it('is Aye for negative numbers', () => {
                expect(new _61.GenericVote(registry, -128).isAye).toBe(true);
            });
            it('is Nay for positive numbers', () => {
                expect(new _61.GenericVote(registry, 127).isNay).toBe(true);
            });
            it('is Nay for 0', () => {
                expect(new _61.GenericVote(registry, 0).isNay).toBe(true);
            });
            it('constructs via empty', () => {
                expect(new _61.GenericVote(registry).isNay).toBe(true);
            });
            it('constructs via Uint8Array (empty)', () => {
                expect(new _61.GenericVote(registry, new Uint8Array()).isNay).toBe(true);
            });
            it('constructs via Uint8Array (nay)', () => {
                expect(new _61.GenericVote(registry, new Uint8Array([1])).isNay).toBe(true);
            });
            it('constructs via Uint8Array (aye)', () => {
                const test = new _61.GenericVote(registry, new Uint8Array([0b10000010]));
                expect(test.isNay).toBe(false);
                expect(test.conviction.toString()).toEqual('Locked2x');
            });
        });
        describe('Vote with conviction', () => {
            it('constructs Vote with raw boolean', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 'Locked1x'
                }).toU8a()).toEqual(new Uint8Array([0b10000001]));
            });
            it('constructs with Vote aye is false, conviction is None', () => {
                expect(new _61.GenericVote(registry, {
                    aye: false,
                    conviction: 'None'
                }).toU8a()).toEqual(new Uint8Array([0b00000000]));
            });
            it('constructs with Vote aye is true, conviction is Locked4x', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 'Locked4x'
                }).toU8a()).toEqual(new Uint8Array([0b10000100]));
            });
        });
        describe('getters', () => {
            it('Conviction getter works', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 'Locked2x'
                }).conviction.toString()).toEqual('Locked2x');
            });
            it('Conviction getter works with raw boolean and string conviction', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 'Locked2x'
                }).conviction.toString()).toEqual('Locked2x');
            });
            it('Conviction getter works with raw boolean and conviction index', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 2
                }).conviction.toString()).toEqual('Locked2x');
            });
            it('Conviction getter works with raw boolean and no conviction', () => {
                const test = new _61.GenericVote(registry, { aye: true });
                expect(test.isAye).toEqual(true);
                expect(test.conviction.toString()).toEqual('None');
            });
            it('isAye getter works', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 'None'
                }).isAye)
                    .toEqual(true);
            });
            it('isNay getter works', () => {
                expect(new _61.GenericVote(registry, {
                    aye: true,
                    conviction: 'None'
                }).isNay)
                    .toEqual(false);
            });
        });
        describe('utils', () => {
            it('has a sane toRawType', () => {
                expect(new _61.GenericVote(registry).toRawType()).toEqual('Vote');
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/author/ExtrinsicStatus.spec", ["require", "exports", "types/src/create/index", "../../json/ExtrinsicStatus.001.json"], function (require, exports, create_83, ExtrinsicStatus_001_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ExtrinsicStatus_001_json_1 = __importDefault(ExtrinsicStatus_001_json_1);
    describe('ExtrinsicStatus', () => {
        const registry = new create_83.TypeRegistry();
        let status;
        beforeEach(() => {
            status = registry.createType('ExtrinsicStatus', ExtrinsicStatus_001_json_1.default.params.result);
        });
        it('has the correct type', () => {
            expect(status.type).toEqual('Finalized');
        });
        it('has the correct hash', () => {
            expect(status.value.toString()).toEqual('0xc465b92a72b1d20918d64cd4effa70c2bb58b53a3f8c24c3ac8fd8f465f059b4');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/extrinsics/EdcsaSignature.spec", ["require", "exports", "@polkadot/util", "types/src/create/index"], function (require, exports, util_246, create_84) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const TESTS = [
        '0x55bd020bdbbdc02de34e915effc9b18a99002f4c29f64e22e8dcbb69e722ea6c28e1bb53b9484063fbbfd205e49dcc1f620929f520c9c4c3695150f05a28f52a01',
        '0x98adffe14b1882ba5a861d6aaa10805d52aed56f480e1ece01505a77470f29f15cb4b0a1dc33177761de8270199282baf160f255e1ca0e4c8354b54b0059e40a1c'
    ];
    describe('EdcsaSignature', () => {
        const registry = new create_84.TypeRegistry();
        it('constructs and has a valid representation (toHex)', () => {
            expect(registry.createType('EcdsaSignature', TESTS[0]).toHex()).toEqual(TESTS[0]);
        });
        it('constructs and has a valid representation (toJSON)', () => {
            expect(registry.createType('EcdsaSignature', TESTS[0]).toJSON()).toEqual(TESTS[0]);
        });
        it('constructs and has a valid representation (toU8a)', () => {
            expect(registry.createType('EcdsaSignature', TESTS[1]).toU8a()).toEqual(util_246.hexToU8a(TESTS[1]));
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/grandpa/ReportedRoundStates.spec", ["require", "exports", "types/src/create/index", "../../json/GrandpaRoundstate.001.json"], function (require, exports, create_85, GrandpaRoundstate_001_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    GrandpaRoundstate_001_json_1 = __importDefault(GrandpaRoundstate_001_json_1);
    describe('ReportedRoundStates', () => {
        const registry = new create_85.TypeRegistry();
        it('decodes from an actual message', () => {
            const states = registry.createType('ReportedRoundStates', GrandpaRoundstate_001_json_1.default.result);
            expect(states.best.precommits.missing.size).toEqual(250);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/identity/IdentityFields.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_86) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('IdentityFields', () => {
        const registry = new create_86.TypeRegistry();
        it('has a custom u64 (64-bit) encodedLength', () => {
            expect(registry.createType('IdentityFields').encodedLength).toEqual(8);
        });
        it('encodes a sample', () => {
            expect(registry.createType('IdentityFields', ['Display', 'Legal']).valueEncoded.eqn(1 + 2)).toBe(true);
        });
        it('encodes to a valid u8a value', () => {
            expect(registry.createType('IdentityFields', ['Display', 'Legal']).toU8a()).toEqual(new Uint8Array([3, 0, 0, 0, 0, 0, 0, 0]));
        });
        it('decodes from a u8a', () => {
            expect(registry.createType('IdentityFields', new Uint8Array([1 + 2 + 64, 0, 0, 0, 0, 0, 0, 0])).toHuman()).toEqual(['Display', 'Legal', 'Image']);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/identity/Registration.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_87) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_87.TypeRegistry();
    describe('Registration', () => {
        it('decodes a Registration', () => {
            expect(create_87.createType(registry, 'Registration', '0x' +
                '00' + // no judgements
                '00a0724e180900000000000000000000' + // balance
                '00' + // no length
                '039911039922039944039955039933000003996600').toJSON()).toEqual({
                deposit: 10000000000000,
                info: {
                    additional: [],
                    display: { Raw: '0x9911' },
                    email: { Raw: '0x9933' },
                    image: { None: null },
                    legal: { Raw: '0x9922' },
                    pgpFingerprint: null,
                    riot: { Raw: '0x9955' },
                    twitter: { Raw: '0x9966' },
                    web: { Raw: '0x9944' }
                },
                judgements: []
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/runtime/Digest.spec", ["require", "exports", "types/src/create/index", "../../json/Header.003.json"], function (require, exports, create_88, Header_003_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Header_003_json_1 = __importDefault(Header_003_json_1);
    describe('Digest', () => {
        const registry = new create_88.TypeRegistry();
        it('has the correct JSON representation', () => {
            const digest = registry.createType('Digest', Header_003_json_1.default.result.digest);
            expect(digest.logs.map((l) => l.toHex())).toEqual(Header_003_json_1.default.result.digest.logs);
        });
        it('decodes logs with consensus', () => {
            const digest = registry.createType('Digest', Header_003_json_1.default.result.digest);
            expect(digest.logs.length).toEqual(1);
            const log = digest.logs[0];
            expect(log.type).toBe('Consensus');
            expect(log.value.toJSON()).toEqual([
                1634891105,
                '0x69c97e0f00000000479c09f7ace12ed3e1af2dba6cca6831e257e80feef56c7474d6c69bae6f4e8a6e0045a87afe14296992c38b7d55abcbe617c441cd35e8667abbcb1678f31802'
            ]);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/runtime/Header.spec", ["require", "exports", "bn.js", "types/src/create/index", "../../json/Header.001.json", "../../json/Header.002.json", "../../json/Header.003.json", "../../json/SignedBlock.003.00.json", "../../json/SignedBlock.003.01.json"], function (require, exports, bn_js_21, create_89, Header_001_json_1, Header_002_json_1, Header_003_json_2, SignedBlock_003_00_json_2, SignedBlock_003_01_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bn_js_21 = __importDefault(bn_js_21);
    Header_001_json_1 = __importDefault(Header_001_json_1);
    Header_002_json_1 = __importDefault(Header_002_json_1);
    Header_003_json_2 = __importDefault(Header_003_json_2);
    SignedBlock_003_00_json_2 = __importDefault(SignedBlock_003_00_json_2);
    SignedBlock_003_01_json_1 = __importDefault(SignedBlock_003_01_json_1);
    describe('Header', () => {
        const registry = new create_89.TypeRegistry();
        it('decodes an actual JSON response', () => {
            const header = registry.createType('Header', Header_001_json_1.default.result);
            expect(header.number.toNumber()).toEqual(0);
            expect(header.extrinsicsRoot.toString()).toEqual('0x45b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0');
            expect(header.parentHash.toString()).toEqual('0x0000000000000000000000000000000000000000000000000000000000000000');
            expect(header.stateRoot.toString()).toEqual('0x294c3470ae3be7555240b9d034ec19c3715ba2c3f20b92441f8cea0cab66ab56');
            expect(header.digest.logs.toString()).toEqual('[]');
        });
        it('parses old-style JSON headers (deprecated)', () => {
            const header = registry.createType('Header', Header_002_json_1.default.result);
            expect(header.digest.logs).toHaveLength(1);
        });
        it('creates a valid hash (incl. digest & compact)', () => {
            const header = registry.createType('Header', Header_003_json_2.default.result);
            expect(header.hash.toHex()).toEqual('0x464692ad0e225a74274a7ef411e045f1fc7c2639b5f780c7c18f91f4100f5e54');
            expect(header.number.eq(new bn_js_21.default(1650758))).toBe(true);
        });
        it('calculates correct hash, matching with parentHash', () => {
            const blockHash = registry.createType('Header', SignedBlock_003_00_json_2.default.result.block.header).hash.toHex();
            expect(blockHash).toEqual(SignedBlock_003_01_json_1.default.result.block.header.parentHash);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/runtime/KeyValue.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_90) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('KeyValue', () => {
        const registry = new create_90.TypeRegistry();
        it('decodes KeyValue from u8a', () => {
            expect(registry.createType('KeyValue', Uint8Array.from([
                4 << 2,
                0x11, 0x22, 0x33, 0x44,
                9 << 2,
                0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11
            ])).toJSON()).toEqual(['0x11223344', '0x998877665544332211']);
        });
        it('encodes KeyValue from JSON', () => {
            expect(registry.createType('KeyValue', ['0x11223344', '0x998877665544332211']).toU8a()).toEqual(new Uint8Array([
                4 << 2,
                0x11, 0x22, 0x33, 0x44,
                9 << 2,
                0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11
            ]));
        });
        it('exposes the properties for key/value', () => {
            const [key, value] = registry.createType('KeyValue', ['0x11223344', '0x998877665544332211']);
            expect(key.toHex()).toEqual('0x11223344');
            expect(value.toHex()).toEqual('0x998877665544332211');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/staking/CompactAssignments.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_91) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const ACTUAL = '0x' +
        // Vec<ValidatorIndex>
        '85033b003f003e00ac00d300e000f0001600a000a300c000f200ab00a400fd00a200b2001300f500f40062007c004b00430007004000810012002f005000c200b90018006b000600b000560097004600d100be001e00060149006e00e20060006f004a0024007d009c008300c9008800030131000c004d00f6005b00e8001b00e100d7007100e9004e0079009f00bd009600e6009100dd00d600ae0025007300e500da00bb00f300e400f800c10028002c00a90047005900cb00fc00c4004c00680089002100ce00ee006c00670041003900d8005f000501950051009e00040075002b0027000a005e009d00c8001d00610098005300dc002200d400a1000d002d008400fe00c500630008007600d5003c008b00cd005a00c70026001a005200b1002900b60014008c005c004800d9009400d0005d002e009300cc003d003200b700ff006d003700660054003a00fa00d200ca00bc001c00af0011000e00580070008700720044008600de008a009b0078008e008d00b500a5006a00ed000500ea00bf00340030001900020182004f007e00f9007b001000360009010900380092002a004200570099000a010000a800fb00eb0002006900c600ad008f0033007a000401' +
        // CompactAssignmentsTo257
        '0109cc0200000000ce0200000200d00200000400d10200000500d20200000600d30200000700d40200000800d50200000900d60200000a00d80200000c00d90200000d00da0200000e00dc0200001000dd0200001100de0200001200df0200001300e00200001400e20200001600e40200001800e50200001900e60200001a00e70200001b00e80200001c00e90200001d00ea0200001e00ed0200002100ee0200002200f00200002400f10200002500f20200002600f30200002700f40200002800f50200002900f60200002a00f70200002b00f80200002c00f90200002d00fa0200002e00fb0200002f00fc0200003000fd0200003100fe0200003200ff0200003300000300003400020300003600030300003700040300003800050300003900060300003a00070300003b00080300003c00090300003d000a0300003e000b0300003f000c03000040000d03000041000e03000042000f0300004300100300004400120300004600130300004700140300004800150300004900160300004a00170300004b00180300004c00190300004d001a0300004e001b0300004f001c03000050001d03000051001e03000052001f0300005300200300005400220300005600230300005700240300005800250300005900260300005a00270300005b00280300005c00290300005d002a0300005e002b0300005f002c03000060002d03000061002e03000062002f0300006300320300006600330300006700340300006800350300006900360300006a00370300006b00380300006c00390300006d003a0300006e003b0300006f003c03000070003d03000071003e03000072003f0300007300410300007500420300007600440300007800450300007900460300007a00470300007b00480300007c00490300007d004a0300007e004d03000081004e03000082004f0300008300500300008400520300008600530300008700540300008800550300008900560300008a00570300008b00580300008c00590300008d005a0300008e005b0300008f005d03000091005e03000092005f0300009300600300009400610300009500620300009600630300009700640300009800650300009900670300009b00680300009c00690300009d006a0300009e006b0300009f006c030000a0006d030000a1006e030000a2006f030000a30070030000a40071030000a50074030000a80075030000a90077030000ab0078030000ac0079030000ad007a030000ae007b030000af007c030000b0007d030000b1007e030000b20081030000b50082030000b60083030000b70085030000b90087030000bb0088030000bc0089030000bd008a030000be008b030000bf008c030000c0008d030000c1008e030000c20090030000c40091030000c50092030000c60093030000c70094030000c80095030000c90096030000ca0097030000cb0098030000cc0099030000cd009a030000ce009c030000d0009d030000d1009e030000d2009f030000d300a0030000d400a1030000d500a2030000d600a3030000d700a4030000d800a5030000d900a6030000da00a8030000dc00a9030000dd00aa030000de00ac030000e000ad030000e100ae030000e200b0030000e400b1030000e500b2030000e600b4030000e800b5030000e900b6030000ea00b7030000eb00b9030000ed00ba030000ee00bc030000f000be030000f200bf030000f300c0030000f400c1030000f500c2030000f600c4030000f800c5030000f900c6030000fa00c7030000fb00c8030000fc00c9030000fd00ca030000fe00cb030000ff00ce0300000201cf0300000301d00300000401d10300000501d20300000601d50300000901d60300000a0101000000e400020000005d0004000000730007000000dc00080000000a000a000000c9000c0000009d000d000000fe000e0000003e0010000000f60011000000d00012000000080013000000240014000000f400150000004a001600000005011900000012001c0000006c001d000000c8001e0000003e001f0000003b00210000009700220000005400240000009d002b00000056002c000000d0002e000000240032000000f200360000005f00370000003e003800000098003d000000f60041000000160043000000120047000000e2004800000096004b000000f0004c00000018004e0000006c004f000000240051000000140052000000400053000000ac0054000000f90055000000be00580000009d005a0000005d005b0000005c005d000000120060000000940061000000e20064000000fd0066000000240069000000bd006a000000a1006b00000054006d00000058006e0000003e0071000000dc0072000000b00074000000510075000000ae007a00000054007b000000d9007c000000be007d0000005a007e0000003e007f0000005f0080000000cd0081000000f60083000000c40084000000fd0085000000fc00880000006c008a00000024008c000000e0008e00000031008f000000ce0090000000ac009500000097009900000024009a00000037009b0000003400a20000006d00a50000006200a7000000fd00a8000000f600a90000005400aa0000001b00ab0000009700ad0000003e00ae0000009e00b00000009e00b10000008400b2000000c900b4000000bd00b60000002c00b7000000fc00c0000000c400c2000000d100c4000000ab00c5000000d000c70000009100c80000001200cb0000003100cd0000004000cf000000fd00d0000000f600d4000000b700d6000000b900d70000004e00d9000000c500dc0000001600e00000005900e30000004a00e4000000e500e70000002100e8000000be00e9000000c400ef0000009e00f00000000700f30000006d00f40000003b00f5000000c000f60000009700f7000000fc00fa000000c500fb000000f600fc0000006700000100004d0002010000f900030100001c000401000004000701000046000b0100009d000d010000d50010010000fd00110100006e00120100009e00130100001200170100000a001801000024001a010000f6001b01000056001d01000012001e0100002c001f0100001c002301000050002501000012002c010000f6002e01000006012f010000dc0031010000460034010000540035010000c0003801000058003a01000054003d010000be0040010000d00041010000440042010000960043010000240045010000e600470100003e004e010000ae004f010000c50050010000fc00510100004a0052010000390053010000760054010000c000550100004d0056010000c500570100002f0058010000780059010000d3005b01000097005f010000c500620100002400630100009d0064010000dd0065010000fd006601000026006701000016006a0100003e006b0100003e006c010000eb006f0100003e00700100006e00720100006c00750100006c007f010000b70080010000fe00820100005d00840100009e0087010000bb00890100006e008a010000cb008b0100009c008d010000e9008e0100003e008f010000be00940100002400950100003e009901000006009b0100009e009d0100009e009f0100002d00a0010000a100a40100006f00a70100000501a90100009500ac0100000501ad0100005900ae010000dc00b00100005400b30100003e00b70100006100b90100005900bb010000dc00bd010000d000be010000a200c00100009700c1010000e600c40100008c00c5010000dc00c7010000b600c90100006800cb0100003e00cd010000bd00cf010000b700d30100002400d50100003e00d80100002400d90100009c00da0100006e00dc010000f600e10100005d00e4010000e400e90100003b00ec0100006100ee010000b200ef0100009500f0010000d400f10100002600f20100001a00f30100001200f40100009400f60100009d00f70100009e00fc010000d000fe0100006e00010200006200020200002400050200006b0007020000d50008020000940010020000dd00110200009600120200001d00160200003e0019020000e2001a02000014001d02000012001f0200009e0020020000e20021020000e000230200006b002502000083002902000095002d02000012002e020000a1002f020000b70034020000970038020000c7003902000024003a020000f6003c020000f6003d020000b7003e020000b7003f020000840041020000c500420200001200430200000800450200005e00460200009e0047020000ed004b020000b2004c020000a2004f0200000a0050020000240055020000c50057020000540058020000240059020000c5005a02000005015b0200003c005e020000d8005f0200001400600200005f0061020000540062020000d900650200003e0066020000400067020000c7006902000098006e02000037006f020000bc00720200003e00740200004000750200009e0077020000120079020000da007b0200005f007c020000bd007d0200009c007e020000fd0081020000240082020000130084020000fc0087020000830088020000a100890200000501900200005900920200004000970200000800990200009e009b020000f6009c02000094009e02000024009f0200005900a20200000400a30200003b00a60200006c00a70200009d00a90200005000ab0200006e00af0200005400b30200002400b4020000f300b50200001200b60200008300b90200009700ba020000e800bb0200006c00c00200002400c10200006c00c50200001200c8020000e600c90200001100ca0200001600' +
        // votes2 ...
        'ac390000006100b4a946003b000000cc009a950a0050000000480092783a0057000000ae00c68e510065000000ea00abfff9006f0000008b0026ac5e00730000009c008e5a260077000000c100a87f52007800000003015e5b070082000000600073d62c008700000075005299a000940000004700849bf2009f000000ed003a61de00bb000000620041ec9100d50000006800232ed500f9000000a50068bd3a00ff000000d60019adc500050100005e00d3d92f000c01000096001e329e000f010000ce0025811e002b0100006f007b703b00320100009d002d6bc0004a010000cb00a9a5c0005d0100000201c95ebc0069010000490054d39b0083010000bf0078f74d00970100004700001ca400a30100001100cb5b9400a50100009300a6c7fa00a6010000300076e33200c2010000c0008b863900d10100005f00efc6dd00e6010000b200f796ee00ed010000f6008b956e00fa0100002200f3d35e000d0200002c00b5712600150200004d001175d00030020000a100fa876d005d020000a000814b6b00640200008b00bd7ce5008502000076005d702c008f020000c900d1d32f00a5020000840049819100' +
        // votes 3
        '3c3a000000b90062690301b9713b004d000000d100d4437d00ef9ad800ca000000fd003ebd4c006c100a00ea00000021009a58de00e3773a00ed0000008c0098bdc200861fc1000a0100005800b2197b00fb721900290100005b00a19ee900c13cdd009001000098005a4c28006d5e670091010000d300b642da002664d800b40100009400ec48b0001c2e1a00cc0100008700492fd4002d3d3700960200003200d5bef600412e4000be0200003c00066689005968d100c6020000f90058a36a00f20cbc00cb02000076006ec96e00472aa30034ac0000000000152502005ed6050034000900ec000000fc0081398300b14adc001a55a2001c0100006a001e4d7e00b33c4f006e3d82007701000031006a48be009d308c00bf3d040081010000ff009151af00925129009151b200a101000087007583760005135d00f6028e00a8010000fe000d209f00295c1800314c2700b801000062006725e4004c73c000c80c4d00d00100000d003e47bb003b444c00be4af2004e0200006e0077651200b9588300ff0cf8005c0200002200ec25f0006e4b4300e652c4008b020000e200832b6300869a5100c408b20093020000c500e1506200fc0f47004e5eb0001803000000c200ff32410040334e003c3353004033b100060000001d00463b43008b1e060155481300bd493b00140100001c002127d400dd4958009f1ab700cd2bfa003b010000b000812e1e008722710040480800962f95008c0100001100b5240201f31634007d3bb50002490500e0010000b6001d102b0096367c007b3ed700514c210018da0000009b00ea397300655744005b2e78005c2654003f0d5c00f80000006200ed26e000b5176b009e14e800a54ae600334f6000300100002500c42fa900c22fac00592c7900c02f88005e2f490048010000f300640cee00cb3b4a000c304b00bf36e1007e3ad3007c010000a300192e5600b42e8100b82e1b00cc2ef5004c2e490006020000dd0097200700a340ab00c46e1600d60c4600eb0af40004fe000000fd00d207f3001f383e00da242400f51dbd00a82b6c00dc36970004910200009500a40cb600ed302700a711d9001e4050000d48f000ba1f9800cd07be000000085900000066005b172f00f01d0e005b172d00dc0f70005a1772005a1786005a178a005a173d005a17ca0059172e003e010000c800020e0c003d223f00302306001d116800931e9600511a1400cc18a1006e0ac700231d05014b02f80000000000001beab9a3ce0000000000000000000000c9d6650d1fd62e310000000000000000c54b85db547a2f52a47bb9a03a091300d4020000';
    describe('CompactAssignmentSiCompact', () => {
        // generate_solution_type!(#[compact] pub struct InnerTestSolutionCompact::<_, _, _>(..));
        // let compact = InnerTestSolution {
        //    votes1: vec![(2, 20), (4, 40)],
        //    votes2: vec![
        //      (1, (10, PerU16:: from_percent(80)), 11),
        //      (5, (50, PerU16:: from_percent(85)), 51),
        //    ],
        //    ..Default::default ()
        //  };
        it('can be decoded correctly', () => {
            const bytes = new Uint8Array([
                8,
                2,
                0,
                0,
                0,
                20,
                0,
                4,
                0,
                0,
                0,
                40,
                0,
                8,
                1,
                0,
                0,
                0,
                10,
                0,
                204,
                204,
                11,
                0,
                5,
                0,
                0,
                0,
                50,
                0,
                152,
                217,
                51,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]);
            const registry = new create_91.TypeRegistry();
            const compact = registry.createType('CompactAssignmentsTo257', bytes);
            expect(compact.toJSON()).toEqual({
                votes1: [[2, [], 20], [4, [], 40]],
                votes10: [],
                votes11: [],
                votes12: [],
                votes13: [],
                votes14: [],
                votes15: [],
                votes16: [],
                votes2: [[1, [[10, 52428]], 11], [5, [[50, 55704]], 51]],
                votes3: [],
                votes4: [],
                votes5: [],
                votes6: [],
                votes7: [],
                votes8: [],
                votes9: []
            });
        });
    });
    describe('CompactAssignmentSiNormal', () => {
        // generate_solution_type!(pub struct InnerTestSolutionCompact::<_, _, _>(..));
        // let compact = InnerTestSolution {
        //    votes1: vec![(2, 20), (4, 40)],
        //    votes2: vec![
        //      (1, (10, PerU16:: from_percent(80)), 11),
        //      (5, (50, PerU16:: from_percent(85)), 51),
        //    ],
        //    ..Default::default ()
        //  };
        it('can be decoded correctly', () => {
            const bytes = new Uint8Array([
                8,
                8,
                80,
                16,
                160,
                8,
                4,
                40,
                50,
                51,
                3,
                0,
                44,
                20,
                200,
                98,
                102,
                3,
                0,
                204,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]);
            const registry = new create_91.TypeRegistry();
            const compact = registry.createType('CompactAssignments', bytes);
            expect(compact.toJSON()).toEqual({
                votes1: [[2, 20], [4, 40]],
                votes10: [],
                votes11: [],
                votes12: [],
                votes13: [],
                votes14: [],
                votes15: [],
                votes16: [],
                votes2: [[1, [10, 52428], 11], [5, [50, 55704], 51]],
                votes3: [],
                votes4: [],
                votes5: [],
                votes6: [],
                votes7: [],
                votes8: [],
                votes9: []
            });
        });
    });
    describe('CompactAssignments', () => {
        const registry = new create_91.TypeRegistry();
        const votes2 = [[1, [[2, 12345]], 3]];
        const test = registry.createType('CompactAssignmentsTo257', {
            votes1: [[1, [], 3]],
            votes2
        });
        it('has a valid vote1 ([Type; <number>] equivalency)', () => {
            expect(test.votes1.toHex()).toEqual(create_91.createTypeUnsafe(registry, 'Vec<(u32, u16)>', [[
                    [1, 3]
                ]]).toHex());
        });
        it('hash valid vote2 (actual tuple values)', () => {
            expect(test.votes2.toHex()).toEqual(create_91.createTypeUnsafe(registry, 'Vec<(u32, [(u16, u16); 1], u16)>', [votes2]).toHex());
        });
        it('has a proper decoded toHuman() available', () => {
            expect(test.votes2.toHuman()).toEqual([['1', [['2', '12,345']], '3']]);
        });
        it('decodes an actual solution from the chain', () => {
            expect(create_91.createTypeUnsafe(registry, '(Vec<ValidatorIndex>, CompactAssignmentsTo257, PhragmenScore, EraIndex)', [ACTUAL]).toHex()).toEqual(ACTUAL);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/staking/Exposure.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_92) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Exposure', () => {
        const registry = new create_92.TypeRegistry();
        it('properly decodes an Exposure', () => {
            expect(registry.createType('Exposure', '0x0fd2c5f6bc904d990f94373671da716d04fe65717dad0447d715f660a0a58411de509b42e6efb8375f562f58a554d5860e0f3e8ec04bb6db2b').toHuman()).toEqual({
                others: [{
                        value: '12.3449 kUnit',
                        who: '5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc'
                    }],
                own: '30.8059 kUnit',
                total: '43.1509 kUnit'
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/state/KeyValueOption.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_93) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('KeyValueOption', () => {
        const registry = new create_93.TypeRegistry();
        it('exposes the properties for key/value', () => {
            const [key, value] = registry.createType('KeyValueOption', [
                '0x11223344'
            ]);
            expect(key.toHex()).toEqual('0x11223344');
            expect(value.isNone).toEqual(true);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/state/RuntimeVersion.spec", ["require", "exports", "types/src/create/index", "../../json/RuntimeVersion.002.json"], function (require, exports, create_94, RuntimeVersion_002_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    RuntimeVersion_002_json_1 = __importDefault(RuntimeVersion_002_json_1);
    describe('RuntimeVersion', () => {
        const registry = new create_94.TypeRegistry();
        let version;
        beforeEach(() => {
            version = registry.createType('RuntimeVersion', RuntimeVersion_002_json_1.default.result);
        });
        it('has the correct authoring', () => {
            expect(version.authoringVersion.toNumber()).toEqual(10);
        });
        it('has the apis', () => {
            const [apiId, apiVersion] = version.apis[0];
            expect(apiId.toHex()).toEqual('0xdf6acb689907609b');
            expect(apiVersion.toNumber()).toEqual(2);
        });
        it('has the correct implementation', () => {
            expect(version.implName.toString()).toEqual('substrate-node');
            expect(version.implVersion.toNumber()).toEqual(60);
        });
        it('has the correct spec', () => {
            expect(version.specName.toString()).toEqual('node');
            expect(version.specVersion.toNumber()).toEqual(60);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/state/StorageChangeSet.spec", ["require", "exports", "types/src/create/index", "../../json/StorageChangeSet.001.json"], function (require, exports, create_95, StorageChangeSet_001_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    StorageChangeSet_001_json_1 = __importDefault(StorageChangeSet_001_json_1);
    describe('StorageChangeSet', () => {
        const registry = new create_95.TypeRegistry();
        describe('construction', () => {
            const set = registry.createType('StorageChangeSet', {
                block: '0x1234',
                changes: [
                    ['0xab', '0xcd']
                ]
            });
            it('wraps blockHash', () => {
                expect(set.block.toHex()).toEqual('0x1234000000000000000000000000000000000000000000000000000000000000');
            });
            it('wraps key/value', () => {
                expect(set.changes[0][1].toString()).toEqual('0xcd');
            });
        });
        describe('json', () => {
            const set = registry.createType('StorageChangeSet', StorageChangeSet_001_json_1.default.params.result);
            it('has the correct hash', () => {
                expect(set.block.toHex()).toEqual('0x2ad8077937e9a5ceb2e0d57c95b95a6a9edcedc4fb1f14e3bc13245e223a569d');
            });
            it('has the changes', () => {
                expect(set.changes).toHaveLength(1);
                expect(set.changes[0][0].toHex()).toEqual('0x54bdbdb5e438d574dd4da05ee6131cee');
            });
        });
    });
});
// Auto-generated via `yarn polkadot-types-from-defs`, do not edit
/* eslint-disable */
define("types/src/interfaces/syncstate/index", ["require", "exports", "types/src/interfaces/syncstate/types"], function (require, exports, types_126) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(types_126, exports);
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/system/ChainProperties.spec", ["require", "exports", "types/src/create/index"], function (require, exports, create_96) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ChainProperties', () => {
        const registry = new create_96.TypeRegistry();
        it('decodes from a null value', () => {
            expect([...registry.createType('ChainProperties', null).entries()]).toEqual([]);
        });
        it('decodes from an actual object', () => {
            const { ss58Format, tokenDecimals, tokenSymbol } = registry.createType('ChainProperties', {
                ss58Format: 2,
                tokenDecimals: 15,
                tokenSymbol: 'KSM'
            });
            expect(ss58Format.unwrap().eq(2)).toBe(true);
            expect(tokenDecimals.unwrap().eq(15)).toBe(true);
            expect(tokenSymbol.unwrap().eq('KSM')).toBe(true);
        });
        it('decodes from an object, flagged for non-existent ss58Format', () => {
            const { ss58Format, tokenDecimals, tokenSymbol } = registry.createType('ChainProperties', { tokenSymbol: 'DEV' });
            expect(ss58Format.isNone).toBe(true);
            expect(tokenDecimals.isNone).toBe(true);
            expect(tokenSymbol.isSome).toBe(true);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/interfaces/system/EventRecord.spec", ["require", "exports", "metadata/src/index", "metadata/src/static", "types/src/create/index", "../../json/EventRecord.001.json", "../../json/EventRecord.003.json"], function (require, exports, metadata_16, static_31, create_97, EventRecord_001_json_1, EventRecord_003_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_31 = __importDefault(static_31);
    EventRecord_001_json_1 = __importDefault(EventRecord_001_json_1);
    EventRecord_003_json_1 = __importDefault(EventRecord_003_json_1);
    describe('EventRecord', () => {
        const registry = new create_97.TypeRegistry();
        describe('EventRecord (current)', () => {
            beforeEach(() => {
                const metadata = new metadata_16.Metadata(registry, static_31.default);
                registry.setMetadata(metadata);
            });
            it('decodes older EventRecord correctly', () => {
                const records = registry.createType('Vec<EventRecord>', EventRecord_001_json_1.default.params.result.changes[0][1], true);
                const er = records[0];
                expect(er.phase.type).toEqual('ApplyExtrinsic');
            });
            it('decodes EventRecord with topics correctly', () => {
                const hex = EventRecord_003_json_1.default.params.result.changes[0][1];
                const records = registry.createType('Vec<EventRecord>', hex, true);
                const er = records[0];
                expect(er.phase.type).toEqual('ApplyExtrinsic');
                // additional payment info, weight u64 (vs u32)
                expect(records.toHex()).toEqual(`${hex}00000000000000000000`);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Bool.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index"], function (require, exports, create_98, _62) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Bool', () => {
        const registry = new create_98.TypeRegistry();
        describe('decode', () => {
            // eslint-disable-next-line @typescript-eslint/ban-types
            const testDecode = (type, input, expected) => it(`can decode from ${type}`, () => {
                expect(new _62.Bool(registry, input).toJSON()).toBe(expected);
            });
            testDecode('Bool', new _62.Bool(registry, true), true);
            testDecode('Boolean', Boolean(true), true);
            testDecode('boolean', true, true);
            testDecode('number', 1, true);
            testDecode('Uint8Array', Uint8Array.from([1]), true);
        });
        describe('encode', () => {
            const testEncode = (to, expected, value) => it(`can encode ${to}`, () => {
                expect(new _62.Bool(registry, value)[to]()).toEqual(expected);
            });
            testEncode('toJSON', true, true);
            testEncode('toHex', '0x01', true);
            testEncode('toString', 'true', true);
            testEncode('toU8a', Uint8Array.from([1]), true);
            testEncode('toU8a', Uint8Array.from([0]), false);
        });
        it('correctly encodes length', () => {
            expect(new _62.Bool(registry, true).encodedLength).toEqual(1);
        });
        describe('utils', () => {
            it('compares against a boolean', () => {
                expect(new _62.Bool(registry, true).eq(true)).toBe(true);
            });
            it('compares against a Bool', () => {
                expect(new _62.Bool(registry, false).eq(new _62.Bool(registry, false))).toBe(true);
            });
            it('has isTrue', () => {
                expect(new _62.Bool(registry, true).isTrue).toBe(true);
            });
            it('has isFalse', () => {
                expect(new _62.Bool(registry, true).isFalse).toBe(false);
            });
            it('has sane isEmpty aligning with the rest', () => {
                expect(new _62.Bool(registry).isEmpty).toBe(true);
                expect(new _62.Bool(registry, false).isEmpty).toBe(true);
                expect(new _62.Bool(registry, true).isEmpty).toBe(false);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Bytes.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index"], function (require, exports, create_99, _63) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Bytes', () => {
        const registry = new create_99.TypeRegistry();
        const NUM = [0x3a, 0x63, 0x6f, 0x64, 0x65];
        const U8A = new Uint8Array([0x14, ...NUM]);
        const HEX = '0x3a636f6465';
        describe('construction', () => {
            it('decodes when input is string', () => {
                expect(new _63.Bytes(registry, ':code').toU8a()).toEqual(U8A);
            });
            it('decodes when hex is not length prefixed', () => {
                expect(new _63.Bytes(registry, HEX).toU8a()).toEqual(U8A);
            });
            it('decodes from UInt8Array', () => {
                expect(new _63.Bytes(registry, U8A).toU8a()).toEqual(U8A);
            });
            it('decodes from number[]', () => {
                expect(new _63.Bytes(registry, NUM).toU8a()).toEqual(U8A);
            });
            it('creates via storagedata (no prefix)', () => {
                expect(new _63.Bytes(registry, registry.createType('StorageData', HEX)).toU8a()).toEqual(U8A);
            });
            it('encodes from itself', () => {
                expect(new _63.Bytes(registry, new _63.Bytes(registry, HEX)).toU8a()).toEqual(U8A);
            });
            it('strips length with toU8a(true)', () => {
                expect(new _63.Bytes(registry, HEX).toU8a(true)).toEqual(U8A.subarray(1));
            });
            it('strips length with toHex', () => {
                expect(new _63.Bytes(registry, HEX).toHex()).toEqual(HEX);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Data.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index"], function (require, exports, create_100, _64) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new create_100.TypeRegistry();
    describe('Data', () => {
        it('encodes a normal None', () => {
            expect(new _64.Data(registry).toHex()).toEqual('0x00');
        });
        it('encodes a hashed value correctly', () => {
            expect(new _64.Data(registry, { Keccak256: '0x0102030405060708091011121314151617181920212223242526272829303132' }).toHex()).toEqual('0x240102030405060708091011121314151617181920212223242526272829303132');
        });
        it('encodes a Raw value correctly', () => {
            expect(new _64.Data(registry, { Raw: '0x0102030405060708' }).toHex()).toEqual('0x090102030405060708');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/DoNotConstruct.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index"], function (require, exports, create_101, _65) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('DoNotConstruct', () => {
        const registry = new create_101.TypeRegistry();
        it('does not allow construction', () => {
            expect(() => new (_65.DoNotConstruct.with())(registry)).toThrow(/Cannot construct unknown type DoNotConstruct/);
        });
        it('does not allow construction (with Name)', () => {
            expect(() => new (_65.DoNotConstruct.with('Something'))(registry)).toThrow(/Cannot construct unknown type Something/);
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Null.spec", ["require", "exports", "types/src/create/index", "types/src/primitive/index"], function (require, exports, create_102, _66) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Null', () => {
        const registry = new create_102.TypeRegistry();
        it('compares against null', () => {
            expect(new _66.Null(registry).eq(null)).toBe(true);
        });
        it('compares against Null', () => {
            expect(new _66.Null(registry).eq(new _66.Null(registry))).toBe(true);
        });
        it('compares against other (failed)', () => {
            expect(new _66.Null(registry).eq()).toBe(false);
        });
        it('has no hash', () => {
            expect(() => new _66.Null(registry).hash).toThrow();
        });
        it('isEmpty', () => {
            expect(new _66.Null(registry).isEmpty).toBe(true);
        });
        it('has an empty hex', () => {
            expect(new _66.Null(registry).toHex()).toEqual('0x');
        });
        it('has a Null type', () => {
            expect(new _66.Null(registry).toRawType()).toEqual('Null');
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/StorageKey.spec", ["require", "exports", "metadata/src/index", "metadata/src/v11/static", "types/src/create/index", "types/src/primitive/index"], function (require, exports, metadata_17, static_32, create_103, _67) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    static_32 = __importDefault(static_32);
    describe('StorageKey', () => {
        const registry = new create_103.TypeRegistry();
        describe('with MetadataV11', () => {
            const metadata = new metadata_17.Metadata(registry, static_32.default);
            registry.setMetadata(metadata);
            const query = metadata_17.decorateStorage(registry, metadata.asLatest, metadata.version);
            it('should allow decoding of a DoubleMap key', () => {
                const key = new _67.StorageKey(registry, '0x5f3e4907f716ac89b6347d15ececedca8bde0a0ea8864605e3b68ed9cb2da01b66ccada06515787c10000000e535263148daaf49be5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f');
                key.setMeta(query.staking.erasStakers.meta);
                expect(key.toHuman()).toEqual([
                    '16',
                    '5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY'
                ]);
            });
            it('should allow decoding of a Map key', () => {
                const key = new _67.StorageKey(registry, '0x426e15054d267946093858132eb537f191ca57b0c4b20b29ae7e99d6201d680cc906f7710aa165d62c709012f807af8fc3f0d2abb0c51ca9a88d4ef24d1a092bf89dacf5ce63ea1d');
                key.setMeta(query.society.defenderVotes.meta);
                expect(key.toHuman()).toEqual([
                    '5D4yQHKfqCQYThhHmTfN1JEDi47uyDJc1xg9eZfAG1R7FC7J'
                ]);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Text.spec", ["require", "exports", "types/src/codec/Raw", "types/src/create/index", "types/src/primitive/index"], function (require, exports, Raw_10, create_104, _68) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Text', () => {
        const registry = new create_104.TypeRegistry();
        describe('decode', () => {
            const testDecode = (type, input, expected, toFn = 'toString') => it(`can decode from ${type}`, () => {
                expect(new _68.Text(registry, input)[toFn]()).toBe(expected);
            });
            testDecode('string', 'foo', 'foo');
            testDecode('Text', new _68.Text(registry, 'foo'), 'foo');
            testDecode('Uint8Array', Uint8Array.from([12, 102, 111, 111]), 'foo');
            testDecode('Raw', new Raw_10.Raw(registry, Uint8Array.from([102, 111, 111])), 'foo'); // no length
            testDecode('object with `toString()`', { toString() { return 'foo'; } }, 'foo');
            testDecode('hex input value', new _68.Text(registry, '0x12345678'), '0x12345678', 'toHex');
            testDecode('null', null, '');
        });
        describe('encode', () => {
            const testEncode = (to, expected) => it(`can encode ${to}`, () => {
                expect(new _68.Text(registry, 'foo')[to]()).toEqual(expected);
            });
            testEncode('toHex', '0x666f6f');
            testEncode('toString', 'foo');
            testEncode('toU8a', Uint8Array.from([12, 102, 111, 111]));
        });
        describe('utils', () => {
            it('compares actual string values', () => {
                expect(new _68.Text(registry, '123').eq('123')).toBe(true);
            });
            it('compares actual String values', () => {
                expect(new _68.Text(registry, 'XYX').eq(String('XYX'))).toBe(true);
            });
            it('compares actual non-string values (fails)', () => {
                expect(new _68.Text(registry, '123').eq(123)).toBe(false);
            });
            it('calulates the length & encoded length correctly for ASCII', () => {
                const test = new _68.Text(registry, 'abcde');
                expect(test.encodedLength).toEqual(6);
                expect(test).toHaveLength(5);
            });
            it('calulates the length & encoded length correctly for non-ASCII', () => {
                const test = new _68.Text(registry, '中文');
                expect(test.encodedLength).toEqual(7);
                expect(test).toHaveLength(2);
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types/src/primitive/Type.spec", ["require", "exports", "@polkadot/util", "types/src/create/index", "types/src/primitive/index"], function (require, exports, util_247, create_105, _69) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Type', () => {
        const registry = new create_105.TypeRegistry();
        it('fails to cleanup invalid boxes', () => {
            expect(() => new _69.Type(registry, 'Box<Proposal')).toThrow(/find closing matching/);
        });
        it('cleans up tuples with a single value', () => {
            expect(new _69.Type(registry, '(AccountId)').toString()).toEqual('AccountId');
        });
        it('does not touch tuples with multiple values', () => {
            expect(new _69.Type(registry, '(AccountId, Balance)').toString()).toEqual('(AccountId,Balance)');
        });
        it('handles nested types', () => {
            expect(new _69.Type(registry, 'Box<Vec<AccountId>>').toString()).toEqual('Vec<AccountId>');
        });
        it('handles nested types (embedded)', () => {
            expect(new _69.Type(registry, '(u32, Box<Vec<AccountId>>)').toString()).toEqual('(u32,Vec<AccountId>)');
        });
        it('handles aliasses, multiples per line', () => {
            expect(new _69.Type(registry, '(Vec<u8>, AccountId, Vec<u8>)').toString()).toEqual('(Bytes,AccountId,Bytes)');
        });
        it('removes whitespaces', () => {
            expect(new _69.Type(registry, 'T :: AccountId').toString()).toEqual('AccountId');
        });
        it('changes PairOf<T> -> (T, T)', () => {
            expect(new _69.Type(registry, 'PairOf<T::Balance>').toString()).toEqual('(Balance,Balance)');
        });
        it('changes PairOf<T> (embedded) -> (T, T)', () => {
            expect(new _69.Type(registry, '(Vec<u8>, PairOf<T::Balance>, Vec<AccountId>)').toString()).toEqual('(Bytes,(Balance,Balance),Vec<AccountId>)');
        });
        it('changes () -> ()', () => {
            expect(new _69.Type(registry, '()').toString()).toEqual('()');
        });
        it('has the sanitized', () => {
            expect(new _69.Type(registry, new _69.Text(registry, ' Box<Proposal> ')).toString()).toEqual('Proposal'); // eslint-disable-line
        });
        it('unwraps compact', () => {
            expect(new _69.Type(registry, '<T::Balance as HasCompact>::Type').toString()).toEqual('Compact<Balance>');
        });
        it('handles InherentOfflineReport', () => {
            expect(new _69.Type(registry, '<T::InherentOfflineReport as InherentOfflineReport>::Inherent').toString()).toEqual('InherentOfflineReport');
        });
        it('encodes correctly via toU8a()', () => {
            const type = 'Compact<Balance>';
            expect(new _69.Text(registry, type).toU8a()).toEqual(util_247.u8aConcat(new Uint8Array([type.length << 2]), util_247.stringToU8a(type)));
        });
        it('creates a decodable U8a for sanitized types', () => {
            const original = '<T::InherentOfflineReport as InherentOfflineReport>::Inherent';
            const expected = 'InherentOfflineReport';
            const u8a = new _69.Type(registry, original).toU8a();
            const decoded = new _69.Type(registry, u8a);
            expect(decoded.encodedLength).toEqual(original.length + 1); // extra byte for length
            expect(decoded.toString()).toEqual(expected);
        });
        it('has the correct raw', () => {
            expect(new _69.Type(registry).toRawType()).toEqual('Type');
        });
    });
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/index.spec", ["require", "exports", "types/src/create/registry", "types-known/src/index"], function (require, exports, registry_4, _70) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const registry = new registry_4.TypeRegistry();
    registry.setKnownTypes({
        typesAlias: {
            identity: {
                Id: 'IdentityId'
            },
            testModule: {
                Proposal: 'TestProposal'
            },
            treasury: {
                Proposal: 'TreasuryProposals2'
            }
        }
    });
    describe('getModuleTypes', () => {
        it('collects the pre-defined types for contracts', () => {
            expect(_70.getModuleTypes(registry, 'contracts')).toEqual({
                StorageKey: 'ContractStorageKey'
            });
        });
        it('collects the user-defined types for testModule', () => {
            expect(_70.getModuleTypes(registry, 'testModule')).toEqual({
                Proposal: 'TestProposal'
            });
        });
        it('overrides pre-defined with user-defined for treasury', () => {
            expect(_70.getModuleTypes(registry, 'treasury')).toEqual({
                Proposal: 'TreasuryProposals2'
            });
        });
        it('merges pre-defined and user-defined for identity', () => {
            expect(_70.getModuleTypes(registry, 'identity')).toEqual({
                Id: 'IdentityId',
                Judgement: 'IdentityJudgement'
            });
        });
    });
});
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
define("types-known/src/upgrades/index.spec", ["require", "exports", "types-known/src/upgrades/index"], function (require, exports, _71) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    _71 = __importDefault(_71);
    describe('upgrades', () => {
        it('is valid', () => {
            expect(_71.default).toBeDefined();
        });
    });
});
